XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b2.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2025 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b2.asm
0020               *
0021               * Bank 2 "Jacky"
0022               * File load/save operations, labels
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 250419-2206230
0003               ***************************************************************
                   < stevie_b2.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b2.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b2.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 30x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 30 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      001D     pane.botrow               equ  29      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      1400     fh.vpab                   equ  >1400   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      000C     spfont  equ   >0c                   ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; \ VDP color table base.
0041                                                   ; / Not used in F18a 80 columns mode
0042      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0043      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0044      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0045               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b2.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028      000C     tv.colorscheme.entries    equ 12       ; Entries in colorscheme table
0029               ;-----------------------------------------------------------------
0030               ;   Dialog ID's
0031               ;-----------------------------------------------------------------
0032      000A     id.dialog.load            equ  10      ; "Load file"
0033      000B     id.dialog.insert          equ  11      ; "Insert file"
0034      000C     id.dialog.append          equ  12      ; "Append file"
0035      000D     id.dialog.cat             equ  13      ; "Catalog"
0036      000F     id.dialog.save            equ  15      ; "Save file"
0037      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0038      0011     id.dialog.print           equ  17      ; "Print file"
0039      0012     id.dialog.printblock      equ  18      ; "Print block"
0040      0013     id.dialog.opt.clip        equ  19      ; "Configure clipboard"
0041      0014     id.dialog.goto            equ  20      ; "Goto"
0042      001E     id.dialog.find            equ  30      ; "Find"
0043      0028     id.dialog.cart.fg99       equ  40      ; "FinalGROM 99 Cartridge"
0044               ;-----------------------------------------------------------------
0045               ;   Dialog ID's >= 100 indicate that command prompt should be
0046               ;   hidden and no characters added to CMDB keyboard buffer.
0047               ;-----------------------------------------------------------------
0048      0064     id.dialog.menu            equ  100     ; "Main Menu"
0049      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0050      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0051      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0052      0068     id.dialog.help            equ  104     ; "About"
0053      0069     id.dialog.file            equ  105     ; "File"
0054      006A     id.dialog.cart.type       equ  106     ; "Cartridge Type"
0055      006B     id.dialog.basic           equ  107     ; "TI Basic"
0056      006C     id.dialog.opt             equ  108     ; "Configure"
0057      006D     id.dialog.editor          equ  109     ; "Configure editor"
0058      006E     id.dialog.font            equ  110     ; "Configure font"
0059      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0060      0072     id.dialog.run             equ  114     ; "Run program image (EA5)"
0061      0078     id.dialog.find.browse     equ  120     ; "Find - Search results"
0062               ;-----------------------------------------------------------------
0063               ; Suffix characters for clipboards
0064               ;-----------------------------------------------------------------
0065      3100     clip1                     equ  >3100   ; '1'
0066      3200     clip2                     equ  >3200   ; '2'
0067      3300     clip3                     equ  >3300   ; '3'
0068      3400     clip4                     equ  >3400   ; '4'
0069      3500     clip5                     equ  >3500   ; '5'
0070               ;-----------------------------------------------------------------
0071               ; Keyboard flags in Stevie
0072               ;-----------------------------------------------------------------
0073      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0074               ;-----------------------------------------------------------------
0075               ; File work mode
0076               ;-----------------------------------------------------------------
0077      0001     id.file.loadfile          equ  1       ; Load file
0078      0002     id.file.insertfile        equ  2       ; Insert file
0079      0003     id.file.appendfile        equ  3       ; Append file
0080      0004     id.file.savefile          equ  4       ; Save file
0081      0005     id.file.saveblock         equ  5       ; Save block to file
0082      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0083      0007     id.file.printfile         equ  7       ; Print file
0084      0008     id.file.printblock        equ  8       ; Print block
0085               ;-----------------------------------------------------------------
0086               ; Special file indicator
0087               ;-----------------------------------------------------------------
0088      0000     id.special.normal         equ  0       ; Normal file
0089      0002     id.special.readonly       equ  2       ; Read-only file
0090      0003     id.special.basic          equ  3       ; TI Basic program
0091               ;-----------------------------------------------------------------
0092               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0093               ;-----------------------------------------------------------------
0094      A000     core1.top         equ  >a000           ; Structure begin
0095      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0096      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0097      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0098      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0099      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0100      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0101      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0102      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0103      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0104      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0105      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0106      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0107      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0108      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0109      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0110      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0111      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0112      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0113      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0114      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0115      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0116      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0117      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0118      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0119      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0120      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0121      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0122      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0123                                 ;--------------------------------------------
0124                                 ; TI Basic related
0125                                 ;--------------------------------------------
0126      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0127      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0128      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0129      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0130      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0131      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0132      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0133      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0134      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0135      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0136      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0137      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0138      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0139      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0140      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0141      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0142      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0143      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0144      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0145      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0146      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0147      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0148      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0149      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0150      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0151      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0152      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0153      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0154      A100     core1.free        equ  core1.top + 256 ; End of structure
0155               ;-----------------------------------------------------------------
0156               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0157               ;-----------------------------------------------------------------
0158      A100     core2.top         equ  >a100           ; Structure begin
0159      A100     rambuf            equ  core2.top       ; RAM workbuffer
0160      A200     core2.free        equ  core2.top + 256 ; End of structure
0161               ;-----------------------------------------------------------------
0162               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0163               ;-----------------------------------------------------------------
0164      A200     tv.struct         equ  >a200           ; Structure begin
0165      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0166      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0167      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0168      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0169      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0170      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0171      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0172      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0173      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0174      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0175      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0176      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0177      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer
0178      A21A     tv.topcolor       equ  tv.struct + 26  ; FG/BG-color top status line
0179      A21C     tv.botcolor       equ  tv.struct + 28  ; FG/BG-color bottom status line
0180      A21E     tv.markcolor      equ  tv.struct + 30  ; FG/BG-color marked lines in framebuffer
0181      A220     tv.busycolor      equ  tv.struct + 32  ; FG/BG-color bottom line when busy
0182      A222     tv.rulercolor     equ  tv.struct + 34  ; FG/BG-color ruler line
0183      A224     tv.cmdb.color     equ  tv.struct + 36  ; FG/BG-color cmdb lines
0184      A226     tv.cmdb.hcolor    equ  tv.struct + 38  ; FG/BG-color cmdb header line
0185      A228     tv.font.ptr       equ  tv.struct + 40  ; Pointer to font (in ROM bank 6 or RAM)
0186      A22A     tv.pane.focus     equ  tv.struct + 42  ; Identify pane that has focus
0187      A22C     tv.task.oneshot   equ  tv.struct + 44  ; Pointer to one-shot routine
0188      A22E     tv.fj.stackpnt    equ  tv.struct + 46  ; Pointer to farjump return stack
0189      A230     tv.error.visible  equ  tv.struct + 48  ; Error pane visible
0190      A232     tv.error.rows     equ  tv.struct + 50  ; Number of rows in error pane
0191      A234     tv.sp2.conf       equ  tv.struct + 52  ; Backup of SP2 config register
0192      A236     tv.sp2.stack      equ  tv.struct + 54  ; Backup of SP2 stack register
0193      A238     tv.fg99.img.ptr   equ  tv.struct + 56  ; Pointer to Final GROM cartridge to load
0194      A23A     tv.specmsg.ptr    equ  tv.struct + 58  ; Pointer to special message above botrow
0195      A23C     tv.lineterm       equ  tv.struct + 60  ; Default line termination character(s)
0196      A23E     tv.error.msg      equ  tv.struct + 62  ; Error message (max. 160 characters)
0197      A2DE     tv.free           equ  tv.struct + 222 ; End of structure
0198               ;-----------------------------------------------------------------
0199               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0200               ;-----------------------------------------------------------------
0201      A300     fb.struct         equ  >a300           ; Structure begin
0202      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0203      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0204      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0205                                                      ; line X in editor buffer).
0206      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0207                                                      ; (offset 0 .. @fb.scrrows)
0208      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0209      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0210      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0211      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0212      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0213      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0214      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0215      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0216      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0217      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0218      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0219      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0220      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0221      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0222      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0223               ;-----------------------------------------------------------------
0224               ; File handle structure                @>a400-a4ff   (256 bytes)
0225               ;-----------------------------------------------------------------
0226      A400     fh.struct         equ  >a400           ; stevie file handling structures
0227               ;*******************************************************************************
0228               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0229               ;*******************************************************************************
0230      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0231      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0232      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0233      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0234      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0235      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0236      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0237      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0238      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0239      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0240      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0241      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0242      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0243      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0244      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0245      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0246      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0247      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0248      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0249      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0250      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0251      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0252      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0253      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0254      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0255      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0256      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0257      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0258      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0259      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0260      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0261      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0262      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0263      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0264      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0265      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0266      A46A     fh.circbreaker    equ  fh.struct +106  ; Circuit breaker. Halt file operation
0267      A46C     fh.membuffer      equ  fh.struct +108  ; 80 bytes file memory buffer
0268      A4BC     fh.free           equ  fh.struct +188  ; End of structure
0269               ;-----------------------------------------------------------------
0270               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0271               ; Overloads file handle structure
0272               ;-----------------------------------------------------------------
0273      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0274      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0275               ;-----------------------------------------------------------------
0276               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0277               ;-----------------------------------------------------------------
0278      A500     edb.struct        equ  >a500            ; Begin structure
0279      A500     edb.top.ptr       equ  edb.struct       ; Pointer to editor buffer
0280      A502     edb.index.ptr     equ  edb.struct + 2   ; Pointer to index
0281      A504     edb.lines         equ  edb.struct + 4   ; Total lines in editor buffer - 1
0282      A506     edb.dirty         equ  edb.struct + 6   ; Editor buffer dirty (Text changed!)
0283      A508     edb.next_free.ptr equ  edb.struct + 8   ; Pointer to next free line
0284      A50A     edb.insmode       equ  edb.struct + 10  ; Insert mode (>ffff=insert)
0285      A50C     edb.autoinsert    equ  edb.struct + 12  ; Auto-insert on ENTER flag (>ffff=on)
0286      A50E     edb.block.m1      equ  edb.struct + 14  ; Block start line marker (>ffff=unset)
0287      A510     edb.block.m2      equ  edb.struct + 16  ; Block end line marker (>ffff=unset)
0288      A512     edb.block.var     equ  edb.struct + 18  ; Local var used in block operation
0289      A514     edb.filename.ptr  equ  edb.struct + 20  ; Pointer to length-prefixed string
0290                                                       ; with current filename.
0291      A516     edb.filetype.ptr  equ  edb.struct + 22  ; Pointer to length-prefixed string
0292                                                       ; with current file type.
0293      A518     edb.sams.page     equ  edb.struct + 24  ; Current SAMS page
0294      A51A     edb.sams.lopage   equ  edb.struct + 26  ; Lowest SAMS page in use
0295      A51C     edb.sams.hipage   equ  edb.struct + 28  ; Highest SAMS page in use
0296      A51E     edb.bk.fb.topline equ  edb.struct + 30  ; Backup of @fb.topline before opening
0297                                                       ; other file from special file.
0298      A520     edb.bk.fb.row     equ  edb.struct + 32  ; Backup of @fb.row before opening
0299                                                       ; other file from special file.
0300      A522     edb.special.file  equ  edb.struct + 34  ; Special file in editor buffer
0301      A524     edb.lineterm      equ  edb.struct + 36  ; Line termination character
0302                                                       ; MSB: Mode on (>ff) or off (>00)
0303                                                       ; LSB: Line termination character
0304      A526     edb.filename      equ  edb.struct + 38  ; 80 characters inline buffer reserved
0305                                                       ; for filename, but not always used.
0306      A576     edb.srch.str      equ  edb.struct + 118 ; 80 characters search string buffer
0307      A5C6     edb.srch.strlen   equ  edb.struct + 198 ; Length of search string
0308      A5C8     edb.srch.startln  equ  edb.struct + 200 ; Start line in editor buffer for search
0309      A5CA     edb.srch.endln    equ  edb.struct + 202 ; End line in editor buffer for search
0310      A5CC     edb.srch.worklen  equ  edb.struct + 204 ; Length of unpacked line in work buffer
0311      A5CE     edb.srch.matches  equ  edb.struct + 206 ; Number of search matches
0312      A5D0     edb.srch.curmatch equ  edb.struct + 208 ; Current index entry in search matches
0313      A5D2     edb.srch.row.ptr  equ  edb.struct + 210 ; Pointer entry in rows search index
0314      A5D4     edb.srch.col.ptr  equ  edb.struct + 212 ; Pointer entry in cols search index
0315      A5D6     edb.srch.offset   equ  edb.struct + 214 ; Offset into current row index entry
0316      A5D8     edb.srch.matchcol equ  edb.struct + 216 ; Column of search match in current row
0317      A5DA     edb.free          equ  edb.struct + 218 ; End of structure
0318               ;-----------------------------------------------------------------
0319               ; Index structure                      @>a600-a6ff   (256 bytes)
0320               ;-----------------------------------------------------------------
0321      A600     idx.struct        equ  >a600           ; stevie index structure
0322      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0323      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0324      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0325      A606     idx.free          equ  idx.struct + 6  ; End of structure
0326               ;-----------------------------------------------------------------
0327               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0328               ;-----------------------------------------------------------------
0329      A700     cmdb.struct       equ  >a700             ; Command Buffer structure
0330      A700     cmdb.top.ptr      equ  cmdb.struct       ; Pointer to command buffer (history)
0331      A702     cmdb.visible      equ  cmdb.struct + 2   ; Command buffer visible? (>ffff=yes)
0332      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4   ; Copy of FB WYX if entering cmdb pane
0333      A706     cmdb.scrrows      equ  cmdb.struct + 6   ; Current size of CMDB pane (in rows)
0334      A708     cmdb.default      equ  cmdb.struct + 8   ; Default size of CMDB pane (in rows)
0335      A70A     cmdb.cursor       equ  cmdb.struct + 10  ; Screen YX of cursor in CMDB pane
0336      A70C     cmdb.yxsave       equ  cmdb.struct + 12  ; Copy of WYX
0337      A70E     cmdb.vdptop       equ  cmdb.struct + 14  ; VDP addr CMDB pane header line (TAT)
0338      A710     cmdb.yxtop        equ  cmdb.struct + 16  ; YX pos CMDB pane header line
0339      A712     cmdb.yxprompt     equ  cmdb.struct + 18  ; YX pos of command buffer prompt
0340      A714     cmdb.column       equ  cmdb.struct + 20  ; Current column in command buffer pane
0341      A716     cmdb.length       equ  cmdb.struct + 22  ; Length of current row in CMDB
0342      A718     cmdb.lines        equ  cmdb.struct + 24  ; Total lines in CMDB
0343      A71A     cmdb.dirty        equ  cmdb.struct + 26  ; Command buffer dirty (Text changed!)
0344      A71C     cmdb.dialog       equ  cmdb.struct + 28  ; Dialog identifier
0345      A71E     cmdb.dialog.var   equ  cmdb.struct + 30  ; Dialog private variable or pointer
0346      A720     cmdb.panhead      equ  cmdb.struct + 32  ; Pointer string pane header
0347      A722     cmdb.paninfo      equ  cmdb.struct + 34  ; Pointer string pane info (1st line)
0348      A724     cmdb.panhint      equ  cmdb.struct + 36  ; Pointer string pane hint (2nd line)
0349      A726     cmdb.panhint2     equ  cmdb.struct + 38  ; Pointer string pane hint (extra)
0350      A728     cmdb.panmarkers   equ  cmdb.struct + 40  ; Pointer key marker list  (3rd line)
0351      A72A     cmdb.pankeys      equ  cmdb.struct + 42  ; Pointer string pane keys (stat line)
0352      A72C     cmdb.action.ptr   equ  cmdb.struct + 44  ; Pointer function to execute
0353      A72E     cmdb.cmdall       equ  cmdb.struct + 46  ; Current command including length-byte
0354      A72E     cmdb.cmdlen       equ  cmdb.struct + 46  ; Length of current command (MSB byte!)
0355      A72F     cmdb.cmd          equ  cmdb.struct + 47  ; Current command (80 bytes max.)
0356      A780     cmdb.panhead.buf  equ  cmdb.struct + 128 ; String buffer for pane header
0357      A7B2     cmdb.dflt.fname   equ  cmdb.struct + 178 ; Default for filename
0358      A800     cmdb.free         equ  cmdb.struct + 256 ; End of structure
0359               ;-----------------------------------------------------------------
0360               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0361               ;-----------------------------------------------------------------
0362      A900     sp2.stktop        equ  >a900           ; \
0363                                                      ; | The stack grows from high memory
0364                                                      ; | towards low memory.
0365                                                      ; |
0366                                                      ; | Stack leaking is checked in SP2
0367                                                      ; | user hook "edkey.keyscan.hook"
0368                                                      ; /
0369               ;-----------------------------------------------------------------
0370               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0371               ;-----------------------------------------------------------------
0372      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0373                                                      ; / stored in cartridge ROM bank7.asm
0374               
0375      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0376                                                      ; | scratchpad backup/restore routines.
0377                                                      ; /
0378               
0379      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0380      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0381                                                      ; calling TI Basic/External programs
0382               ;-----------------------------------------------------------------
0383               ; Farjump return stack                 @>af00-afff     (256 bytes)
0384               ;-----------------------------------------------------------------
0385      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0386                                                      ; Grows downwards from high to low.
0387               ;-----------------------------------------------------------------
0388               ; Index                                @>b000-bfff    (4096 bytes)
0389               ;-----------------------------------------------------------------
0390      B000     idx.top           equ  >b000           ; Top of index
0391      1000     idx.size          equ  4096            ; Index size
0392               ;-----------------------------------------------------------------
0393               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0394               ;-----------------------------------------------------------------
0395      C000     edb.top           equ  >c000           ; Editor buffer high memory
0396      1000     edb.size          equ  4096            ; Editor buffer size
0397               ;-----------------------------------------------------------------
0398               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0399               ;-----------------------------------------------------------------
0400      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0401      0960     fb.size           equ  80*30           ; Frame buffer size
0402      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0403                                                      ; / >d960->dcff
0404               ;-----------------------------------------------------------------
0405               ; Defaults area                        @>de00-dfff     (512 bytes)
0406               ;-----------------------------------------------------------------
0407      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0408      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0409      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0410               ;-----------------------------------------------------------------
0411               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0412               ;-----------------------------------------------------------------
0413      E000     cat.top           equ  >e000           ; Top of file catalog
0414      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0415      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0416      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0417      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0418      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0419      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0420      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0421      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0422      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0423      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0424      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0425      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0426               ;-----------------------------------------------------------------
0427               ; Directory/File catalog pointers and numbers
0428               ;-----------------------------------------------------------------
0429      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0430      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0431      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0432      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0433      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0434      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0435      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0436      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0437      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0438      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0439      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0440      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0441      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0442      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0443      E378     cat.free1         equ  cat.top + 888   ; **free** up to 954
0444               ;-----------------------------------------------------------------
0445               ; Directory/File catalog strings (always length byte included)
0446               ;-----------------------------------------------------------------
0447      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0448      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0449      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0450      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0451      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0452      0F00     cat.size          equ  3840            ; Catalog total size
0453               ;-----------------------------------------------------------------
0454               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0455               ;-----------------------------------------------------------------
0456      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0457      0100     cmdb.size         equ  256             ; Command buffer size
0458               ;-----------------------------------------------------------------
0459               ; Heap & Strings area                  @>f000-f0ff     (256 bytes)
0460               ;-----------------------------------------------------------------
0461      F000     heap.top          equ  >f000           ; 80 Current filename
0462      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0463      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0464               ;-----------------------------------------------------------------
0465               ; Search results index for rows        @>f100-f8ff    (2048 bytes)
0466               ;-----------------------------------------------------------------
0467      F100     edb.srch.idx.rtop   equ  >f100         ; Search match index for rows
0468      0800     edb.srch.idx.rsize  equ  2048          ; Size of search match index for rows
0469               ;-----------------------------------------------------------------
0470               ; Search results index for columns     @>f900-fcff    (1024 bytes)
0471               ;-----------------------------------------------------------------
0472      F900     edb.srch.idx.ctop   equ  >f900         ; Search match index for columns
0473      0400     edb.srch.idx.csize  equ  1024          ; Size of search match index for columns
0474               ;-----------------------------------------------------------------
0475               ; Stevie specific equates
0476               ;-----------------------------------------------------------------
0477      0000     fh.fopmode.none           equ  0        ; No file operation in progress
0478      0001     fh.fopmode.readfile       equ  1        ; Read file from disk to memory
0479      0002     fh.fopmode.writefile      equ  2        ; Save file from memory to disk
0480      0006     cmdb.rows                 equ  6        ; Number of rows in CMDB pane
0481      A028     rom0_kscan_out            equ  keycode1 ; Where to store value of key pressed
0482      9900     tv.colorize.reset         equ  >9900    ; Colorization off
0483      00FE     tv.1timeonly              equ  254      ; One-time only flag indicator
0484      0100     tv.sams.maxpage           equ  256      ; Max SAMS pages supported
                   < stevie_b2.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b2.asm
0030                       copy  "equ.tib.asm"         ; Equates related to TI Basic session
     **** ****     > equ.tib.asm
0001               * FILE......: equ.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b2.asm
0031                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b2.asm
0032               
0033               ***************************************************************
0034               * BANK 2
0035               ********|*****|*********************|**************************
0036      6004     bankid  equ   bank2.rom             ; Set bank identifier to current bank
0037                       aorg  >6000
0038                       save  >6000,>8000           ; Save bank
0039                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE x.x.x RESET MEM"
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Change to rom.program2 to skip menu option "STEVIE x.x.x RESET MEM"
0024                       ;
0025 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0026                                                   ; 7  /
0027               
0028 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0029                                                   ; 9  /
0030               
0031 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0032                                                   ; 11 /
0033               
0034                       ;-----------------------------------------------------------------------
0035                       ; Program list entry
0036                       ;-----------------------------------------------------------------------
0037               rom.program1:
0038 600C 6026             data  rom.program2          ; 12 \ Next program list entry         >600c
0039                                                   ; 13 / (no more items following)
0040               
0041 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0042                                                   ; 15 /
0043               
0044 6010 1553             stri 'STEVIE 1.7.4 MEMRESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 312E     
     601A 372E     
     601C 3420     
     601E 4D45     
     6020 4D52     
     6022 4553     
     6024 4554     
0045                       even
0046               
0047                       ;-----------------------------------------------------------------------
0048                       ; Program list entry
0049                       ;-----------------------------------------------------------------------
0050               rom.program2:
0051 6026 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0052                                                   ; 13 / (no more items following)
0053               
0054 6028 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0055                                                   ; 15 /
0056               
0058 602A 0C53                 stri 'STEVIE 1.7.4'
     602C 5445     
     602E 5649     
     6030 4520     
     6032 312E     
     6034 372E     
     6036 34       
0060               
0064               
0068               
                   < stevie_b2.asm
0040               
0041               ***************************************************************
0042               * Step 1: Switch to bank 0 (uniform code accross all banks)
0043               ********|*****|*********************|**************************
0044                       aorg  kickstart.code1       ; >6040
0045 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0046               ***************************************************************
0047               * Step 2: Satisfy assembler, must know relocated code
0048               ********|*****|*********************|**************************
0049                       aorg  >2000                 ; Relocate to >2000
0050                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FCA     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7FF0     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 1024  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 101E  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1018  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 100B  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               ***************************************************************
0172               * file.load - RLoad binary file into VDP memory
0173               ***************************************************************
0174               *  bl   @file.load
0175               *       data P0
0176               *--------------------------------------------------------------
0177               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0178               *--------------------------------------------------------------
0179               *  bl   @xfile.load
0180               *
0181               *  R0 = Address of PAB in VDP RAM
0182               *--------------------------------------------------------------
0183               *  Output:
0184               *  tmp0     = Copy of VDP PAB byte 1 after operation
0185               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0186               *  tmp2 LSB = Copy of status register after operation
0187               ********|*****|*********************|**************************
0188               file.load:
0189 2E12 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0190               *--------------------------------------------------------------
0191               * Initialisation
0192               *--------------------------------------------------------------
0193               xfile.load:
0194 2E14 0649  22         dect  stack
0195 2E16 C64B  38         mov   r11,*stack            ; Save return address
0196               
0197 2E18 0205  24         li    tmp1,io.op.load       ; io.op.load
     2E1A 0005     
0198 2E1C 1005  14         jmp   _file.record.fop      ; Do file operation
0199               
0200               
0201               file.record.seek:
0202 2E1E 1000  14         nop                         ; Not yet supported
0203               
0204               file.image.save:
0205 2E20 1000  14         nop                         ; Not yet supported
0206               
0207               file.delete:
0208 2E22 1000  14         nop                         ; Not yet supported
0209               
0210               file.rename:
0211 2E24 1000  14         nop                         ; Not yet supported
0212               
0213               file.status:
0214 2E26 1000  14         nop
0215               
0216               
0217               
0218               ***************************************************************
0219               * _file.record.fop - File operation
0220               ***************************************************************
0221               * Called internally via JMP/B by file operations
0222               *--------------------------------------------------------------
0223               *  Input:
0224               *  r0   = Address of PAB in VDP RAM
0225               *  r1   = File type/mode
0226               *  tmp1 = File operation opcode
0227               *
0228               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0229               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0230               *--------------------------------------------------------------
0231               *  Output:
0232               *  tmp0     = Copy of VDP PAB byte 1 after operation
0233               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0234               *  tmp2 LSB = Copy of status register after operation
0235               *--------------------------------------------------------------
0236               *  Register usage:
0237               *  r0, r1, tmp0, tmp1, tmp2
0238               *--------------------------------------------------------------
0239               *  Remarks
0240               *  Private, only to be called from inside fio_level3 module
0241               *  via jump or branch instruction.
0242               *
0243               *  Uses @waux1 for backup/restore of memory word @>8322
0244               ********|*****|*********************|**************************
0245               _file.record.fop:
0246                       ;------------------------------------------------------
0247                       ; Write to PAB required?
0248                       ;------------------------------------------------------
0249 2E28 C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E2A A436     
0250                       ;------------------------------------------------------
0251                       ; Set file opcode in VDP PAB
0252                       ;------------------------------------------------------
0253 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0254               
0255 2E2E A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E30 A44E     
0256                                                   ; >00 = Data buffer in VDP RAM
0257                                                   ; >40 = Data buffer in CPU RAM
0258               
0259 2E32 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E34 22CC     
0260                                                   ; \ i  tmp0 = VDP target address
0261                                                   ; / i  tmp1 = Byte to write
0262                       ;------------------------------------------------------
0263                       ; Set file type/mode in VDP PAB
0264                       ;------------------------------------------------------
0265 2E36 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0266 2E38 0584  22         inc   tmp0                  ; Next byte in PAB
0267 2E3A C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E3C A44C     
0268               
0269 2E3E 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E40 22CC     
0270                                                   ; \ i  tmp0 = VDP target address
0271                                                   ; / i  tmp1 = Byte to write
0272                       ;------------------------------------------------------
0273                       ; Prepare for DSRLNK
0274                       ;------------------------------------------------------
0275 2E42 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E44 0009     
0276 2E46 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E48 8356     
0277               *--------------------------------------------------------------
0278               * Call DSRLINK for doing file operation
0279               *--------------------------------------------------------------
0280 2E4A C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E4C 8322     
     2E4E 833C     
0281               
0282 2E50 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E52 A42A     
0283 2E54 1504  14         jgt   _file.record.fop.optimized
0284                                                   ; Optimized version
0285               
0286                       ;------------------------------------------------------
0287                       ; First IO call. Call standard DSRLNK
0288                       ;------------------------------------------------------
0289 2E56 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E58 2C4A     
0290 2E5A 0008                   data >8               ; \ i  p0 = >8 (DSR)
0291                                                   ; / o  r0 = Copy of VDP PAB byte 1
0292 2E5C 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0293               
0294                       ;------------------------------------------------------
0295                       ; Recurring IO call. Call optimized DSRLNK
0296                       ;------------------------------------------------------
0297               _file.record.fop.optimized:
0298 2E5E 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E60 2D7A     
0299               
0300               *--------------------------------------------------------------
0301               * Return PAB details to caller
0302               *--------------------------------------------------------------
0303               _file.record.fop.pab:
0304 2E62 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0305                                                   ; Upon DSRLNK return status register EQ bit
0306                                                   ; 1 = No file error
0307                                                   ; 0 = File error occured
0308               
0309 2E64 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E66 833C     
     2E68 8322     
0310               *--------------------------------------------------------------
0311               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0312               *--------------------------------------------------------------
0313 2E6A C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E6C A436     
0314 2E6E 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E70 0005     
0315 2E72 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E74 22E4     
0316 2E76 C144  30         mov   tmp0,tmp1             ; Move to destination
0317               *--------------------------------------------------------------
0318               * Get PAB byte 1 from VDP ram into tmp0 (status)
0319               *--------------------------------------------------------------
0320 2E78 C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0321                                                   ; as returned by DSRLNK
0322               *--------------------------------------------------------------
0323               * Exit
0324               *--------------------------------------------------------------
0325               ; If an error occured during the IO operation, then the
0326               ; equal bit in the saved status register (=tmp2) is set to 1.
0327               ;
0328               ; Upon return from this IO call you should basically test with:
0329               ;       coc   @wbit2,tmp2           ; Equal bit set?
0330               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0331               ;
0332               ; Then look for further details in the copy of VDP PAB byte 1
0333               ; in register tmp0, bits 13-15
0334               ;
0335               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0336               ;                                   ; calls, skip for type >A subprograms!)
0337               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0338               ;       jeq   my_error_handler
0339               *--------------------------------------------------------------
0340               _file.record.fop.exit:
0341 2E7A C2F9  46         mov   *stack+,r11           ; Pop R11
0342 2E7C 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E7E C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E80 0649  22         dect  stack
0038 2E82 C64B  38         mov   r11,*stack            ; Save return address
0039 2E84 0649  22         dect  stack
0040 2E86 C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E88 C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E8A 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E8C 0014     
0046               fg99.send.loop:
0047 2E8E 04E0  34         clr   @>6000                ; Signal new byte
     2E90 6000     
0048 2E92 0201  24         li    r1,>0038              ; >7000 >> 9
     2E94 0038     
0049 2E96 D070  44         movb  *r0+,r1
0050 2E98 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E9A 04D1  30         clr   *r1                   ; Send byte
0053 2E9C 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E9E 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2EA0 04E0  34         clr   @>6000                ; Done sending filename
     2EA2 6000     
0057 2EA4 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2EA6 0200  24         li    r0,>6000              ; check >6000->6200
     2EA8 6000     
0063 2EAA 0202  24         li    r2,>100
     2EAC 0100     
0064 2EAE C070  46 !       mov   *r0+, r1
0065 2EB0 1603  14         jne   fg99.exit             ; Done loading, exit
0066 2EB2 0602  22         dec   r2
0067 2EB4 16FC  14         jne   -!
0068 2EB6 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EB8 C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EBA C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EBC 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EBE 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EC0 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EC2 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EC4 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EC6 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EC8 201C     
0029 2ECA 1602  14         jne   tmgr1a                ; No, so move on
0030 2ECC E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2ECE 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2ED0 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2ED2 2020     
0035 2ED4 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ED6 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ED8 2010     
0048 2EDA 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2EDC 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2EDE 200E     
0050 2EE0 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2EE2 0460  28         b     @kthread              ; Run kernel thread
     2EE4 2F5C     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EE6 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EE8 2014     
0056 2EEA 13EB  14         jeq   tmgr1
0057 2EEC 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EEE 2012     
0058 2EF0 16E8  14         jne   tmgr1
0059 2EF2 C120  38         mov   @wtiusr,tmp0
     2EF4 832E     
0060 2EF6 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EF8 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EFA 2F5A     
0065 2EFC C10A  30         mov   r10,tmp0
0066 2EFE 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2F00 00FF     
0067 2F02 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2F04 201C     
0068 2F06 1303  14         jeq   tmgr5
0069 2F08 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F0A 003C     
0070 2F0C 1002  14         jmp   tmgr6
0071 2F0E 0284  26 tmgr5   ci    tmp0,50
     2F10 0032     
0072 2F12 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F14 1001  14         jmp   tmgr8
0074 2F16 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F18 C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F1A 832C     
0079 2F1C 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F1E FF00     
0080 2F20 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F22 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F24 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F26 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F28 C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F2A 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F2C 830C     
     2F2E 830D     
0089 2F30 1608  14         jne   tmgr10                ; No, get next slot
0090 2F32 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F34 FF00     
0091 2F36 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F38 C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F3A 8330     
0096 2F3C 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F3E C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F40 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F42 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F44 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F46 8315     
     2F48 8314     
0103 2F4A 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F4C 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F4E 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F50 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F52 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F54 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F56 FF00     
0109 2F58 10B4  14         jmp   tmgr1
0110 2F5A 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F5C E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F5E 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F60 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F62 2006     
0023 2F64 1602  14         jne   kthread_kb
0024 2F66 06A0  36         bl    @sdpla1               ; Run sound player
     2F68 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F6A 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F6C 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F6E 0460  28         b     @tmgr3                ; Exit
     2F70 2EE6     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F72 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F74 832E     
0018 2F76 E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F78 2012     
0019 2F7A 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EC2     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F7C 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F7E 832E     
0029 2F80 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F82 FEFF     
0030 2F84 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F86 C13B  46 mkslot  mov   *r11+,tmp0
0018 2F88 C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F8A C184  30         mov   tmp0,tmp2
0023 2F8C 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F8E A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F90 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F92 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F94 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F96 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F98 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F9A 2022     
0035 2F9C 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F9E 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2FA0 05CB  22 mkslo1  inct  r11
0041 2FA2 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2FA4 C13B  46 clslot  mov   *r11+,tmp0
0053 2FA6 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2FA8 A120  38         a     @wtitab,tmp0          ; Add table base
     2FAA 832C     
0055 2FAC 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FAE 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FB0 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FB2 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FB4 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FB6 A120  38         a     @wtitab,tmp0          ; Add table base
     2FB8 832C     
0071 2FBA 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FBC C154  38         mov   *tmp0,tmp1
0073 2FBE 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FC0 FF00     
0074 2FC2 C505  38         mov   tmp1,*tmp0
0075 2FC4 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FC6 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FC8 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FCA 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FCC 0000     
0288 2FCE 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FD0 8300     
0289 2FD2 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FD4 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FD6 0202  20 runli2  li    r2,>8308
     2FD8 8308     
0294 2FDA 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FDC 0282  22         ci    r2,>8400
     2FDE 8400     
0296 2FE0 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FE2 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FE4 FFFF     
0301 2FE6 1602  14         jne   runli4                ; No, continue
0302 2FE8 0420  42         blwp  @0                    ; Yes, bye bye
     2FEA 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FEC C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FEE 833C     
0307 2FF0 04C1  14         clr   r1                    ; Reset counter
0308 2FF2 0202  20         li    r2,10                 ; We test 10 times
     2FF4 000A     
0309 2FF6 C0E0  30 runli5  mov   @vdps,r3
     2FF8 8802     
0310 2FFA 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FFC 2020     
0311 2FFE 1302  14         jeq   runli6
0312 3000 0581  14         inc   r1                    ; Increase counter
0313 3002 10F9  14         jmp   runli5
0314 3004 0602  14 runli6  dec   r2                    ; Next test
0315 3006 16F7  14         jne   runli5
0316 3008 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     300A 1250     
0317 300C 1202  14         jle   runli7                ; No, so it must be NTSC
0318 300E 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3010 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3012 06A0  32 runli7  bl    @loadmc
     3014 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 3016 04C1  14 runli9  clr   r1
0327 3018 04C2  14         clr   r2
0328 301A 04C3  14         clr   r3
0329 301C 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     301E A900     
0330 3020 020F  20         li    r15,vdpw              ; Set VDP write address
     3022 8C00     
0332 3024 06A0  32         bl    @mute                 ; Mute sound generators
     3026 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 3028 0280  22         ci    r0,>4a4a              ; Crash flag set?
     302A 4A4A     
0339 302C 1605  14         jne   runlia
0340 302E 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3030 228E     
0341 3032 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     3034 0000     
     3036 3000     
0346 3038 06A0  32 runlia  bl    @filv
     303A 228E     
0347 303C 0FC0             data  pctadr,spfclr,16      ; Load color table
     303E 00F4     
     3040 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3042 06A0  32         bl    @f18unl               ; Unlock the F18A
     3044 278A     
0355 3046 06A0  32         bl    @f18chk               ; Check if F18A is there \
     3048 27B4     
0356 304A 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     304C 27B4     
0357 304E 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3050 27B4     
0358 3052 06A0  32         bl    @f18lck               ; Lock the F18A again
     3054 27A0     
0359               
0360 3056 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     3058 2332     
0361 305A 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 305C 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     305E 22F8     
0375 3060 7F50             data  spvmod                ; Equate selected video mode table
0376 3062 0204  20         li    tmp0,spfont           ; Get font option
     3064 000C     
0377 3066 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 3068 1304  14         jeq   runlid                ; Yes, skip it
0379 306A 06A0  32         bl    @ldfnt
     306C 2360     
0380 306E 1900             data  fntadr,spfont         ; Load specified font
     3070 000C     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3072 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     3074 4A4A     
0385 3076 1602  14         jne   runlie                ; No, continue
0386 3078 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     307A 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 307C 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     307E 0040     
0391 3080 0460  28         b     @main                 ; Give control to main program
     3082 6046     
                   < stevie_b2.asm
0051                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 3084 0649  14         dect  stack
0029 3086 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 3088 0649  14         dect  stack
0031 308A C645  30         mov   tmp1,*stack           ; Push tmp1
0032 308C 0649  14         dect  stack
0033 308E C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3090 0649  14         dect  stack
0035 3092 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 3094 C13B  30         mov   *r11+,tmp0            ; P0
0040 3096 C17B  30         mov   *r11+,tmp1            ; P1
0041 3098 C1BB  30         mov   *r11+,tmp2            ; P2
0042 309A 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 309C 0649  14         dect  stack
0048 309E C644  30         mov   tmp0,*stack           ; Push tmp0
0049 30A0 0649  14         dect  stack
0050 30A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 30A4 0649  14         dect  stack
0052 30A6 C646  30         mov   tmp2,*stack           ; Push tmp2
0053 30A8 0649  14         dect  stack
0054 30AA C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30AC 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30AE 6000     
0060 30B0 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30B2 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30B4 A22E     
0064 30B6 0647  14         dect  tmp3
0065 30B8 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30BA 0647  14         dect  tmp3
0067 30BC C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30BE C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30C0 A22E     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30C2 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30C4 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30C6 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30C8 0224  22         ai    tmp0,>0800
     30CA 0800     
0086 30CC 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30CE 0285  22         ci    tmp1,>ffff
     30D0 FFFF     
0095 30D2 1602  14         jne   !
0096 30D4 C160  34         mov   @trmpvector,tmp1
     30D6 A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30D8 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30DA 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30DC 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30DE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30E0 FFCE     
0111 30E2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30E4 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30E6 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30E8 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30EA A22E     
0122 30EC C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30EE 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30F0 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30F2 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30F4 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30F6 028B  22         ci    r11,>6000
     30F8 6000     
0139 30FA 1104  14         jlt   rom.farjump.assert.lowmem
0140 30FC 028B  22         ci    r11,>7fff
     30FE 7FFF     
0141 3100 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 3102 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 3104 028B  22         ci    r11,>2000
     3106 2000     
0148 3108 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 310A 028B  22         ci    r11,>3fff
     310C 3FFF     
0150 310E 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3110 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3112 A22E     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 3114 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 3116 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 3118 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 311A 0225  22         ai    tmp1,>0800
     311C 0800     
0171 311E 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3120 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3122 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3124 FFCE     
0178 3126 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3128 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 312A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 312C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 312E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3130 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3132 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3134 0649  14         dect  stack
0021 3136 C64B  30         mov   r11,*stack            ; Save return address
0022 3138 0649  14         dect  stack
0023 313A C644  30         mov   tmp0,*stack           ; Push tmp0
0024 313C 0649  14         dect  stack
0025 313E C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3140 0204  20         li    tmp0,fb.top
     3142 D000     
0030 3144 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     3146 A300     
0031 3148 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     314A A304     
0032 314C 04E0  34         clr   @fb.row               ; Current row=0
     314E A306     
0033 3150 04E0  34         clr   @fb.column            ; Current column=0
     3152 A30C     
0034               
0035 3154 0204  20         li    tmp0,colrow
     3156 0050     
0036 3158 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     315A A30E     
0037 315C 04E0  34         clr   @fb.vwco              ; Set view window column offset
     315E A310     
0038               
0039 3160 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3162 001C     
0040 3164 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     3166 A31E     
0041               
0042 3168 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     316A 31D0     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 316C 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     316E A22A     
0048 3170 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3172 A312     
0049 3174 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3176 A318     
0050 3178 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     317A A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 317C 06A0  32         bl    @film
     317E 2236     
0055 3180 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3182 0000     
     3184 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 3186 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 3188 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 318A C2F9  30         mov   *stack+,r11           ; Pop r11
0063 318C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 318E 0649  14         dect  stack
0025 3190 C64B  30         mov   r11,*stack            ; Save return address
0026 3192 0649  14         dect  stack
0027 3194 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3196 C120  34         mov   @parm1,tmp0
     3198 A006     
0032 319A A120  34         a     @fb.topline,tmp0
     319C A304     
0033 319E C804  38         mov   tmp0,@outparm1
     31A0 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 31A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 31A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 31A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 31A8 0649  14         dect  stack
0028 31AA C64B  30         mov   r11,*stack            ; Save return address
0029 31AC 0649  14         dect  stack
0030 31AE C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31B0 0649  14         dect  stack
0032 31B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31B4 C120  34         mov   @fb.row,tmp0
     31B6 A306     
0037 31B8 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31BA A30E     
0038 31BC A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31BE A30C     
0039 31C0 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31C2 A300     
0040 31C4 C805  38         mov   tmp1,@fb.current
     31C6 A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31CC C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31D0 0649  14         dect  stack
0026 31D2 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31D4 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31D6 A31E     
     31D8 A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31DA 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31DC A210     
0037 31DE 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31E0 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E2 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31E4 8820  50         c     @edb.special.file,@const.0
     31E6 A522     
     31E8 2000     
0044 31EA 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31EC 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31EE A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31F0 0760  38         abs   @tv.error.visible     ; Error area visible?
     31F2 A230     
0051 31F4 1303  14         jeq   fb.calc.scrrows.exit
0052 31F6 6820  54         s     @tv.error.rows,@fb.scrrows
     31F8 A232     
     31FA A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31FC C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3200 0649  14         dect  stack
0052 3202 C64B  30         mov   r11,*stack            ; Save return address
0053 3204 0649  14         dect  stack
0054 3206 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 3208 0204  20         li    tmp0,idx.top
     320A B000     
0059 320C C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     320E A502     
0060               
0061 3210 C120  34         mov   @tv.sams.b000,tmp0
     3212 A206     
0062 3214 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     3216 A600     
0063 3218 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     321A A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 321C 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     321E 0004     
0068 3220 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3222 A604     
0069               
0070 3224 06A0  32         bl    @_idx.sams.mapcolumn.on
     3226 3242     
0071                                                   ; Index in continuous memory region
0072               
0073 3228 06A0  32         bl    @film
     322A 2236     
0074 322C B000                   data idx.top,>00,idx.size * 5
     322E 0000     
     3230 5000     
0075                                                   ; Clear index
0076               
0077 3232 06A0  32         bl    @_idx.sams.mapcolumn.off
     3234 3276     
0078                                                   ; Restore memory window layout
0079               
0080 3236 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3238 A602     
     323A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 323C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 323E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3240 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3242 0649  14         dect  stack
0102 3244 C64B  30         mov   r11,*stack            ; Push return address
0103 3246 0649  14         dect  stack
0104 3248 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 324A 0649  14         dect  stack
0106 324C C645  30         mov   tmp1,*stack           ; Push tmp1
0107 324E 0649  14         dect  stack
0108 3250 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3252 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3254 A602     
0113 3256 0205  20         li    tmp1,idx.top
     3258 B000     
0114 325A 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     325C 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 325E 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3260 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3262 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3264 0225  22         ai    tmp1,>1000            ; Next memory region
     3266 1000     
0124 3268 0606  14         dec   tmp2                  ; Update loop counter
0125 326A 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 326C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 326E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3270 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3272 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3274 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3276 0649  14         dect  stack
0151 3278 C64B  30         mov   r11,*stack            ; Push return address
0152 327A 0649  14         dect  stack
0153 327C C644  30         mov   tmp0,*stack           ; Push tmp0
0154 327E 0649  14         dect  stack
0155 3280 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3282 0649  14         dect  stack
0157 3284 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3286 0649  14         dect  stack
0159 3288 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 328A 0205  20         li    tmp1,idx.top
     328C B000     
0164 328E 0206  20         li    tmp2,5                ; Always 5 pages
     3290 0005     
0165 3292 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3294 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3296 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3298 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     329A 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 329C 0225  22         ai    tmp1,>1000            ; Next memory region
     329E 1000     
0176 32A0 0606  14         dec   tmp2                  ; Update loop counter
0177 32A2 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 32A4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 32A6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 32A8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32AC C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32AE 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32B0 0649  14         dect  stack
0212 32B2 C64B  30         mov   r11,*stack            ; Save return address
0213 32B4 0649  14         dect  stack
0214 32B6 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32B8 0649  14         dect  stack
0216 32BA C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32BC 0649  14         dect  stack
0218 32BE C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32C0 C184  18         mov   tmp0,tmp2             ; Line number
0223 32C2 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32C4 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32C6 0800     
0225               
0226 32C8 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32CA 0A16  18         sla   tmp2,1                ; line number * 2
0231 32CC C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32CE A018     
0232               
0233 32D0 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32D2 A602     
0234 32D4 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32D6 A600     
0235               
0236 32D8 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32DA C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32DC A600     
0242 32DE C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32E0 A206     
0243 32E2 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32E4 0205  20         li    tmp1,>b000            ; Memory window for index page
     32E6 B000     
0246               
0247 32E8 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32EA 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32EC 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32EE A604     
0254 32F0 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32F2 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32F4 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32F6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32FC C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3300 0649  14         dect  stack
0023 3302 C64B  30         mov   r11,*stack            ; Save return address
0024 3304 0649  14         dect  stack
0025 3306 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3308 0204  20         li    tmp0,edb.top          ; \
     330A C000     
0030 330C C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     330E A500     
0031 3310 C804  38         mov   tmp0,@edb.next_free.ptr
     3312 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3314 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     3316 A50A     
0035               
0036 3318 0204  20         li    tmp0,1
     331A 0001     
0037 331C C804  38         mov   tmp0,@edb.lines       ; Lines=1
     331E A504     
0038               
0039 3320 0720  34         seto  @edb.block.m1         ; Reset block start line
     3322 A50E     
0040 3324 0720  34         seto  @edb.block.m2         ; Reset block end line
     3326 A510     
0041               
0042 3328 C820  54         mov   @tv.lineterm,@edb.lineterm
     332A A23C     
     332C A524     
0043                                                   ; Set line termination char from default
0044               
0045 332E 0204  20         li    tmp0,txt.newfile      ; "New file"
     3330 3B48     
0046 3332 C804  38         mov   tmp0,@edb.filename.ptr
     3334 A514     
0047               
0048 3336 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3338 A440     
0049 333A 04E0  34         clr   @fh.kilobytes.prev    ; /
     333C A45C     
0050               
0051 333E 0204  20         li    tmp0,txt.filetype.none
     3340 3C98     
0052 3342 C804  38         mov   tmp0,@edb.filetype.ptr
     3344 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 3346 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 3348 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 334A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 334C 0649  14         dect  stack
0023 334E C64B  30         mov   r11,*stack            ; Save return address
0024 3350 0649  14         dect  stack
0025 3352 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3354 0649  14         dect  stack
0027 3356 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3358 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     335A EF00     
0032 335C C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     335E A700     
0033               
0034 3360 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3362 A702     
0035 3364 0204  20         li    tmp0,6
     3366 0006     
0036 3368 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     336A A706     
0037 336C C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     336E A708     
0038               
0039 3370 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3372 A718     
0040 3374 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3376 A71A     
0041 3378 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     337A A72C     
0042 337C 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     337E A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3380 0204  20         li    tmp0,pane.botrow      ; \
     3382 001D     
0047 3384 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3386 A706     
0048 3388 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     338A 833A     
0049 338C C105  18         mov   tmp1,tmp0             ; | Get result
0050 338E 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3390 0980     
0051 3392 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3394 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 3396 06A0  32         bl    @film
     3398 2236     
0056 339A EF00                   data  cmdb.top,>00,cmdb.size
     339C 0000     
     339E 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 33A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 33A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 33A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 33A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 33A8 0649  14         dect  stack
0023 33AA C64B  30         mov   r11,*stack            ; Save return address
0024 33AC 0649  14         dect  stack
0025 33AE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33B0 0649  14         dect  stack
0027 33B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33B4 0649  14         dect  stack
0029 33B6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33B8 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33BA A230     
0034 33BC 0204  20         li    tmp0,3
     33BE 0003     
0035 33C0 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33C2 A232     
0036               
0037 33C4 06A0  32         bl    @film
     33C6 2236     
0038 33C8 A23E                   data tv.error.msg,0,160
     33CA 0000     
     33CC 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33CE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33D0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33D4 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33D6 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33D8 0649  14         dect  stack
0023 33DA C64B  30         mov   r11,*stack            ; Save return address
0024 33DC 0649  14         dect  stack
0025 33DE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33E0 0649  14         dect  stack
0027 33E2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33E4 0649  14         dect  stack
0029 33E6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33E8 0204  20         li    tmp0,1                ; \ Set default color scheme
     33EA 0001     
0034 33EC C804  38         mov   tmp0,@tv.colorscheme  ; /
     33EE A212     
0035               
0036 33F0 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33F2 A22C     
0037 33F4 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33F6 200C     
0038               
0039 33F8 0204  20         li    tmp0,fj.bottom
     33FA B000     
0040 33FC C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33FE A22E     
0041               
0042 3400 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     3402 A23A     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 3404 06A0  32         bl    @cpym2m
     3406 253A     
0047 3408 3D62                   data def.printer.fname,tv.printer.fname,7
     340A DE00     
     340C 0007     
0048               
0049 340E 06A0  32         bl    @cpym2m
     3410 253A     
0050 3412 3D69                   data def.clip.fname.a,tv.clip.fname,10
     3414 DE50     
     3416 000A     
0051               
0052 3418 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     341A A50C     
0053               
0054 341C 0204  20         li    tmp0,13               ; \
     341E 000D     
0055 3420 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3422 A23C     
0056                                                   ; / LSB = 13 Carriage return
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               tv.init.exit:
0061 3424 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 3426 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3428 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 342A C2F9  30         mov   *stack+,r11           ; Pop R11
0065 342C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 342E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3430 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3432 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3434 3084     
0028 3436 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3438 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 343A 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 343C 0649  14         dect  stack
0025 343E C64B  30         mov   r11,*stack            ; Push return address
0026 3440 0649  14         dect  stack
0027 3442 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3444 0649  14         dect  stack
0029 3446 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3448 0649  14         dect  stack
0031 344A C646  30         mov   tmp2,*stack           ; Push tmp2
0032 344C 0649  14         dect  stack
0033 344E C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3450 0649  14         dect  stack
0035 3452 C640  30         mov   r0,*stack             ; Push r0
0036 3454 0649  14         dect  stack
0037 3456 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3458 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     345A A006     
0042 345C 04C5  14         clr   tmp1                  ; Termination character >00
0043 345E 04E0  34         clr   @outparm1             ; Reset output parameters
     3460 A018     
0044 3462 04E0  34         clr   @outparm2             ; Reset output parameters
     3464 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3466 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3468 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 346A C1A0  30         mov   @waux1,tmp2           ; Get string length
     346C 833C     
0056 346E 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3470 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3472 0005     
0058 3474 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3476 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3478 A006     
0063               
0064 347A A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 347C 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     347E FFF6     
0066 3480 0746  18         abs   tmp2                  ; /
0067               
0068 3482 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 3484 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3486 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3488 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 348A 0285  22         ci    tmp1,32               ; Blank ?
     348C 0020     
0080 348E 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3490 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3492 FFD0     
0085 3494 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3496 0285  22         ci    tmp1,9
     3498 0009     
0087 349A 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 349C C026  34         mov   @tv.uint16.mpy(tmp2),r0
     349E 34CA     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 34A0 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 34A2 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 34A4 05C6  14         inct  tmp2                  ; Update loop counter
0102 34A6 0286  22         ci    tmp2,8                ; Last digit done?
     34A8 0008     
0103 34AA 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34AC 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34AE 04E0  34         clr   @outparm1             ; Empty uint16
     34B0 A018     
0110 34B2 0720  34         seto  @outparm2             ; Invalid input string
     34B4 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34B6 C807  38         mov   tmp3,@outparm1
     34B8 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34BA C079  30         mov   *stack+,r1            ; Pop r1
0121 34BC C039  30         mov   *stack+,r0            ; Pop r0
0122 34BE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34C0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34C8 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34CA 2710             data  10000,1000,100,10,1
     34CC 03E8     
     34CE 0064     
     34D0 000A     
     34D2 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34D4 0649  14         dect  stack
0022 34D6 C64B  30         mov   r11,*stack            ; Save return address
0023 34D8 0649  14         dect  stack
0024 34DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34DC 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34DE 2A56     
0029 34E0 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34E2 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34E4 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34E5   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34E6 0204  20         li    tmp0,uint16.unpacked
     34E8 A02C     
0035 34EA 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34EC 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34EE 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34F0 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34F2 2AAE     
0040 34F4 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34F6 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34F8 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34FC C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 3500 0649  14         dect  stack
0031 3502 C64B  30         mov   r11,*stack            ; Push return address
0032 3504 0649  14         dect  stack
0033 3506 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 3508 0649  14         dect  stack
0035 350A C645  30         mov   tmp1,*stack           ; Push tmp1
0036 350C 0649  14         dect  stack
0037 350E C646  30         mov   tmp2,*stack           ; Push tmp2
0038 3510 0649  14         dect  stack
0039 3512 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 3514 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3516 A006     
0044 3518 D194  26         movb  *tmp0,tmp2            ; /
0045 351A 0986  32         srl   tmp2,8                ; Right align
0046 351C C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 351E 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3520 A008     
0049 3522 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 3524 C120  34         mov   @parm1,tmp0           ; Get source address
     3526 A006     
0054 3528 C160  34         mov   @parm4,tmp1           ; Get destination address
     352A A00C     
0055 352C 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 352E 0649  14         dect  stack
0058 3530 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 3532 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3534 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 3536 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 3538 C120  34         mov   @parm2,tmp0           ; Get requested length
     353A A008     
0070 353C 0A84  32         sla   tmp0,8                ; Left align
0071 353E C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3540 A00C     
0072 3542 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 3544 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 3546 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 3548 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     354A A008     
0079 354C 6187  18         s     tmp3,tmp2             ; |
0080 354E 0586  14         inc   tmp2                  ; /
0081               
0082 3550 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3552 A00A     
0083 3554 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 3556 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 3558 0606  14         dec   tmp2                  ; Update loop counter
0090 355A 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 355C C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     355E A00C     
     3560 A018     
0093 3562 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 3564 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3566 FFCE     
0099 3568 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     356A 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 356C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 356E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 3570 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3572 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 3574 C2F9  30         mov   *stack+,r11           ; Pop r11
0109 3576 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3578 0649  14         dect  stack
0023 357A C64B  30         mov   r11,*stack            ; Save return address
0024 357C 0649  14         dect  stack
0025 357E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3580 0649  14         dect  stack
0027 3582 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3584 C120  34         mov   @parm1,tmp0           ; Get line number
     3586 A006     
0032 3588 C160  34         mov   @parm2,tmp1           ; Get pointer
     358A A008     
0033 358C 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 358E 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3590 0FFF     
0039 3592 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3594 06E0  34         swpb  @parm3
     3596 A00A     
0044 3598 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     359A A00A     
0045 359C 06E0  34         swpb  @parm3                ; \ Restore original order again,
     359E A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 35A0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35A2 32B0     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 35A4 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     35A6 A018     
0056 35A8 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35AA B000     
0057 35AC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35AE A018     
0058 35B0 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35B2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35B4 32B0     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35B6 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35B8 A018     
0068 35BA 04E4  34         clr   @idx.top(tmp0)        ; /
     35BC B000     
0069 35BE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35C0 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35C8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35CA 0649  14         dect  stack
0022 35CC C64B  30         mov   r11,*stack            ; Save return address
0023 35CE 0649  14         dect  stack
0024 35D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35D2 0649  14         dect  stack
0026 35D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35D6 0649  14         dect  stack
0028 35D8 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35DA C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35DC A006     
0033               
0034 35DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35E0 32B0     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35E2 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35E4 A018     
0039 35E6 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35E8 B000     
0040               
0041 35EA 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35EC C185  18         mov   tmp1,tmp2             ; \
0047 35EE 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35F0 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35F2 00FF     
0052 35F4 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35F6 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35F8 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35FA C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35FC A018     
0059 35FE C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3600 A01A     
0060 3602 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3604 04E0  34         clr   @outparm1
     3606 A018     
0066 3608 04E0  34         clr   @outparm2
     360A A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 360C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 360E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3610 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3612 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3614 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3616 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3618 B000     
0018 361A C144  18         mov   tmp0,tmp1             ; a = current slot
0019 361C 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 361E CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3620 0606  14         dec   tmp2                  ; tmp2--
0026 3622 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3624 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3626 0649  14         dect  stack
0047 3628 C64B  30         mov   r11,*stack            ; Save return address
0048 362A 0649  14         dect  stack
0049 362C C644  30         mov   tmp0,*stack           ; Push tmp0
0050 362E 0649  14         dect  stack
0051 3630 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3632 0649  14         dect  stack
0053 3634 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3636 0649  14         dect  stack
0055 3638 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 363A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     363C A006     
0060               
0061 363E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3640 32B0     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3642 C120  34         mov   @outparm1,tmp0        ; Index offset
     3644 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3646 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3648 A008     
0070 364A 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 364C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     364E A006     
0074 3650 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3652 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3654 B000     
0081 3656 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3658 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 365A C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     365C A008     
0088 365E 0287  22         ci    tmp3,2048
     3660 0800     
0089 3662 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3664 06A0  32         bl    @_idx.sams.mapcolumn.on
     3666 3242     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3668 C120  34         mov   @parm1,tmp0           ; Restore line number
     366A A006     
0103 366C 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 366E 06A0  32         bl    @_idx.entry.delete.reorg
     3670 3616     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3672 06A0  32         bl    @_idx.sams.mapcolumn.off
     3674 3276     
0111                                                   ; Restore memory window layout
0112               
0113 3676 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3678 06A0  32         bl    @_idx.entry.delete.reorg
     367A 3616     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 367C 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 367E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3680 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3682 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3684 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3686 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3688 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 368A 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     368C 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 368E 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3690 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3692 FFCE     
0027 3694 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3696 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3698 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     369A B000     
0032 369C C144  18         mov   tmp0,tmp1             ; a = current slot
0033 369E 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 36A0 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 36A2 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 36A4 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 36A6 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 36A8 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36AA 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36AC AFFC     
0043 36AE 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36B0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36B2 FFCE     
0049 36B4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36B6 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36B8 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36BA 0644  14         dect  tmp0                  ; Move pointer up
0056 36BC 0645  14         dect  tmp1                  ; Move pointer up
0057 36BE 0606  14         dec   tmp2                  ; Next index entry
0058 36C0 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36C2 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36C4 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36C6 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36C8 0649  14         dect  stack
0089 36CA C64B  30         mov   r11,*stack            ; Save return address
0090 36CC 0649  14         dect  stack
0091 36CE C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36D0 0649  14         dect  stack
0093 36D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36D4 0649  14         dect  stack
0095 36D6 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36D8 0649  14         dect  stack
0097 36DA C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36DC C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36DE A008     
0102 36E0 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36E2 A006     
0103 36E4 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36E6 C1E0  34         mov   @parm2,tmp3
     36E8 A008     
0110 36EA 0287  22         ci    tmp3,2048
     36EC 0800     
0111 36EE 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36F0 06A0  32         bl    @_idx.sams.mapcolumn.on
     36F2 3242     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36F4 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36F6 A008     
0123 36F8 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36FA 06A0  32         bl    @_idx.entry.insert.reorg
     36FC 368A     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36FE 06A0  32         bl    @_idx.sams.mapcolumn.off
     3700 3276     
0131                                                   ; Restore memory window layout
0132               
0133 3702 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3704 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3706 A008     
0139               
0140 3708 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     370A 32B0     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 370C C120  34         mov   @outparm1,tmp0        ; Index offset
     370E A018     
0145               
0146 3710 06A0  32         bl    @_idx.entry.insert.reorg
     3712 368A     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3714 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3716 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3718 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 371A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 371C C2F9  30         mov   *stack+,r11           ; Pop r11
0160 371E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3720 0649  14         dect  stack
0022 3722 C64B  30         mov   r11,*stack            ; Push return address
0023 3724 0649  14         dect  stack
0024 3726 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3728 0649  14         dect  stack
0026 372A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 372C 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     372E A504     
0031 3730 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3732 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3734 FFCE     
0037 3736 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3738 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 373A C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     373C A006     
0043               
0044 373E 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3740 35CA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3742 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3744 A01A     
0050 3746 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3748 A018     
0051 374A 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 374C 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     374E A208     
0057 3750 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3752 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3754 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3756 C820  54         mov   @outparm2,@tv.sams.c000
     3758 A01A     
     375A A208     
0066                                                   ; Set page in shadow registers
0067               
0068 375C C820  54         mov   @outparm2,@edb.sams.page
     375E A01A     
     3760 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3762 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3764 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3766 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3768 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 376A 0649  14         dect  stack
0022 376C C64B  30         mov   r11,*stack            ; Push return address
0023 376E 0649  14         dect  stack
0024 3770 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3772 0649  14         dect  stack
0026 3774 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3776 04E0  34         clr   @outparm1             ; Reset length
     3778 A018     
0031 377A 04E0  34         clr   @outparm2             ; Reset SAMS bank
     377C A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 377E C120  34         mov   @parm1,tmp0           ; \
     3780 A006     
0036 3782 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3784 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3786 A504     
0039 3788 1201  14         jle   !                     ; No, continue processing
0040 378A 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 378C C120  34 !       mov   @parm1,tmp0           ; Get line
     378E A006     
0046               
0047 3790 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3792 3720     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3794 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3796 A018     
0053 3798 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 379A C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 379C C805  38         mov   tmp1,@outparm1        ; Save length
     379E A018     
0060 37A0 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 37A2 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     37A4 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 37A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 37A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37AA C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37AC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37AE 0649  14         dect  stack
0021 37B0 C64B  30         mov   r11,*stack            ; Save return address
0022 37B2 0649  14         dect  stack
0023 37B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37B6 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37B8 A304     
0028 37BA A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37BC A306     
0029 37BE C804  38         mov   tmp0,@parm1
     37C0 A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37C2 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37C4 376A     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37C6 C820  54         mov   @outparm1,@fb.row.length
     37C8 A018     
     37CA A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37CE C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37D0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37D2 0649  14         dect  stack
0021 37D4 C64B  30         mov   r11,*stack            ; Save return address
0022 37D6 0649  14         dect  stack
0023 37D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37DA 0649  14         dect  stack
0025 37DC C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37DE C120  34         mov   @edb.next_free.ptr,tmp0
     37E0 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37E2 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37E4 0FFF     
0035 37E6 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37E8 0052     
0036 37EA 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37EC 0FF0     
0037 37EE 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37F0 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37F2 A51C     
0043 37F4 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37F6 A500     
     37F8 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37FA C120  34         mov   @edb.sams.hipage,tmp0
     37FC A51C     
0050 37FE C160  34         mov   @edb.top.ptr,tmp1
     3800 A500     
0051 3802 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3804 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3806 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3808 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     380A FFCE     
0061 380C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     380E 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3810 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3812 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3814 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3816 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3818 0649  14         dect  stack
0022 381A C64B  30         mov   r11,*stack            ; Push return address
0023 381C 0649  14         dect  stack
0024 381E C660  42         mov   @wyx,*stack           ; Push cursor position
     3820 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3822 06A0  32         bl    @hchar
     3824 2832     
0029 3826 0032                   byte 0,50,32,22
     3828 2016     
0030 382A FFFF                   data EOL              ; Clear message
0031               
0032 382C 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     382E A22C     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3830 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3832 832A     
0038 3834 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3836 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "cart.fg99.run.asm"         ; Run FinalGROM cartridge image
     **** ****     > cart.fg99.run.asm
0001               * FILE......: cart.fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * cart.fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @cart.fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               * Is expected to run from RAM and not from cartridge space.
0023               ********|*****|*********************|**************************
0024               cart.fg99.run:
0025                       ;-------------------------------------------------------
0026                       ; Put VDP in TI Basic compatible mode (32x24)
0027                       ;-------------------------------------------------------
0028 3838 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     383A 2806     
0029               
0030 383C 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     383E 22F8     
0031 3840 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0032               
0033 3842 06A0  32         bl    @scroff               ; Turn off screen
     3844 26E6     
0034                       ;------------------------------------------------------
0035                       ; Clear magic string
0036                       ;------------------------------------------------------
0037                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0038                       ; Indicate it's unsafe to resume Stevie and initialization
0039                       ; is necessary.
0040                       ; clr   @magic.str.w1
0041                       ; clr   @magic.str.w2
0042                       ; clr   @magic.str.w3
0043                       ;-------------------------------------------------------
0044                       ; Load FG99 cartridge, but do not start cartridge yet
0045                       ;-------------------------------------------------------
0046 3846 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3848 A238     
0047 384A 06A0  32         bl    @xfg99                ; Load FinalGROM cartridge image
     384C 2E80     
0048                                                   ; \ i tmp0 = Pointer to cartridge image
0049                                                   ; /
0050                       ;-------------------------------------------------------
0051                       ; Turn SAMS mapper off and exit to monitor
0052                       ;-------------------------------------------------------
0053 384E 020C  20         li    r12,>1e00             ; SAMS CRU address
     3850 1E00     
0054 3852 1E01  16         sbz   1                     ; Disable SAMS mapper
0055                                                   ; \ We keep the mapper off while
0056                                                   ; | running TI Basic or other external
0057                                                   ; / programs.
0058               
0059 3854 0420  42         blwp @0                     ; Return to monitor
     3856 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 3858 0649  14         dect  stack
0009 385A C64B  30         mov   r11,*stack            ; Save return address
0010 385C 0649  14         dect  stack
0011 385E C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3860 0649  14         dect  stack
0013 3862 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 3864 0649  14         dect  stack
0015 3866 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 3868 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     386A A22A     
0020               
0021 386C 0284  22         ci    tmp0,pane.focus.fb
     386E 0000     
0022 3870 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 3872 0284  22         ci    tmp0,pane.focus.cmdb
     3874 0001     
0025 3876 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 3878 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     387A FFCE     
0031 387C 06A0  32         bl    @cpu.crash            ; / Halt system.
     387E 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 3880 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3882 A70A     
     3884 832A     
0037 3886 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3888 2020     
0038 388A 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     388C 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 388E 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3890 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3892 2020     
0048 3894 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3896 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 3898 C160  34         mov   @tv.ruler.visible,tmp1
     389A A210     
0056 389C 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 389E 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     38A0 1000     
0058 38A2 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 38A4 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     38A6 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 38A8 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38AA A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38AC C160  34         mov   @tv.ruler.visible,tmp1
     38AE A210     
0071                                                   ; Ruler visible?
0072 38B0 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38B2 C160  34         mov   @cmdb.visible,tmp1
     38B4 A702     
0076 38B6 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38B8 FFFF     
0077 38BA 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38BC 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38BE FF00     
0081 38C0 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38C2 00F0     
0082 38C4 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38C6 A05A     
0083               
0084 38C8 C120  34         mov   @ramsat,tmp0
     38CA A056     
0085 38CC 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38CE 00FF     
0086 38D0 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38D2 0800     
0087 38D4 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38D6 A05E     
0088               
0089 38D8 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38DA 04C5  14         clr   tmp1
0095 38DC D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38DE A05D     
0096                                                   ; / by transparant color
0097 38E0 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38E2 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38E4 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38E6 24E6     
0104 38E8 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38EA A056     
     38EC 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38EE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38F0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38F2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38F6 0460  28         b     @slotok               ; Exit task
     38F8 2F3E     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38FA 0649  14         dect  stack
0009 38FC C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 38FE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3900 3084     
0014 3902 600C                   data bank6.rom        ; | i  p0 = bank address
0015 3904 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 3906 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 3908 C2F9  30         mov   *stack+,r11           ; Pop r11
0022 390A 0460  28         b     @slotok               ; Exit task
     390C 2F3E     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 390E C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3910 A22C     
0010 3912 1301  14         jeq   task.oneshot.exit
0011               
0012 3914 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3916 0460  28         b     @slotok                ; Exit task
     3918 2F3E     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 391A 0000             data  >0000,>8201           ; Cursor
     391C 8201     
0014 391E 0000             data  >0000,>8301           ; Current line indicator     <
     3920 8301     
0015 3922 0820             data  >0820,>8401           ; Current column indicator   v
     3924 8401     
0016               nosprite:
0017 3926 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               ***************************************************************
0020               * Tab positions
0021               ********|*****|*********************|**************************
0022               tv.tabs.table.lr:
0023 3928 0007             byte  0,7,12,25             ; \   Default tab positions as used
     392A 0C19     
0024 392C 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     392E 3B4F     
0025 3930 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3932 0000     
0026                                                   ; /   >ff means end-of-list.
0027               
0028               tv.tabs.table.rl:
0029 3934 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3936 2D1E     
0030 3938 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     393A 0700     
0031 393C FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     393E 0000     
0032                                                   ; /   >ff means end-of-list.
0033               
0034               ***************************************************************
0035               * Constants for numbers 0-10
0036               ********|*****|*********************|**************************
0037      2000     const.0       equ   w$0000          ; 0
0038      2002     const.1       equ   w$0001          ; 1
0039      2004     const.2       equ   w$0002          ; 2
0040 3940 0003     const.3       data  3               ; 3
0041      2006     const.4       equ   w$0004          ; 4
0042 3942 0005     const.5       data  5               ; 5
0043 3944 0006     const.6       data  6               ; 6
0044 3946 0007     const.7       data  7               ; 7
0045      2008     const.8       equ   w$0008          ; 8
0046 3948 0009     const.9       data  9               ; 9
0047 394A 000A     const.10      data  10              ; 10 ; A
0048 394C 000B     const.11      data  11              ; 11 ; B
0049 394E 000C     const.12      data  12              ; 12 ; C
0050 3950 000D     const.13      data  13              ; 13 ; D
0051 3952 000E     const.14      data  14              ; 14 ; E
0052 3954 000F     const.15      data  15              ; 15 ; F
0053 3956 0020     const.32      data  32              ; 32
0054 3958 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 395A 012F     txt.slash          stri '/'
0008                                  even
0009 395C 013A     txt.colon          stri ':'
0010                                  even
0011 395E 0520     txt.bottom         stri '  BOT'
     3960 2042     
     3962 4F54     
0012                                  even
0013 3964 044F     txt.ovrwrite       stri 'OVR '
     3966 5652     
     3968 20       
0014                                  even
0015 396A 0449     txt.insert         stri 'INS '
     396C 4E53     
     396E 20       
0016                                  even
0017 3970 0449     txt.autoinsert     stri 'INS+'
     3972 4E53     
     3974 2B       
0018                                  even
0019 3976 012A     txt.star           stri '*'
0020                                  even
0021 3978 0A4C     txt.loading        stri 'Loading...'
     397A 6F61     
     397C 6469     
     397E 6E67     
     3980 2E2E     
     3982 2E       
0022                                  even
0023 3984 0A53     txt.saving         stri 'Saving....'
     3986 6176     
     3988 696E     
     398A 672E     
     398C 2E2E     
     398E 2E       
0024                                  even
0025 3990 0C50     txt.printing       stri 'Printing....'
     3992 7269     
     3994 6E74     
     3996 696E     
     3998 672E     
     399A 2E2E     
     399C 2E       
0026                                  even
0027 399E 0C53     txt.searching      stri 'Searching...'
     39A0 6561     
     39A2 7263     
     39A4 6869     
     39A6 6E67     
     39A8 2E2E     
     39AA 2E       
0028                                  even
0029 39AC 1244     txt.block.del      stri 'Deleting block....'
     39AE 656C     
     39B0 6574     
     39B2 696E     
     39B4 6720     
     39B6 626C     
     39B8 6F63     
     39BA 6B2E     
     39BC 2E2E     
     39BE 2E       
0030                                  even
0031 39C0 1143     txt.block.copy     stri 'Copying block....'
     39C2 6F70     
     39C4 7969     
     39C6 6E67     
     39C8 2062     
     39CA 6C6F     
     39CC 636B     
     39CE 2E2E     
     39D0 2E2E     
0032                                  even
0033 39D2 104D     txt.block.move     stri 'Moving block....'
     39D4 6F76     
     39D6 696E     
     39D8 6720     
     39DA 626C     
     39DC 6F63     
     39DE 6B2E     
     39E0 2E2E     
     39E2 2E       
0034                                  even
0035 39E4 1053     txt.block.save     stri 'Saving block....'
     39E6 6176     
     39E8 696E     
     39EA 6720     
     39EC 626C     
     39EE 6F63     
     39F0 6B2E     
     39F2 2E2E     
     39F4 2E       
0036                                  even
0037 39F6 1843     txt.block.clip     stri 'Copying to clipboard....'
     39F8 6F70     
     39FA 7969     
     39FC 6E67     
     39FE 2074     
     3A00 6F20     
     3A02 636C     
     3A04 6970     
     3A06 626F     
     3A08 6172     
     3A0A 642E     
     3A0C 2E2E     
     3A0E 2E       
0038                                  even
0039 3A10 1250     txt.block.print    stri 'Printing block....'
     3A12 7269     
     3A14 6E74     
     3A16 696E     
     3A18 6720     
     3A1A 626C     
     3A1C 6F63     
     3A1E 6B2E     
     3A20 2E2E     
     3A22 2E       
0040                                  even
0041 3A24 1343     txt.clearmem       stri 'Clearing memory....'
     3A26 6C65     
     3A28 6172     
     3A2A 696E     
     3A2C 6720     
     3A2E 6D65     
     3A30 6D6F     
     3A32 7279     
     3A34 2E2E     
     3A36 2E2E     
0042                                  even
0043 3A38 1352     txt.readdir        stri 'Reading catalog....'
     3A3A 6561     
     3A3C 6469     
     3A3E 6E67     
     3A40 2063     
     3A42 6174     
     3A44 616C     
     3A46 6F67     
     3A48 2E2E     
     3A4A 2E2E     
0044                                  even
0045 3A4C 0E4C     txt.done.load      stri 'Load completed'
     3A4E 6F61     
     3A50 6420     
     3A52 636F     
     3A54 6D70     
     3A56 6C65     
     3A58 7465     
     3A5A 64       
0046                                  even
0047 3A5C 1049     txt.done.insert    stri 'Insert completed'
     3A5E 6E73     
     3A60 6572     
     3A62 7420     
     3A64 636F     
     3A66 6D70     
     3A68 6C65     
     3A6A 7465     
     3A6C 64       
0048                                  even
0049 3A6E 1041     txt.done.append    stri 'Append completed'
     3A70 7070     
     3A72 656E     
     3A74 6420     
     3A76 636F     
     3A78 6D70     
     3A7A 6C65     
     3A7C 7465     
     3A7E 64       
0050                                  even
0051 3A80 0E53     txt.done.save      stri 'Save completed'
     3A82 6176     
     3A84 6520     
     3A86 636F     
     3A88 6D70     
     3A8A 6C65     
     3A8C 7465     
     3A8E 64       
0052                                  even
0053 3A90 0E43     txt.done.copy      stri 'Copy completed'
     3A92 6F70     
     3A94 7920     
     3A96 636F     
     3A98 6D70     
     3A9A 6C65     
     3A9C 7465     
     3A9E 64       
0054                                  even
0055 3AA0 0F50     txt.done.print     stri 'Print completed'
     3AA2 7269     
     3AA4 6E74     
     3AA6 2063     
     3AA8 6F6D     
     3AAA 706C     
     3AAC 6574     
     3AAE 6564     
0056                                  even
0057 3AB0 1044     txt.done.delete    stri 'Delete completed'
     3AB2 656C     
     3AB4 6574     
     3AB6 6520     
     3AB8 636F     
     3ABA 6D70     
     3ABC 6C65     
     3ABE 7465     
     3AC0 64       
0058                                  even
0059 3AC2 0F43     txt.done.clipboard stri 'Clipboard saved'
     3AC4 6C69     
     3AC6 7062     
     3AC8 6F61     
     3ACA 7264     
     3ACC 2073     
     3ACE 6176     
     3AD0 6564     
0060                                  even
0061 3AD2 0D43     txt.done.clipdev   stri 'Clipboard set'
     3AD4 6C69     
     3AD6 7062     
     3AD8 6F61     
     3ADA 7264     
     3ADC 2073     
     3ADE 6574     
0062                                  even
0063 3AE0 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3AE2 7574     
     3AE4 6F69     
     3AE6 6E73     
     3AE8 6572     
     3AEA 743A     
     3AEC 206F     
     3AEE 6E       
0064                                  even
0065 3AF0 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3AF2 7574     
     3AF4 6F69     
     3AF6 6E73     
     3AF8 6572     
     3AFA 743A     
     3AFC 206F     
     3AFE 6666     
0066                                  even
0067 3B00 0B46     txt.fastmode       stri 'Fastmode IO'
     3B02 6173     
     3B04 746D     
     3B06 6F64     
     3B08 6520     
     3B0A 494F     
0068                                  even
0069 3B0C 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3B0E 6F20     
     3B10 4465     
     3B12 7669     
     3B14 6365     
     3B16 2F44     
     3B18 6973     
     3B1A 6B2F     
     3B1C 5061     
     3B1E 7468     
0070                                  even
0071 3B20 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3B22 6E63     
     3B24 7275     
     3B26 6E63     
     3B28 6869     
     3B2A 6E67     
     3B2C 2054     
     3B2E 4920     
     3B30 4261     
     3B32 7369     
     3B34 6320     
     3B36 6C69     
     3B38 6E65     
     3B3A 2E2E     
     3B3C 2E2E     
0072                                  even
0073 3B3E 026B     txt.kb             stri 'kb'
     3B40 62       
0074                                  even
0075 3B42 054C     txt.lines          stri 'Lines'
     3B44 696E     
     3B46 6573     
0076                                  even
0077 3B48 0A5B     txt.newfile        stri '[New file]'
     3B4A 4E65     
     3B4C 7720     
     3B4E 6669     
     3B50 6C65     
     3B52 5D       
0078                                  even
0079 3B54 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B56 5449     
     3B58 2042     
     3B5A 6173     
     3B5C 6963     
     3B5E 2023     
     3B60 315D     
0080                                  even
0081 3B62 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B64 5449     
     3B66 2042     
     3B68 6173     
     3B6A 6963     
     3B6C 2023     
     3B6E 325D     
0082                                  even
0083 3B70 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B72 5449     
     3B74 2042     
     3B76 6173     
     3B78 6963     
     3B7A 2023     
     3B7C 335D     
0084                                  even
0085 3B7E 0444     txt.filetype.dv80  stri 'DV80'
     3B80 5638     
     3B82 30       
0086                                  even
0087 3B84 034D     txt.m1             stri 'M1='
     3B86 313D     
0088                                  even
0089 3B88 034D     txt.m2             stri 'M2='
     3B8A 323D     
0090                                  even
0091 3B8C 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3B8E 392D     
     3B90 4D65     
     3B92 6E75     
     3B94 2020     
     3B96 5E48     
     3B98 2D48     
     3B9A 656C     
     3B9C 70       
0092                                  even
0093 3B9E 1C46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic# '
     3BA0 392D     
     3BA2 4D65     
     3BA4 6E75     
     3BA6 2020     
     3BA8 5E48     
     3BAA 2D48     
     3BAC 656C     
     3BAE 7020     
     3BB0 2046     
     3BB2 302D     
     3BB4 4261     
     3BB6 7369     
     3BB8 6323     
     3BBA 20       
0094                                  even
0095 3BBC 2B46     txt.keys.defaultc  stri 'F9-Menu  ^H-Help  ^,=Prev  ^.=Next  ^/=Done'
     3BBE 392D     
     3BC0 4D65     
     3BC2 6E75     
     3BC4 2020     
     3BC6 5E48     
     3BC8 2D48     
     3BCA 656C     
     3BCC 7020     
     3BCE 205E     
     3BD0 2C3D     
     3BD2 5072     
     3BD4 6576     
     3BD6 2020     
     3BD8 5E2E     
     3BDA 3D4E     
     3BDC 6578     
     3BDE 7420     
     3BE0 205E     
     3BE2 2F3D     
     3BE4 446F     
     3BE6 6E65     
0096                                  even
0097 3BE8 3746     txt.keys.defaultd  stri 'F9-Menu  ^H-Help  F0-Basic#   ^,=Prev  ^.=Next  ^/=Done'
     3BEA 392D     
     3BEC 4D65     
     3BEE 6E75     
     3BF0 2020     
     3BF2 5E48     
     3BF4 2D48     
     3BF6 656C     
     3BF8 7020     
     3BFA 2046     
     3BFC 302D     
     3BFE 4261     
     3C00 7369     
     3C02 6323     
     3C04 2020     
     3C06 205E     
     3C08 2C3D     
     3C0A 5072     
     3C0C 6576     
     3C0E 2020     
     3C10 5E2E     
     3C12 3D4E     
     3C14 6578     
     3C16 7420     
     3C18 205E     
     3C1A 2F3D     
     3C1C 446F     
     3C1E 6E65     
0098                                  even
0099               
0100 3C20 3A46     txt.keys.block     stri 'F9-Exit  ^Copy  ^Move  ^Del  ^Save  ^Print  ^1-3=Clipboard'
     3C22 392D     
     3C24 4578     
     3C26 6974     
     3C28 2020     
     3C2A 5E43     
     3C2C 6F70     
     3C2E 7920     
     3C30 205E     
     3C32 4D6F     
     3C34 7665     
     3C36 2020     
     3C38 5E44     
     3C3A 656C     
     3C3C 2020     
     3C3E 5E53     
     3C40 6176     
     3C42 6520     
     3C44 205E     
     3C46 5072     
     3C48 696E     
     3C4A 7420     
     3C4C 205E     
     3C4E 312D     
     3C50 333D     
     3C52 436C     
     3C54 6970     
     3C56 626F     
     3C58 6172     
     3C5A 64       
0101                                  even
0102 3C5C 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C5E 392D     
     3C60 4261     
     3C62 636B     
     3C64 2020     
     3C66 4635     
     3C68 2D41     
     3C6A 7574     
     3C6C 6F55     
     3C6E 6E70     
     3C70 6163     
     3C72 6B20     
     3C74 2053     
     3C76 5041     
     3C78 4345     
     3C7A 2D55     
     3C7C 6E70     
     3C7E 6163     
     3C80 6B20     
     3C82 7072     
     3C84 6F67     
     3C86 7261     
     3C88 6D       
0103                                  even
0104 3C8A 020E     txt.alpha.down     data >020e,>0f00
     3C8C 0F00     
0105 3C8E 0110     txt.vertline       data >0110
0106 3C90 011C     txt.keymarker      byte 1,28
0107                                  even
0108 3C92 0120     txt.ws1            stri ' '
0109                                  even
0110 3C94 0220     txt.ws2            stri '  '
     3C96 20       
0111                                  even
0112 3C98 0420     txt.ws4            stri '    '
     3C9A 2020     
     3C9C 20       
0113                                  even
0114      3C98     txt.filetype.none  equ txt.ws4
0115               
0116 3C9E 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CA0 4920     
     3CA2 4261     
     3CA4 7369     
     3CA6 6320     
     3CA8 6D6F     
     3CAA 6465     
     3CAC 2061     
     3CAE 6374     
     3CB0 6976     
     3CB2 652E     
0117                                  even
0118               ;--------------------------------------------------------------
0119               ; Strings for error line pane
0120               ;--------------------------------------------------------------
0121 3CB4 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CB6 6169     
     3CB8 6C65     
     3CBA 6420     
     3CBC 6C6F     
     3CBE 6164     
     3CC0 696E     
     3CC2 6720     
     3CC4 6669     
     3CC6 6C65     
     3CC8 3A20     
0122                                  even
0123 3CCA 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CCC 6169     
     3CCE 6C65     
     3CD0 6420     
     3CD2 7361     
     3CD4 7669     
     3CD6 6E67     
     3CD8 2066     
     3CDA 696C     
     3CDC 653A     
     3CDE 20       
0124                                  even
0125 3CE0 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CE2 6169     
     3CE4 6C65     
     3CE6 6420     
     3CE8 7072     
     3CEA 696E     
     3CEC 7469     
     3CEE 6E67     
     3CF0 2074     
     3CF2 6F20     
     3CF4 6465     
     3CF6 7669     
     3CF8 6365     
     3CFA 3A20     
0126                                  even
0127 3CFC 164E     txt.io.nofile      stri 'No filename specified.'
     3CFE 6F20     
     3D00 6669     
     3D02 6C65     
     3D04 6E61     
     3D06 6D65     
     3D08 2073     
     3D0A 7065     
     3D0C 6369     
     3D0E 6669     
     3D10 6564     
     3D12 2E       
0128                                  even
0129 3D14 0B49     txt.memfull.load   stri 'Index full.'
     3D16 6E64     
     3D18 6578     
     3D1A 2066     
     3D1C 756C     
     3D1E 6C2E     
0130                                  even
0131 3D20 2C43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range'
     3D22 6F70     
     3D24 792F     
     3D26 4D6F     
     3D28 7665     
     3D2A 2074     
     3D2C 6172     
     3D2E 6765     
     3D30 7420     
     3D32 6D75     
     3D34 7374     
     3D36 2062     
     3D38 6520     
     3D3A 6F75     
     3D3C 7473     
     3D3E 6964     
     3D40 6520     
     3D42 4D31     
     3D44 2D4D     
     3D46 3220     
     3D48 7261     
     3D4A 6E67     
     3D4C 65       
0132                                  even
0133               ;--------------------------------------------------------------
0134               ; Strings for command buffer
0135               ;--------------------------------------------------------------
0136 3D4E 013E     txt.cmdb.prompt    stri '>'
0137                                  even
0138 3D50 0D43     txt.colorscheme    stri 'Color scheme:'
     3D52 6F6C     
     3D54 6F72     
     3D56 2073     
     3D58 6368     
     3D5A 656D     
     3D5C 653A     
0139                                  even
0140               ;--------------------------------------------------------------
0141               ; Strings for command buffer
0142               ;--------------------------------------------------------------
0143 3D5E 0102     txt.picker.icon1   byte 1,2
0144                                  even
0145 3D60 0103     txt.picker.icon2   byte 1,3
0146                                  even
0147               
0148               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D62 0650     def.printer.fname   stri 'PI.PIO'
     3D64 492E     
     3D66 5049     
     3D68 4F       
0008 3D69   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D6A 4453     
     3D6C 4B31     
     3D6E 2E43     
     3D70 4C49     
     3D72 50       
0009                                   even
0010 3D74 0954     def.clip.fname.b    stri 'TIPI.CLIP'
     3D76 4950     
     3D78 492E     
     3D7A 434C     
     3D7C 4950     
0011                                   even
0012 3D7E 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3D80 4453     
     3D82 4B2C     
     3D84 4844     
     3D86 582C     
     3D88 4944     
     3D8A 452C     
     3D8C 5049     
     3D8E 2E2C     
     3D90 5049     
     3D92 4F2C     
     3D94 5449     
     3D96 5049     
     3D98 2E2C     
     3D9A 5244     
     3D9C 2C53     
     3D9E 4353     
     3DA0 2C53     
     3DA2 4444     
     3DA4 2C57     
     3DA6 4453     
     3DA8 2C52     
     3DAA 5332     
     3DAC 3332     
0013                                   even
0014 3DAE 0546     def.fg99.fname      stri 'FCMDC'
     3DB0 434D     
     3DB2 4443     
0015                                   even
                   < ram.resident.asm
                   < stevie_b2.asm
0052                       ;------------------------------------------------------
0053                       ; Activate bank 1 and branch to  >6036
0054                       ;------------------------------------------------------
0055 3DB4 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3DB6 6002     
0056               
0060               
0061 3DB8 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3DBA 6046     
0062               ***************************************************************
0063               * Step 3: Include modules
0064               ********|*****|*********************|**************************
0065               main:
0066                       aorg  kickstart.code2       ; >6046
0067 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0068                       ;-----------------------------------------------------------------------
0069                       ; File handling
0070                       ;-----------------------------------------------------------------------
0071                       copy  "fh.file.read.mem.asm"     ; Read file into memory
     **** ****     > fh.file.read.mem.asm
0001               * FILE......: fh.file.read.mem.asm
0002               * Purpose...: Read any kind of file into memory
0003               
0004               ***************************************************************
0005               * fh.file.read.mem
0006               * Read any kind of file into memory
0007               ***************************************************************
0008               *  bl   @fh.file.read.mem
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed filename descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Read line from file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = Pointer to callback function "Memory full"
0017               * parm7 = Destination RAM address
0018               * parm8 = PAB template header address
0019               * parm9 = File type/mode (in LSB), becomes PAB byte 1
0020               *
0021               * Callbacks can be skipped by passing >0000 as pointer.
0022               *--------------------------------------------------------------
0023               * OUTPUT
0024               * none
0025               *--------------------------------------------------------------
0026               * Register usage
0027               * tmp0, tmp1, tmp2, tmp3
0028               *--------------------------------------------------------------
0029               * Remarks
0030               * File content processing expected to be handled in callback.
0031               * It is possible to stop further processing file by setting the
0032               * circuit-breaker flag "fh.circbreaker" from within the callback in @parm3
0033               *
0034               * Might replace "fh.file.read.edb" someday, with SAMS and editor
0035               * buffer handling purely done in callback code.
0036               ********|*****|*********************|**************************
0037               fh.file.read.mem:
0038 604A 0649  14         dect  stack
0039 604C C64B  30         mov   r11,*stack            ; Save return address
0040 604E 0649  14         dect  stack
0041 6050 C644  30         mov   tmp0,*stack           ; Push tmp0
0042 6052 0649  14         dect  stack
0043 6054 C645  30         mov   tmp1,*stack           ; Push tmp1
0044 6056 0649  14         dect  stack
0045 6058 C646  30         mov   tmp2,*stack           ; Push tmp2
0046 605A 0649  14         dect  stack
0047 605C C647  30         mov   tmp3,*stack           ; Push tmp3
0048                       ;------------------------------------------------------
0049                       ; Initialisation
0050                       ;------------------------------------------------------
0051 605E 04E0  34         clr   @fh.records           ; Reset records counter
     6060 A43C     
0052 6062 04E0  34         clr   @fh.counter           ; Clear internal counter
     6064 A442     
0053 6066 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     6068 A438     
0054 606A 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     606C A43A     
0055                       ;------------------------------------------------------
0056                       ; Save parameters / callback functions
0057                       ;------------------------------------------------------
0058 606E 0204  20         li    tmp0,fh.fopmode.readfile
     6070 0001     
0059                                                   ; Going to read a file
0060 6072 C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     6074 A44A     
0061               
0062 6076 C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     6078 A006     
     607A A444     
0063 607C C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     607E A008     
     6080 A450     
0064 6082 C820  54         mov   @parm3,@fh.callback2  ; Callback function "Read line from file"
     6084 A00A     
     6086 A452     
0065 6088 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close file"
     608A A00C     
     608C A454     
0066 608E C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     6090 A00E     
     6092 A456     
0067 6094 C820  54         mov   @parm6,@fh.callback5  ; Callback function "Memory full error"
     6096 A010     
     6098 A458     
0068 609A C820  54         mov   @parm7,@fh.ram.ptr    ; Set pointer to RAM destination
     609C A012     
     609E A45C     
0069 60A0 C820  54         mov   @parm8,@fh.pabtpl.ptr ; Set pointer to PAB template in ROM/RAM
     60A2 A014     
     60A4 A466     
0070 60A6 C820  54         mov   @parm9,@fh.ftype.init ; File type/mode (in LSB)
     60A8 A016     
     60AA A45A     
0071                       ;------------------------------------------------------
0072                       ; Loading file in destination memory
0073                       ;------------------------------------------------------
0074               fh.file.read.mem.newfile:
0075 60AC 0720  34         seto  @fh.temp1             ; Set "load file" flag
     60AE A460     
0076 60B0 04E0  34         clr   @fh.circbreaker       ; Reset "circuit breaker" flag
     60B2 A46A     
0077                       ;------------------------------------------------------
0078                       ; Asserts
0079                       ;------------------------------------------------------
0080               fh.file.read.mem.assert1:
0081 60B4 C120  34         mov   @fh.callback1,tmp0
     60B6 A450     
0082 60B8 1306  14         jeq   fh.file.read.mem.assert2
0083 60BA 0284  22         ci    tmp0,>6000            ; Insane address ?
     60BC 6000     
0084 60BE 1128  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0085 60C0 0284  22         ci    tmp0,>7fff            ; Insane address ?
     60C2 7FFF     
0086 60C4 1525  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0087               
0088               fh.file.read.mem.assert2
0089 60C6 C120  34         mov   @fh.callback2,tmp0
     60C8 A452     
0090 60CA 1306  14         jeq   fh.file.read.mem.assert3
0091 60CC 0284  22         ci    tmp0,>6000            ; Insane address ?
     60CE 6000     
0092 60D0 111F  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0093 60D2 0284  22         ci    tmp0,>7fff            ; Insane address ?
     60D4 7FFF     
0094 60D6 151C  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0095               
0096               fh.file.read.mem.assert3:
0097 60D8 C120  34         mov   @fh.callback3,tmp0
     60DA A454     
0098 60DC 1306  14         jeq   fh.file.read.mem.assert4
0099 60DE 0284  22         ci    tmp0,>6000            ; Insane address ?
     60E0 6000     
0100 60E2 1116  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0101 60E4 0284  22         ci    tmp0,>7fff            ; Insane address ?
     60E6 7FFF     
0102 60E8 1513  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0103               
0104               fh.file.read.mem.assert4:
0105 60EA C120  34         mov   @fh.callback4,tmp0
     60EC A456     
0106 60EE 1306  14         jeq   fh.file.read.mem.assert5
0107 60F0 0284  22         ci    tmp0,>6000            ; Insane address ?
     60F2 6000     
0108 60F4 110D  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0109 60F6 0284  22         ci    tmp0,>7fff            ; Insane address ?
     60F8 7FFF     
0110 60FA 150A  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0111               
0112               fh.file.read.mem.assert5:
0113 60FC C120  34         mov   @fh.callback5,tmp0
     60FE A458     
0114 6100 130B  14         jeq   fh.file.read.mem.load1
0115 6102 0284  22         ci    tmp0,>6000            ; Insane address ?
     6104 6000     
0116 6106 1104  14         jlt   fh.file.read.mem.crsh ; Yes, crash!
0117 6108 0284  22         ci    tmp0,>7fff            ; Insane address ?
     610A 7FFF     
0118 610C 1501  14         jgt   fh.file.read.mem.crsh ; Yes, crash!
0119               
0120 610E 1004  14         jmp   fh.file.read.mem.load1
0121                                                   ; All checks passed, continue
0122                       ;------------------------------------------------------
0123                       ; Check failed, crash CPU!
0124                       ;------------------------------------------------------
0125               fh.file.read.mem.crsh:
0126 6110 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6112 FFCE     
0127 6114 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6116 2026     
0128                       ;------------------------------------------------------
0129                       ; Callback "Before Open file"
0130                       ;------------------------------------------------------
0131               fh.file.read.mem.load1:
0132 6118 C120  34         mov   @fh.callback1,tmp0
     611A A450     
0133 611C 1301  14         jeq   fh.file.read.mem.pabheader
0134                                                   ; Skip callback
0135 611E 0694  24         bl    *tmp0                 ; Run callback function
0136                       ;------------------------------------------------------
0137                       ; Copy PAB header to VDP
0138                       ;------------------------------------------------------
0139               fh.file.read.mem.pabheader:
0140 6120 0204  20         li    tmp0,fh.vpab          ; VDP destination
     6122 1400     
0141 6124 C160  34         mov   @fh.pabtpl.ptr,tmp1   ; PAB header source address
     6126 A466     
0142 6128 0206  20         li    tmp2,9                ; 9 bytes to copy
     612A 0009     
0143               
0144 612C 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     612E 24EC     
0145                                                   ; \ i  tmp0 = VDP destination
0146                                                   ; | i  tmp1 = CPU source
0147                                                   ; / i  tmp2 = Number of bytes to copy
0148                       ;------------------------------------------------------
0149                       ; Append file descriptor to PAB header in VDP
0150                       ;------------------------------------------------------
0151 6130 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     6132 1409     
0152 6134 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     6136 A444     
0153 6138 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0154 613A 0986  32         srl   tmp2,8                ; Right justify
0155 613C 0586  14         inc   tmp2                  ; Include length byte as well
0156               
0157 613E 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     6140 24EC     
0158                                                   ; \ i  tmp0 = VDP destination
0159                                                   ; | i  tmp1 = CPU source
0160                                                   ; / i  tmp2 = Number of bytes to copy
0161                       ;------------------------------------------------------
0162                       ; Open file
0163                       ;------------------------------------------------------
0164 6142 0200  20         li    r0,fh.vpab            ; Address of PAB in VRAM
     6144 1400     
0165 6146 C060  34         mov   @fh.ftype.init,r1     ; File type/mode (in LSB)
     6148 A45A     
0166               
0167 614A 06A0  32         bl    @xfile.open           ; Open file (register version)
     614C 2DC0     
0168                                                   ; \ i  r0 = Address of PAB in VRAM
0169                                                   ; / i  r1 = File type/mode (in lSB)
0170               
0171 614E 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     6150 201C     
0172 6152 1602  14         jne   fh.file.read.mem.record
0173 6154 0460  28         b     @fh.file.read.mem.error
     6156 61AE     
0174                                                   ; Yes, IO error occured
0175                       ;------------------------------------------------------
0176                       ; Step 2: Read file record
0177                       ;------------------------------------------------------
0178               fh.file.read.mem.record:
0179 6158 05A0  34         inc   @fh.records           ; Update counter
     615A A43C     
0180 615C 04E0  34         clr   @fh.reclen            ; Reset record length
     615E A43E     
0181                       ;------------------------------------------------------
0182                       ; 2a: Read file record
0183                       ;------------------------------------------------------
0184 6160 06A0  32 !       bl    @file.record.read     ; Read file record
     6162 2DEC     
0185 6164 1400                   data fh.vpab          ; \ i  p0 file  = Address of PAB in VDP RAM
0186                                                   ; |           (without +9 offset!)
0187                                                   ; | o  tmp0 = Status byte
0188                                                   ; | o  tmp1 = Bytes read
0189                                                   ; | o  tmp2 = Status register contents
0190                                                   ; /           upon DSRLNK return
0191               
0192 6166 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     6168 A438     
0193 616A C805  38         mov   tmp1,@fh.reclen       ; Save bytes read
     616C A43E     
0194 616E C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     6170 A43A     
0195                       ;------------------------------------------------------
0196                       ; 2b: Check if a file error occured
0197                       ;------------------------------------------------------
0198               fh.file.read.mem.check_fioerr:
0199 6172 C1A0  34         mov   @fh.ioresult,tmp2
     6174 A43A     
0200 6176 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     6178 201C     
0201 617A 1602  14         jne   fh.file.read.mem.process
0202                                                   ; No, goto (3)
0203 617C 0460  28         b     @fh.file.read.mem.error
     617E 61AE     
0204                                                   ; Yes, so handle file error
0205                       ;------------------------------------------------------
0206                       ; 3: Process record/line
0207                       ;------------------------------------------------------
0208               fh.file.read.mem.process:
0209 6180 0204  20         li    tmp0,fh.vrecbuf       ; VDP source address
     6182 2000     
0210 6184 C160  34         mov   @fh.ram.ptr,tmp1      ; RAM target address
     6186 A45C     
0211 6188 C1A0  34         mov   @fh.reclen,tmp2       ; Number of bytes to copy
     618A A43E     
0212                       ;------------------------------------------------------
0213                       ; 3a: Set length of line in CPU editor buffer
0214                       ;------------------------------------------------------
0215 618C 04D5  26         clr   *tmp1                 ; Clear word before string
0216 618E 0585  14         inc   tmp1                  ; Adjust position for length byte string
0217 6190 DD60  48         movb  @fh.reclen+1,*tmp1+   ; Put line length byte before string
     6192 A43F     
0218                       ;------------------------------------------------------
0219                       ; 3b: Copy line from VDP to CPU editor buffer
0220                       ;------------------------------------------------------
0221               fh.file.read.mem.vdp2cpu:
0222                       ;
0223                       ; Executed for devices that need their disk buffer in VDP memory
0224                       ; (TI Disk Controller, tipi, nanopeb, ...).
0225                       ;
0226 6194 06A0  32         bl    @xpyv2m               ; Copy memory block from VDP to CPU
     6196 251E     
0227                                                   ; \ i  tmp0 = VDP source address
0228                                                   ; | i  tmp1 = RAM target address
0229                                                   ; / i  tmp2 = Bytes to copy
0230                       ;------------------------------------------------------
0231                       ; Step 5: Callback "Read line from file"
0232                       ;------------------------------------------------------
0233               fh.file.read.mem.display:
0234 6198 C120  34         mov   @fh.callback2,tmp0    ; Get pointer to callback
     619A A452     
0235 619C 1301  14         jeq   fh.file.read.mem.next ; Skip callback
0236 619E 0694  24         bl    *tmp0                 ; Run callback function
0237                       ;------------------------------------------------------
0238                       ; 5a: Prepare for next record
0239                       ;------------------------------------------------------
0240               fh.file.read.mem.next:
0241 61A0 C120  34         mov   @fh.circbreaker,tmp0  ; Get circuit-breaker flag
     61A2 A46A     
0242 61A4 1612  14         jne   fh.file.read.mem.eof  ; Treat EOF if circuit-breaker set
0243                       ;------------------------------------------------------
0244                       ; 5b: Next record
0245                       ;------------------------------------------------------
0246 61A6 05A0  34         inc   @fh.line              ; lines/records++
     61A8 A45E     
0247 61AA 0460  28         b     @fh.file.read.mem.record
     61AC 6158     
0248                                                   ; Next record
0249                       ;------------------------------------------------------
0250                       ; Error handler
0251                       ;------------------------------------------------------
0252               fh.file.read.mem.error:
0253 61AE C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     61B0 A438     
0254 61B2 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0255 61B4 0284  22         ci    tmp0,io.err.eof       ; EOF reached ?
     61B6 0005     
0256 61B8 1308  14         jeq   fh.file.read.mem.eof  ; All good. File closed by DSRLNK
0257                       ;------------------------------------------------------
0258                       ; File error occured
0259                       ;------------------------------------------------------
0260 61BA 06A0  32         bl    @file.close           ; Close file
     61BC 2DE0     
0261 61BE 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0262                                                   ; /
0263                       ;------------------------------------------------------
0264                       ; Callback "File I/O error"
0265                       ;------------------------------------------------------
0266 61C0 C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     61C2 A456     
0267 61C4 1309  14         jeq   fh.file.read.mem.exit ; Skip callback
0268 61C6 0694  24         bl    *tmp0                 ; Run callback function
0269 61C8 1007  14         jmp   fh.file.read.mem.exit
0270                       ;------------------------------------------------------
0271                       ; End-Of-File reached
0272                       ;------------------------------------------------------
0273               fh.file.read.mem.eof:
0274 61CA 06A0  32         bl    @file.close           ; Close file
     61CC 2DE0     
0275 61CE 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0276                                                   ; /
0277                       ;------------------------------------------------------
0278                       ; Callback "Close file"
0279                       ;------------------------------------------------------
0280               fh.file.read.mem.eof.callback:
0281 61D0 C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     61D2 A454     
0282 61D4 1301  14         jeq   fh.file.read.mem.exit ; Skip callback
0283 61D6 0694  24         bl    *tmp0                 ; Run callback function
0284               *--------------------------------------------------------------
0285               * Exit
0286               *--------------------------------------------------------------
0287               fh.file.read.mem.exit:
0288 61D8 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     61DA A44A     
0289               
0290 61DC 06A0  32         bl    @film
     61DE 2236     
0291 61E0 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     61E2 0000     
     61E4 0060     
0292               
0293 61E6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0294 61E8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0295 61EA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0296 61EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 61EE C2F9  30         mov   *stack+,r11           ; Pop R11
0298 61F0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0072                       copy  "fh.file.read.edb.asm"     ; Read file to editor buffer
     **** ****     > fh.file.read.edb.asm
0001               * FILE......: fh.file.read.edb.asm
0002               * Purpose...: File reader module
0003               
0004               ***************************************************************
0005               * fh.file.read.edb
0006               * Read or insert file into editor buffer
0007               ***************************************************************
0008               *  bl   @fh.file.read.edb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed filename descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Read line from file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = Pointer to callback function "Memory full"
0017               * parm7 = Line number to insert file at or >FFFF if new file.
0018               * parm8 = Work mode
0019               *
0020               * Callbacks can be skipped by passing >0000 as pointer.
0021               *--------------------------------------------------------------
0022               * OUTPUT
0023               * none
0024               *--------------------------------------------------------------
0025               * Register usage
0026               * tmp0, tmp1, tmp2, tmp3
0027               *--------------------------------------------------------------
0028               * Remarks
0029               * @fh.temp1 =  >ffff if loading new file into editor buffer
0030               *              >0000 if inserting file at line in editor buffer
0031               ********|*****|*********************|**************************
0032               fh.file.read.edb:
0033 61F2 0649  14         dect  stack
0034 61F4 C64B  30         mov   r11,*stack            ; Save return address
0035 61F6 0649  14         dect  stack
0036 61F8 C644  30         mov   tmp0,*stack           ; Push tmp0
0037 61FA 0649  14         dect  stack
0038 61FC C645  30         mov   tmp1,*stack           ; Push tmp1
0039 61FE 0649  14         dect  stack
0040 6200 C646  30         mov   tmp2,*stack           ; Push tmp2
0041 6202 0649  14         dect  stack
0042 6204 C647  30         mov   tmp3,*stack           ; Push tmp3
0043               
0044 6206 0649  14         dect  stack
0045 6208 C660  46         mov   @fh.offsetopcode,*stack
     620A A44E     
0046                                                   ; Push FastMode IO status
0047                       ;------------------------------------------------------
0048                       ; Initialisation
0049                       ;------------------------------------------------------
0050 620C 04E0  34         clr   @fh.records           ; Reset records counter
     620E A43C     
0051 6210 04E0  34         clr   @fh.counter           ; Clear internal counter
     6212 A442     
0052 6214 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     6216 A438     
0053 6218 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     621A A43A     
0054               
0055 621C C120  34         mov   @edb.top.ptr,tmp0
     621E A500     
0056 6220 06A0  32         bl    @xsams.page.get       ; Get SAMS page
     6222 259E     
0057                                                   ; \ i  tmp0  = Memory address
0058                                                   ; | o  waux1 = SAMS page number
0059                                                   ; / o  waux2 = Address of SAMS register
0060               
0061 6224 C120  34         mov   @edb.sams.hipage,tmp0 ; \
     6226 A51C     
0062 6228 C804  38         mov   tmp0,@fh.sams.hipage  ; | Set current SAMS page to highest page
     622A A448     
0063                                                   ; / used by Editor Buffer
0064               
0065 622C C804  38         mov   tmp0,@tv.sams.c000    ; Sync SAMS window. Important!
     622E A208     
0066               
0067 6230 C160  34         mov   @edb.top.ptr,tmp1
     6232 A500     
0068 6234 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6236 25D6     
0069                                                   ; \ i  tmp0 = SAMS page number
0070                                                   ; / i  tmp1 = Memory address
0071                       ;------------------------------------------------------
0072                       ; Save parameters / callback functions
0073                       ;------------------------------------------------------
0074 6238 0204  20         li    tmp0,fh.fopmode.readfile
     623A 0001     
0075                                                   ; We are going to read a file
0076 623C C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     623E A44A     
0077               
0078 6240 C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     6242 A006     
     6244 A444     
0079 6246 C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     6248 A008     
     624A A450     
0080 624C C820  54         mov   @parm3,@fh.callback2  ; Callback function "Read line from file"
     624E A00A     
     6250 A452     
0081 6252 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close file"
     6254 A00C     
     6256 A454     
0082 6258 C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     625A A00E     
     625C A456     
0083 625E C820  54         mov   @parm6,@fh.callback5  ; Callback function "Memory full error"
     6260 A010     
     6262 A458     
0084 6264 C820  54         mov   @parm8,@fh.workmode   ; Work mode (used in callbacks)
     6266 A014     
     6268 A45A     
0085                       ;------------------------------------------------------
0086                       ; Determine if inserting file or loading new file
0087                       ;------------------------------------------------------
0088 626A C120  34         mov   @parm7,tmp0
     626C A012     
0089 626E 0284  22         ci    tmp0,>ffff            ; Load file?
     6270 FFFF     
0090 6272 1309  14         jeq   fh.file.read.edb.newfile
0091               
0092 6274 04E0  34         clr   @fh.temp1             ; Set flag "insert file"
     6276 A460     
0093 6278 04E0  34         clr   @fh.temp2             ; Not used
     627A A462     
0094 627C 04E0  34         clr   @fh.temp3             ; Not used
     627E A464     
0095               
0096 6280 C804  38         mov   tmp0,@fh.line         ; Line to insert file at
     6282 A45E     
0097 6284 1008  14         jmp   fh.file.read.edb.assert1
0098                       ;------------------------------------------------------
0099                       ; Loading new file into editor buffer
0100                       ;------------------------------------------------------
0101               fh.file.read.edb.newfile:
0102 6286 04E0  34         clr   @fh.line              ; New file
     6288 A45E     
0103 628A 0720  34         seto  @fh.temp1             ; Set flag "load file"
     628C A460     
0104 628E 04E0  34         clr   @fh.temp2             ; Not used
     6290 A462     
0105 6292 04E0  34         clr   @fh.temp3             ; Not used
     6294 A464     
0106                       ;------------------------------------------------------
0107                       ; Asserts
0108                       ;------------------------------------------------------
0109               fh.file.read.edb.assert1:
0110 6296 C120  34         mov   @fh.callback1,tmp0
     6298 A450     
0111 629A 1306  14         jeq   fh.file.read.edb.assert2
0112 629C 0284  22         ci    tmp0,>6000            ; Insane address ?
     629E 6000     
0113 62A0 1128  14         jlt   fh.file.read.crash    ; Yes, crash!
0114 62A2 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62A4 7FFF     
0115 62A6 1525  14         jgt   fh.file.read.crash    ; Yes, crash!
0116               
0117               fh.file.read.edb.assert2
0118 62A8 C120  34         mov   @fh.callback2,tmp0
     62AA A452     
0119 62AC 1306  14         jeq   fh.file.read.edb.assert3
0120 62AE 0284  22         ci    tmp0,>6000            ; Insane address ?
     62B0 6000     
0121 62B2 111F  14         jlt   fh.file.read.crash    ; Yes, crash!
0122 62B4 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62B6 7FFF     
0123 62B8 151C  14         jgt   fh.file.read.crash    ; Yes, crash!
0124               
0125               fh.file.read.edb.assert3:
0126 62BA C120  34         mov   @fh.callback3,tmp0
     62BC A454     
0127 62BE 1306  14         jeq   fh.file.read.edb.assert4
0128 62C0 0284  22         ci    tmp0,>6000            ; Insane address ?
     62C2 6000     
0129 62C4 1116  14         jlt   fh.file.read.crash    ; Yes, crash!
0130 62C6 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62C8 7FFF     
0131 62CA 1513  14         jgt   fh.file.read.crash    ; Yes, crash!
0132               
0133               fh.file.read.edb.assert4:
0134 62CC C120  34         mov   @fh.callback4,tmp0
     62CE A456     
0135 62D0 1306  14         jeq   fh.file.read.edb.assert5
0136               
0137 62D2 0284  22         ci    tmp0,>6000            ; Insane address ?
     62D4 6000     
0138 62D6 110D  14         jlt   fh.file.read.crash    ; Yes, crash!
0139 62D8 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62DA 7FFF     
0140 62DC 150A  14         jgt   fh.file.read.crash    ; Yes, crash!
0141               
0142               fh.file.read.edb.assert5:
0143 62DE C120  34         mov   @fh.callback5,tmp0
     62E0 A458     
0144 62E2 130B  14         jeq   fh.file.read.edb.load1
0145               
0146 62E4 0284  22         ci    tmp0,>6000            ; Insane address ?
     62E6 6000     
0147 62E8 1104  14         jlt   fh.file.read.crash    ; Yes, crash!
0148 62EA 0284  22         ci    tmp0,>7fff            ; Insane address ?
     62EC 7FFF     
0149 62EE 1501  14         jgt   fh.file.read.crash    ; Yes, crash!
0150               
0151 62F0 1004  14         jmp   fh.file.read.edb.load1
0152                                                   ; All checks passed, continue
0153                       ;------------------------------------------------------
0154                       ; Check failed, crash CPU!
0155                       ;------------------------------------------------------
0156               fh.file.read.crash:
0157 62F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     62F4 FFCE     
0158 62F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     62F8 2026     
0159                       ;------------------------------------------------------
0160                       ; Callback "Before Open file"
0161                       ;------------------------------------------------------
0162               fh.file.read.edb.load1:
0163 62FA C120  34         mov   @fh.callback1,tmp0
     62FC A450     
0164 62FE 1301  14         jeq   fh.file.read.edb.pabheader
0165                                                   ; Skip callback
0166 6300 0694  24         bl    *tmp0                 ; Run callback function
0167                       ;------------------------------------------------------
0168                       ; Copy PAB header to VDP
0169                       ;------------------------------------------------------
0170               fh.file.read.edb.pabheader:
0171 6302 06A0  32         bl    @cpym2v
     6304 24E6     
0172 6306 1400                   data fh.vpab,fh.file.pab.header,9
     6308 77D4     
     630A 0009     
0173                                                   ; Copy PAB header to VDP
0174                       ;------------------------------------------------------
0175                       ; Append file descriptor to PAB header in VDP
0176                       ;------------------------------------------------------
0177 630C 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     630E 1409     
0178 6310 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     6312 A444     
0179 6314 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0180 6316 0986  32         srl   tmp2,8                ; Right justify
0181 6318 0586  14         inc   tmp2                  ; Include length byte as well
0182               
0183 631A 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     631C 24EC     
0184                                                   ; \ i  tmp0 = VDP destination
0185                                                   ; | i  tmp1 = CPU source
0186                                                   ; / i  tmp2 = Number of bytes to copy
0187                       ;------------------------------------------------------
0188                       ; Open file
0189                       ;------------------------------------------------------
0190               fh.file.read.edb.open:
0191 631E 06A0  32         bl    @file.open            ; Open file
     6320 2DBC     
0192 6322 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0193 6324 0014                   data io.seq.inp.dis.var
0194                                                   ; / i  p1 = File type/mode
0195               
0196 6326 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     6328 201C     
0197 632A 1608  14         jne   fh.file.read.edb.check_setpage
0198                                                   ; No error, continue processing file (1a)
0199                       ;------------------------------------------------------
0200                       ; File error. Check FastMode IO on unsupported device
0201                       ;------------------------------------------------------
0202 632C 0760  38         abs   @fh.offsetopcode      ; FastMode IO on ?
     632E A44E     
0203 6330 1303  14         jeq   fh.file.read.edb.err  ; Is off, do not retry open
0204 6332 04E0  34         clr   @fh.offsetopcode      ; Turn FastMode IO off
     6334 A44E     
0205                       ;------------------------------------------------------
0206                       ; File error while FastMode IO is on, retry
0207                       ;------------------------------------------------------
0208 6336 10F3  14         jmp   fh.file.read.edb.open ; Retry
0209                       ;------------------------------------------------------
0210                       ; Need to error out, no retry possible.
0211                       ;------------------------------------------------------
0212               fh.file.read.edb.err:
0213 6338 0460  28         b     @fh.file.read.edb.error
     633A 647E     
0214                                                   ; IO error occured
0215                       ;------------------------------------------------------
0216                       ; 1a: Check if SAMS page needs to be increased
0217                       ;------------------------------------------------------
0218               fh.file.read.edb.check_setpage:
0219 633C C120  34         mov   @edb.next_free.ptr,tmp0
     633E A508     
0220                                                   ;--------------------------
0221                                                   ; Assert
0222                                                   ;--------------------------
0223 6340 0284  22         ci    tmp0,edb.top + edb.size
     6342 D000     
0224                                                   ; Insane address ?
0225 6344 15D6  14         jgt   fh.file.read.crash    ; Yes, crash!
0226                                                   ;--------------------------
0227                                                   ; Check for page overflow
0228                                                   ;--------------------------
0229 6346 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     6348 0FFF     
0230 634A 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     634C 0052     
0231 634E 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     6350 0FF0     
0232 6352 110E  14         jlt   fh.file.read.edb.record
0233                                                   ; Not yet so skip SAMS page switch
0234                       ;------------------------------------------------------
0235                       ; 1b: Increase SAMS page
0236                       ;------------------------------------------------------
0237 6354 05A0  34         inc   @fh.sams.hipage       ; Set highest SAMS page
     6356 A448     
0238 6358 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     635A A500     
     635C A508     
0239                                                   ; Start at top of SAMS page again
0240                       ;------------------------------------------------------
0241                       ; 1c: Switch to SAMS page
0242                       ;------------------------------------------------------
0243 635E C120  34         mov   @fh.sams.hipage,tmp0
     6360 A448     
0244 6362 C160  34         mov   @edb.top.ptr,tmp1
     6364 A500     
0245 6366 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6368 25D6     
0246                                                   ; \ i  tmp0 = SAMS page number
0247                                                   ; / i  tmp1 = Memory address
0248               
0249 636A C820  54         mov   @fh.sams.hipage,@tv.sams.c000
     636C A448     
     636E A208     
0250                                                   ; Sync SAMS window. Important!
0251                       ;------------------------------------------------------
0252                       ; 1d: Fill new SAMS page with garbage (debug only)
0253                       ;------------------------------------------------------
0254                       ; bl  @film
0255                       ;     data >c000,>99,4092
0256                       ;------------------------------------------------------
0257                       ; Step 2: Read file record
0258                       ;------------------------------------------------------
0259               fh.file.read.edb.record:
0260 6370 05A0  34         inc   @fh.records           ; Update counter
     6372 A43C     
0261 6374 04E0  34         clr   @fh.reclen            ; Reset record length
     6376 A43E     
0262               
0263 6378 0760  38         abs   @fh.offsetopcode
     637A A44E     
0264 637C 1310  14         jeq   !                     ; Skip CPU buffer logic if offset = 0
0265                       ;------------------------------------------------------
0266                       ; 2a: Write address of CPU buffer to VDP PAB bytes 2-3
0267                       ;------------------------------------------------------
0268 637E C160  34         mov   @edb.next_free.ptr,tmp1
     6380 A508     
0269 6382 05C5  14         inct  tmp1
0270 6384 0204  20         li    tmp0,fh.vpab + 2
     6386 1402     
0271               
0272 6388 0264  22         ori   tmp0,>4000            ; Prepare VDP address for write
     638A 4000     
0273 638C 06C4  14         swpb  tmp0                  ; \
0274 638E D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     6390 8C02     
0275 6392 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0276 6394 D804  30         movb  tmp0,@vdpa            ; /
     6396 8C02     
0277               
0278 6398 D7C5  30         movb  tmp1,*r15             ; Write MSB
0279 639A 06C5  14         swpb  tmp1
0280 639C D7C5  30         movb  tmp1,*r15             ; Write LSB
0281                       ;------------------------------------------------------
0282                       ; 2b: Read file record
0283                       ;------------------------------------------------------
0284 639E 06A0  32 !       bl    @file.record.read     ; Read file record
     63A0 2DEC     
0285 63A2 1400                   data fh.vpab          ; \ i  p0   = Address of PAB in VDP RAM
0286                                                   ; |           (without +9 offset!)
0287                                                   ; | o  tmp0 = Status byte
0288                                                   ; | o  tmp1 = Bytes read
0289                                                   ; | o  tmp2 = Status register contents
0290                                                   ; /           upon DSRLNK return
0291               
0292 63A4 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     63A6 A438     
0293 63A8 C805  38         mov   tmp1,@fh.reclen       ; Save bytes read
     63AA A43E     
0294 63AC C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     63AE A43A     
0295                       ;------------------------------------------------------
0296                       ; 2c: Calculate kilobytes processed
0297                       ;------------------------------------------------------
0298 63B0 A805  38         a     tmp1,@fh.counter      ; Add record length to counter
     63B2 A442     
0299 63B4 C160  34         mov   @fh.counter,tmp1      ;
     63B6 A442     
0300 63B8 0285  22         ci    tmp1,1024             ; 1 KB boundary reached ?
     63BA 0400     
0301 63BC 1106  14         jlt   fh.file.read.edb.check_fioerr
0302                                                   ; Not yet, goto (2d)
0303 63BE 05A0  34         inc   @fh.kilobytes
     63C0 A440     
0304 63C2 0225  22         ai    tmp1,-1024            ; Remove KB portion, only keep bytes
     63C4 FC00     
0305 63C6 C805  38         mov   tmp1,@fh.counter      ; Update counter
     63C8 A442     
0306                       ;------------------------------------------------------
0307                       ; 2d: Check if a file error occured
0308                       ;------------------------------------------------------
0309               fh.file.read.edb.check_fioerr:
0310 63CA C1A0  34         mov   @fh.ioresult,tmp2
     63CC A43A     
0311 63CE 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     63D0 201C     
0312 63D2 1602  14         jne   fh.file.read.edb.insertline
0313                                                   ; No, goto (2e)
0314 63D4 0460  28         b     @fh.file.read.edb.error
     63D6 647E     
0315                                                   ; Yes, so handle file error
0316                       ;------------------------------------------------------
0317                       ; 2e: Check if we need to insert index entry
0318                       ;------------------------------------------------------
0319               fh.file.read.edb.insertline:
0320 63D8 C120  34         mov   @fh.temp1,tmp0        ; \ Is flag "new file" set?
     63DA A460     
0321 63DC 0284  22         ci    tmp0,>ffff            ; /
     63DE FFFF     
0322 63E0 1308  14         jeq   fh.file.read.edb.process_line
0323                                                   ; Flag is set, so just load file
0324                       ;------------------------------------------------------
0325                       ; 2f: Insert new index entry (index reorg)
0326                       ;------------------------------------------------------
0327 63E2 C820  54         mov   @fh.line,@parm1
     63E4 A45E     
     63E6 A006     
0328 63E8 C820  54         mov   @edb.lines,@parm2
     63EA A504     
     63EC A008     
0329 63EE 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     63F0 36C8     
0330                                                   ; \ i  parm1 = Line for insert
0331                                                   ; / i  parm2 = Last line to reorg
0332                       ;------------------------------------------------------
0333                       ; Step 3: Process line
0334                       ;------------------------------------------------------
0335               fh.file.read.edb.process_line:
0336 63F2 0204  20         li    tmp0,fh.vrecbuf       ; VDP source address
     63F4 2000     
0337 63F6 C160  34         mov   @edb.next_free.ptr,tmp1
     63F8 A508     
0338                                                   ; RAM target in editor buffer
0339               
0340 63FA C805  38         mov   tmp1,@parm2           ; Needed in step 4b (index update)
     63FC A008     
0341               
0342 63FE C1A0  34         mov   @fh.reclen,tmp2       ; Number of bytes to copy
     6400 A43E     
0343 6402 131B  14         jeq   fh.file.read.edb.prepindex.emptyline
0344                                                   ; Handle empty line
0345                       ;------------------------------------------------------
0346                       ; 3a: Set length of line in CPU editor buffer
0347                       ;------------------------------------------------------
0348 6404 04D5  26         clr   *tmp1                 ; Clear word before string
0349 6406 0585  14         inc   tmp1                  ; Adjust position for length byte string
0350 6408 DD60  48         movb  @fh.reclen+1,*tmp1+   ; Put line length byte before string
     640A A43F     
0351               
0352 640C 05E0  34         inct  @edb.next_free.ptr    ; Keep pointer synced with tmp1
     640E A508     
0353 6410 A806  38         a     tmp2,@edb.next_free.ptr
     6412 A508     
0354                                                   ; Add line length
0355               
0356 6414 0760  38         abs   @fh.offsetopcode      ; Use CPU buffer if offset > 0
     6416 A44E     
0357 6418 1602  14         jne   fh.file.read.edb.preppointer
0358                       ;------------------------------------------------------
0359                       ; 3b: Copy line from VDP to CPU editor buffer
0360                       ;------------------------------------------------------
0361               fh.file.read.edb.vdp2cpu:
0362                       ;
0363                       ; Executed for devices that need their disk buffer in VDP memory
0364                       ; (TI Disk Controller, tipi, nanopeb, ...).
0365                       ;
0366 641A 06A0  32         bl    @xpyv2m               ; Copy memory block from VDP to CPU
     641C 251E     
0367                                                   ; \ i  tmp0 = VDP source address
0368                                                   ; | i  tmp1 = RAM target address
0369                                                   ; / i  tmp2 = Bytes to copy
0370                       ;------------------------------------------------------
0371                       ; 3c: Align pointer for next line
0372                       ;------------------------------------------------------
0373               fh.file.read.edb.preppointer:
0374 641E C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6420 A508     
0375 6422 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0376 6424 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     6426 000F     
0377 6428 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     642A A508     
0378                       ;------------------------------------------------------
0379                       ; Step 4: Update index
0380                       ;------------------------------------------------------
0381               fh.file.read.edb.prepindex:
0382 642C C820  54         mov   @fh.line,@parm1       ; parm1 = Line number
     642E A45E     
     6430 A006     
0383                                                   ; parm2 = Must allready be set!
0384 6432 C820  54         mov   @fh.sams.hipage,@parm3
     6434 A448     
     6436 A00A     
0385                                                   ; parm3 = SAMS page number
0386               
0387 6438 1007  14         jmp   fh.file.read.edb.updindex
0388                                                   ; Update index
0389                       ;------------------------------------------------------
0390                       ; 4a: Special handling for empty line
0391                       ;------------------------------------------------------
0392               fh.file.read.edb.prepindex.emptyline:
0393 643A C820  54         mov   @fh.line,@parm1       ; parm1 = Line number
     643C A45E     
     643E A006     
0394 6440 04E0  34         clr   @parm2                ; parm2 = Pointer to >0000
     6442 A008     
0395 6444 0720  34         seto  @parm3                ; parm3 = SAMS not used >FFFF
     6446 A00A     
0396                       ;------------------------------------------------------
0397                       ; 4b: Do actual index update
0398                       ;------------------------------------------------------
0399               fh.file.read.edb.updindex:
0400 6448 06A0  32         bl    @idx.entry.update     ; Update index
     644A 3578     
0401                                                   ; \ i  parm1    = Line num in editor buffer
0402                                                   ; | i  parm2    = Pointer to line in EB
0403                                                   ; | i  parm3    = SAMS page
0404                                                   ; | o  outparm1 = Pointer to updated index
0405                                                   ; /               entry
0406                       ;------------------------------------------------------
0407                       ; Step 5: Callback "Read line from file"
0408                       ;------------------------------------------------------
0409               fh.file.read.edb.display:
0410 644C C120  34         mov   @fh.callback2,tmp0    ; Get pointer to Callback
     644E A452     
0411                                                   ;   "Read line from file"
0412 6450 1301  14         jeq   fh.file.read.edb.next
0413                                                   ; Skip callback
0414 6452 0694  24         bl    *tmp0                 ; Run callback function
0415                       ;------------------------------------------------------
0416                       ; 5a: Prepare for next record
0417                       ;------------------------------------------------------
0418               fh.file.read.edb.next:
0419 6454 05A0  34         inc   @fh.line              ; lines++
     6456 A45E     
0420 6458 05A0  34         inc   @edb.lines            ; total lines++
     645A A504     
0421               
0422 645C C120  34         mov   @edb.lines,tmp0
     645E A504     
0423 6460 0284  22         ci    tmp0,10200            ; Maximum line in index reached?
     6462 27D8     
0424 6464 120A  14         jle   fh.file.read.edb.next.do_it
0425                                                   ; Not yet, next record
0426                       ;------------------------------------------------------
0427                       ; 5b: Index memory full. Close file and exit
0428                       ;------------------------------------------------------
0429 6466 06A0  32         bl    @file.close           ; Close file
     6468 2DE0     
0430 646A 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0431                                                   ; /
0432               
0433 646C 06A0  32         bl    @mem.sams.setup.stevie
     646E 774C     
0434                                                   ; Restore SAMS windows
0435                       ;------------------------------------------------------
0436                       ; Callback "Memory full error"
0437                       ;------------------------------------------------------
0438 6470 C120  34         mov   @fh.callback5,tmp0    ; Get pointer to Callback "File I/O error"
     6472 A458     
0439 6474 1324  14         jeq   fh.file.read.edb.exit ; Skip callback
0440 6476 0694  24         bl    *tmp0                 ; Run callback function
0441 6478 1022  14         jmp   fh.file.read.edb.exit
0442                       ;------------------------------------------------------
0443                       ; 5c: Next record
0444                       ;------------------------------------------------------
0445               fh.file.read.edb.next.do_it:
0446 647A 0460  28         b     @fh.file.read.edb.check_setpage
     647C 633C     
0447                                                   ; Next record
0448                       ;------------------------------------------------------
0449                       ; Error handler
0450                       ;------------------------------------------------------
0451               fh.file.read.edb.error:
0452 647E C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     6480 A438     
0453 6482 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0454 6484 0284  22         ci    tmp0,io.err.eof       ; EOF reached ?
     6486 0005     
0455 6488 130A  14         jeq   fh.file.read.edb.eof  ; All good. File closed by DSRLNK
0456                       ;------------------------------------------------------
0457                       ; File error occured
0458                       ;------------------------------------------------------
0459 648A 06A0  32         bl    @file.close           ; Close file
     648C 2DE0     
0460 648E 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0461                                                   ; /
0462               
0463 6490 06A0  32         bl    @mem.sams.setup.stevie
     6492 774C     
0464                                                   ; Restore SAMS windows
0465                       ;------------------------------------------------------
0466                       ; Callback "File I/O error"
0467                       ;------------------------------------------------------
0468 6494 C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     6496 A456     
0469 6498 1312  14         jeq   fh.file.read.edb.exit ; Skip callback
0470 649A 0694  24         bl    *tmp0                 ; Run callback function
0471 649C 1010  14         jmp   fh.file.read.edb.exit
0472                       ;------------------------------------------------------
0473                       ; End-Of-File reached
0474                       ;------------------------------------------------------
0475               fh.file.read.edb.eof:
0476 649E 06A0  32         bl    @file.close           ; Close file
     64A0 2DE0     
0477 64A2 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0478                                                   ; /
0479               
0480 64A4 06A0  32         bl    @mem.sams.setup.stevie
     64A6 774C     
0481                                                   ; Restore SAMS windows
0482                       ;------------------------------------------------------
0483                       ; Callback "Close file"
0484                       ;------------------------------------------------------
0485 64A8 C120  34         mov   @fh.temp1,tmp0        ; Insert file or load file?
     64AA A460     
0486 64AC 0284  22         ci    tmp0,>ffff
     64AE FFFF     
0487 64B0 1602  14         jne   fh.file.read.edb.eof.callback
0488                                                   ; Insert file, skip to callback
0489 64B2 0620  34         dec   @edb.lines            ; Load file, one-time adjustment
     64B4 A504     
0490               
0491               fh.file.read.edb.eof.callback:
0492 64B6 C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     64B8 A454     
0493 64BA 1301  14         jeq   fh.file.read.edb.exit ; Skip callback
0494 64BC 0694  24         bl    *tmp0                 ; Run callback function
0495               *--------------------------------------------------------------
0496               * Exit
0497               *--------------------------------------------------------------
0498               fh.file.read.edb.exit:
0499 64BE C820  54         mov   @fh.sams.hipage,@edb.sams.hipage
     64C0 A448     
     64C2 A51C     
0500                                                   ; Set highest SAMS page in use
0501 64C4 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     64C6 A44A     
0502               
0503 64C8 06A0  32         bl    @film
     64CA 2236     
0504 64CC 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     64CE 0000     
     64D0 0060     
0505               
0506               
0507 64D2 C839  50         mov   *stack+,@fh.offsetopcode
     64D4 A44E     
0508                                                   ; Pop @fh.offsetopcode
0509 64D6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0510 64D8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0511 64DA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0512 64DC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0513 64DE C2F9  30         mov   *stack+,r11           ; Pop R11
0514 64E0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0073                       copy  "fh.file.write.edb.asm"    ; Write editor buffer to file
     **** ****     > fh.file.write.edb.asm
0001               * FILE......: fh.write.edb.asm
0002               * Purpose...: File write module
0003               
0004               ***************************************************************
0005               * fh.file.write.edb
0006               * Write editor buffer to file
0007               ***************************************************************
0008               *  bl   @fh.file.write.edb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed file descriptor
0012               * parm2 = Pointer to callback function "Before Open file"
0013               * parm3 = Pointer to callback function "Write line to file"
0014               * parm4 = Pointer to callback function "Close file"
0015               * parm5 = Pointer to callback function "File I/O error"
0016               * parm6 = First line to save (base 0)
0017               * parm7 = Last line to save  (base 0)
0018               * parm8 = Work mode
0019               *--------------------------------------------------------------
0020               * OUTPUT
0021               *--------------------------------------------------------------
0022               * Register usage
0023               * tmp0, tmp1, tmp2
0024               ********|*****|*********************|**************************
0025               fh.file.write.edb:
0026 64E2 0649  14         dect  stack
0027 64E4 C64B  30         mov   r11,*stack            ; Save return address
0028 64E6 0649  14         dect  stack
0029 64E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 64EA 0649  14         dect  stack
0031 64EC C645  30         mov   tmp1,*stack           ; Push tmp1
0032 64EE 0649  14         dect  stack
0033 64F0 C646  30         mov   tmp2,*stack           ; Push tmp2
0034                       ;------------------------------------------------------
0035                       ; Initialisation
0036                       ;------------------------------------------------------
0037 64F2 04E0  34         clr   @fh.counter           ; Clear internal counter
     64F4 A442     
0038 64F6 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     64F8 A440     
0039 64FA 04E0  34         clr   @fh.kilobytes.prev    ; /
     64FC A45C     
0040 64FE 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     6500 A438     
0041 6502 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     6504 A43A     
0042                       ;------------------------------------------------------
0043                       ; Save parameters / callback functions
0044                       ;------------------------------------------------------
0045 6506 0204  20         li    tmp0,fh.fopmode.writefile
     6508 0002     
0046                                                   ; We are going to write to a file
0047 650A C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     650C A44A     
0048               
0049 650E C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     6510 A006     
     6512 A444     
0050 6514 C820  54         mov   @parm2,@fh.callback1  ; Callback function "Open file"
     6516 A008     
     6518 A450     
0051 651A C820  54         mov   @parm3,@fh.callback2  ; Callback function "Write line to file"
     651C A00A     
     651E A452     
0052 6520 C820  54         mov   @parm4,@fh.callback3  ; Callback function "Close" file"
     6522 A00C     
     6524 A454     
0053 6526 C820  54         mov   @parm5,@fh.callback4  ; Callback function "File I/O error"
     6528 A00E     
     652A A456     
0054 652C C820  54         mov   @parm6,@fh.records    ; Set records counter
     652E A010     
     6530 A43C     
0055 6532 C820  54         mov   @parm8,@fh.workmode   ; Work mode (used in callbacks)
     6534 A014     
     6536 A45A     
0056               
0057 6538 04E0  34         clr   @fh.temp1             ; Not used
     653A A460     
0058 653C 04E0  34         clr   @fh.temp2             ; Not used
     653E A462     
0059 6540 04E0  34         clr   @fh.temp3             ; Not used
     6542 A464     
0060                       ;------------------------------------------------------
0061                       ; Assert
0062                       ;------------------------------------------------------
0063 6544 C120  34         mov   @fh.callback1,tmp0
     6546 A450     
0064 6548 0284  22         ci    tmp0,>6000            ; Insane address ?
     654A 6000     
0065 654C 111C  14         jlt   fh.file.write.crash   ; Yes, crash!
0066               
0067 654E 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6550 7FFF     
0068 6552 1519  14         jgt   fh.file.write.crash   ; Yes, crash!
0069               
0070 6554 C120  34         mov   @fh.callback2,tmp0
     6556 A452     
0071 6558 0284  22         ci    tmp0,>6000            ; Insane address ?
     655A 6000     
0072 655C 1114  14         jlt   fh.file.write.crash   ; Yes, crash!
0073               
0074 655E 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6560 7FFF     
0075 6562 1511  14         jgt   fh.file.write.crash   ; Yes, crash!
0076               
0077 6564 C120  34         mov   @fh.callback3,tmp0
     6566 A454     
0078 6568 0284  22         ci    tmp0,>6000            ; Insane address ?
     656A 6000     
0079 656C 110C  14         jlt   fh.file.write.crash   ; Yes, crash!
0080               
0081 656E 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6570 7FFF     
0082 6572 1509  14         jgt   fh.file.write.crash   ; Yes, crash!
0083               
0084 6574 8820  50         c     @parm6,@edb.lines     ; First line to save beyond last line in EB?
     6576 A010     
     6578 A504     
0085 657A 1505  14         jgt   fh.file.write.crash   ; Yes, crash!
0086               
0087 657C 8820  50         c     @parm7,@edb.lines     ; Last line to save beyond last line in EB?
     657E A012     
     6580 A504     
0088 6582 1501  14         jgt   fh.file.write.crash   ; Yes, crash!
0089               
0090 6584 1004  14         jmp   fh.file.write.edb.save1
0091                                                   ; All checks passed, continue.
0092                       ;------------------------------------------------------
0093                       ; Check failed, crash CPU!
0094                       ;------------------------------------------------------
0095               fh.file.write.crash:
0096 6586 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6588 FFCE     
0097 658A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     658C 2026     
0098                       ;------------------------------------------------------
0099                       ; Callback "Before Open file"
0100                       ;------------------------------------------------------
0101               fh.file.write.edb.save1:
0102 658E C120  34         mov   @fh.callback1,tmp0
     6590 A450     
0103 6592 0694  24         bl    *tmp0                 ; Run callback function
0104                       ;------------------------------------------------------
0105                       ; Copy PAB header to VDP
0106                       ;------------------------------------------------------
0107               fh.file.write.edb.pabheader:
0108 6594 06A0  32         bl    @cpym2v
     6596 24E6     
0109 6598 1400                   data fh.vpab,fh.file.pab.header,9
     659A 77D4     
     659C 0009     
0110                                                   ; Copy PAB header to VDP
0111                       ;------------------------------------------------------
0112                       ; Append file descriptor to PAB header in VDP
0113                       ;------------------------------------------------------
0114 659E 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     65A0 1409     
0115 65A2 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     65A4 A444     
0116 65A6 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0117 65A8 0986  32         srl   tmp2,8                ; Right justify
0118 65AA 0586  14         inc   tmp2                  ; Include length byte as well
0119               
0120 65AC 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     65AE 24EC     
0121                                                   ; \ i  tmp0 = VDP destination
0122                                                   ; | i  tmp1 = CPU source
0123                                                   ; / i  tmp2 = Number of bytes to copy
0124                       ;------------------------------------------------------
0125                       ; Open file
0126                       ;------------------------------------------------------
0127 65B0 06A0  32         bl    @file.open            ; Open file
     65B2 2DBC     
0128 65B4 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0129 65B6 0012                   data io.seq.out.dis.var
0130                                                   ; / i  p1 = File type/mode
0131               
0132 65B8 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     65BA 201C     
0133 65BC 1351  14         jeq   fh.file.write.edb.error
0134                                                   ; Yes, IO error occured
0135                       ;------------------------------------------------------
0136                       ; Step 1: Write file record
0137                       ;------------------------------------------------------
0138               fh.file.write.edb.record:
0139 65BE 8820  50         c     @fh.records,@parm7
     65C0 A43C     
     65C2 A012     
0140 65C4 1357  14         jeq   fh.file.write.edb.done
0141                                                   ; Exit when all records processed
0142                       ;------------------------------------------------------
0143                       ; 1a: Unpack current line to framebuffer
0144                       ;------------------------------------------------------
0145 65C6 C820  54         mov   @fh.records,@parm1    ; Line to unpack
     65C8 A43C     
     65CA A006     
0146 65CC 04E0  34         clr   @parm2                ; 1st row in frame buffer
     65CE A008     
0147 65D0 04E0  34         clr   @parm3                ; Column Offset must be 0 for proper save
     65D2 A00A     
0148               
0149 65D4 06A0  32         bl    @edb.line.unpack      ; Unpack line
     65D6 7608     
0150                                                   ; \ i  parm1    = Line to unpack
0151                                                   ; | i  parm2    = Target row in frame buffer
0152                                                   ; | i  parm3    = Column offset
0153                                                   ; / o  outparm1 = Length of line
0154                       ;------------------------------------------------------
0155                       ; 1b: Add line termination character (if mode on)
0156                       ;------------------------------------------------------
0157 65D8 C120  34         mov  @edb.lineterm,tmp0     ; \ Check if line term mode is on
     65DA A524     
0158 65DC 0984  32         srl  tmp0,8                 ; /
0159 65DE 1313  14         jeq  fh.file.write.edb.unpack
0160               
0161 65E0 C120  34         mov  @outparm1,tmp0         ; Skip further check if empty line
     65E2 A018     
0162 65E4 1308  14         jeq  fh.file.write.edb.lineterm
0163                       ;------------------------------------------------------
0164                       ; 1b: Skip if it's already a line termination character
0165                       ;------------------------------------------------------
0166 65E6 0204  20         li   tmp0,fb.top            ; \
     65E8 D000     
0167 65EA A120  34         a    @outparm1,tmp0         ; | Goto last character in line
     65EC A018     
0168 65EE 0604  14         dec  tmp0                   ; /
0169               
0170 65F0 9520  42         cb   @edb.lineterm+1,*tmp0  ; Is it a line termination character?
     65F2 A525     
0171 65F4 1308  14         jeq  fh.file.write.edb.unpack
0172                       ;------------------------------------------------------
0173                       ; 1b: Write line termination character
0174                       ;------------------------------------------------------
0175               fh.file.write.edb.lineterm
0176 65F6 0204  20         li   tmp0,fb.top            ; \
     65F8 D000     
0177 65FA A120  34         a    @outparm1,tmp0         ; | Add line termination character
     65FC A018     
0178 65FE D520  46         movb @edb.lineterm+1,*tmp0  ; /
     6600 A525     
0179 6602 05A0  34         inc  @outparm1              ; Adjust line length
     6604 A018     
0180                       ;------------------------------------------------------
0181                       ; 1c: Copy unpacked line to VDP memory
0182                       ;------------------------------------------------------
0183               fh.file.write.edb.unpack:
0184 6606 0204  20         li    tmp0,fh.vrecbuf       ; VDP target address
     6608 2000     
0185 660A 0205  20         li    tmp1,fb.top           ; Top of frame buffer in CPU memory
     660C D000     
0186               
0187 660E C1A0  34         mov   @outparm1,tmp2        ; Length of line
     6610 A018     
0188 6612 C806  38         mov   tmp2,@fh.reclen       ; Set record length
     6614 A43E     
0189 6616 1302  14         jeq   !                     ; Skip VDP copy if empty line
0190               
0191 6618 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     661A 24EC     
0192                                                   ; \ i  tmp0 = VDP target address
0193                                                   ; | i  tmp1 = CPU source address
0194                                                   ; / i  tmp2 = Number of bytes to copy
0195                       ;------------------------------------------------------
0196                       ; 1d: Write file record
0197                       ;------------------------------------------------------
0198 661C 06A0  32 !       bl    @file.record.write    ; Write file record
     661E 2DF8     
0199 6620 1400                   data fh.vpab          ; \ i  p0   = Address of PAB in VDP RAM
0200                                                   ; |           (without +9 offset!)
0201                                                   ; | o  tmp0 = Status byte
0202                                                   ; | o  tmp1 = ?????
0203                                                   ; | o  tmp2 = Status register contents
0204                                                   ; /           upon DSRLNK return
0205               
0206 6622 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     6624 A438     
0207 6626 C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     6628 A43A     
0208                       ;------------------------------------------------------
0209                       ; 1e: Calculate kilobytes processed
0210                       ;------------------------------------------------------
0211 662A A820  54         a     @fh.reclen,@fh.counter
     662C A43E     
     662E A442     
0212                                                   ; Add record length to counter
0213 6630 C160  34         mov   @fh.counter,tmp1      ;
     6632 A442     
0214 6634 0285  22         ci    tmp1,1024             ; 1 KB boundary reached ?
     6636 0400     
0215 6638 1106  14         jlt   fh.file.write.edb.check_fioerr
0216                                                   ; Not yet, goto (1f)
0217 663A 05A0  34         inc   @fh.kilobytes
     663C A440     
0218 663E 0225  22         ai    tmp1,-1024            ; Remove KB portion, only keep bytes
     6640 FC00     
0219 6642 C805  38         mov   tmp1,@fh.counter      ; Update counter
     6644 A442     
0220                       ;------------------------------------------------------
0221                       ; 1f: Check if a file error occured
0222                       ;------------------------------------------------------
0223               fh.file.write.edb.check_fioerr:
0224 6646 C1A0  34         mov   @fh.ioresult,tmp2
     6648 A43A     
0225 664A 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     664C 201C     
0226 664E 1602  14         jne   fh.file.write.edb.display
0227                                                   ; No, goto (2)
0228 6650 0460  28         b     @fh.file.write.edb.error
     6652 6660     
0229                                                   ; Yes, so handle file error
0230                       ;------------------------------------------------------
0231                       ; Step 2: Callback "Write line to  file"
0232                       ;------------------------------------------------------
0233               fh.file.write.edb.display:
0234 6654 C120  34         mov   @fh.callback2,tmp0    ; Get pointer to "Saving indicator 2"
     6656 A452     
0235 6658 0694  24         bl    *tmp0                 ; Run callback function
0236                       ;------------------------------------------------------
0237                       ; Step 3: Next record
0238                       ;------------------------------------------------------
0239 665A 05A0  34         inc   @fh.records           ; Update counter
     665C A43C     
0240 665E 10AF  14         jmp   fh.file.write.edb.record
0241                       ;------------------------------------------------------
0242                       ; Error handler
0243                       ;------------------------------------------------------
0244               fh.file.write.edb.error:
0245 6660 C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     6662 A438     
0246 6664 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0247                       ;------------------------------------------------------
0248                       ; File error occured
0249                       ;------------------------------------------------------
0250 6666 06A0  32         bl    @file.close           ; Close file
     6668 2DE0     
0251 666A 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0252                       ;------------------------------------------------------
0253                       ; Callback "File I/O error"
0254                       ;------------------------------------------------------
0255 666C C120  34         mov   @fh.callback4,tmp0    ; Get pointer to Callback "File I/O error"
     666E A456     
0256 6670 0694  24         bl    *tmp0                 ; Run callback function
0257 6672 1006  14         jmp   fh.file.write.edb.exit
0258                       ;------------------------------------------------------
0259                       ; All records written. Close file
0260                       ;------------------------------------------------------
0261               fh.file.write.edb.done:
0262 6674 06A0  32         bl    @file.close           ; Close file
     6676 2DE0     
0263 6678 1400                   data fh.vpab          ; \ i  p0 = Address of PAB in VRAM
0264                       ;------------------------------------------------------
0265                       ; Callback "Close file"
0266                       ;------------------------------------------------------
0267 667A C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "Close file"
     667C A454     
0268 667E 0694  24         bl    *tmp0                 ; Run callback function
0269               *--------------------------------------------------------------
0270               * Exit
0271               *--------------------------------------------------------------
0272               fh.file.write.edb.exit:
0273 6680 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     6682 A44A     
0274               
0275 6684 06A0  32         bl    @film
     6686 2236     
0276 6688 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     668A 0000     
     668C 0060     
0277               
0278 668E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0279 6690 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0280 6692 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0281 6694 C2F9  30         mov   *stack+,r11           ; Pop R11
0282 6696 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0074                       copy  "fh.file.load.bin.asm"     ; Load binary image into memory
     **** ****     > fh.file.load.bin.asm
0001               * FILE......: fh.file.load.bin.asm
0002               * Purpose...: Load binary image into memory
0003               
0004               ***************************************************************
0005               * fh.file.load.bin
0006               * Load binary image into memory
0007               ***************************************************************
0008               *  bl   @fh.file.load.bin
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1 = Pointer to length-prefixed filename descriptor
0012               * parm2 = Pointer to callback function "Before loading image"
0013               * parm3 = Pointer to callback function "Binary image loaded"
0014               * parm4 = Pointer to callback function "File I/O error"
0015               *
0016               * Callbacks can be skipped by passing >0000 as pointer.
0017               *--------------------------------------------------------------
0018               * OUTPUT
0019               * none
0020               *--------------------------------------------------------------
0021               * Register usage
0022               * tmp0, tmp1, tmp2, tmp3
0023               *--------------------------------------------------------------
0024               * Remarks
0025               * None
0026               ********|*****|*********************|**************************
0027               fh.file.load.bin:
0028 6698 0649  14         dect  stack
0029 669A C64B  30         mov   r11,*stack            ; Save return address
0030 669C 0649  14         dect  stack
0031 669E C644  30         mov   tmp0,*stack           ; Push tmp0
0032 66A0 0649  14         dect  stack
0033 66A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0034 66A4 0649  14         dect  stack
0035 66A6 C646  30         mov   tmp2,*stack           ; Push tmp2
0036 66A8 0649  14         dect  stack
0037 66AA C647  30         mov   tmp3,*stack           ; Push tmp3
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 66AC 04E0  34         clr   @fh.pabstat           ; Clear copy of VDP PAB status byte
     66AE A438     
0042 66B0 04E0  34         clr   @fh.ioresult          ; Clear status register contents
     66B2 A43A     
0043                       ;------------------------------------------------------
0044                       ; Save parameters / callback functions
0045                       ;------------------------------------------------------
0046 66B4 0204  20         li    tmp0,fh.fopmode.readfile
     66B6 0001     
0047                                                   ; Going to read a file
0048 66B8 C804  38         mov   tmp0,@fh.fopmode      ; Set file operations mode
     66BA A44A     
0049               
0050 66BC C820  54         mov   @parm1,@fh.fname.ptr  ; Pointer to file descriptor
     66BE A006     
     66C0 A444     
0051 66C2 C820  54         mov   @parm2,@fh.callback1  ; Callback function "Before loading image"
     66C4 A008     
     66C6 A450     
0052 66C8 C820  54         mov   @parm3,@fh.callback2  ; Callback function "Binary image loaded"
     66CA A00A     
     66CC A452     
0053 66CE C820  54         mov   @parm4,@fh.callback3  ; Callback function "File I/O error"
     66D0 A00C     
     66D2 A454     
0054               
0055 66D4 0204  20         li    tmp0,fh.file.pab.header.binimage
     66D6 77DE     
0056 66D8 C804  38         mov   tmp0,@fh.pabtpl.ptr   ; Set pointer to PAB template in ROM/RAM
     66DA A466     
0057               
0058 66DC 04E0  34         clr   @fh.ftype.init        ; File type/mode (in LSB)
     66DE A45A     
0059                       ;------------------------------------------------------
0060                       ; Loading file in destination memory
0061                       ;------------------------------------------------------
0062               fh.file.load.bin.newfile:
0063 66E0 0720  34         seto  @fh.temp1             ; Set flag "load file"
     66E2 A460     
0064 66E4 04E0  34         clr   @fh.temp3             ; Not used
     66E6 A464     
0065                       ;------------------------------------------------------
0066                       ; Asserts
0067                       ;------------------------------------------------------
0068               fh.file.load.bin.assert1:
0069 66E8 C120  34         mov   @fh.callback1,tmp0
     66EA A450     
0070 66EC 1306  14         jeq   fh.file.load.bin.assert2
0071 66EE 0284  22         ci    tmp0,>6000            ; Insane address ?
     66F0 6000     
0072 66F2 1115  14         jlt   fh.file.load.bin.crsh ; Yes, crash!
0073 66F4 0284  22         ci    tmp0,>7fff            ; Insane address ?
     66F6 7FFF     
0074 66F8 1512  14         jgt   fh.file.load.bin.crsh ; Yes, crash!
0075               
0076               fh.file.load.bin.assert2
0077 66FA C120  34         mov   @fh.callback2,tmp0
     66FC A452     
0078 66FE 1306  14         jeq   fh.file.load.bin.assert3
0079 6700 0284  22         ci    tmp0,>6000            ; Insane address ?
     6702 6000     
0080 6704 110C  14         jlt   fh.file.load.bin.crsh ; Yes, crash!
0081 6706 0284  22         ci    tmp0,>7fff            ; Insane address ?
     6708 7FFF     
0082 670A 1509  14         jgt   fh.file.load.bin.crsh ; Yes, crash!
0083               
0084               fh.file.load.bin.assert3:
0085 670C C120  34         mov   @fh.callback3,tmp0
     670E A454     
0086 6710 130A  14         jeq   fh.file.load.bin.load1
0087 6712 0284  22         ci    tmp0,>6000            ; Insane address ?
     6714 6000     
0088 6716 1103  14         jlt   fh.file.load.bin.crsh ; Yes, crash!
0089 6718 0284  22         ci    tmp0,>7fff            ; Insane address ?
     671A 7FFF     
0090 671C 1500  14         jgt   fh.file.load.bin.crsh ; Yes, crash!
0091                       ;------------------------------------------------------
0092                       ; Check failed, crash CPU!
0093                       ;------------------------------------------------------
0094               fh.file.load.bin.crsh:
0095 671E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6720 FFCE     
0096 6722 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6724 2026     
0097                       ;------------------------------------------------------
0098                       ; Callback "Before load binary image"
0099                       ;------------------------------------------------------
0100               fh.file.load.bin.load1:
0101 6726 C120  34         mov   @fh.callback1,tmp0
     6728 A450     
0102 672A 1301  14         jeq   fh.file.load.bin.pabheader
0103                                                   ; Skip callback
0104 672C 0694  24         bl    *tmp0                 ; Run callback function
0105                       ;------------------------------------------------------
0106                       ; Copy PAB header to VDP
0107                       ;------------------------------------------------------
0108               fh.file.load.bin.pabheader:
0109 672E 0204  20         li    tmp0,fh.vpab          ; VDP destination
     6730 1400     
0110 6732 C160  34         mov   @fh.pabtpl.ptr,tmp1   ; PAB header source address
     6734 A466     
0111 6736 0206  20         li    tmp2,9                ; 9 bytes to copy
     6738 0009     
0112               
0113 673A 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     673C 24EC     
0114                                                   ; \ i  tmp0 = VDP destination
0115                                                   ; | i  tmp1 = CPU source
0116                                                   ; / i  tmp2 = Number of bytes to copy
0117                       ;------------------------------------------------------
0118                       ; Append file descriptor to PAB header in VDP
0119                       ;------------------------------------------------------
0120 673E 0204  20         li    tmp0,fh.vpab + 9      ; VDP destination
     6740 1409     
0121 6742 C160  34         mov   @fh.fname.ptr,tmp1    ; Get pointer to file descriptor
     6744 A444     
0122 6746 D195  26         movb  *tmp1,tmp2            ; Get file descriptor length
0123 6748 0986  32         srl   tmp2,8                ; Right justify
0124 674A 0586  14         inc   tmp2                  ; Include length byte as well
0125               
0126 674C 06A0  32         bl    @xpym2v               ; Copy CPU memory to VDP memory
     674E 24EC     
0127                                                   ; \ i  tmp0 = VDP destination
0128                                                   ; | i  tmp1 = CPU source
0129                                                   ; / i  tmp2 = Number of bytes to copy
0130                       ;------------------------------------------------------
0131                       ; Load binary image
0132                       ;------------------------------------------------------
0133 6750 0200  20         li    r0,fh.vpab            ; Address of PAB in VRAM
     6752 1400     
0134 6754 C060  34         mov   @fh.ftype.init,r1     ; File type/mode (in LSB)
     6756 A45A     
0135               
0136                       ;bl    @xfile.load           ; Read binary image (register version)
0137                                                   ; \ i  r0 = Address of PAB in VRAM
0138                                                   ; | o  tmp0 = Status byte
0139                                                   ; | o  tmp1 = Bytes read
0140                                                   ; | o  tmp2 = Status register contents
0141                                                   ; /           upon DSRLNK return
0142               
0143 6758 C804  38         mov   tmp0,@fh.pabstat      ; Save VDP PAB status byte
     675A A438     
0144 675C C805  38         mov   tmp1,@fh.reclen       ; Save bytes read
     675E A43E     
0145 6760 C806  38         mov   tmp2,@fh.ioresult     ; Save status register contents
     6762 A43A     
0146               
0147 6764 21A0  32         coc   @wbit2,tmp2           ; Equal bit set?
     6766 201C     
0148 6768 1602  14         jne   fh.file.load.bin.check_fioerr
0149 676A 0460  28         b     @fh.file.load.bin.error
     676C 6794     
0150                                                   ; Yes, IO error occured
0151                       ;------------------------------------------------------
0152                       ; Check if a file error occured
0153                       ;------------------------------------------------------
0154               fh.file.load.bin.check_fioerr:
0155 676E C1A0  34         mov   @fh.ioresult,tmp2
     6770 A43A     
0156 6772 21A0  32         coc   @wbit2,tmp2           ; IO error occured?
     6774 201C     
0157 6776 1602  14         jne   fh.file.load.bin.process
0158                                                   ; No, goto (3)
0159 6778 0460  28         b     @fh.file.load.bin.error
     677A 6794     
0160                                                   ; Yes, so handle file error
0161                       ;------------------------------------------------------
0162                       ; 3: Process segment
0163                       ;------------------------------------------------------
0164               fh.file.load.bin.process:
0165 677C 0204  20         li    tmp0,fh.vrecbuf       ; VDP source address
     677E 2000     
0166 6780 C160  34         mov   @fh.ram.ptr,tmp1      ; RAM target address
     6782 A45C     
0167 6784 C1A0  34         mov   @fh.reclen,tmp2       ; Number of bytes to copy
     6786 A43E     
0168                       ;------------------------------------------------------
0169                       ; 3b: Copy segment from VDP to CPU memory
0170                       ;------------------------------------------------------
0171               fh.file.load.bin.vdp2cpu:
0172                       ;
0173                       ; Executed for devices that need their disk buffer in VDP memory
0174                       ; (TI Disk Controller, tipi, nanopeb, ...).
0175                       ;
0176 6788 06A0  32         bl    @xpyv2m               ; Copy memory block from VDP to CPU
     678A 251E     
0177                                                   ; \ i  tmp0 = VDP source address
0178                                                   ; | i  tmp1 = RAM target address
0179                                                   ; / i  tmp2 = Bytes to copy
0180                       ;------------------------------------------------------
0181                       ; Step 5: Callback "Binary file loaded"
0182                       ;------------------------------------------------------
0183               fh.file.load.bin.callback2:
0184 678C C120  34         mov   @fh.callback2,tmp0    ; Get pointer to callback
     678E A452     
0185 6790 1301  14         jeq   fh.file.load.bin.error
0186                                                   ; Skip callback
0187 6792 0694  24         bl    *tmp0                 ; Run callback function
0188                       ;------------------------------------------------------
0189                       ; Error handler
0190                       ;------------------------------------------------------
0191               fh.file.load.bin.error:
0192 6794 C120  34         mov   @fh.pabstat,tmp0      ; Get VDP PAB status byte
     6796 A438     
0193 6798 0984  32         srl   tmp0,8                ; Right align VDP PAB 1 status byte
0194 679A 0284  22         ci    tmp0,io.err.eof       ; EOF reached ?
     679C 0005     
0195 679E 1304  14         jeq   fh.file.load.bin.exit ; All good. File closed by DSRLNK
0196                       ;------------------------------------------------------
0197                       ; Callback "File I/O error"
0198                       ;------------------------------------------------------
0199 67A0 C120  34         mov   @fh.callback3,tmp0    ; Get pointer to Callback "File I/O error"
     67A2 A454     
0200 67A4 1301  14         jeq   fh.file.load.bin.exit
0201                                                   ; Skip callback
0202 67A6 0694  24         bl    *tmp0                 ; Run callback function
0203               *--------------------------------------------------------------
0204               * Exit
0205               *--------------------------------------------------------------
0206               fh.file.load.bin.exit:
0207 67A8 04E0  34         clr   @fh.fopmode           ; Set FOP mode to idle operation
     67AA A44A     
0208               
0209 67AC 06A0  32         bl    @film
     67AE 2236     
0210 67B0 83A0                   data >83a0,>00,96     ; Clear any garbage left-over by DSR calls.
     67B2 0000     
     67B4 0060     
0211               
0212 67B6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0213 67B8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0214 67BA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0215 67BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0216 67BE C2F9  30         mov   *stack+,r11           ; Pop R11
0217 67C0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0075                       copy  "fm.loadfile.asm"          ; Load DV80 file into editor buffer
     **** ****     > fm.loadfile.asm
0001               * FILE......: fm.loadfile.asm
0002               * Purpose...: File Manager - Load file into editor buffer
0003               
0004               ***************************************************************
0005               * fm.loadfile
0006               * Load file into editor buffer
0007               ***************************************************************
0008               * bl  @fm.loadfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               *---------------------------------------------------------------
0014               * OUTPUT
0015               * outparm1 = >FFFF if editor bufer dirty (does not load file)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               fm.loadfile:
0021 67C2 0649  14         dect  stack
0022 67C4 C64B  30         mov   r11,*stack            ; Save return address
0023 67C6 0649  14         dect  stack
0024 67C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 67CA 0649  14         dect  stack
0026 67CC C645  30         mov   tmp1,*stack           ; Push tmp1
0027 67CE 0649  14         dect  stack
0028 67D0 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 67D2 0649  14         dect  stack
0030 67D4 C660  46         mov   @parm1,*stack         ; Push @parm1
     67D6 A006     
0031 67D8 0649  14         dect  stack
0032 67DA C660  46         mov   @parm2,*stack         ; Push @parm2
     67DC A008     
0033 67DE 0649  14         dect  stack
0034 67E0 C660  46         mov   @parm3,*stack         ; Push @parm3
     67E2 A00A     
0035 67E4 0649  14         dect  stack
0036 67E6 C660  46         mov   @parm4,*stack         ; Push @parm4
     67E8 A00C     
0037 67EA 0649  14         dect  stack
0038 67EC C660  46         mov   @parm5,*stack         ; Push @parm5
     67EE A00E     
0039 67F0 0649  14         dect  stack
0040 67F2 C660  46         mov   @parm6,*stack         ; Push @parm6
     67F4 A010     
0041 67F6 0649  14         dect  stack
0042 67F8 C660  46         mov   @parm7,*stack         ; Push @parm7
     67FA A012     
0043 67FC 0649  14         dect  stack
0044 67FE C660  46         mov   @parm8,*stack         ; Push @parm8
     6800 A014     
0045                       ;-------------------------------------------------------
0046                       ; Exit early if editor buffer is dirty
0047                       ;-------------------------------------------------------
0048 6802 C160  34         mov   @edb.dirty,tmp1       ; Get dirty flag
     6804 A506     
0049 6806 1303  14         jeq   !                     ; Load file unless dirty
0050               
0051 6808 0720  34         seto  @outparm1             ; \ Editor buffer dirty, set flag
     680A A018     
0052 680C 105A  14         jmp   fm.loadfile.exit      ; / and exit early
0053                       ;-------------------------------------------------------
0054                       ; Clear VDP screen buffer
0055                       ;-------------------------------------------------------
0056 680E 06A0  32 !       bl    @filv
     6810 228E     
0057 6812 1300                   data sprsat,>0000,16  ; Turn off sprites (cursor)
     6814 0000     
     6816 0010     
0058               
0059 6818 C160  34         mov   @fb.scrrows.max,tmp1
     681A A31E     
0060 681C 3960  74         mpy   @fb.colsline,tmp1     ; columns per line * rows on screen
     681E A30E     
0061                                                   ; 16 bit part is in tmp2!
0062               
0063 6820 06A0  32         bl    @scroff               ; Turn off screen
     6822 26E6     
0064               
0065               fm.loadfile.clear:
0066 6824 0204  20         li    tmp0,vdp.fb.toprow.sit
     6826 0050     
0067                                                   ; VDP target address (2nd row on screen!)
0068 6828 0205  20         li    tmp1,32               ; Character to fill
     682A 0020     
0069 682C 06A0  32         bl    @xfilv                ; Fill VDP memory
     682E 2294     
0070                                                   ; \ i  tmp0 = VDP target address
0071                                                   ; | i  tmp1 = Byte to fill
0072                                                   ; / i  tmp2 = Bytes to copy
0073                       ;-------------------------------------------------------
0074                       ; Reload colorscheme
0075                       ;-------------------------------------------------------
0076 6830 0649  14         dect  stack
0077 6832 C660  46         mov   @parm1,*stack         ; Push @parm1
     6834 A006     
0078 6836 0649  14         dect  stack
0079 6838 C660  46         mov   @parm2,*stack         ; Push @parm2
     683A A008     
0080 683C 0649  14         dect  stack
0081 683E C660  46         mov   @parm3,*stack         ; Push @parm3
     6840 A00A     
0082               
0083 6842 0720  34         seto  @parm1                ; \ Do not turn screen off while reloading
     6844 A006     
0084                                                   ; / color scheme
0085               
0086 6846 0720  34         seto  @parm2                ; Skip marked lines colorization
     6848 A008     
0087 684A 04E0  34         clr   @parm3                ; Colorize all panes
     684C A00A     
0088               
0089 684E 04E0  34         clr   @tv.error.visible     ; No error message/pane
     6850 A230     
0090               
0091 6852 06A0  32         bl    @pane.colorscheme.load
     6854 7650     
0092                                                   ; Reload color scheme
0093                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0094                                                   ; | i  @parm2 = Skip colorizing marked lines
0095                                                   ; |             if >FFFF
0096                                                   ; | i  @parm3 = Only colorize CMDB pane
0097                                                   ; /             if >FFFF
0098               
0099               
0100 6856 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     6858 A00A     
0101 685A C839  50         mov   *stack+,@parm2        ; Pop @parm2
     685C A008     
0102 685E C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6860 A006     
0103                       ;-------------------------------------------------------
0104                       ; Reset editor
0105                       ;-------------------------------------------------------
0106 6862 06A0  32         bl    @tv.reset             ; Reset editor
     6864 773A     
0107                       ;-------------------------------------------------------
0108                       ; Change filename
0109                       ;-------------------------------------------------------
0110 6866 C120  34         mov   @parm1,tmp0           ; Source address
     6868 A006     
0111 686A 0205  20         li    tmp1,edb.filename     ; Target address
     686C A526     
0112 686E 0206  20         li    tmp2,80               ; Number of bytes to copy
     6870 0050     
0113 6872 C805  38         mov   tmp1,@edb.filename.ptr
     6874 A514     
0114                                                   ; Set filename
0115               
0116 6876 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     6878 2540     
0117                                                   ; tmp1 = Memory target address
0118                                                   ; tmp2 = Number of bytes to copy
0119                       ;-------------------------------------------------------
0120                       ; Read DV80 file and display
0121                       ;-------------------------------------------------------
0122 687A 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     687C 6A80     
0123 687E C804  38         mov   tmp0,@parm2           ; Register callback 1
     6880 A008     
0124               
0125 6882 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     6884 6B52     
0126 6886 C804  38         mov   tmp0,@parm3           ; Register callback 2
     6888 A00A     
0127               
0128 688A 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     688C 6C00     
0129 688E C804  38         mov   tmp0,@parm4           ; Register callback 3
     6890 A00C     
0130               
0131 6892 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     6894 6CA0     
0132 6896 C804  38         mov   tmp0,@parm5           ; Register callback 4
     6898 A00E     
0133               
0134 689A 0204  20         li    tmp0,fm.load.cb.memfull
     689C 6D78     
0135 689E C804  38         mov   tmp0,@parm6           ; Register callback 5
     68A0 A010     
0136               
0137 68A2 0720  34         seto  @parm7                ; Load new file
     68A4 A012     
0138               
0139 68A6 0204  20         li    tmp0,id.file.loadfile
     68A8 0001     
0140 68AA C804  38         mov   tmp0,@parm8           ; Work mode
     68AC A014     
0141               
0142 68AE 06A0  32         bl    @fh.file.read.edb     ; Read file into editor buffer
     68B0 61F2     
0143                                                   ; \ i  @parm1 = Pointer to length prefixed
0144                                                   ; |             file descriptor
0145                                                   ; | i  @parm2 = Pointer to callback
0146                                                   ; |             "Before Open file"
0147                                                   ; | i  @parm3 = Pointer to callback
0148                                                   ; |             "Read line from file"
0149                                                   ; | i  @parm4 = Pointer to callback
0150                                                   ; |             "Close file"
0151                                                   ; | i  @parm5 = Pointer to callback
0152                                                   ; |             "File I/O error"
0153                                                   ; | i  @parm6 = Pointer to callback
0154                                                   ; |             "Memory full error"
0155                                                   ; | i  @parm7 = Line to insert file at
0156                                                   ; |             or >ffff for new file
0157                                                   ; / i  @parm8 = Work mode
0158               
0159 68B2 04E0  34         clr   @edb.dirty            ; Editor buffer content replaced, not
     68B4 A506     
0160                                                   ; longer dirty.
0161               
0162 68B6 0204  20         li    tmp0,txt.filetype.DV80
     68B8 3B7E     
0163 68BA C804  38         mov   tmp0,@edb.filetype.ptr
     68BC A516     
0164                                                   ; Set filetype display string
0165               
0166 68BE 04E0  34         clr   @outparm1             ; Reset
     68C0 A018     
0167               *--------------------------------------------------------------
0168               * Exit
0169               *--------------------------------------------------------------
0170               fm.loadfile.exit:
0171 68C2 C839  50         mov   *stack+,@parm8        ; Pop @parm8
     68C4 A014     
0172 68C6 C839  50         mov   *stack+,@parm7        ; Pop @parm7
     68C8 A012     
0173 68CA C839  50         mov   *stack+,@parm6        ; Pop @parm6
     68CC A010     
0174 68CE C839  50         mov   *stack+,@parm5        ; Pop @parm5
     68D0 A00E     
0175 68D2 C839  50         mov   *stack+,@parm4        ; Pop @parm4
     68D4 A00C     
0176 68D6 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     68D8 A00A     
0177 68DA C839  50         mov   *stack+,@parm2        ; Pop @parm2
     68DC A008     
0178 68DE C839  50         mov   *stack+,@parm1        ; Pop @parm1
     68E0 A006     
0179 68E2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0180 68E4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0181 68E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0182 68E8 C2F9  30         mov   *stack+,r11           ; Pop R11
0183 68EA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0076                       copy  "fm.insertfile.asm"        ; Insert DV80 file into editor buffer
     **** ****     > fm.insertfile.asm
0001               * FILE......: fm.insertfile.asm
0002               * Purpose...: File Manager - Insert (or append) file into editor buffer
0003               
0004               ***************************************************************
0005               * fm.insertfile
0006               * Insert (or append) file into editor buffer
0007               ***************************************************************
0008               * bl  @fm.insertfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               * parm2  = Line number to load file at
0014               * parm3  = Work mode
0015               *---------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0, tmp1
0021               ********|*****|*********************|**************************
0022               fm.insertfile:
0023 68EC 0649  14         dect  stack
0024 68EE C64B  30         mov   r11,*stack            ; Save return address
0025 68F0 0649  14         dect  stack
0026 68F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 68F4 0649  14         dect  stack
0028 68F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 68F8 0649  14         dect  stack
0030 68FA C646  30         mov   tmp2,*stack           ; Push tmp2
0031 68FC 0649  14         dect  stack
0032 68FE C660  46         mov   @parm1,*stack         ; Push @parm1
     6900 A006     
0033 6902 0649  14         dect  stack
0034 6904 C660  46         mov   @parm2,*stack         ; Push @parm2
     6906 A008     
0035 6908 0649  14         dect  stack
0036 690A C660  46         mov   @parm3,*stack         ; Push @parm3
     690C A00A     
0037                       ;-------------------------------------------------------
0038                       ; Clear VDP screen buffer
0039                       ;-------------------------------------------------------
0040 690E 06A0  32 !       bl    @filv
     6910 228E     
0041 6912 1300                   data sprsat,>0000,16  ; Turn off sprites (cursor)
     6914 0000     
     6916 0010     
0042                       ;-------------------------------------------------------
0043                       ; Read DV80 file and display
0044                       ;-------------------------------------------------------
0045 6918 C820  54         mov   @parm2,@parm7         ; Get line number
     691A A008     
     691C A012     
0046 691E C820  54         mov   @parm3,@parm8         ; Work mode
     6920 A00A     
     6922 A014     
0047               
0048 6924 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     6926 6A80     
0049 6928 C804  38         mov   tmp0,@parm2           ; Register callback 1
     692A A008     
0050               
0051 692C 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     692E 6B52     
0052 6930 C804  38         mov   tmp0,@parm3           ; Register callback 2
     6932 A00A     
0053               
0054 6934 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     6936 6C00     
0055 6938 C804  38         mov   tmp0,@parm4           ; Register callback 3
     693A A00C     
0056               
0057 693C 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     693E 6CA0     
0058 6940 C804  38         mov   tmp0,@parm5           ; Register callback 4
     6942 A00E     
0059               
0060 6944 0204  20         li    tmp0,fm.load.cb.memfull
     6946 6D78     
0061 6948 C804  38         mov   tmp0,@parm6           ; Register callback 5
     694A A010     
0062               
0063 694C 06A0  32         bl    @fh.file.read.edb     ; Read file into editor buffer
     694E 61F2     
0064                                                   ; \ i  @parm1 = Pointer to length prefixed
0065                                                   ; |             file descriptor
0066                                                   ; | i  @parm2 = Pointer to callback
0067                                                   ; |             "Before Open file"
0068                                                   ; | i  @parm3 = Pointer to callback
0069                                                   ; |             "Read line from file"
0070                                                   ; | i  @parm4 = Pointer to callback
0071                                                   ; |             "Close file"
0072                                                   ; | i  @parm5 = Pointer to callback
0073                                                   ; |             "File I/O error"
0074                                                   ; | i  @parm6 = Pointer to callback
0075                                                   ; |             "Memory full error"
0076                                                   ; | i  @parm7 = Line to insert file at
0077                                                   ; |             or >ffff for new file
0078                                                   ; / i  @parm8 = Work mode
0079               *--------------------------------------------------------------
0080               * Exit
0081               *--------------------------------------------------------------
0082               fm.insertfile.exit:
0083 6950 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     6952 A00A     
0084 6954 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     6956 A008     
0085 6958 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     695A A006     
0086 695C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0087 695E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 6960 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 6962 C2F9  30         mov   *stack+,r11           ; Pop R11
0090 6964 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0077                       copy  "fm.savefile.asm"          ; Save DV80 file from editor buffer
     **** ****     > fm.savefile.asm
0001               * FILE......: fm.savefile.asm
0002               * Purpose...: File Manager - Save file from editor buffer
0003               
0004               ***************************************************************
0005               * fm.savefile
0006               * Save file from editor buffer
0007               ***************************************************************
0008               * bl  @fm.savefile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               * parm2  = First line to save (base 0)
0014               * parm3  = Last line to save  (base 0)
0015               * parm4  = Work mode (See id.file.XXXX)
0016               *---------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1
0022               ********|*****|*********************|**************************
0023               fm.savefile:
0024 6966 0649  14         dect  stack
0025 6968 C64B  30         mov   r11,*stack            ; Save return address
0026 696A 0649  14         dect  stack
0027 696C C644  30         mov   tmp0,*stack           ; Push tmp0
0028 696E 0649  14         dect  stack
0029 6970 C645  30         mov   tmp1,*stack           ; Push tmp1
0030                       ;-------------------------------------------------------
0031                       ; Check if filename must be changed in editor buffer
0032                       ;-------------------------------------------------------
0033 6972 0204  20         li    tmp0,id.file.savefile ; Saving full file?
     6974 0004     
0034 6976 8120  34         c     @parm4,tmp0
     6978 A00C     
0035 697A 160A  14         jne   !                     ; No, skip changing filename
0036                       ;-------------------------------------------------------
0037                       ; Change filename
0038                       ;-------------------------------------------------------
0039 697C C120  34         mov   @parm1,tmp0           ; Source address
     697E A006     
0040 6980 0205  20         li    tmp1,edb.filename     ; Target address
     6982 A526     
0041 6984 0206  20         li    tmp2,80               ; Number of bytes to copy
     6986 0050     
0042 6988 C805  38         mov   tmp1,@edb.filename.ptr
     698A A514     
0043                                                   ; Set filename
0044               
0045 698C 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     698E 2540     
0046                                                   ; tmp1 = Memory target address
0047                                                   ; tmp2 = Number of bytes to copy
0048               
0049                       ;-------------------------------------------------------
0050                       ; Save DV80 file
0051                       ;-------------------------------------------------------
0052 6990 C820  54 !       mov   @parm2,@parm6         ; First line to save
     6992 A008     
     6994 A010     
0053 6996 C820  54         mov   @parm3,@parm7         ; Last line to save
     6998 A00A     
     699A A012     
0054 699C C820  54         mov   @parm4,@parm8         ; Work mode
     699E A00C     
     69A0 A014     
0055               
0056 69A2 0204  20         li    tmp0,fm.loadsave.cb.indicator1
     69A4 6A80     
0057 69A6 C804  38         mov   tmp0,@parm2           ; Register callback 1
     69A8 A008     
0058               
0059 69AA 0204  20         li    tmp0,fm.loadsave.cb.indicator2
     69AC 6B52     
0060 69AE C804  38         mov   tmp0,@parm3           ; Register callback 2
     69B0 A00A     
0061               
0062 69B2 0204  20         li    tmp0,fm.loadsave.cb.indicator3
     69B4 6C00     
0063 69B6 C804  38         mov   tmp0,@parm4           ; Register callback 3
     69B8 A00C     
0064               
0065 69BA 0204  20         li    tmp0,fm.loadsave.cb.fioerr
     69BC 6CA0     
0066 69BE C804  38         mov   tmp0,@parm5           ; Register callback 4
     69C0 A00E     
0067               
0068 69C2 06A0  32         bl    @filv
     69C4 228E     
0069 69C6 1300                   data sprsat,>0000,16  ; Turn off sprites
     69C8 0000     
     69CA 0010     
0070               
0071 69CC 06A0  32         bl    @fh.file.write.edb    ; Save file from editor buffer
     69CE 64E2     
0072                                                   ; \ i  @parm1 = Pointer to length prefixed
0073                                                   ; |             file descriptor
0074                                                   ; | i  @parm2 = Pointer to callback
0075                                                   ; |             "Before Open file"
0076                                                   ; | i  @parm3 = Pointer to callback
0077                                                   ; |             "Write line to file"
0078                                                   ; | i  @parm4 = Pointer to callback
0079                                                   ; |             "Close file"
0080                                                   ; | i  @parm5 = Pointer to callback
0081                                                   ; |             "File I/O error"
0082                                                   ; | i  @parm6 = First line to save (base 0)
0083                                                   ; | i  @parm7 = Last line to save  (base 0)
0084                                                   ; | i  @parm8 = Working mode
0085                                                   ; /
0086               
0087 69D0 04E0  34         clr   @edb.dirty            ; Editor buffer no longer dirty.
     69D2 A506     
0088               
0089 69D4 0204  20         li    tmp0,txt.filetype.DV80
     69D6 3B7E     
0090 69D8 C804  38         mov   tmp0,@edb.filetype.ptr
     69DA A516     
0091                                                   ; Set filetype display string
0092               *--------------------------------------------------------------
0093               * Exit
0094               *--------------------------------------------------------------
0095               fm.savefile.exit:
0096 69DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0097 69DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0098 69E0 C2F9  30         mov   *stack+,r11           ; Pop R11
0099 69E2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0078                       copy  "fm.newfile.asm"           ; New DV80 file in editor buffer
     **** ****     > fm.newfile.asm
0001               * FILE......: fm.newfile.asm
0002               * Purpose...: File Manager - New file in editor buffer
0003               
0004               ***************************************************************
0005               * fm.newfile
0006               * New file in editor buffer, clear everything out
0007               ***************************************************************
0008               * bl  @fm.newfile
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               ********|*****|*********************|**************************
0019               fm.newfile:
0020 69E4 0649  14         dect  stack
0021 69E6 C64B  30         mov   r11,*stack            ; Save return address
0022 69E8 0649  14         dect  stack
0023 69EA C644  30         mov   tmp0,*stack           ; Push tmp0
0024 69EC 0649  14         dect  stack
0025 69EE C645  30         mov   tmp1,*stack           ; Push tmp1
0026               *--------------------------------------------------------------
0027               * Put message
0028               *--------------------------------------------------------------
0029 69F0 06A0  32         bl    @pane.botline.busy.on ; \ Put busy indicator on
     69F2 76AA     
0030                                                   ; /
0031               
0032 69F4 06A0  32         bl    @putat
     69F6 2442     
0033 69F8 1D00                   byte pane.botrow,0
0034 69FA 3A24                   data txt.clearmem     ; Display "Clearing memory...."
0035               *--------------------------------------------------------------
0036               * Clear SAMS pages and exit editor
0037               *--------------------------------------------------------------
0038 69FC 06A0  32         bl    @edb.clear.sams       ; Clear SAMS memory used by editor buffer
     69FE 7704     
0039 6A00 06A0  32         bl    @tv.reset             ; Reset editor
     6A02 773A     
0040               *--------------------------------------------------------------
0041               * Remove message
0042               *--------------------------------------------------------------
0043 6A04 06A0  32         bl    @hchar
     6A06 2832     
0044 6A08 0000                   byte 0,0,32,80
     6A0A 2050     
0045 6A0C FFFF                   data EOL              ; Clear top row and hint on bottom row
0046               
0047 6A0E 04E0  34         clr   @tv.specmsg.ptr       ; Remove any special message
     6A10 A23A     
0048               
0049 6A12 06A0  32         bl    @pane.botline.busy.off  ; \ Put busyline indicator off
     6A14 76BC     
0050                                                     ; /
0051               *--------------------------------------------------------------
0052               * Exit
0053               *--------------------------------------------------------------
0054               fm.newfile.exit:
0055 6A16 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0056 6A18 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 6A1A C2F9  30         mov   *stack+,r11           ; Pop R11
0058 6A1C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0079                       copy  "fm.run.ea5.asm"           ; Run EA5 program image
     **** ****     > fm.run.ea5.asm
0001               * FILE......: fm.run.ea5.asm
0002               * Purpose...: File Manager - Run EA5 program image
0003               
0004               ***************************************************************
0005               * fm.run.ea5
0006               * Run EA5 program image
0007               ***************************************************************
0008               * bl  @fm.run.ea5
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * parm1  = Pointer to length-prefixed string containing both
0012               *          device and filename
0013               *---------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               fm.run.ea5:
0021 6A1E 0649  14         dect  stack
0022 6A20 C64B  30         mov   r11,*stack            ; Save return address
0023 6A22 0649  14         dect  stack
0024 6A24 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6A26 0649  14         dect  stack
0026 6A28 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6A2A 0649  14         dect  stack
0028 6A2C C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6A2E 0649  14         dect  stack
0030 6A30 C660  46         mov   @parm1,*stack         ; Push @parm1
     6A32 A006     
0031 6A34 0649  14         dect  stack
0032 6A36 C660  46         mov   @parm2,*stack         ; Push @parm2
     6A38 A008     
0033 6A3A 0649  14         dect  stack
0034 6A3C C660  46         mov   @parm3,*stack         ; Push @parm3
     6A3E A00A     
0035 6A40 0649  14         dect  stack
0036 6A42 C660  46         mov   @parm4,*stack         ; Push @parm4
     6A44 A00C     
0037                       ;-------------------------------------------------------
0038                       ; Exit early if editor buffer is dirty
0039                       ;-------------------------------------------------------
0040 6A46 C160  34         mov   @edb.dirty,tmp1       ; Get dirty flag
     6A48 A506     
0041 6A4A 1303  14         jeq   !                     ; Load file unless dirty
0042               
0043 6A4C 0720  34         seto  @outparm1             ; \ Editor buffer dirty, set flag
     6A4E A018     
0044 6A50 100A  14         jmp   fm.run.ea5.exit       ; / and exit early
0045                       ;-------------------------------------------------------
0046                       ; Load EA5 program image into memory
0047                       ;-------------------------------------------------------
0048 6A52 04E0  34 !       clr   @parm2                ; Skip callback 1
     6A54 A008     
0049 6A56 04E0  34         clr   @parm3                ; Skip callback 2
     6A58 A00A     
0050 6A5A 04E0  34         clr   @parm4                ; Skip callback 3
     6A5C A00C     
0051               
0052 6A5E 06A0  32         bl    @fh.file.load.bin     ; Load binary image into memory
     6A60 6698     
0053                                                   ; \ i  @parm1 = Pointer to length prefixed
0054                                                   ; |             file descriptor
0055                                                   ; | i  @parm2 = Pointer to callback
0056                                                   ; |             "Before load binary file"
0057                                                   ; | i  @parm3 = Pointer to callback
0058                                                   ; |             "Binary file loaded"
0059                                                   ; | i  @parm4 = Pointer to callback
0060                                                   ; /             "File I/O error"
0061               
0062 6A62 04E0  34         clr   @outparm1             ; Reset
     6A64 A018     
0063               *--------------------------------------------------------------
0064               * Exit
0065               *--------------------------------------------------------------
0066               fm.run.ea5.exit:
0067 6A66 C839  50         mov   *stack+,@parm4        ; Pop @parm4
     6A68 A00C     
0068 6A6A C839  50         mov   *stack+,@parm3        ; Pop @parm3
     6A6C A00A     
0069 6A6E C839  50         mov   *stack+,@parm2        ; Pop @parm2
     6A70 A008     
0070 6A72 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6A74 A006     
0071 6A76 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 6A78 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 6A7A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 6A7C C2F9  30         mov   *stack+,r11           ; Pop R11
0075 6A7E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0080                       copy  "fm.callbacks.edb.asm"     ; Callbacks for editor buffer file IO
     **** ****     > fm.callbacks.edb.asm
0001               * FILE......: fm.callbacks.edb.asm
0002               * Purpose...: File Manager - Callbacks for editor buffer file I/O
0003               
0004               *---------------------------------------------------------------
0005               * Callback function "Show loading indicator 1"
0006               * Open file
0007               *---------------------------------------------------------------
0008               * INPUT
0009               * @parm1 = Pointer to length-prefixed filname descriptor
0010               *---------------------------------------------------------------
0011               * Registered as pointer in @fh.callback1
0012               *---------------------------------------------------------------
0013               fm.loadsave.cb.indicator1:
0014 6A80 0649  14         dect  stack
0015 6A82 C64B  30         mov   r11,*stack            ; Save return address
0016 6A84 0649  14         dect  stack
0017 6A86 C644  30         mov   tmp0,*stack           ; Push tmp0
0018 6A88 0649  14         dect  stack
0019 6A8A C645  30         mov   tmp1,*stack           ; Push tmp1
0020 6A8C 0649  14         dect  stack
0021 6A8E C660  46         mov   @parm1,*stack         ; Push @parm1
     6A90 A006     
0022                       ;------------------------------------------------------
0023                       ; Check file operation mode
0024                       ;------------------------------------------------------
0025 6A92 06A0  32         bl    @hchar
     6A94 2832     
0026 6A96 0046                   byte 0,70,32,10       ; Remove any left-over junk on top line
     6A98 200A     
0027 6A9A FFFF                   data eol
0028               
0029 6A9C 06A0  32         bl    @pane.botline.busy.on ; \ Put busy indicator on
     6A9E 76AA     
0030                                                   ; /
0031               
0032 6AA0 C120  34         mov   @fh.fopmode,tmp0      ; Check file operation mode
     6AA2 A44A     
0033 6AA4 0284  22         ci    tmp0,fh.fopmode.writefile
     6AA6 0002     
0034 6AA8 1303  14         jeq   fm.loadsave.cb.indicator1.check.saving
0035                                                   ; Saving file?
0036               
0037 6AAA 0284  22         ci    tmp0,fh.fopmode.readfile
     6AAC 0001     
0038 6AAE 1336  14         jeq   fm.loadsave.cb.indicator1.loading
0039                                                   ; Loading file?
0040                       ;------------------------------------------------------
0041                       ; Check saving mode
0042                       ;------------------------------------------------------
0043               fm.loadsave.cb.indicator1.check.saving:
0044 6AB0 0204  20         li    tmp0,id.file.savefile
     6AB2 0004     
0045 6AB4 8120  34         c     @fh.workmode,tmp0     ; Saving all of file
     6AB6 A45A     
0046 6AB8 1318  14         jeq   fm.loadsave.cb.indicator1.savefile
0047               
0048 6ABA 0204  20         li    tmp0,id.file.saveblock
     6ABC 0005     
0049 6ABE 8120  34         c     @fh.workmode,tmp0     ; Saving code block M1-M2 ?
     6AC0 A45A     
0050 6AC2 1318  14         jeq   fm.loadsave.cb.indicator1.saveblock
0051               
0052 6AC4 0204  20         li    tmp0,id.file.printfile
     6AC6 0007     
0053 6AC8 8120  34         c     @fh.workmode,tmp0     ; Printing all of file
     6ACA A45A     
0054 6ACC 1318  14         jeq   fm.loadsave.cb.indicator1.printfile
0055               
0056 6ACE 0204  20         li    tmp0,id.file.printblock
     6AD0 0008     
0057 6AD2 8120  34         c     @fh.workmode,tmp0     ; Printing code block M1-M2 ?
     6AD4 A45A     
0058 6AD6 1318  14         jeq   fm.loadsave.cb.indicator1.printblock
0059               
0060 6AD8 0204  20         li    tmp0,id.file.clipblock
     6ADA 0006     
0061 6ADC 8120  34         c     @fh.workmode,tmp0     ; Saving block to clipboard ?
     6ADE A45A     
0062 6AE0 1318  14         jeq   fm.loadsave.cb.indicator1.clipblock
0063               
0064                       ;------------------------------------------------------
0065                       ; Unknown save mode. Stop here
0066                       ;------------------------------------------------------
0067               fm.loadsave.cb.indicator1.panic:
0068 6AE2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6AE4 FFCE     
0069 6AE6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6AE8 2026     
0070                       ;------------------------------------------------------
0071                       ; Display Saving....
0072                       ;------------------------------------------------------
0073               fm.loadsave.cb.indicator1.savefile:
0074 6AEA 06A0  32         bl    @putat
     6AEC 2442     
0075 6AEE 1D00                   byte pane.botrow,0
0076 6AF0 3984                   data txt.saving       ; Display "Saving...."
0077 6AF2 1022  14         jmp   fm.loadsave.cb.indicator1.filename
0078                       ;------------------------------------------------------
0079                       ; Display Saving block to file....
0080                       ;------------------------------------------------------
0081               fm.loadsave.cb.indicator1.saveblock:
0082 6AF4 06A0  32         bl    @putat
     6AF6 2442     
0083 6AF8 1D00                   byte pane.botrow,0
0084 6AFA 39E4                   data txt.block.save   ; Display "Saving block...."
0085               
0086 6AFC 1024  14         jmp   fm.loadsave.cb.indicator1.exit
0087                       ;------------------------------------------------------
0088                       ; Display Printing....
0089                       ;------------------------------------------------------
0090               fm.loadsave.cb.indicator1.printfile:
0091 6AFE 06A0  32         bl    @putat
     6B00 2442     
0092 6B02 1D00                   byte pane.botrow,0
0093 6B04 3990                   data txt.printing    ; Display "Printing...."
0094 6B06 101F  14         jmp   fm.loadsave.cb.indicator1.exit
0095                       ;------------------------------------------------------
0096                       ; Display Printing block....
0097                       ;------------------------------------------------------
0098               fm.loadsave.cb.indicator1.printblock:
0099 6B08 06A0  32         bl    @putat
     6B0A 2442     
0100 6B0C 1D00                   byte pane.botrow,0
0101 6B0E 3A10                   data txt.block.print  ; Display "Printing block...."
0102 6B10 101A  14         jmp   fm.loadsave.cb.indicator1.exit
0103                       ;------------------------------------------------------
0104                       ; Display Copying to clipboard....
0105                       ;------------------------------------------------------
0106               fm.loadsave.cb.indicator1.clipblock:
0107 6B12 06A0  32         bl    @putat
     6B14 2442     
0108 6B16 1D00                   byte pane.botrow,0
0109 6B18 39F6                   data txt.block.clip  ; Display "Copying to clipboard...."
0110 6B1A 1015  14         jmp   fm.loadsave.cb.indicator1.exit
0111               
0112                       ;------------------------------------------------------
0113                       ; Display Loading....
0114                       ;------------------------------------------------------
0115               fm.loadsave.cb.indicator1.loading:
0116 6B1C 06A0  32         bl    @putat
     6B1E 2442     
0117 6B20 1D00                   byte pane.botrow,0
0118 6B22 3978                   data txt.loading      ; Display "Loading file...."
0119               
0120 6B24 C120  34         mov   @fh.temp1,tmp0
     6B26 A460     
0121 6B28 0284  22         ci    tmp0,>ffff
     6B2A FFFF     
0122 6B2C 1605  14         jne   fm.loadsave.cb.indicator1.filename
0123                                                   ; Skip if inserting file
0124               
0125 6B2E 06A0  32         bl    @hchar
     6B30 2832     
0126 6B32 0000                   byte 0,0,32,50
     6B34 2032     
0127 6B36 FFFF                   data EOL              ; Clear filename
0128                       ;------------------------------------------------------
0129                       ; Display device/filename
0130                       ;------------------------------------------------------
0131               fm.loadsave.cb.indicator1.filename:
0132 6B38 06A0  32         bl    @at
     6B3A 2726     
0133 6B3C 1D0B                   byte pane.botrow,11   ; Cursor YX position
0134               
0135 6B3E C160  34         mov   @parm1,tmp1           ; Get pointer to file descriptor
     6B40 A006     
0136 6B42 06A0  32         bl    @xutst0               ; Display device/filename
     6B44 2420     
0137                       ;------------------------------------------------------
0138                       ; Exit
0139                       ;------------------------------------------------------
0140               fm.loadsave.cb.indicator1.exit:
0141 6B46 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6B48 A006     
0142 6B4A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0143 6B4C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0144 6B4E C2F9  30         mov   *stack+,r11           ; Pop R11
0145 6B50 045B  20         b     *r11                  ; Return to caller
0146               
0147               
0148               
0149               
0150               *---------------------------------------------------------------
0151               * Callback function "Show loading indicator 2"
0152               * Read line from file / Write line to file
0153               *---------------------------------------------------------------
0154               * Registered as pointer in @fh.callback2
0155               *---------------------------------------------------------------
0156               fm.loadsave.cb.indicator2:
0157 6B52 0649  14         dect  stack
0158 6B54 C64B  30         mov   r11,*stack            ; Push return address
0159 6B56 0649  14         dect  stack
0160 6B58 C644  30         mov   tmp0,*stack           ; Push tmp0
0161                       ;------------------------------------------------------
0162                       ; Check if first page processed (speedup impression)
0163                       ;------------------------------------------------------
0164               fm.loadsave.cb.indicator2.loadsave:
0165 6B5A 8820  50         c     @fh.records,@fb.scrrows.max
     6B5C A43C     
     6B5E A31E     
0166 6B60 1625  14         jne   fm.loadsave.cb.indicator2.kb
0167                                                   ; Skip framebuffer refresh
0168               
0169 6B62 C120  34         mov   @fh.fopmode,tmp0      ; Check file operation mode
     6B64 A44A     
0170 6B66 0284  22         ci    tmp0,fh.fopmode.writefile
     6B68 0002     
0171 6B6A 1308  14         jeq   fm.loadsave.cb.indicator2.topline
0172                                                   ; Saving file
0173               
0174 6B6C C120  34         mov   @fh.temp1,tmp0
     6B6E A460     
0175 6B70 0284  22         ci    tmp0,>ffff            ; Loading file in clean editor buffer?
     6B72 FFFF     
0176 6B74 1603  14         jne   fm.loadsave.cb.indicator2.topline
0177                                                   ; No, inserting file
0178               
0179 6B76 04E0  34         clr   @parm1                ; Line to start with, "load" operation
     6B78 A006     
0180 6B7A 1003  14         jmp   fm.loadsave.cb.indicator2.refresh
0181               
0182               fm.loadsave.cb.indicator2.topline:
0183 6B7C C820  54         mov   @fb.topline,@parm1    ; Line to start with, other operations
     6B7E A304     
     6B80 A006     
0184                       ;------------------------------------------------------
0185                       ; Refresh framebuffer if 1st page processed, runs once
0186                       ;------------------------------------------------------
0187               fm.loadsave.cb.indicator2.refresh:
0188 6B82 06A0  32         bl    @fb.refresh           ; Refresh frame buffer
     6B84 7716     
0189                                                   ; \ i  @parm1 = Line to start with
0190                                                   ; /
0191               
0192 6B86 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6B88 31D0     
0193                                                   ; \ i  @tv.ruler.visible = Ruler visible
0194                                                   ; | i  @edb.special.file = Special file flag
0195                                                   ; / i  @tv.error.visible = Error visible
0196               
0197 6B8A C820  54         mov   @fb.scrrows,@parm1
     6B8C A31C     
     6B8E A006     
0198 6B90 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     6B92 761A     
0199                                                   ; \ i  @parm1 = number of lines to dump
0200                                                   ; /
0201                       ;------------------------------------------------------
0202                       ; Display fast mode
0203                       ;------------------------------------------------------
0204 6B94 0760  38         abs   @fh.offsetopcode
     6B96 A44E     
0205 6B98 1309  14         jeq   fm.loadsave.cb.indicator2.kb
0206               
0207 6B9A 06A0  32         bl    @hchar
     6B9C 2832     
0208 6B9E 0032                   byte 0,50,32,20
     6BA0 2014     
0209 6BA2 FFFF                   data EOL              ; Erase any previous message
0210               
0211 6BA4 06A0  32         bl    @putat
     6BA6 2442     
0212 6BA8 0034                   byte 0,52             ; Position cursor
0213 6BAA 3B00                   data txt.fastmode     ; Display "FastMode"
0214                       ;------------------------------------------------------
0215                       ; Check if updated counters should be displayed
0216                       ;------------------------------------------------------
0217               fm.loadsave.cb.indicator2.kb:
0218 6BAC 8820  50         c     @fh.kilobytes,@fh.kilobytes.prev
     6BAE A440     
     6BB0 A45C     
0219 6BB2 1323  14         jeq   fm.loadsave.cb.indicator2.exit
0220                       ;------------------------------------------------------
0221                       ; Only show updated KB if loading/saving/printing file
0222                       ;------------------------------------------------------
0223 6BB4 0204  20         li    tmp0,id.file.savefile
     6BB6 0004     
0224 6BB8 8120  34         c     @fh.workmode,tmp0
     6BBA A45A     
0225 6BBC 120B  14         jle   fm.loadsave.cb.indicator2.kb.processed
0226                                                   ; includes id.file.loadfile
0227                                                   ; includes id.file.insertfile
0228                                                   ; includes id.file.appendfile
0229                                                   ; includes id.file.savefile
0230               
0231 6BBE 0204  20         li    tmp0,id.file.printfile
     6BC0 0007     
0232 6BC2 8120  34         c     @fh.workmode,tmp0
     6BC4 A45A     
0233 6BC6 1306  14         jeq   fm.loadsave.cb.indicator2.kb.processed
0234               
0235 6BC8 0204  20         li    tmp0,id.file.printblock
     6BCA 0008     
0236 6BCC 8120  34         c     @fh.workmode,tmp0
     6BCE A45A     
0237 6BD0 1301  14         jeq   fm.loadsave.cb.indicator2.kb.processed
0238               
0239 6BD2 1013  14         jmp   fm.loadsave.cb.indicator2.exit
0240                       ;------------------------------------------------------
0241                       ; Display updated counters
0242                       ;------------------------------------------------------
0243               fm.loadsave.cb.indicator2.kb.processed:
0244 6BD4 C820  54         mov   @fh.kilobytes,@fh.kilobytes.prev
     6BD6 A440     
     6BD8 A45C     
0245                                                   ; Save for compare
0246               
0247 6BDA 06A0  32         bl    @putnum
     6BDC 2AD4     
0248 6BDE 0047                   byte 0,71             ; Show kilobytes processed
0249 6BE0 A440                   data fh.kilobytes,rambuf,>3020
     6BE2 A100     
     6BE4 3020     
0250               
0251 6BE6 06A0  32         bl    @putat
     6BE8 2442     
0252 6BEA 004C                   byte 0,76
0253 6BEC 3B3E                   data txt.kb           ; Show "kb" string
0254               
0255               fm.loadsave.cb.indicator2.lines:
0256 6BEE 06A0  32         bl    @putnum
     6BF0 2AD4     
0257 6BF2 1D48                   byte pane.botrow,72   ; Show lines processed
0258 6BF4 A43C                   data fh.records,rambuf,>3020
     6BF6 A100     
     6BF8 3020     
0259                       ;------------------------------------------------------
0260                       ; Exit
0261                       ;------------------------------------------------------
0262               fm.loadsave.cb.indicator2.exit:
0263 6BFA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 6BFC C2F9  30         mov   *stack+,r11           ; Pop R11
0265 6BFE 045B  20         b     *r11                  ; Return to caller
0266               
0267               
0268               
0269               
0270               *---------------------------------------------------------------
0271               * Callback function "Show loading indicator 3"
0272               * Close file
0273               *---------------------------------------------------------------
0274               * Registered as pointer in @fh.callback3
0275               *---------------------------------------------------------------
0276               fm.loadsave.cb.indicator3:
0277 6C00 0649  14         dect  stack
0278 6C02 C64B  30         mov   r11,*stack            ; Save return address
0279 6C04 0649  14         dect  stack
0280 6C06 C644  30         mov   tmp0,*stack           ; Push tmp0
0281 6C08 0649  14         dect  stack
0282 6C0A C645  30         mov   tmp1,*stack           ; Push tmp1
0283 6C0C 0649  14         dect  stack
0284 6C0E C646  30         mov   tmp2,*stack           ; Push tmp2
0285 6C10 0649  14         dect  stack
0286 6C12 C647  30         mov   tmp3,*stack           ; Push tmp3
0287 6C14 0649  14         dect  stack
0288 6C16 C660  46         mov   @parm1,*stack         ; Push @parm1
     6C18 A006     
0289                       ;------------------------------------------------------
0290                       ; Restore status line colors
0291                       ;------------------------------------------------------
0292 6C1A 06A0  32         bl    @pane.botline.busy.off  ; \ Put busyline indicator off
     6C1C 76BC     
0293                                                     ; /
0294                       ;------------------------------------------------------
0295                       ; Only show updated KB if loading/saving full file
0296                       ;------------------------------------------------------
0297 6C1E 0204  20         li    tmp0,id.file.loadfile
     6C20 0001     
0298 6C22 8120  34         c     @fh.workmode,tmp0
     6C24 A45A     
0299 6C26 1315  14         jeq   fm.loadsave.cb.message
0300               
0301 6C28 0204  20         li    tmp0,id.file.savefile
     6C2A 0004     
0302 6C2C 8120  34         c     @fh.workmode,tmp0
     6C2E A45A     
0303 6C30 1610  14         jne   fm.loadsave.cb.message
0304               
0305 6C32 06A0  32         bl    @putnum
     6C34 2AD4     
0306 6C36 0047                   byte 0,71             ; Show kilobytes processed
0307 6C38 A440                   data fh.kilobytes,rambuf,>3020
     6C3A A100     
     6C3C 3020     
0308               
0309 6C3E 06A0  32         bl    @putat
     6C40 2442     
0310 6C42 004C                   byte 0,76
0311 6C44 3B3E                   data txt.kb           ; Show "kb" string
0312               
0313 6C46 06A0  32         bl    @putnum
     6C48 2AD4     
0314 6C4A 1D48                   byte pane.botrow,72   ; Show lines processed
0315 6C4C A504                   data edb.lines,rambuf,>3020
     6C4E A100     
     6C50 3020     
0316                       ;-------------------------------------------------------
0317                       ; Show message
0318                       ;-------------------------------------------------------
0319               fm.loadsave.cb.message:
0320 6C52 06A0  32         bl    @hchar
     6C54 2832     
0321 6C56 0032                   byte 0,50,32,20
     6C58 2014     
0322 6C5A FFFF                   data EOL              ; Erase any previous message
0323               
0324 6C5C 06A0  32         bl    @at
     6C5E 2726     
0325 6C60 0034                   byte 0,52             ; Position cursor
0326                       ;-------------------------------------------------------
0327                       ; Get pointer and display overlay message
0328                       ;-------------------------------------------------------
0329 6C62 C120  34         mov   @fh.workmode,tmp0     ; Get work mode
     6C64 A45A     
0330 6C66 0604  14         dec   tmp0                  ; Base 0 offset
0331 6C68 0A14  18         sla   tmp0,1                ; Each entry is a word
0332 6C6A C164  34         mov   @fm.loadsave.cb.indicator3.data(tmp0),tmp1
     6C6C 6C90     
0333                                                   ; Get pointer to message
0334               
0335 6C6E 06A0  32         bl    @xutst0               ; Display string
     6C70 2420     
0336                                                   ; \ i  tmp1 = Pointer to string
0337                                                   ; / i  @wyx = Cursor position at
0338                       ;-------------------------------------------------------
0339                       ; Setup one shot task for removing overlay message
0340                       ;-------------------------------------------------------
0341 6C72 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6C74 3818     
0342 6C76 C804  38         mov   tmp0,@tv.task.oneshot
     6C78 A22C     
0343               
0344 6C7A 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6C7C 2FB2     
0345 6C7E 0003                   data 3                ; / for getting consistent delay
0346                       ;------------------------------------------------------
0347                       ; Exit
0348                       ;------------------------------------------------------
0349               fm.loadsave.cb.indicator3.exit:
0350 6C80 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6C82 A006     
0351 6C84 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0352 6C86 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0353 6C88 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0354 6C8A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0355 6C8C C2F9  30         mov   *stack+,r11           ; Pop R11
0356 6C8E 045B  20         b     *r11                  ; Return to caller
0357                       ;------------------------------------------------------
0358                       ; Table with pointers for messages to display.
0359                       ; (@fh.workmode used as index into table)
0360                       ;------------------------------------------------------
0361               fm.loadsave.cb.indicator3.data:
0362 6C90 3A4C             data  txt.done.load         ; id.file.loadfile
0363 6C92 3A5C             data  txt.done.insert       ; id.file.insertfile
0364 6C94 3A6E             data  txt.done.append       ; id.file.appendfile
0365 6C96 3A80             data  txt.done.save         ; id.file.savefile
0366 6C98 3A80             data  txt.done.save         ; id.file.saveblock
0367 6C9A 3AC2             data  txt.done.clipboard    ; id.file.clipblock
0368 6C9C 3AA0             data  txt.done.print        ; id.file.printfile
0369 6C9E 3AA0             data  txt.done.print        ; id.file.printblock
0370               
0371               *---------------------------------------------------------------
0372               * Callback function "File I/O error handler"
0373               * I/O error
0374               *---------------------------------------------------------------
0375               * Registered as pointer in @fh.callback4
0376               *---------------------------------------------------------------
0377               fm.loadsave.cb.fioerr:
0378 6CA0 0649  14         dect  stack
0379 6CA2 C64B  30         mov   r11,*stack            ; Save return address
0380 6CA4 0649  14         dect  stack
0381 6CA6 C644  30         mov   tmp0,*stack           ; Push tmp0
0382 6CA8 0649  14         dect  stack
0383 6CAA C645  30         mov   tmp1,*stack           ; Push tmp1
0384 6CAC 0649  14         dect  stack
0385 6CAE C646  30         mov   tmp2,*stack           ; Push tmp2
0386 6CB0 0649  14         dect  stack
0387 6CB2 C647  30         mov   tmp3,*stack           ; Push tmp3
0388 6CB4 0649  14         dect  stack
0389 6CB6 C648  30         mov   tmp4,*stack           ; Push tmp4
0390 6CB8 0649  14         dect  stack
0391 6CBA C660  46         mov   @parm1,*stack         ; Push @parm1
     6CBC A006     
0392                       ;------------------------------------------------------
0393                       ; Build I/O error message
0394                       ;------------------------------------------------------
0395 6CBE 06A0  32         bl    @hchar
     6CC0 2832     
0396 6CC2 1D00                   byte pane.botrow,0,32,80
     6CC4 2050     
0397 6CC6 FFFF                   data EOL              ; Erase loading/saving indicator
0398                       ;------------------------------------------------------
0399                       ; Determine message to display
0400                       ;------------------------------------------------------
0401 6CC8 C120  34         mov   @fh.workmode,tmp0
     6CCA A45A     
0402 6CCC 0284  22         ci    tmp0,id.file.printfile
     6CCE 0007     
0403 6CD0 131A  14         jeq   fm.loadsave.cb.fioerr.print
0404 6CD2 0284  22         ci    tmp0,id.file.printblock
     6CD4 0008     
0405 6CD6 1317  14         jeq   fm.loadsave.cb.fioerr.print
0406               
0407 6CD8 0284  22         ci    tmp0,id.file.savefile
     6CDA 0004     
0408 6CDC 130E  14         jeq   fm.loadsave.cb.fioerr.save
0409 6CDE 0284  22         ci    tmp0,id.file.saveblock
     6CE0 0005     
0410 6CE2 130B  14         jeq   fm.loadsave.cb.fioerr.save
0411 6CE4 0284  22         ci    tmp0,id.file.clipblock
     6CE6 0006     
0412 6CE8 1308  14         jeq   fm.loadsave.cb.fioerr.save
0413                       ;------------------------------------------------------
0414                       ; Failed loading file
0415                       ;------------------------------------------------------
0416               fm.loadsave.cb.fioerr.load:
0417 6CEA 06A0  32         bl    @cpym2m
     6CEC 253A     
0418 6CEE 3CB4                   data txt.ioerr.load
0419 6CF0 A23E                   data tv.error.msg
0420 6CF2 001E                   data 30               ; Error message
0421               
0422 6CF4 04E0  34         clr   @edb.special.file     ; Handle as normal file.
     6CF6 A522     
0423               
0424 6CF8 100B  14         jmp   fm.loadsave.cb.fioerr.addmsg
0425                       ;------------------------------------------------------
0426                       ; Failed saving file
0427                       ;------------------------------------------------------
0428               fm.loadsave.cb.fioerr.save:
0429 6CFA 06A0  32         bl    @cpym2m
     6CFC 253A     
0430 6CFE 3CCA                   data txt.ioerr.save
0431 6D00 A23E                   data tv.error.msg
0432 6D02 001E                   data 30               ; Error message
0433 6D04 1005  14         jmp   fm.loadsave.cb.fioerr.addmsg
0434                       ;------------------------------------------------------
0435                       ; Failed saving file
0436                       ;------------------------------------------------------
0437               fm.loadsave.cb.fioerr.print:
0438 6D06 06A0  32         bl    @cpym2m
     6D08 253A     
0439 6D0A 3CE0                   data txt.ioerr.print
0440 6D0C A23E                   data tv.error.msg
0441 6D0E 001E                   data 30               ; Error message
0442                       ;------------------------------------------------------
0443                       ; Add filename to error message
0444                       ;------------------------------------------------------
0445               fm.loadsave.cb.fioerr.addmsg:
0446 6D10 C120  34         mov   @fh.fname.ptr,tmp0
     6D12 A444     
0447 6D14 D194  26         movb  *tmp0,tmp2            ; Get length byte filename
0448 6D16 0986  32         srl   tmp2,8                ; Right align
0449               
0450 6D18 D1E0  34         movb  @tv.error.msg,tmp3    ; Get length byte error text
     6D1A A23E     
0451 6D1C 0987  32         srl   tmp3,8                ; Right align
0452 6D1E C207  18         mov   tmp3,tmp4
0453               
0454 6D20 A1C6  18         a     tmp2,tmp3             ; \
0455 6D22 0A87  32         sla   tmp3,8                ; | Calculate length of error message
0456 6D24 D807  38         movb  tmp3,@tv.error.msg    ; / and write to length-prefix byte
     6D26 A23E     
0457               
0458 6D28 0584  14         inc   tmp0                  ; RAM source address (skip length byte)
0459               
0460 6D2A 0205  20         li    tmp1,tv.error.msg     ; \
     6D2C A23E     
0461 6D2E A148  18         a     tmp4,tmp1             ; | RAM destination address
0462 6D30 0585  14         inc   tmp1                  ; /
0463               
0464 6D32 06A0  32         bl    @xpym2m               ; \ Copy CPU memory to CPU memory
     6D34 2540     
0465                                                   ; | i  tmp0 = ROM/RAM source
0466                                                   ; | i  tmp1 = RAM destination
0467                                                   ; / i  tmp2 = Bytes to copy
0468                       ;------------------------------------------------------
0469                       ; Reset filename to "new file"
0470                       ;------------------------------------------------------
0471 6D36 C120  34         mov   @fh.workmode,tmp0     ; Get working mode
     6D38 A45A     
0472 6D3A 0284  22         ci    tmp0,id.file.loadfile
     6D3C 0001     
0473 6D3E 1608  14         jne   !                     ; Only when reading full file
0474               
0475 6D40 0204  20         li    tmp0,txt.newfile      ; New file
     6D42 3B48     
0476 6D44 C804  38         mov   tmp0,@edb.filename.ptr
     6D46 A514     
0477               
0478 6D48 0204  20         li    tmp0,txt.filetype.none
     6D4A 3C98     
0479 6D4C C804  38         mov   tmp0,@edb.filetype.ptr
     6D4E A516     
0480                                                   ; Empty filetype string
0481                       ;------------------------------------------------------
0482                       ; Display I/O error message
0483                       ;------------------------------------------------------
0484 6D50 06A0  32 !       bl    @pane.errline.show    ; Show error line
     6D52 763E     
0485                       ;------------------------------------------------------
0486                       ; Restore status line colors
0487                       ;------------------------------------------------------
0488 6D54 06A0  32         bl    @pane.botline.busy.off  ; \ Put busyline indicator off
     6D56 76BC     
0489                                                     ; /
0490                       ;-------------------------------------------------------
0491                       ; Setup one shot task for removing overlay message
0492                       ;-------------------------------------------------------
0493 6D58 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6D5A 3818     
0494 6D5C C804  38         mov   tmp0,@tv.task.oneshot
     6D5E A22C     
0495               
0496 6D60 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6D62 2FB2     
0497 6D64 0003                   data 3                ; / for getting consistent delay
0498                       ;------------------------------------------------------
0499                       ; Exit
0500                       ;------------------------------------------------------
0501               fm.loadsave.cb.fioerr.exit:
0502 6D66 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6D68 A006     
0503 6D6A C1F9  30         mov   *stack+,tmp3          ; Pop tmp4
0504 6D6C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0505 6D6E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0506 6D70 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0507 6D72 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0508 6D74 C2F9  30         mov   *stack+,r11           ; Pop R11
0509 6D76 045B  20         b     *r11                  ; Return to caller
0510               
0511               
0512               *---------------------------------------------------------------
0513               * Callback function "Memory full" error handler
0514               * Memory full error
0515               *---------------------------------------------------------------
0516               * Registered as pointer in @fh.callback5
0517               *---------------------------------------------------------------
0518               fm.load.cb.memfull:
0519 6D78 0649  14         dect  stack
0520 6D7A C64B  30         mov   r11,*stack            ; Save return address
0521 6D7C 0649  14         dect  stack
0522 6D7E C660  46         mov   @parm1,*stack         ; Push @parm1
     6D80 A006     
0523                       ;------------------------------------------------------
0524                       ; Prepare for error message
0525                       ;------------------------------------------------------
0526 6D82 06A0  32         bl    @hchar
     6D84 2832     
0527 6D86 1D00                   byte pane.botrow,0,32,55
     6D88 2037     
0528 6D8A FFFF                   data EOL              ; Erase loading indicator
0529                       ;------------------------------------------------------
0530                       ; Failed loading file
0531                       ;------------------------------------------------------
0532 6D8C 06A0  32         bl    @cpym2m
     6D8E 253A     
0533 6D90 3D14                   data txt.memfull.load
0534 6D92 A23E                   data tv.error.msg
0535 6D94 002E                   data 46               ; Error message
0536                       ;------------------------------------------------------
0537                       ; Display memory full error message
0538                       ;------------------------------------------------------
0539 6D96 06A0  32         bl    @pane.errline.show    ; Show error line
     6D98 763E     
0540               
0541                       ;------------------------------------------------------
0542                       ; Restore status line colors
0543                       ;------------------------------------------------------
0544 6D9A 06A0  32         bl    @pane.botline.busy.off  ; \ Put busyline indicator off
     6D9C 76BC     
0545                                                     ; /
0546                       ;------------------------------------------------------
0547                       ; Exit
0548                       ;------------------------------------------------------
0549               fm.load.cb.memfull.exit:
0550 6D9E C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6DA0 A006     
0551 6DA2 C2F9  30         mov   *stack+,r11           ; Pop R11
0552 6DA4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0081                       copy  "fm.callbacks.dir.asm"     ; Callbacks for drive/directory file IO
     **** ****     > fm.callbacks.dir.asm
0001               * FILE......: fm.callbacks.dir.asm
0002               * Purpose...: File Manager - Callbacks for drive/directory listing
0003               
0004               *===============================================================================
0005               * Catalog format
0006               * Details: http://www.hexbus.com/ti99geek/Doc/readingdirectories.html#readdir
0007               *
0008               * Floating point numbers are in RADIX 100 format.
0009               * Details: https://www.unige.ch/medecine/nouspikel/ti99/reals.htm#Radix%20100
0010               *
0011               *
0012               * Drive/Device catalog format:
0013               *
0014               *    RECORD 0 -> volume label and device information
0015               *
0016               *    hex   01234567
0017               *    0008  ........
0018               *    0010  ........
0019               *    0018  ........
0020               *    0020  ........
0021               *    0028  ........
0022               *    0030  ........
0023               *    0038  ........
0024               *
0025               *
0026               *    RECORD 1...n -> file and directory information
0027               *
0028               *    hex   01234567
0029               *    0008  ABLSSSSS
0030               *    0010  SSSSSS1E
0031               *    0018  MMMMMMM2
0032               *    0020  EMMMMMMM
0033               *    0028  3EMMMMMM
0034               *    0030  M.......
0035               *
0036               *    A=>00 \ Record size 38 bytes (>26) or 146 bytes (>92).
0037               *    B=>26 / Note: only 146 bytes if device supports timestamps.
0038               *    L=>xx String length (max. >0A)
0039               *    S=>xx String ASCII char (filename)
0040               *
0041               *    FILETYPE
0042               *
0043               *    1=>08 Float size     1 byte
0044               *    E=>xx Float exponent 1 byte
0045               *    M=>xx Float mantissa 7 bytes
0046               *    	1 - Record type:
0047               *    		0 = Volume label
0048               *    		1 = File type Display/Fixed
0049               *    		2 = File type Display/Variable
0050               *    		3 = File type Internal/Fixed
0051               *    		4 = File type Internal/Variable
0052               *    		5 = File type Program (binary)
0053               *    		6 = Directory
0054               *    		If a file type < 0 it means that the file is write protected.
0055               *
0056               *    FILESIZE
0057               *
0058               *    2=>08 Float 2 size
0059               *    F=>xx Float 8 bytes
0060               *    	2 - If Record type is Volume label (0): Size of the device in 256 bytes
0061               *    	                                        sectors
0062               *    	    If Record type is File type  (1-5): Number of 256 bytes sectors the
0063               *    	                                        file occupies
0064               *    	    If Record type is Directory   (6) : Number of 256 bytes sectors the
0065               *    	                                        directory index occupies
0066               *    	                                        (2*sectors/alocation unit) but
0067               *    	                                        some peripherals just returns 0!
0068               *
0069               *    RECORDSIZE IN FILETYPE
0070               *
0071               *    3=>08 Float 3 size
0072               *    F=>xx Float 8 bytes
0073               *    	3 - If Record type is Volume label (0): Number of free 256 bytes sectors
0074               *    	    If Record type is File type  (1-4): Maximum record length of file
0075               *    	    If Record type is Program file (5): The value 0, but on some
0076               *    	                                        peripherals the size in bytes!
0077               *    	    If Record type is Directory    (6): The value 0
0078               *===============================================================================
0079               
0080               
0081               ***************************************************************
0082               * fm.dir.callback1
0083               * Callback function "Before open file"
0084               ***************************************************************
0085               * bl  @fm.dir.callback2
0086               *--------------------------------------------------------------
0087               * INPUT
0088               * none
0089               *--------------------------------------------------------------
0090               * OUTPUT
0091               * none
0092               *--------------------------------------------------------------
0093               * Registered as pointer in @fh.callback1
0094               *--------------------------------------------------------------
0095               * Register usage
0096               * tmp0
0097               ********|*****|*********************|**************************
0098               fm.dir.callback1:
0099 6DA6 0649  14         dect  stack
0100 6DA8 C64B  30         mov   r11,*stack            ; Save return address
0101 6DAA 0649  14         dect  stack
0102 6DAC C644  30         mov   tmp0,*stack           ; Push tmp0
0103                       ;------------------------------------------------------
0104                       ; Prepare for reading directory
0105                       ;------------------------------------------------------
0106 6DAE 04E0  34         clr   @fh.offsetopcode      ; Allow all devices (copy to VDP)
     6DB0 A44E     
0107 6DB2 04E0  34         clr   @fh.records           ; Reset record count
     6DB4 A43C     
0108 6DB6 04E0  34         clr   @cat.filecount        ; Reset number of files
     6DB8 E000     
0109 6DBA 04E0  34         clr   @cat.fpicker.idx      ; Reset current file in list
     6DBC E002     
0110               
0111 6DBE 0204  20         li    tmp0,cat.fnlist       ; \ Set RAM destination address
     6DC0 E8BC     
0112 6DC2 C804  38         mov   tmp0,@fh.dir.rec.ptr  ; / for storing directory entries
     6DC4 A468     
0113                       ;------------------------------------------------------
0114                       ; Show reading directory message
0115                       ;------------------------------------------------------
0116 6DC6 06A0  32         bl    @pane.botline.busy.on ; \ Put busy indicator on
     6DC8 76AA     
0117                                                   ; /
0118               
0119 6DCA 06A0  32         bl    @putat
     6DCC 2442     
0120 6DCE 1D00                   byte pane.botrow,0
0121 6DD0 3A38                   data txt.readdir      ; Display "Reading directory...."
0122                       ;------------------------------------------------------
0123                       ; Exit
0124                       ;------------------------------------------------------
0125               fm.dir.callback1.exit:
0126 6DD2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 6DD4 C2F9  30         mov   *stack+,r11           ; Pop R11
0128 6DD6 045B  20         b     *r11                  ; Return to caller
0129               
0130               
0131               ***************************************************************
0132               * fm.dir.callback2
0133               * Callback function "Read line from file"
0134               ***************************************************************
0135               * bl  @fm.dir.callback2
0136               *--------------------------------------------------------------
0137               * INPUT
0138               * none
0139               *--------------------------------------------------------------
0140               * OUTPUT
0141               * none
0142               *--------------------------------------------------------------
0143               * Registered as pointer in @fh.callback2
0144               *--------------------------------------------------------------
0145               * Register usage
0146               * tmp0, tmp1, tmp2, tmp3, tmp4
0147               ********|*****|*********************|**************************
0148               fm.dir.callback2:
0149 6DD8 0649  14         dect  stack
0150 6DDA C64B  30         mov   r11,*stack            ; Save return address
0151 6DDC 0649  14         dect  stack
0152 6DDE C644  30         mov   tmp0,*stack           ; Push tmp0W
0153 6DE0 0649  14         dect  stack
0154 6DE2 C645  30         mov   tmp1,*stack           ; Push tmp1
0155 6DE4 0649  14         dect  stack
0156 6DE6 C646  30         mov   tmp2,*stack           ; Push tmp2
0157 6DE8 0649  14         dect  stack
0158 6DEA C647  30         mov   tmp3,*stack           ; Push tmp3
0159 6DEC 0649  14         dect  stack
0160 6DEE C648  30         mov   tmp4,*stack           ; Push tmp4
0161                       ;------------------------------------------------------
0162                       ; Check if volume name
0163                       ;------------------------------------------------------
0164 6DF0 C120  34         mov   @fh.records,tmp0           ; \
     6DF2 A43C     
0165 6DF4 0284  22         ci    tmp0,1                     ; | Skip to fileindex if it's
     6DF6 0001     
0166 6DF8 1306  14         jeq   fm.dir.callback2.volname   ; / not the volume name
0167                       ;------------------------------------------------------
0168                       ; Sanity check: 127 files per directory only
0169                       ;------------------------------------------------------
0170 6DFA 0284  22         ci    tmp0,128
     6DFC 0080     
0171 6DFE 1110  14         jlt   fm.dir.callback2.fileindex
0172 6E00 0720  34         seto  @fh.circbreaker       ; Set circuit-breaker flag
     6E02 A46A     
0173 6E04 1075  14         jmp   fm.dir.callback2.exit ; Exit callback without crashing
0174                       ;------------------------------------------------------
0175                       ; Handle volume name
0176                       ;------------------------------------------------------
0177               fm.dir.callback2.volname:
0178 6E06 0204  20         li    tmp0,rambuf+2         ; Source address
     6E08 A102     
0179 6E0A 0205  20         li    tmp1,cat.volname      ; Destination address
     6E0C E3BA     
0180 6E0E D1A0  34         movb  @rambuf+2,tmp2        ; Get string length
     6E10 A102     
0181 6E12 0986  32         srl   tmp2,8                ; MSB to LSB
0182 6E14 1501  14         jgt   !                     ; Only copy volume name if set
0183 6E16 106C  14         jmp  fm.dir.callback2.exit  ; Exit
0184                       ;------------------------------------------------------
0185                       ; Copy volume name to final destination
0186                       ;------------------------------------------------------
0187 6E18 0586  14 !       inc   tmp2                  ; Include prefixed length-byte
0188 6E1A 06A0  32         bl    @xpym2m               ; Copy memory block
     6E1C 2540     
0189                                                   ; \ i  tmp0 = source
0190                                                   ; | i  tmp1 = destination
0191                                                   ; / i  tmp2 = bytes to copy
0192 6E1E 1068  14         jmp  fm.dir.callback2.exit  ; Exit
0193                       ;------------------------------------------------------
0194                       ; File index handling
0195                       ;------------------------------------------------------
0196               fm.dir.callback2.fileindex:
0197 6E20 C120  34         mov   @fh.records,tmp0        ; Get counter
     6E22 A43C     
0198 6E24 0644  14         dect  tmp0                    ; Remove volume offset and we're base 0
0199 6E26 0A14  18         sla   tmp0,1                  ; Word align
0200 6E28 C160  34         mov   @fh.dir.rec.ptr,tmp1    ; Get filename pointer
     6E2A A468     
0201 6E2C C905  38         mov   tmp1,@cat.ptrlist(tmp0) ; Save pointer in pointer list
     6E2E E076     
0202                       ;------------------------------------------------------
0203                       ; Prepare for filename copy
0204                       ;------------------------------------------------------
0205               fm.dir.callback2.prep:
0206 6E30 0204  20         li    tmp0,rambuf+2         ; Source address
     6E32 A102     
0207 6E34 D1A0  34         movb  @rambuf+2,tmp2        ; Get string length
     6E36 A102     
0208 6E38 0986  32         srl   tmp2,8                ; MSB to LSB
0209 6E3A 1503  14         jgt   fm.dir.callback2.prep.fncopy
0210                       ;------------------------------------------------------
0211                       ; Empty filename handling
0212                       ;------------------------------------------------------
0213 6E3C 0720  34         seto  @fh.circbreaker       ; \ Empty filename, set circuit-breaker flag
     6E3E A46A     
0214                                                   ; / This is the last line to process.
0215 6E40 1005  14         jmp   fm.dir.callback2.filetype
0216                       ;------------------------------------------------------
0217                       ; Copy filename to final destination
0218                       ;------------------------------------------------------
0219               fm.dir.callback2.prep.fncopy
0220 6E42 0586  14         inc   tmp2                  ; Include prefixed length-byte
0221 6E44 A806  38         a     tmp2,@fh.dir.rec.ptr  ; Adjust pointer for next filename
     6E46 A468     
0222 6E48 06A0  32         bl    @xpym2m               ; Copy memory block
     6E4A 2540     
0223                                                   ; \ i  tmp0 = source
0224                                                   ; | i  tmp1 = destination
0225                                                   ; / i  tmp2 = bytes to copy
0226                       ;------------------------------------------------------
0227                       ; Filetype handling
0228                       ;------------------------------------------------------
0229               fm.dir.callback2.filetype:
0230 6E4C D120  34         movb  @rambuf+2,tmp0        ; Get string length again
     6E4E A102     
0231 6E50 0984  32         srl   tmp0,8                ; MSB to LSB
0232 6E52 0224  22         ai    tmp0,rambuf+3         ; Add base, skip record size & length byte
     6E54 A103     
0233 6E56 D154  26         movb  *tmp0,tmp1            ; Get Float size byte
0234 6E58 0584  14         inc   tmp0                  ; Skip float size byte
0235 6E5A C1C4  18         mov   tmp0,tmp3             ; Take snapshot of position in rambuf
0236 6E5C 06C5  14         swpb  tmp1                  ; Make some space for float exponent byte
0237 6E5E D174  28         movb  *tmp0+,tmp1           ; Get float exponent byte
0238 6E60 06C5  14         swpb  tmp1                  ; Turn in right order again
0239 6E62 04C6  14         clr   tmp2
0240 6E64 D1B4  28         movb  *tmp0+,tmp2           ; Get float 1st Mantissa byte (=Filetype!)
0241               
0242 6E66 0746  18         abs   tmp2                  ; Ignore file write-protection flag
0243 6E68 0204  20         li    tmp0,cat.ftlist       ; \
     6E6A E174     
0244 6E6C A120  34         a     @cat.filecount,tmp0   ; | Store file type in filetype list
     6E6E E000     
0245 6E70 D506  30         movb  tmp2,*tmp0            ; /
0246               
0247 6E72 C107  18         mov   tmp3,tmp0             ; Restore snapshot position
0248 6E74 0985  32         srl   tmp1,8                ; Get float size
0249 6E76 A105  18         a     tmp1,tmp0             ; Skip filetype float
0250                       ;------------------------------------------------------
0251                       ; File size handling
0252                       ;------------------------------------------------------
0253               fm.dir.callback2.filesize:
0254 6E78 D154  26         movb  *tmp0,tmp1            ; Get Float size byte
0255               
0256 6E7A 0649  14         dect  stack
0257 6E7C C644  30         mov   tmp0,*stack           ; Push tmp0
0258                                                   ; Take snapshot of position in rambuf
0259               
0260 6E7E 0584  14         inc   tmp0                  ; Skip float size byte
0261 6E80 D174  28         movb  *tmp0+,tmp1           ; Get float exponent byte
0262 6E82 0985  32         srl   tmp1,8                ; MSB to LSB
0263               
0264 6E84 D1B4  28         movb  *tmp0+,tmp2           ; Get float mantissa byte
0265 6E86 0986  32         srl   tmp2,8                ; MSB to LSB
0266                       ;------------------------------------------------------
0267                       ; Turn radix 100 floating point into hex number
0268                       ;------------------------------------------------------
0269 6E88 0225  22         ai    tmp1,-64              ; Subtract radix 100 exponent bias >40
     6E8A FFC0     
0270 6E8C 1502  14         jgt   fm.dir.callback2.filesize.radix100.part1
0271                                                   ; Handle 1st byte if exponent > 1
0272               
0273 6E8E C146  18         mov   tmp2,tmp1             ; No multiplication needed
0274 6E90 1009  14         jmp   fm.dir.callback2.filesize.store
0275                       ;------------------------------------------------------
0276                       ; Handle mantissa (byte 1) if exp>1
0277                       ;------------------------------------------------------
0278               fm.dir.callback2.filesize.radix100.part1:
0279 6E92 0208  20         li    tmp4,100              ; \ Multiply 1st byte mantissa by 100
     6E94 0064     
0280 6E96 3988  58         mpy   tmp4,tmp2             ; | Result is in 32 bit register tmp2:tmp3
0281 6E98 C187  18         mov   tmp3,tmp2             ; / Move LSW to MSW
0282 6E9A 0605  14         dec   tmp1                  ; Decrement exponent
0283 6E9C 15FA  14         jgt   fm.dir.callback2.filesize.radix100.part1
0284                                                   ; Next iteration if exponent > 0
0285                       ;------------------------------------------------------
0286                       ; Handle mantissa (byte 2) if exp>1, otherwise (byte 1)
0287                       ;------------------------------------------------------
0288               fm.dir.callback2.filesize.radix100.part2:
0289 6E9E D174  28         movb  *tmp0+,tmp1           ; Get float mantissa byte
0290 6EA0 0985  32         srl   tmp1,8                ; MSB to LSB
0291 6EA2 A146  18         a     tmp2,tmp1             ; Add previous result
0292                       ;------------------------------------------------------
0293                       ; Store filesize size in list
0294                       ;------------------------------------------------------
0295               fm.dir.callback2.filesize.store:
0296                ;       data  c99_dbg_tmp1          ; \ Print file size in tmp0
0297                ;       data  >1001                 ; | in classic99 debugger console.
0298                ;       data  data.printf.recsize   ; | Needs debug opcodes enabled in
0299                ;                                   ; / classic99.ini file. See c99 manual.
0300               
0301 6EA4 C120  34         mov   @cat.filecount,tmp0   ; Get file index
     6EA6 E000     
0302 6EA8 0A14  18         sla   tmp0,1                ; Word align
0303 6EAA 0224  22         ai    tmp0,cat.fslist       ; Add base address
     6EAC E1F4     
0304 6EAE C505  30         mov   tmp1,*tmp0            ; Store size (word) in filesize list
0305               
0306 6EB0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0307                                                   ; Restore snapshot position (float size)
0308               
0309 6EB2 D174  28         movb  *tmp0+,tmp1           ; Get Float size byte
0310 6EB4 0985  32         srl   tmp1,8                ; Get float size
0311 6EB6 A105  18         a     tmp1,tmp0             ; Skip filesize float
0312                       ;------------------------------------------------------
0313                       ; Record size handling in filetype
0314                       ;------------------------------------------------------
0315               fm.dir.callback2.recsize:
0316 6EB8 D174  28         movb  *tmp0+,tmp1           ; Get Float size byte
0317 6EBA 06C5  14         swpb  tmp1                  ; Make some space for float exponent byte
0318 6EBC D174  28         movb  *tmp0+,tmp1           ; Get float exponent byte
0319 6EBE 0985  32         srl   tmp1,8                ; MSB to LSB
0320               
0321 6EC0 D1B4  28         movb  *tmp0+,tmp2           ; Get float mantissa byte
0322 6EC2 0986  32         srl   tmp2,8                ; MSB to LSB
0323                       ;------------------------------------------------------
0324                       ; Turn radix 100 floating point into hex number
0325                       ;------------------------------------------------------
0326 6EC4 0225  22         ai    tmp1,-64              ; Subtract radix 100 exponent bias >40
     6EC6 FFC0     
0327 6EC8 1502  14         jgt   fm.dir.callback2.recsize.radix100.part1
0328                                                   ; Handle 1st byte if exponent > 1
0329               
0330 6ECA C146  18         mov   tmp2,tmp1             ; No multiplication needed
0331 6ECC 1009  14         jmp   fm.dir.callback2.recsize.store
0332                       ;------------------------------------------------------
0333                       ; Handle mantissa (byte 1) if exp>1
0334                       ;------------------------------------------------------
0335               fm.dir.callback2.recsize.radix100.part1:
0336 6ECE 0208  20         li    tmp4,100              ; \ Multiply 1st byte mantissa by 100
     6ED0 0064     
0337 6ED2 3988  58         mpy   tmp4,tmp2             ; | Result is in 32 bit register tmp2:tmp3
0338 6ED4 C187  18         mov   tmp3,tmp2             ; / Move LSW to MSW
0339 6ED6 0605  14         dec   tmp1                  ; Decrement exponent
0340 6ED8 15FA  14         jgt   fm.dir.callback2.recsize.radix100.part1
0341                                                   ; Next iteration if exponent > 0
0342                       ;------------------------------------------------------
0343                       ; Handle mantissa (byte 2) if exp>1, otherwise (byte 1)
0344                       ;------------------------------------------------------
0345               fm.dir.callback2.recsize.radix100.part2:
0346 6EDA D174  28         movb  *tmp0+,tmp1           ; Get float mantissa byte
0347 6EDC 0985  32         srl   tmp1,8                ; MSB to LSB
0348 6EDE A146  18         a     tmp2,tmp1             ; Add previous result
0349                       ;------------------------------------------------------
0350                       ; Store record size in list
0351                       ;------------------------------------------------------
0352               fm.dir.callback2.recsize.store:
0353                ;       data  c99_dbg_tmp1          ; \ Print file type record size in tmp0
0354                ;       data  >1001                 ; | in classic99 debugger console.
0355                ;       data  data.printf.recsize   ; | Needs debug opcodes enabled in
0356                ;                                   ; / classic99.ini file. See c99 manual.
0357               
0358 6EE0 0204  20         li    tmp0,cat.rslist       ; \
     6EE2 E2F4     
0359 6EE4 A120  34         a     @cat.filecount,tmp0   ; | Store record size in record size list
     6EE6 E000     
0360 6EE8 0A85  32         sla   tmp1,8                ; | LSB to MSB
0361 6EEA D505  30         movb  tmp1,*tmp0            ; /
0362                       ;------------------------------------------------------
0363                       ; Prepare for exit
0364                       ;------------------------------------------------------
0365 6EEC 05A0  34         inc   @cat.filecount
     6EEE E000     
0366                       ;------------------------------------------------------
0367                       ; Exit
0368                       ;------------------------------------------------------
0369               fm.dir.callback2.exit:
0370 6EF0 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0371 6EF2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0372 6EF4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0373 6EF6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0374 6EF8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0375 6EFA C2F9  30         mov   *stack+,r11           ; Pop R11
0376 6EFC 045B  20         b     *r11                  ; Return to caller
0377               
0378               
0379               ***************************************************************
0380               * fm.dir.callback3
0381               * Callback function "Close file"
0382               ***************************************************************
0383               * bl  @fm.dir.callback3
0384               *--------------------------------------------------------------
0385               * INPUT
0386               * none
0387               *--------------------------------------------------------------
0388               * OUTPUT
0389               * none
0390               *--------------------------------------------------------------
0391               * Registered as pointer in @fh.callback3
0392               *--------------------------------------------------------------
0393               * Register usage
0394               * tmp0, tmp1
0395               ********|*****|*********************|**************************
0396               fm.dir.callback3:
0397 6EFE 0649  14         dect  stack
0398 6F00 C64B  30         mov   r11,*stack            ; Save return address
0399 6F02 0649  14         dect  stack
0400 6F04 C644  30         mov   tmp0,*stack           ; Push tmp0
0401 6F06 0649  14         dect  stack
0402 6F08 C645  30         mov   tmp1,*stack           ; Push tmp1
0403                       ;------------------------------------------------------
0404                       ; Restore status line colors
0405                       ;------------------------------------------------------
0406 6F0A 06A0  32         bl    @pane.botline.busy.off ; \ Put busyline indicator off
     6F0C 76BC     
0407                                                    ; /
0408               
0409 6F0E 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6F10 A71A     
0410                       ;------------------------------------------------------
0411                       ; Prepare for displaying filenames
0412                       ;------------------------------------------------------
0413 6F12 0620  34         dec   @cat.filecount        ; \ One-time adjustment because
     6F14 E000     
0414                                                   ; | catalog reads beyond EOF.
0415                                                   ; /
0416               
0417                       ; Depending on the device DSR used (emulators, real HW)
0418                       ; we might or might not get in this callback when there
0419                       ; are no files. So we double check in both the callbacks
0420                       ; fh.callback3 (File close) and fh.callback4 (File I/O error)
0421               
0422 6F16 C120  34         mov   @cat.filecount,tmp0   ; How many files read?
     6F18 E000     
0423 6F1A 1525  14         jgt   fm.dir.callback4.exit ; Have some, so no error please
0424                       ;-------------------------------------------------------
0425                       ; Show message 'No Device/Disk/Path'
0426                       ;-------------------------------------------------------
0427 6F1C 06A0  32         bl    @putat
     6F1E 2442     
0428 6F20 0034                   byte 0,52
0429 6F22 3B0C                   data txt.nodisk       ; No Device/Disk/Path
0430                       ;-------------------------------------------------------
0431                       ; Setup one shot task for removing overlay message
0432                       ;-------------------------------------------------------
0433 6F24 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6F26 3818     
0434 6F28 C804  38         mov   tmp0,@tv.task.oneshot
     6F2A A22C     
0435               
0436 6F2C 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6F2E 2FB2     
0437 6F30 0003                   data 3                ; / for getting consistent delay
0438               
0439                       ;------------------------------------------------------
0440                       ; Exit
0441                       ;------------------------------------------------------
0442               fm.dir.callback3.exit:
0443 6F32 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0444 6F34 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0445 6F36 C2F9  30         mov   *stack+,r11           ; Pop R11
0446 6F38 045B  20         b     *r11                  ; Return to caller
0447               
0448               
0449               ***************************************************************
0450               * fm.dir.callback4
0451               * Callback function "File I/O error"
0452               ***************************************************************
0453               * bl  @fm.dir.callback4
0454               *--------------------------------------------------------------
0455               * INPUT
0456               * none
0457               *--------------------------------------------------------------
0458               * OUTPUT
0459               * none
0460               *--------------------------------------------------------------
0461               * Registered as pointer in @fh.callback4
0462               *--------------------------------------------------------------
0463               * Register usage
0464               * tmp0, tmp1
0465               ********|*****|*********************|**************************
0466               fm.dir.callback4:
0467 6F3A 0649  14         dect  stack
0468 6F3C C64B  30         mov   r11,*stack            ; Save return address
0469 6F3E 0649  14         dect  stack
0470 6F40 C644  30         mov   tmp0,*stack           ; Push tmp0
0471 6F42 0649  14         dect  stack
0472 6F44 C645  30         mov   tmp1,*stack           ; Push tmp1
0473                       ;------------------------------------------------------
0474                       ; Restore status line colors
0475                       ;------------------------------------------------------
0476 6F46 06A0  32         bl    @pane.botline.busy.off
     6F48 76BC     
0477                                                   ; Put busyline indicator off
0478               
0479                       ; Depending on the device DSR used (emulators, real HW)
0480                       ; we might or might not get in this callback when there
0481                       ; are no files. So we double check in both the callbacks
0482                       ; fh.callback3 (File close) and fh.callback4 (File I/O error)
0483               
0484 6F4A C120  34         mov   @cat.filecount,tmp0   ; How many files read?
     6F4C E000     
0485 6F4E 150B  14         jgt   fm.dir.callback4.exit ; Have some, so no error please
0486                       ;-------------------------------------------------------
0487                       ; Show message 'No Device/Disk/Path'
0488                       ;-------------------------------------------------------
0489 6F50 06A0  32         bl    @putat
     6F52 2442     
0490 6F54 0034                   byte 0,52
0491 6F56 3B0C                   data txt.nodisk       ; No Device/Disk/Path
0492                       ;-------------------------------------------------------
0493                       ; Setup one shot task for removing overlay message
0494                       ;-------------------------------------------------------
0495 6F58 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6F5A 3818     
0496 6F5C C804  38         mov   tmp0,@tv.task.oneshot
     6F5E A22C     
0497               
0498 6F60 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6F62 2FB2     
0499 6F64 0003                   data 3                ; / for getting consistent delay
0500                       ;------------------------------------------------------
0501                       ; Exit
0502                       ;------------------------------------------------------
0503               fm.dir.callback4.exit:
0504 6F66 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0505 6F68 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0506 6F6A C2F9  30         mov   *stack+,r11           ; Pop R11
0507 6F6C 045B  20         b     *r11                  ; Return to caller
0508               
0509               
0510               ***************************************************************
0511               * fm.dir.callback5
0512               * Callback function "Memory full"
0513               ***************************************************************
0514               * bl  @fm.dir.callback5
0515               *--------------------------------------------------------------
0516               * INPUT
0517               * none
0518               *--------------------------------------------------------------
0519               * OUTPUT
0520               * none
0521               *--------------------------------------------------------------
0522               * Registered as pointer in @fh.callback5
0523               *--------------------------------------------------------------
0524               * Register usage
0525               * tmp0, tmp1
0526               ********|*****|*********************|**************************
0527               fm.dir.callback5:
0528 6F6E 0649  14         dect  stack
0529 6F70 C64B  30         mov   r11,*stack            ; Save return address
0530 6F72 0649  14         dect  stack
0531 6F74 C644  30         mov   tmp0,*stack           ; Push tmp0
0532 6F76 0649  14         dect  stack
0533 6F78 C645  30         mov   tmp1,*stack           ; Push tmp1
0534                       ;------------------------------------------------------
0535                       ; Restore status line colors
0536                       ;------------------------------------------------------
0537 6F7A 06A0  32         bl    @pane.botline.busy.off  ; \ Put busyline indicator off
     6F7C 76BC     
0538                                                     ; /
0539                       ;------------------------------------------------------
0540                       ; Exit
0541                       ;------------------------------------------------------
0542               fm.dir.callback5.exit:
0543 6F7E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0544 6F80 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0545 6F82 C2F9  30         mov   *stack+,r11           ; Pop R11
0546 6F84 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0082                       copy  "fm.browse.fname.set.asm"  ; Create string with device/filename
     **** ****     > fm.browse.fname.set.asm
0001               * FILE......: fm.browse.fname.set
0002               * Purpose...: File Manager - File browse support routines
0003               
0004               ***************************************************************
0005               * fm.browse.fname.set
0006               * Set device and filename
0007               ***************************************************************
0008               * bl   @fm.browse.fname.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cat.device       = Current device name
0012               * @cat.shortcut.idx = Index in catalog filename pointerlist
0013               *---------------------------------------------------------------
0014               * OUTPUT
0015               * @cat.fullfname = Combined string with device & filename
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               fm.browse.fname.set:
0021 6F86 0649  14         dect  stack
0022 6F88 C64B  30         mov   r11,*stack            ; Save return address
0023 6F8A 0649  14         dect  stack
0024 6F8C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6F8E 0649  14         dect  stack
0026 6F90 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6F92 0649  14         dect  stack
0028 6F94 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Prepare
0031                       ;------------------------------------------------------
0032 6F96 06A0  32         bl    @film
     6F98 2236     
0033 6F9A E016                   data cat.fullfname,0,80
     6F9C 0000     
     6F9E 0050     
0034                                                   ; Clear device and filename
0035                       ;------------------------------------------------------
0036                       ; Set device name
0037                       ;------------------------------------------------------
0038 6FA0 0204  20         li    tmp0,cat.device
     6FA2 EEB0     
0039 6FA4 0205  20         li    tmp1,cat.fullfname
     6FA6 E016     
0040 6FA8 D1A0  34         movb  @cat.device,tmp2      ; Get length byte of device name
     6FAA EEB0     
0041 6FAC 0986  32         srl   tmp2,8                ; MSB to LSB
0042 6FAE 1332  14         jeq   fm.browse.fname.set.exit
0043                                                   ; Exit early if no device set
0044               
0045 6FB0 0586  14         inc   tmp2                  ; Include length-byte prefix
0046 6FB2 C806  38         mov   tmp2,@cat.var1        ; Backup value
     6FB4 E066     
0047               
0048 6FB6 06A0  32         bl    @xpym2m               ; Copy memory block
     6FB8 2540     
0049                                                   ; \ i  tmp0 = source
0050                                                   ; | i  tmp1 = destination
0051                                                   ; / i  tmp2 = bytes to copy
0052               
0053 6FBA C120  34         mov   @cat.filecount,tmp0      ; \ Do not append filename if
     6FBC E000     
0054 6FBE 132A  14         jeq   fm.browse.fname.set.exit ; / catalog is empty anyway.
0055                       ;------------------------------------------------------
0056                       ; Get pointer from filename list in catalog
0057                       ;------------------------------------------------------
0058 6FC0 C120  34         mov   @cat.shortcut.idx,tmp0  ; Get index
     6FC2 E012     
0059 6FC4 0A14  18         sla   tmp0,1                  ; Word align
0060 6FC6 C124  34         mov   @cat.ptrlist(tmp0),tmp0 ; Get pointer
     6FC8 E076     
0061               
0062 6FCA C160  34         mov   @cat.var1,tmp1        ; Restore value
     6FCC E066     
0063 6FCE 0225  22         ai    tmp1,cat.fullfname    ; Calc destination for copy operation
     6FD0 E016     
0064               
0065 6FD2 D1B4  28         movb  *tmp0+,tmp2           ; Get length-byte and skip
0066 6FD4 0986  32         srl   tmp2,8                ; MSB to LSB
0067 6FD6 131E  14         jeq   fm.browse.fname.set.exit
0068                                                   ; Exit early if no filename set
0069                       ;------------------------------------------------------
0070                       ; Append filename to device name
0071                       ;------------------------------------------------------
0072 6FD8 C806  38         mov   tmp2,@cat.var1        ; Save filename length
     6FDA E066     
0073               
0074 6FDC 06A0  32         bl    @xpym2m               ; Copy memory block
     6FDE 2540     
0075                                                   ; \ i  tmp0 = source
0076                                                   ; | i  tmp1 = destination
0077                                                   ; / i  tmp2 = bytes to copy
0078                       ;------------------------------------------------------
0079                       ; Adjust length-byte prefix to include device+filename
0080                       ;------------------------------------------------------
0081 6FE0 C120  34         mov   @cat.var1,tmp0        ; Get filename length
     6FE2 E066     
0082 6FE4 0A84  32         sla   tmp0,8                ; LSB to MSB
0083 6FE6 A804  38         a     tmp0,@cat.fullfname   ; Set length-byte prefix
     6FE8 E016     
0084                       ;------------------------------------------------------
0085                       ; Add final dot '.' to filename if it's a directory
0086                       ;------------------------------------------------------
0087 6FEA C120  34         mov   @cat.shortcut.idx,tmp0   ; Get index
     6FEC E012     
0088 6FEE D124  34         movb  @cat.ftlist(tmp0),tmp0   ; Get file type
     6FF0 E174     
0089 6FF2 0984  32         srl   tmp0,8                   ; MSB to LSB
0090 6FF4 0284  22         ci    tmp0,6                   ; Is it a directory?
     6FF6 0006     
0091 6FF8 160D  14         jne   fm.browse.fname.set.exit ; Exit if not a directory
0092               
0093 6FFA D120  34         movb  @cat.fullfname,tmp0      ; Get length-byte
     6FFC E016     
0094 6FFE 0984  32         srl   tmp0,8                   ; MSB to LSB
0095 7000 0584  14         inc   tmp0                     ; Increase string length
0096 7002 06C4  14         swpb  tmp0                     ; LSB to MSB
0097 7004 D804  38         movb  tmp0,@cat.fullfname      ; Set length-byte
     7006 E016     
0098 7008 0984  32         srl   tmp0,8                   ; MSB to LSB
0099 700A 0224  22         ai    tmp0,cat.fullfname       ; Add base to offset
     700C E016     
0100 700E 0205  20         li    tmp1,>2e00               ; \ Dot character in MSB
     7010 2E00     
0101 7012 D505  30         movb  tmp1,*tmp0               ; / Add dot to the end
0102                       ;------------------------------------------------------
0103                       ; Exit
0104                       ;------------------------------------------------------
0105               fm.browse.fname.set.exit:
0106 7014 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0107 7016 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0108 7018 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 701A C2F9  30         mov   *stack+,r11           ; Pop R11
0110 701C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0083                       copy  "fm.browse.fname.prev.asm" ; Pick prev filename in filename list
     **** ****     > fm.browse.fname.prev.asm
0001               * FILE......: fm.browse.fmname.prev
0002               * Purpose...: File Manager - File browse support routines
0003               
0004               ***************************************************************
0005               * fm.browse.fname.prev
0006               * Pick previous filename in catalog filename list
0007               ***************************************************************
0008               * bl   @fm.browse.fname.prev
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cat.shortcut.idx = Index in catalog filename pointer list
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * @cat.fullfname = Combined string with device & filename
0015               * @cat.outparm1  = >FFFF if skipped, >0000 on normal exit
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ********|*****|*********************|**************************
0020               fm.browse.fname.prev:
0021 701E 0649  14         dect  stack
0022 7020 C64B  30         mov   r11,*stack            ; Save return address
0023 7022 0649  14         dect  stack
0024 7024 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 7026 0649  14         dect  stack
0026 7028 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Previous filename in catalog filename list
0029                       ;------------------------------------------------------
0030 702A 04E0  34         clr   @outparm1             ; Reset skipped flag
     702C A018     
0031 702E C120  34         mov   @cat.shortcut.idx,tmp0
     7030 E012     
0032 7032 131C  14         jeq   fm.browse.fname.prev.skip
0033                                                   ; Skip if already first file in catalog
0034               
0035 7034 0604  14         dec   tmp0                  ; Previous file in catalog
0036                       ;------------------------------------------------------
0037                       ; Do division for page/offset calculation
0038                       ;------------------------------------------------------
0039 7036 C144  18         mov   tmp0,tmp1             ; \ Prepare for division.
0040 7038 04C4  14         clr   tmp0                  ; / MSW=0, LSW=index value
0041 703A 3D20 144         div   @cat.nofilespage,tmp0 ; \ Calculate offset on current page
     703C E008     
0042                                                   ; / tmp0 = page number, tmp1 = offset
0043 703E 1901  14         jno   fm.browse.fname.prev.divok
0044                                                   ; No overflow, continue
0045 7040 1010  14         jmp   fm.browse.fname.prev.set
0046                                                   ; Overflow, just set filename
0047                       ;------------------------------------------------------
0048                       ; Division ok, now do page check
0049                       ;------------------------------------------------------
0050               fm.browse.fname.prev.divok:
0051 7042 0584  14         inc   tmp0                      ; Base 1
0052 7044 8804  34         c     tmp0,@cat.currentpage     ; Stay on page?
     7046 E00C     
0053 7048 130C  14         jeq   fm.browse.fname.prev.set  ; Yes, skip paging
0054                       ;------------------------------------------------------
0055                       ; Previous page and filename in catalog
0056                       ;------------------------------------------------------
0057               fm.browse.fname.prev.page:
0058 704A 0620  34         dec   @cat.currentpage      ; Previous page
     704C E00C     
0059 704E 0620  34         dec   @cat.shortcut.idx     ; Previous file in catalog
     7050 E012     
0060               
0061 7052 6820  54         s     @cat.nofilespage,@cat.fpicker.idx
     7054 E008     
     7056 E002     
0062                                                   ; Calculate 1st filename on page
0063               
0064 7058 06A0  32         bl    @pane.filebrowser     ; Refresh filebrowser pane
     705A 76CE     
0065               
0066 705C 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     705E 6F86     
0067                                                   ; \ i  @cat.device = Current device name
0068                                                   ; | i  @cat.shortcut.idx = Index in catalog
0069                                                   ; |        filename pointerlist
0070                                                   ; |
0071                                                   ; | o  @cat.fullfname = Combined string with
0072                                                   ; /        device & filename
0073               
0074 7060 1007  14         jmp   fm.browse.fname.prev.exit
0075                       ;------------------------------------------------------
0076                       ; Previous filename in catalog
0077                       ;------------------------------------------------------
0078               fm.browse.fname.prev.set:
0079 7062 0620  34         dec   @cat.shortcut.idx     ; Previous file in catalog
     7064 E012     
0080               
0081 7066 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7068 6F86     
0082                                                   ; \ i  @cat.device = Current device name
0083                                                   ; | i  @cat.shortcut.idx = Index in catalog
0084                                                   ; |        filename pointerlist
0085                                                   ; |
0086                                                   ; | o  @cat.fullfname = Combined string with
0087                                                   ; /        device & filename
0088               
0089 706A 1002  14         jmp   fm.browse.fname.prev.exit
0090                       ;------------------------------------------------------
0091                       ; Skip previous file
0092                       ;------------------------------------------------------
0093               fm.browse.fname.prev.skip:
0094 706C 0720  34         seto  @outparm1             ; Set skipped flag
     706E A018     
0095                       ;------------------------------------------------------
0096                       ; Exit
0097                       ;------------------------------------------------------
0098               fm.browse.fname.prev.exit:
0099 7070 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0100 7072 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0101 7074 C2F9  30         mov   *stack+,r11           ; Pop R11
0102 7076 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0084                       copy  "fm.browse.fname.next.asm" ; Pick next filename in filename list
     **** ****     > fm.browse.fname.next.asm
0001               * FILE......: fm.browse.fmname.next
0002               * Purpose...: File Manager - File browse support routines
0003               
0004               ***************************************************************
0005               * fm.browse.fname.next
0006               * Pick next filename in catalog filename list
0007               ***************************************************************
0008               * bl   @fm.browse.fname.next
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cat.shortcut.idx = Index in catalog filename pointer list
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * @cat.fullfname = Combined string with device & filename
0015               * @cat.outparm1  = >FFFF if skipped, >0000 on normal exit
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ********|*****|*********************|**************************
0020               fm.browse.fname.next:
0021 7078 0649  14         dect  stack
0022 707A C64B  30         mov   r11,*stack            ; Save return address
0023 707C 0649  14         dect  stack
0024 707E C644  30         mov   tmp0,*stack           ; Push tmp0
0025 7080 0649  14         dect  stack
0026 7082 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Next filename in catalog filename list
0029                       ;------------------------------------------------------
0030 7084 04E0  34         clr   @outparm1              ; Reset skipped flag
     7086 A018     
0031 7088 C120  34         mov   @cat.shortcut.idx,tmp0 ; \ Get current file index
     708A E012     
0032 708C 0584  14         inc   tmp0                   ; / Base 1
0033 708E 8804  34         c     tmp0,@cat.filecount    ; Last file reached ?
     7090 E000     
0034 7092 1101  14         jlt   !                      ; No, continue
0035 7094 101D  14         jmp   fm.browse.fname.next.skip
0036                                                    ; Yes, exit early
0037               
0038 7096 0584  14 !       inc   tmp0                   ; Next file in catalog
0039                       ;------------------------------------------------------
0040                       ; Do division for page/offset calculation
0041                       ;------------------------------------------------------
0042 7098 C144  18         mov   tmp0,tmp1             ; \ Prepare for division.
0043 709A 04C4  14         clr   tmp0                  ; / MSW=0, LSW=index value
0044 709C 3D20 144         div   @cat.nofilespage,tmp0 ; \ Calculate offset on current page
     709E E008     
0045                                                   ; / tmp0 = page number, tmp1 = offset
0046 70A0 1901  14         jno   fm.browse.fname.next.divok
0047                                                   ; No overflow, continue
0048 70A2 1011  14         jmp   fm.browse.fname.next.set
0049                                                   ; Overflow, just set filename
0050                       ;------------------------------------------------------
0051                       ; Division ok, now do page check
0052                       ;------------------------------------------------------
0053               fm.browse.fname.next.divok:
0054 70A4 0584  14         inc   tmp0                      ; Base 1
0055 70A6 8804  34         c     tmp0,@cat.currentpage     ; Stay on page?
     70A8 E00C     
0056 70AA 130D  14         jeq   fm.browse.fname.next.set  ; Yes, skip paging
0057                       ;------------------------------------------------------
0058                       ; Next page and filename in catalog
0059                       ;------------------------------------------------------
0060               fm.browse.fname.next.page:
0061 70AC 05A0  34         inc   @cat.currentpage      ; Next page
     70AE E00C     
0062               
0063 70B0 A820  54         a     @cat.nofilespage,@cat.fpicker.idx
     70B2 E008     
     70B4 E002     
0064                                                   ; Calculate 1st filename on page
0065               
0066 70B6 C820  54         mov   @cat.fpicker.idx,@cat.shortcut.idx
     70B8 E002     
     70BA E012     
0067               
0068 70BC 06A0  32         bl    @pane.filebrowser     ; Refresh filebrowser pane
     70BE 76CE     
0069               
0070 70C0 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     70C2 6F86     
0071                                                   ; \ i  @cat.device = Current device name
0072                                                   ; | i  @cat.shortcut.idx = Index in catalog
0073                                                   ; |        filename pointerlist
0074                                                   ; |
0075                                                   ; | o  @cat.fullfname = Combined string with
0076                                                   ; /        device & filename
0077               
0078 70C4 1007  14         jmp   fm.browse.fname.next.exit
0079                       ;------------------------------------------------------
0080                       ; Next filename in catalog
0081                       ;------------------------------------------------------
0082               fm.browse.fname.next.set:
0083 70C6 05A0  34         inc   @cat.shortcut.idx     ; Next file in catalog
     70C8 E012     
0084               
0085 70CA 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     70CC 6F86     
0086                                                   ; \ i  @cat.device = Current device name
0087                                                   ; | i  @cat.shortcut.idx = Index in catalog
0088                                                   ; |        filename pointerlist
0089                                                   ; |
0090                                                   ; | o  @cat.fullfname = Combined string with
0091                                                   ; /        device & filename
0092               
0093 70CE 1002  14         jmp   fm.browse.fname.next.exit
0094                       ;------------------------------------------------------
0095                       ; Skip next file
0096                       ;------------------------------------------------------
0097               fm.browse.fname.next.skip:
0098 70D0 0720  34         seto  @outparm1             ; Set skipped flag
     70D2 A018     
0099                       ;------------------------------------------------------
0100                       ; Exit
0101                       ;------------------------------------------------------
0102               fm.browse.fname.next.exit:
0103 70D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0104 70D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0105 70D8 C2F9  30         mov   *stack+,r11           ; Pop R11
0106 70DA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0085                       copy  "fm.browse.updir.asm"      ; Directory up
     **** ****     > fm.browse.updir.asm
0001               * FILE......: fm.browse.updir
0002               * Purpose...: File Manager - File browse support routines
0003               
0004               ***************************************************************
0005               * fm.browse.updir
0006               * Go up one directory level
0007               ***************************************************************
0008               * bl   @fm.browse.updir
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cat.device = Current device name
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = >0000 if at root or no subdirectory on device.
0015               *             >ffff if directory successfully changed.
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2, tmp3
0019               ********|*****|*********************|**************************
0020               fm.browse.updir:
0021 70DC 0649  14         dect  stack
0022 70DE C64B  30         mov   r11,*stack            ; Save return address
0023 70E0 0649  14         dect  stack
0024 70E2 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 70E4 0649  14         dect  stack
0026 70E6 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 70E8 0649  14         dect  stack
0028 70EA C646  30         mov   tmp2,*stack           ; Push tmp2
0029 70EC 0649  14         dect  stack
0030 70EE C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;------------------------------------------------------
0032                       ; Get device name/path
0033                       ;------------------------------------------------------
0034 70F0 04E0  34         clr   @outparm1             ; Clear success flag
     70F2 A018     
0035 70F4 D120  34         movb  @cat.device,tmp0      ; Get length current device name/path
     70F6 EEB0     
0036 70F8 0984  32         srl   tmp0,8                ; MSB to LSB
0037 70FA C144  18         mov   tmp0,tmp1             ; Save length
0038 70FC 0225  22         ai    tmp1,cat.device       ; Point to last character
     70FE EEB0     
0039 7100 C184  18         mov   tmp0,tmp2             ; Set counter
0040 7102 04C7  14         clr   tmp3                  ; Clear dot count
0041 7104 0204  20         li    tmp0,>2e00            ; Dot '.' character in MSB
     7106 2E00     
0042                       ;------------------------------------------------------
0043                       ; Count dots in device path
0044                       ;------------------------------------------------------
0045               fm.browse.updir.loop1:
0046 7108 9115  26         cb    *tmp1,tmp0            ; Is it a dot?
0047 710A 1606  14         jne   fm.browse.updir.loop1.cont
0048                                                   ; No match, continue loop
0049 710C 0587  14         inc   tmp3                  ; Match. Increment dot count
0050 710E 0287  22         ci    tmp3,2                ; 2nd dot encountered?
     7110 0002     
0051 7112 1602  14         jne   fm.browse.updir.loop1.cont
0052                                                   ; No. Continue loop
0053 7114 C805  38         mov   tmp1,@cat.var1        ; Yes. Save position of 2nd dot
     7116 E066     
0054               fm.browse.updir.loop1.cont:
0055 7118 0605  14         dec   tmp1                  ; Move to previous character
0056 711A 0606  14         dec   tmp2                  ; Decrement counter
0057 711C 15F5  14         jgt   fm.browse.updir.loop1 ; Previous character
0058                       ;------------------------------------------------------
0059                       ; Exit early if at root or not subdirectory on device
0060                       ;------------------------------------------------------
0061 711E 0287  22         ci    tmp3,2                ; More than one dot?
     7120 0002     
0062 7122 1115  14         jlt   fm.browse.updir.exit  ; No. Exit early
0063                       ;------------------------------------------------------
0064                       ; Remove last part of device name/path
0065                       ;------------------------------------------------------
0066 7124 C160  34         mov   @cat.var1,tmp1        ; Get position of 2nd dot
     7126 E066     
0067 7128 0225  22         ai    tmp1,-cat.device      ; Calculate length of device name/path
     712A 1150     
0068 712C C805  38         mov   tmp1,@cat.var2        ; Backup length of device name/path
     712E E068     
0069 7130 0A85  32         sla   tmp1,8                ; LSB to MSB
0070 7132 D805  38         movb  tmp1,@cat.device      ; Set new length
     7134 EEB0     
0071 7136 0720  34         seto  @outparm1             ; Set success flag
     7138 A018     
0072                       ;------------------------------------------------------
0073                       ; Clear rest of device name/path
0074                       ;------------------------------------------------------
0075 713A C120  34         mov   @cat.var1,tmp0        ; Address in memory
     713C E066     
0076 713E 0584  14         inc   tmp0                  ; Skip 2nd dot
0077 7140 04C5  14         clr   tmp1                  ; Fill with nulls
0078 7142 0206  20         li    tmp2,80
     7144 0050     
0079 7146 61A0  34         s     @cat.var2,tmp2        ; Limit to 80 characters
     7148 E068     
0080               
0081 714A 06A0  32         bl    @xfilm                ; \ Fill memory
     714C 223C     
0082                                                   ; | i  tmp0 = Memory start address
0083                                                   ; | i  tmp1 = Byte to fill
0084                                                   ; / i  tmp2 = Number of bytes to fill
0085                       ;------------------------------------------------------
0086                       ; Exit
0087                       ;------------------------------------------------------
0088               fm.browse.updir.exit:
0089 714E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0090 7150 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0091 7152 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 7154 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 7156 C2F9  30         mov   *stack+,r11           ; Pop R11
0094 7158 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0086                       copy  "fm.directory.asm"         ; File manager drive/directory listing
     **** ****     > fm.directory.asm
0001               * FILE......: fm.directory.asm
0002               * Purpose...: File Manager - Catalog drive/directory
0003               
0004               
0005               ***************************************************************
0006               * fm.directory
0007               * Catalog drive/directory
0008               ***************************************************************
0009               * bl  @fm.directory
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * parm1  = Pointer to length-prefixed string containing device
0013               *          or >0000 if using parm2.
0014               * parm2  = Index in device list (ignored if parm1 set)
0015               *---------------------------------------------------------------
0016               * OUTPUT
0017               * NONE
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0, tmp1, tmp2
0021               ********|*****|*********************|**************************
0022               fm.directory:
0023 715A 0649  14         dect  stack
0024 715C C64B  30         mov   r11,*stack            ; Save return address
0025 715E 0649  14         dect  stack
0026 7160 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 7162 0649  14         dect  stack
0028 7164 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 7166 0649  14         dect  stack
0030 7168 C646  30         mov   tmp2,*stack           ; Push tmp2
0031 716A 0649  14         dect  stack
0032 716C C647  30         mov   tmp3,*stack           ; Push tmp3
0033 716E 0649  14         dect  stack
0034 7170 C660  46         mov   @parm1,*stack         ; Push @parm1
     7172 A006     
0035 7174 0649  14         dect  stack
0036 7176 C660  46         mov   @parm2,*stack         ; Push @parm2
     7178 A008     
0037 717A 0649  14         dect  stack
0038 717C C660  46         mov   @parm3,*stack         ; Push @parm3
     717E A00A     
0039 7180 0649  14         dect  stack
0040 7182 C660  46         mov   @parm4,*stack         ; Push @parm4
     7184 A00C     
0041 7186 0649  14         dect  stack
0042 7188 C660  46         mov   @parm5,*stack         ; Push @parm5
     718A A00E     
0043 718C 0649  14         dect  stack
0044 718E C660  46         mov   @parm6,*stack         ; Push @parm6
     7190 A010     
0045 7192 0649  14         dect  stack
0046 7194 C660  46         mov   @parm7,*stack         ; Push @parm7
     7196 A012     
0047 7198 0649  14         dect  stack
0048 719A C660  46         mov   @parm8,*stack         ; Push @parm8
     719C A014     
0049 719E 0649  14         dect  stack
0050 71A0 C660  46         mov   @parm9,*stack         ; Push @parm9
     71A2 A016     
0051                       ;------------------------------------------------------
0052                       ; Clear catalog space
0053                       ;------------------------------------------------------
0054 71A4 06A0  32         bl    @film
     71A6 2236     
0055 71A8 E000                   data cat.top,>00,cat.size - 80
     71AA 0000     
     71AC 0EB0     
0056                                                   ; Clear catalog area except current device
0057                                                   ; @cat.device (is at end of memory area)
0058                       ;------------------------------------------------------
0059                       ; Remove filepicker color bar and old files from screen
0060                       ;------------------------------------------------------
0061 71AE 06A0  32         bl    @pane.filebrowser.colbar.remove
     71B0 76F2     
0062                                                   ; Remove filepicker color bar
0063                                                   ; i \  @cat.barpos = YX position color bar
0064                                                   ;   /
0065               
0066 71B2 06A0  32         bl    @filv
     71B4 228E     
0067 71B6 0050                   data 80,32,(pane.botrow - cmdb.rows - 1) * 80
     71B8 0020     
     71BA 06E0     
0068                                                   ; Clear files list on screen
0069               
0070 71BC 0204  20         li    tmp0,vdp.tat.base + 80
     71BE 09D0     
0071 71C0 C160  34         mov   @tv.color,tmp1        ; \ Get color combination (only MSB counts)
     71C2 A218     
0072 71C4 06C5  14         swpb  tmp1                  ; /
0073 71C6 0206  20         li    tmp2,(pane.botrow - cmdb.rows - 1) * 80
     71C8 06E0     
0074               
0075 71CA 06A0  32         bl    @xfilv                ; Fill colors
     71CC 2294     
0076                                                   ; i \  tmp0 = start address
0077                                                   ; i |  tmp1 = byte to fill
0078                                                   ; i /  tmp2 = number of bytes to fill
0079                       ;-------------------------------------------------------
0080                       ; Process parameters
0081                       ;-------------------------------------------------------
0082 71CE C120  34         mov   @parm1,tmp0           ; Use parameter 2?
     71D0 A006     
0083 71D2 1606  14         jne   fm.directory.checkdot ; No, skip
0084               
0085 71D4 C120  34         mov   @parm2,tmp0           ; Get index
     71D6 A008     
0086 71D8 0A14  18         sla   tmp0,1                ; Word align
0087 71DA C824  54         mov   @device.list(tmp0),@parm1
     71DC 783C     
     71DE A006     
0088                                                   ; Set device string
0089                       ;-------------------------------------------------------
0090                       ; Check if last character in device name is '.'
0091                       ;-------------------------------------------------------
0092               fm.directory.checkdot:
0093 71E0 C120  34         mov   @parm1,tmp0           ; Get pointer to device name
     71E2 A006     
0094 71E4 D154  26         movb  *tmp0,tmp1            ; \ Get length byte
0095 71E6 0985  32         srl   tmp1,8                ; /
0096 71E8 A105  18         a     tmp1,tmp0             ; Add length to pointer base
0097 71EA D114  26         movb  *tmp0,tmp0            ; Get byte at pointer
0098 71EC 0984  32         srl   tmp0,8                ; MSB to LSB
0099 71EE 0284  22         ci    tmp0,46               ; We have a dot
     71F0 002E     
0100 71F2 1302  14         jeq   fm.directory.read     ; Read device catalog
0101 71F4 0460  28         b     @fm.directory.exit    ; No dot, exit early
     71F6 7378     
0102                       ;-------------------------------------------------------
0103                       ; (1) Read drive/directory catalog into memory
0104                       ;-------------------------------------------------------
0105               fm.directory.read:
0106 71F8 0204  20         li    tmp0,fm.dir.callback1 ; Callback function "Before open file"
     71FA 6DA6     
0107 71FC C804  38         mov   tmp0,@parm2           ; Register callback 1
     71FE A008     
0108               
0109 7200 0204  20         li    tmp0,fm.dir.callback2 ; Callback function "Read line from file"
     7202 6DD8     
0110 7204 C804  38         mov   tmp0,@parm3           ; Register callback 2
     7206 A00A     
0111               
0112 7208 0204  20         li    tmp0,fm.dir.callback3 ; Callback function "Close file"
     720A 6EFE     
0113 720C C804  38         mov   tmp0,@parm4           ; Register callback 3
     720E A00C     
0114               
0115 7210 0204  20         li    tmp0,fm.dir.callback4 ; Callback function "File I/O error"
     7212 6F3A     
0116 7214 C804  38         mov   tmp0,@parm5           ; Register callback 4
     7216 A00E     
0117               
0118 7218 0204  20         li    tmp0,fm.dir.callback5 ; Callback function "Memory full"
     721A 6F6E     
0119 721C C804  38         mov   tmp0,@parm6           ; Register callback 5
     721E A010     
0120               
0121 7220 0204  20         li    tmp0,rambuf
     7222 A100     
0122 7224 C804  38         mov   tmp0,@parm7           ; Destination RAM memory address
     7226 A012     
0123               
0124 7228 0204  20         li    tmp0,fh.file.pab.header.cat
     722A 77CA     
0125 722C C804  38         mov   tmp0,@parm8           ; PAB Header template for reading catalog
     722E A014     
0126               
0127 7230 0204  20         li    tmp0,io.rel.inp.int.fix
     7232 000D     
0128 7234 C804  38         mov   tmp0,@parm9           ; File type/mode for reading catalog
     7236 A016     
0129               
0130 7238 C120  34         mov   @parm1,tmp0           ; Get device name
     723A A006     
0131 723C 0205  20         li    tmp1,cat.device
     723E EEB0     
0132               
0133 7240 D194  26         movb  *tmp0,tmp2            ; \ Get number of bytes to copy
0134 7242 0986  32         srl   tmp2,8                ; | including length byte itself.
0135 7244 0586  14         inc   tmp2                  ; /
0136               
0137 7246 06A0  32         bl    @xpym2m               ; Copy memory block
     7248 2540     
0138                                                   ; \ i  tmp0 = source
0139                                                   ; | i  tmp1 = destination
0140                                                   ; / i  tmp2 = bytes to copy
0141               
0142 724A 06A0  32         bl    @fh.file.read.mem     ; Read file into memory
     724C 604A     
0143                                                   ; \ i  @parm1 = Pointer to length prefixed
0144                                                   ; |             file descriptor
0145                                                   ; | i  @parm2 = Pointer to callback
0146                                                   ; |             "Before Open file"
0147                                                   ; | i  @parm3 = Pointer to callback
0148                                                   ; |             "Read line from file"
0149                                                   ; | i  @parm4 = Pointer to callback
0150                                                   ; |             "Close file"
0151                                                   ; | i  @parm5 = Pointer to callback
0152                                                   ; |             "File I/O error"
0153                                                   ; | i  @parm6 = Pointer to callback
0154                                                   ; |             "Memory full error"
0155                                                   ; | i  @parm7 = Destination RAM address
0156                                                   ; | i  @parm8 = PAB template address in
0157                                                   ; |             ROM/RAM
0158                                                   ; | i  @parm9 = File type/mode (in LSB),
0159                                                   ; /             becomes PAB byte 1
0160               
0161                       ;-------------------------------------------------------
0162                       ; (2) Generate string list with filesizes
0163                       ;-------------------------------------------------------
0164 724E 0204  20         li    tmp0,cat.fslist       ; Set pointer to filesize list
     7250 E1F4     
0165 7252 0205  20         li    tmp1,cat.sizelist     ; Set pointer to filesize string list
     7254 E6C0     
0166 7256 C1A0  34         mov   @cat.filecount,tmp2   ; Number of files to process
     7258 E000     
0167 725A 1602  14         jne   !                     ; Have files to process, continue
0168 725C 0460  28         b     @fm.directory.browser ; Skip to browser, no files to process
     725E 736C     
0169               
0170 7260 C804  38 !       mov   tmp0,@cat.var1        ; Save pointer to filesize list
     7262 E066     
0171 7264 C805  38         mov   tmp1,@cat.var2        ; Save pointer to filesize string list
     7266 E068     
0172 7268 C806  38         mov   tmp2,@cat.var3        ; Set loop counter
     726A E06A     
0173                       ;-------------------------------------------------------
0174                       ; Loop over files
0175                       ;-------------------------------------------------------
0176                       ; @cat.var1 = Pointer to filesize list
0177                       ; @cat.var2 = Pointer to filesize string list
0178                       ; @cat.var3 = Loop counter
0179                       ; @cat.var4 = File size (word)
0180                       ;-------------------------------------------------------
0181               fm.directory.fsloop:
0182 726C C120  34         mov   @cat.var1,tmp0        ; Get pointer to filesize list
     726E E066     
0183 7270 C154  26         mov   *tmp0,tmp1            ; Get file size
0184 7272 C805  38         mov   tmp1,@cat.var4        ; Save word aligned file size
     7274 E06C     
0185 7276 05E0  34         inct  @cat.var1             ; Advance pointer
     7278 E066     
0186                       ;-------------------------------------------------------
0187                       ; Convert unsigned number to string and trim
0188                       ;-------------------------------------------------------
0189 727A 40A0  34         szc   @wbit0,config         ; Do not show number after conversion
     727C 2020     
0190 727E 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7280 2A56     
0191 7282 E06C                   data  cat.var4        ; \ i  p1    = Source
0192 7284 A100                   data  rambuf          ; | i  p2    = Destination
0193 7286 30                     byte  48              ; | i  p3MSB = ASCII offset
0194 7287   20                   byte  32              ; / i  p3LSB = Padding character
0195                       ;-------------------------------------------------------
0196                       ; Copy number string to destination in file size list
0197                       ;-------------------------------------------------------
0198 7288 0204  20         li    tmp0,rambuf+2         ; Memory source address
     728A A102     
0199 728C C160  34         mov   @cat.var2,tmp1        ; Memory destination address
     728E E068     
0200 7290 0206  20         li    tmp2,>0300            ; \ Length of number
     7292 0300     
0201 7294 DD46  32         movb  tmp2,*tmp1+           ; / Set length byte prefix at destination
0202               
0203 7296 0206  20         li    tmp2,3                ; Number of bytes to copy
     7298 0003     
0204 729A A806  38         a     tmp2,@cat.var2        ; Advance pointer in filesize string list
     729C E068     
0205 729E 05A0  34         inc   @cat.var2             ; Include length byte
     72A0 E068     
0206               
0207 72A2 06A0  32         bl    @xpym2m               ; Copy memory block
     72A4 2540     
0208                                                   ; \ i  tmp0 = source
0209                                                   ; | i  tmp1 = destination
0210                                                   ; / i  tmp2 = bytes to copy
0211                       ;-------------------------------------------------------
0212                       ; Prepare for next file
0213                       ;-------------------------------------------------------
0214 72A6 0620  34         dec   @cat.var3             ; Adjust file counter
     72A8 E06A     
0215 72AA 15E0  14         jgt   fm.directory.fsloop   ; Next file
0216                       ;-------------------------------------------------------
0217                       ; (3) Generate string list with file types
0218                       ;-------------------------------------------------------
0219               fm.directory.ftlist:
0220 72AC 0204  20         li    tmp0,cat.ftlist       ; Set pointer to filetype list
     72AE E174     
0221 72B0 0205  20         li    tmp1,cat.typelist     ; Set pointer to filetype string list
     72B2 E3C6     
0222 72B4 C1A0  34         mov   @cat.filecount,tmp2   ; Number of files to process
     72B6 E000     
0223 72B8 C804  38         mov   tmp0,@cat.var1        ; Save pointer to filetype list
     72BA E066     
0224 72BC C805  38         mov   tmp1,@cat.var2        ; Save pointer to filetype string list
     72BE E068     
0225 72C0 C806  38         mov   tmp2,@cat.var3        ; Set loop counter
     72C2 E06A     
0226 72C4 0207  20         li    tmp3,cat.rslist       ; Set pointer to recordsize list
     72C6 E2F4     
0227 72C8 C807  38         mov   tmp3,@cat.var4        ; Pointer to recordsize lista
     72CA E06C     
0228               
0229 72CC 0206  20         li    tmp2,>2020            ; Whitespace
     72CE 2020     
0230 72D0 0207  20         li    tmp3,>0500            ; Fixed length prefix byte in MSB
     72D2 0500     
0231                       ;-------------------------------------------------------
0232                       ; Loop over files
0233                       ;-------------------------------------------------------
0234                       ; @cat.var1 = Pointer to filetype list
0235                       ; @cat.var2 = Pointer to filetype string list
0236                       ; @cat.var3 = Loop counter
0237                       ; @cat.var4 = Pointer to recordsize list
0238                       ; @cat.var5 = Record size (word)
0239                       ; @cat.var6 = Filetype byte (word)
0240                       ;-------------------------------------------------------
0241               fm.directory.ftloop:
0242 72D4 C120  34         mov   @cat.var1,tmp0        ; \
     72D6 E066     
0243 72D8 D114  26         movb  *tmp0,tmp0            ; / Get filetype byte
0244 72DA 0744  18         abs   tmp0                  ; Ignore write-protection
0245 72DC 0984  32         srl   tmp0,8                ; MSB to LSB
0246 72DE C804  38         mov   tmp0,@cat.var6        ; Save word aligned filetype byte
     72E0 E070     
0247               
0248 72E2 0A24  20         sla   tmp0,2                ; \ Multiply by 4.
0249                                                   ; | Each filetype string is 6 bytes
0250                                                   ; / (1 length byte) + 5 text bytes
0251                       ;-------------------------------------------------------
0252                       ; Get filetype string and set length prefix
0253                       ;-------------------------------------------------------
0254 72E4 C160  34         mov   @cat.var2,tmp1                 ; Pointer to filetype string list
     72E6 E068     
0255 72E8 C564  46         mov   @txt.filetypes(tmp0),*tmp1     ; Write length prefix byte & char 1
     72EA 73A8     
0256 72EC D547  30         movb  tmp3,*tmp1                     ; Overwrite length prefix byte
0257 72EE 05C5  14         inct  tmp1                           ; Skip 2 bytes
0258 72F0 CD64  50         mov   @txt.filetypes+2(tmp0),*tmp1+  ; Write char 2-3
     72F2 73AA     
0259 72F4 C546  30         mov   tmp2,*tmp1                     ; Fill char 4-5 with whitespace
0260                       ;-------------------------------------------------------
0261                       ; Only set record length for filetype 1-4 (DF,DV,IF,IV)
0262                       ;-------------------------------------------------------
0263 72F6 C120  34         mov   @cat.var6,tmp0                 ; Get filetype byte
     72F8 E070     
0264 72FA 1304  14         jeq   fm.directory.ftloop.prepnext   ; Offset = ftype0 ? Yes, skip
0265 72FC 0284  22         ci    tmp0,4                         ; Offset > ftype4 ?
     72FE 0004     
0266 7300 1501  14         jgt   fm.directory.ftloop.prepnext   ; Yes, skip
0267 7302 1002  14         jmp   fm.directory.ftloop.recsize    ; Build record size string
0268                       ;-------------------------------------------------------
0269                       ; Skip record size for other filetypes
0270                       ;-------------------------------------------------------
0271               fm.directory.ftloop.prepnext:
0272 7304 05C5  14         inct  tmp1                           ; Skip char 4-5
0273 7306 1029  14         jmp   fm.directory.ftloop.next       ; Next iteration
0274                       ;-------------------------------------------------------
0275                       ; Build recordsize string
0276                       ;-------------------------------------------------------
0277               fm.directory.ftloop.recsize:
0278 7308 C120  34         mov   @cat.var4,tmp0        ; Get pointer to record size
     730A E06C     
0279 730C D114  26         movb  *tmp0,tmp0            ; Get record size
0280 730E 0984  32         srl   tmp0,8                ; MSB to LSB
0281 7310 C804  38         mov   tmp0,@cat.var5        ; Set record size
     7312 E06E     
0282               
0283                ;       data  c99_dbg_tmp0          ; \ Print file type record size in tmp0
0284                ;       data  >1001                 ; | in classic99 debugger console.
0285                ;       data  data.printf.recsize   ; | Needs debug opcodes enabled in
0286                ;                                   ; / classic99.ini file. See c99 manual.
0287               
0288 7314 0649  14         dect  stack
0289 7316 C644  30         mov   tmp0,*stack           ; Push tmp0
0290 7318 0649  14         dect  stack
0291 731A C645  30         mov   tmp1,*stack           ; Push tmp1
0292 731C 0649  14         dect  stack
0293 731E C646  30         mov   tmp2,*stack           ; Push tmp2
0294 7320 0649  14         dect  stack
0295 7322 C647  30         mov   tmp3,*stack           ; Push tmp3
0296               
0297 7324 0242  22         andi  config,>7fff          ; Do not print number
     7326 7FFF     
0298                                                   ; (Reset bit 0 in config register)
0299               
0300 7328 06A0  32         bl    @mknum                ; Convert unsigned number to string
     732A 2A56     
0301 732C E06E                   data cat.var5         ; \ i  p1    = Source
0302 732E A100                   data rambuf           ; | i  p2    = Destination
0303 7330 30                     byte 48               ; | i  p3MSB = ASCII offset
0304 7331   20                   byte 32               ; / i  p3LSB = Padding character
0305               
0306 7332 04E0  34         clr   @rambuf+6             ; Clear bytes 7-8 in ram buffer
     7334 A106     
0307 7336 04E0  34         clr   @rambuf+8             ; Clear bytes 9-10 in ram buffer
     7338 A108     
0308               
0309 733A 06A0  32         bl    @trimnum              ; Trim number string
     733C 2AAE     
0310 733E A100                   data rambuf           ; \ i  p1 = Source
0311 7340 A106                   data rambuf + 6       ; | i  p2 = Destination
0312 7342 0020                   data 32               ; / i  p3 = Padding character to scan
0313               
0314 7344 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0315 7346 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0316 7348 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0317 734A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0318               
0319 734C 0605  14         dec   tmp1                  ; Backoff to 3rd character (whitespace)
0320 734E DD60  48         movb  @rambuf+7,*tmp1+      ; Record size. Character 1
     7350 A107     
0321 7352 DD60  48         movb  @rambuf+8,*tmp1+      ; Record size. Character 2
     7354 A108     
0322 7356 DD60  48         movb  @rambuf+9,*tmp1+      ; Record size. Character 3
     7358 A109     
0323                       ;-------------------------------------------------------
0324                       ; Prepare for next file
0325                       ;-------------------------------------------------------
0326               fm.directory.ftloop.next:
0327 735A C805  38         mov   tmp1,@cat.var2        ; Save pointer address for next string
     735C E068     
0328 735E 05A0  34         inc   @cat.var1             ; Next filetype byte
     7360 E066     
0329 7362 05A0  34         inc   @cat.var4             ; Next recordsize byte
     7364 E06C     
0330 7366 0620  34         dec   @cat.var3             ; Adjust file counter
     7368 E06A     
0331 736A 15B4  14         jgt   fm.directory.ftloop   ; Next file
0332               *--------------------------------------------------------------
0333               * Show filebrowser
0334               *--------------------------------------------------------------
0335               fm.directory.browser:
0336 736C 04E0  34         clr   @cat.shortcut.idx     ; 1st file/dir in list
     736E E012     
0337 7370 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7372 6F86     
0338                                                   ; \ i  @cat.device = Current device name
0339                                                   ; | i  @cat.shortcut.idx = Index in catalog
0340                                                   ; |        filename pointerlist
0341                                                   ; |
0342                                                   ; | o  @cat.fullfname = Combined string with
0343                                                   ; /        device & filename
0344               
0345 7374 06A0  32         bl    @pane.filebrowser     ; Browse files
     7376 76CE     
0346               *--------------------------------------------------------------
0347               * Exit
0348               *--------------------------------------------------------------
0349               fm.directory.exit:
0350 7378 C839  50         mov   *stack+,@parm9        ; Pop @parm9
     737A A016     
0351 737C C839  50         mov   *stack+,@parm8        ; Pop @parm8
     737E A014     
0352 7380 C839  50         mov   *stack+,@parm7        ; Pop @parm7
     7382 A012     
0353 7384 C839  50         mov   *stack+,@parm6        ; Pop @parm6
     7386 A010     
0354 7388 C839  50         mov   *stack+,@parm5        ; Pop @parm5
     738A A00E     
0355 738C C839  50         mov   *stack+,@parm4        ; Pop @parm4
     738E A00C     
0356 7390 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7392 A00A     
0357 7394 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7396 A008     
0358 7398 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     739A A006     
0359 739C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0360 739E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0361 73A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0362 73A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0363 73A4 C2F9  30         mov   *stack+,r11           ; Pop R11
0364 73A6 045B  20         b     *r11                  ; Return to caller
0365               
0366               
0367 73A8 0356     txt.ftype0    stri 'VOL'
     73AA 4F4C     
0368 73AC 0344     txt.ftype1    stri 'DF '
     73AE 4620     
0369 73B0 0344     txt.ftype2    stri 'DV '
     73B2 5620     
0370 73B4 0349     txt.ftype3    stri 'IF '
     73B6 4620     
0371 73B8 0349     txt.ftype4    stri 'IV '
     73BA 5620     
0372 73BC 0350     txt.ftype5    stri 'PRG'
     73BE 5247     
0373 73C0 0344     txt.ftype6    stri 'DIR'
     73C2 4952     
0374      73A8     txt.filetypes equ  txt.ftype0
0375               
0376               data.printf.recsize:
0377 73C4 4361            text   'Catalog. File type record size: %u'
     73C6 7461     
     73C8 6C6F     
     73CA 672E     
     73CC 2046     
     73CE 696C     
     73D0 6520     
     73D2 7479     
     73D4 7065     
     73D6 2072     
     73D8 6563     
     73DA 6F72     
     73DC 6420     
     73DE 7369     
     73E0 7A65     
     73E2 3A20     
     73E4 2575     
0378 73E6 00              byte   0
                   < stevie_b2.asm
0087                       copy  "edb.find.asm"             ; Initialize for find function
     **** ****     > edb.find.asm
0001               * FILE......: edb.find.asm
0002               * Purpose...: Initialize memory used for editor buffer find functionality
0003               ***************************************************************
0004               * edb.find.init
0005               * Scan source code for search string
0006               ***************************************************************
0007               *  bl   @edb.find.init
0008               *--------------------------------------------------------------
0009               * INPUT
0010               * NONE
0011               *--------------------------------------------------------------
0012               * OUTPUT
0013               * NONE
0014               *--------------------------------------------------------------
0015               * Register usage
0016               * tmp0, tmp1, tmp2, tmp3, tmp4, r1
0017               ********|*****|*********************|**************************
0018               edb.find.init:
0019 73E8 0649  14         dect  stack
0020 73EA C64B  30         mov   r11,*stack            ; Save return address
0021 73EC 0649  14         dect  stack
0022 73EE C644  30         mov   tmp0,*stack           ; Push tmp0
0023 73F0 0649  14         dect  stack
0024 73F2 C645  30         mov   tmp1,*stack           ; Push tmp1
0025 73F4 0649  14         dect  stack
0026 73F6 C646  30         mov   tmp2,*stack           ; Push tmp2
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 73F8 06A0  32         bl    @film
     73FA 2236     
0031 73FC F100                   data edb.srch.idx.rtop
0032 73FE 00FF                   data >ff
0033 7400 0C00                   data edb.srch.idx.rsize + edb.srch.idx.csize
0034                                                   ; Clear search results index for rows and
0035                                                   ; columns. Using >ff as "unset" value
0036               
0037 7402 04E0  34         clr   @edb.srch.offset      ; Reset offset into search results row index
     7404 A5D6     
0038 7406 04E0  34         clr   @edb.srch.matches     ; Reset matches counter
     7408 A5CE     
0039 740A 04E0  34         clr   @edb.srch.curmatch    ; Reset current match
     740C A5D0     
0040 740E 04E0  34         clr   @edb.srch.startln     ; 1st line to search
     7410 A5C8     
0041 7412 C820  54         mov   @edb.lines,@edb.srch.endln
     7414 A504     
     7416 A5CA     
0042                                                   ; Last line to search
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046               edb.find.init.exit:
0047 7418 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0048 741A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0049 741C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0050 741E C2F9  30         mov   *stack+,r11           ; Pop r11
0051 7420 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0088                       copy  "edb.find.search.asm"      ; Find functionality
     **** ****     > edb.find.search.asm
0001               * FILE......: edb.find.search.asm
0002               * Purpose...: Editor buffer find functionality
0003               
0004               
0005               ***************************************************************
0006               * edb.find.search.search
0007               * Prepare for doing search operation
0008               ***************************************************************
0009               *  bl   @edb.find.search
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * NONE
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * NONE
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2, tmp3
0019               ********|*****|*********************|**************************
0020               edb.find.search:
0021 7422 0649  14         dect  stack
0022 7424 C64B  30         mov   r11,*stack            ; Save return address
0023 7426 0649  14         dect  stack
0024 7428 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 742A 0649  14         dect  stack
0026 742C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 742E 0649  14         dect  stack
0028 7430 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 7432 0649  14         dect  stack
0030 7434 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Initialisation
0033                       ;-------------------------------------------------------
0034 7436 06A0  32         bl    @putat
     7438 2442     
0035 743A 0045                   byte 0,69
0036 743C 7482                   data txt.find.hits    ; Show 'Hits:'
0037               
0038 743E 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     7440 7686     
0039               
0040 7442 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     7444 A318     
0041 7446 C820  54         mov   @fb.topline,@parm1
     7448 A304     
     744A A006     
0042 744C 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     744E 7716     
0043                                                   ; | i  @parm1 = Line to start with
0044                                                   ; /             (becomes @fb.topline)
0045               
0046 7450 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     7452 31D0     
0047                                                   ; \ i  @tv.ruler.visible = Ruler visible
0048                                                   ; | i  @edb.special.file = Special file flag
0049                                                   ; / i  @tv.error.visible = Error visible
0050               
0051 7454 C820  54         mov   @fb.scrrows,@parm1
     7456 A31C     
     7458 A006     
0052 745A 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     745C 761A     
0053                                                   ; \ i  @parm1 = number of lines to dump
0054                                                   ; /
0055                       ;-------------------------------------------------------
0056                       ; Perform search operation
0057                       ;-------------------------------------------------------
0058 745E 06A0  32         bl    @edb.find.scan        ; Perform search operation
     7460 748E     
0059                       ;-------------------------------------------------------
0060                       ; Show 1st search result
0061                       ;-------------------------------------------------------
0062 7462 06A0  32         bl    @hchar
     7464 2832     
0063 7466 0045                   byte 0,69,32,22
     7468 2016     
0064 746A FFFF                   data eol              ; Remove "Hits: ....."
0065               
0066 746C C820  54         mov   @edb.srch.matches,@edb.srch.curmatch
     746E A5CE     
     7470 A5D0     
0067                                                   ; \ Wrap around and goto 1st
0068 7472 06A0  32         bl    @fb.goto.nextmatch    ; / match in file.
     7474 7698     
0069                       ;------------------------------------------------------
0070                       ; Exit
0071                       ;------------------------------------------------------
0072               edb.find.search.exit:
0073 7476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0074 7478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0075 747A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0076 747C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0077 747E C2F9  30         mov   *stack+,r11           ; Pop r11
0078 7480 045B  20         b     *r11                  ; Return to caller
0079               
0080 7482 0A48     txt.find.hits stri 'Hits:    0'
     7484 6974     
     7486 733A     
     7488 2020     
     748A 2020     
     748C 30       
0081                             even
                   < stevie_b2.asm
0089                       copy  "edb.find.scan.asm"        ; Scan editor buffer for matches
     **** ****     > edb.find.scan.asm
0001               * FILE......: edb.find.scan.asm
0002               * Purpose...: Scan source code for search string
0003               ***************************************************************
0004               * edb.find.scan
0005               * Scan source code for search string
0006               ***************************************************************
0007               *  bl   @edb.find.scan
0008               *--------------------------------------------------------------
0009               * INPUT
0010               * NONE
0011               *--------------------------------------------------------------
0012               * OUTPUT
0013               * NONE
0014               *--------------------------------------------------------------
0015               * Register usage
0016               * tmp0, tmp1, tmp2, tmp3, tmp4, r1
0017               *--------------------------------------------------------------
0018               * Memory usage
0019               *
0020               * 1. Using some memory locations foreseen for file I/O.
0021               *    Is ok, because we know we're not saving/reading file while
0022               *    scanning editor buffer in memory.
0023               *
0024               * 2. Using framebuffer as work buffer for unpacking line before
0025               *    scan. Enable reuse of existing unpack to framebuffer func.
0026               *
0027               * Register usage
0028               * tmp0 = Pointer to current character in search string
0029               * tmp1 = Pointer to current character in unpacked line in framebuffer
0030               * tmp2 = Loop counter for character in unpacked line (=line length at start)
0031               * tmp3 = Matching character counter
0032               * tmp4 = Character counter in unpacked line
0033               * r1   = Additional temp variable
0034               ********|*****|*********************|**************************
0035               edb.find.scan
0036 748E 0649  14         dect  stack
0037 7490 C64B  30         mov   r11,*stack            ; Save return address
0038 7492 0649  14         dect  stack
0039 7494 C644  30         mov   tmp0,*stack           ; Push tmp0
0040 7496 0649  14         dect  stack
0041 7498 C645  30         mov   tmp1,*stack           ; Push tmp1
0042 749A 0649  14         dect  stack
0043 749C C646  30         mov   tmp2,*stack           ; Push tmp2
0044 749E 0649  14         dect  stack
0045 74A0 C647  30         mov   tmp3,*stack           ; Push tmp3
0046 74A2 0649  14         dect  stack
0047 74A4 C648  30         mov   tmp4,*stack           ; Push tmp4
0048 74A6 0649  14         dect  stack
0049 74A8 C641  30         mov   r1,*stack             ; Push r1
0050                       ;------------------------------------------------------
0051                       ; Initialisation
0052                       ;------------------------------------------------------
0053 74AA 06A0  32         bl    @edb.find.init        ; Initialize memory for find functionality
     74AC 73E8     
0054               
0055 74AE 06A0  32         bl    @cpym2m
     74B0 253A     
0056 74B2 A72E                   data cmdb.cmdall,edb.srch.str,80
     74B4 A576     
     74B6 0050     
0057                                                   ; Set search string to input value
0058               
0059 74B8 D120  34         movb  @cmdb.cmdlen,tmp0     ; \ Get length of search string
     74BA A72E     
0060 74BC 0984  32         srl   tmp0,8                ; | MSB to LSB
0061 74BE C804  38         mov   tmp0,@edb.srch.strlen ; / Save search string length
     74C0 A5C6     
0062               
0063 74C2 1502  14         jgt   !                     ; Continue if length search stirng > 0
0064 74C4 0460  28         b     @edb.find.scan.exit   ; Exit early on empty search string
     74C6 75E6     
0065               
0066 74C8 8820  50 !       c     @edb.block.m1,@w$ffff   ; Marker M1 unset?
     74CA A50E     
     74CC 2022     
0067 74CE 1306  14         jeq   edb.find.scan.showbusy  ; Unset skip block marker
0068                       ;------------------------------------------------------
0069                       ; Use block markers M1-M2 as search range
0070                       ;------------------------------------------------------
0071 74D0 C820  54         mov   @edb.block.m1,@edb.srch.startln
     74D2 A50E     
     74D4 A5C8     
0072 74D6 C820  54         mov   @edb.block.m2,@edb.srch.endln
     74D8 A510     
     74DA A5CA     
0073                       ;------------------------------------------------------
0074                       ; Show busy indicator
0075                       ;------------------------------------------------------
0076               edb.find.scan.showbusy:
0077 74DC 06A0  32         bl    @pane.botline.busy.on ; \ Put busy indicator on
     74DE 76AA     
0078                                                   ; /
0079               
0080 74E0 06A0  32         bl    @putat
     74E2 2442     
0081 74E4 1D00                   byte pane.botrow,0
0082 74E6 399E                   data txt.searching    ; Show "Searching..."
0083               
0084 74E8 C820  54         mov   @edb.srch.startln,@fh.records
     74EA A5C8     
     74EC A43C     
0085                                                   ; Counter current line
0086                       ;------------------------------------------------------
0087                       ; Loop over lines in editor buffer, Unpack current line
0088                       ;------------------------------------------------------
0089               edb.find.scan.unpack_line:
0090 74EE C820  54         mov   @fh.records,@parm1    ; Unpack current line to framebuffer
     74F0 A43C     
     74F2 A006     
0091 74F4 04E0  34         clr   @parm2                ; Top row
     74F6 A008     
0092 74F8 04E0  34         clr   @parm3                ; No column offset
     74FA A00A     
0093               
0094 74FC 06A0  32         bl    @edb.line.unpack      ; Unpack line from editor buffer
     74FE 7608     
0095                                                   ; \ i  parm1    = Line to unpack
0096                                                   ; | i  parm2    = Target row in framebuffer
0097                                                   ; | i  parm3    = Column offset
0098                                                   ; / o  outparm1 = Length of line
0099               
0100 7500 C1A0  34         mov   @outparm1,tmp2        ; Store copy of linelength for later use
     7502 A018     
0101                       ;------------------------------------------------------
0102                       ; Skip if unpacked line shorter than search string
0103                       ;------------------------------------------------------
0104 7504 81A0  34         c     @edb.srch.strlen,tmp2  ; Compare lengths of line and search string
     7506 A5C6     
0105 7508 153A  14         jgt   edb.find.scan.nextline ; Yes, take shortcut
0106                       ;------------------------------------------------------
0107                       ; Prepare for string compare
0108                       ;------------------------------------------------------
0109 750A 0204  20         li    tmp0,edb.srch.str + 1  ; Reset source for compare (skip len byte)
     750C A577     
0110 750E C160  34         mov   @fb.top.ptr,tmp1       ; Destination for compare (unpacked line)
     7510 A300     
0111 7512 C806  38         mov   tmp2,@edb.srch.worklen ; Length of unpacked line
     7514 A5CC     
0112 7516 04C7  14         clr   tmp3                   ; Reset character match counter
0113 7518 04C8  14         clr   tmp4                   ; Reset character counter
0114 751A 04E0  34         clr   @edb.srch.matchcol     ; Update start column of possible match
     751C A5D8     
0115                       ;------------------------------------------------------
0116                       ; Loop over characters in unpacked line and compare
0117                       ;------------------------------------------------------
0118               edb.find.scan.compare:
0119 751E 9D74  38         cb    *tmp0+,*tmp1+         ; Compare characters in MSB
0120 7520 1626  14         jne   edb.find.scan.compare.nomatch
0121                                                   ; Characters do not match. Next try.
0122                       ;------------------------------------------------------
0123                       ; Character matches
0124                       ;------------------------------------------------------
0125 7522 0587  14         inc   tmp3                  ; Update character match counter
0126 7524 0588  14         inc   tmp4                  ; Update character counter
0127 7526 8807  34         c     tmp3,@edb.srch.strlen ; Last character in search string?
     7528 A5C6     
0128 752A 1627  14         jne   edb.find.scan.compare.nextchar
0129                                                   ; Not yet, prepare for scanning next char
0130                       ;------------------------------------------------------
0131                       ; Search string found. Update search results index (rows + cols)
0132                       ;------------------------------------------------------
0133 752C C060  34         mov   @edb.srch.offset,r1   ; Restore offset in row index
     752E A5D6     
0134 7530 C860  54         mov   @fh.records,@edb.srch.idx.rtop(r1)
     7532 A43C     
     7534 F100     
0135                                                   ; \ Save linenumber to search results
0136                                                   ; | index for rows
0137 7536 05E0  34         inct  @edb.srch.offset      ; / Next entry in search results row index
     7538 A5D6     
0138               
0139 753A C060  34         mov   @edb.srch.matches,r1  ; \ Restore offset in column index
     753C A5CE     
0140                                                   ; / Using matches as byte offset in index
0141 753E D860  54         movb  @edb.srch.matchcol+1,@edb.srch.idx.ctop(r1)
     7540 A5D9     
     7542 F900     
0142                                                   ; \ Save column (LSB) to search results
0143                                                   ; | index for columns
0144 7544 05A0  34         inc   @edb.srch.matches     ; / Update search string match counter
     7546 A5CE     
0145               
0146 7548 06A0  32         bl    @putnum
     754A 2AD4     
0147 754C 004A                   byte 0,74             ; Show number of matches
0148 754E A5CE                   data edb.srch.matches,rambuf,>3020
     7550 A100     
     7552 3020     
0149                       ;------------------------------------------------------
0150                       ; Check if match buffer is full
0151                       ;------------------------------------------------------
0152 7554 0204  20         li    tmp0,1000              ; \ Exit if 1000 matches reached
     7556 03E8     
0153 7558 8120  34         c     @edb.srch.matches,tmp0 ; /
     755A A5CE     
0154 755C 1303  14         jeq   edb.find.scan.bufffull ; Buffer is full, halt the scan
0155               
0156 755E 0204  20         li    tmp0,edb.srch.str + 1  ; Reset source for compare (skip len byte)
     7560 A577     
0157 7562 100B  14         jmp   edb.find.scan.compare.nextchar
0158                       ;------------------------------------------------------
0159                       ; Buffer is full
0160                       ;------------------------------------------------------
0161               edb.find.scan.bufffull:
0162 7564 0204  20         li   tmp0,txt.memfull.load  ; \ Set 'index full' message
     7566 3D14     
0163 7568 C804  30         mov  tmp0,@waux1            ; /
     756A 833C     
0164 756C 101C  14         jmp  edb.find.scan.done     ; We're done
0165                       ;------------------------------------------------------
0166                       ; Search string not found. Next try on remaining chars on line
0167                       ;------------------------------------------------------
0168               edb.find.scan.compare.nomatch
0169 756E 0204  20         li    tmp0,edb.srch.str + 1   ; Reset source for compare (skip len byte)
     7570 A577     
0170 7572 04C7  14         clr   tmp3                    ; Reset character match counter
0171 7574 0588  14         inc   tmp4                    ; Update character counter
0172 7576 C808  38         mov   tmp4,@edb.srch.matchcol ; \ Update start column of possible match
     7578 A5D8     
0173                                                     ; | Start column is updated only if there
0174                                                     ; / is NO matching character.
0175                       ;------------------------------------------------------
0176                       ; Prepare for processing next character
0177                       ;------------------------------------------------------
0178               edb.find.scan.compare.nextchar:
0179 757A 0606  14         dec   tmp2                  ; Update loop counter
0180 757C 15D0  14         jgt   edb.find.scan.compare ; Line not completely scanned
0181                       ;------------------------------------------------------
0182                       ; Prepare for processing Next line
0183                       ;------------------------------------------------------
0184               edb.find.scan.nextline:
0185 757E 05A0  34         inc   @fh.records             ; Increase line counter
     7580 A43C     
0186 7582 0760  38         abs   @fh.records             ; \  Display line counter
     7584 A43C     
0187 7586 1C01  14         jop   edb.find.scan.showline  ; /  update sporadically
0188               
0189 7588 1006  14         jmp   edb.find.scan.checkcomplete
0190                       ;------------------------------------------------------
0191                       ; Show line counter
0192                       ;------------------------------------------------------
0193               edb.find.scan.showline:
0194 758A 06A0  32         bl    @putnum
     758C 2AD4     
0195 758E 1D4A                   byte pane.botrow,74   ; Show lines processed
0196 7590 A43C                   data fh.records,rambuf,>3020
     7592 A100     
     7594 3020     
0197                       ;------------------------------------------------------
0198                       ; Check if scan is complete
0199                       ;------------------------------------------------------
0200               edb.find.scan.checkcomplete:
0201 7596 8820  50         c     @fh.records,@edb.srch.endln
     7598 A43C     
     759A A5CA     
0202                                                   ; All lines scanned ?
0203               
0204 759C 16A8  14         jne   edb.find.scan.unpack_line
0205                                                   ; Not yet, process next line
0206               
0207 759E 0204  20         li   tmp0,txt.done.search   ; \
     75A0 75F6     
0208 75A2 C804  30         mov  tmp0,@waux1            ; / Set Search completed message
     75A4 833C     
0209                       ;------------------------------------------------------
0210                       ; Scan completed. Restore 1st line in framebuffer
0211                       ;------------------------------------------------------
0212               edb.find.scan.done:
0213 75A6 C820  54         mov   @fb.topline,@parm1    ; Line to restore in framebuffer
     75A8 A304     
     75AA A006     
0214 75AC 04E0  34         clr   @parm2                ; Top row
     75AE A008     
0215 75B0 04E0  34         clr   @parm3                ; No column offset
     75B2 A00A     
0216               
0217 75B4 06A0  32         bl    @edb.line.unpack      ; Unpack line from editor buffer
     75B6 7608     
0218                                                   ; \ i  @parm1    = Line to unpack
0219                                                   ; | i  @parm2    = Target row in framebuffer
0220                                                   ; | i  @parm3    = Column offset
0221                                                   ; / o  @outparm1 = Length of line
0222               
0223 75B8 0720  34         seto  @fb.dirty             ; Trigger frame buffer refresh
     75BA A318     
0224               
0225 75BC 06A0  32         bl    @pane.botline.busy.off ; \ Put busyline indicator off
     75BE 76BC     
0226                                                    ; /
0227                       ;------------------------------------------------------
0228                       ; Scan completed. Display final message (set in @waux1)
0229                       ;------------------------------------------------------
0230 75C0 06A0  32         bl    @hchar
     75C2 2832     
0231 75C4 0032                   byte 0,50,32,20
     75C6 2014     
0232 75C8 FFFF                   data EOL              ; Erase any previous message
0233               
0234 75CA 06A0  32         bl    @at
     75CC 2726     
0235 75CE 0034                   byte 0,52             ; Position cursor
0236               
0237 75D0 C160  30         mov   @waux1,tmp1           ; Message to display
     75D2 833C     
0238               
0239 75D4 06A0  32         bl    @xutst0               ; Display string
     75D6 2420     
0240                                                   ; \ i  tmp1 = Pointer to string
0241                                                   ; / i  @wyx = Cursor position at
0242                       ;-------------------------------------------------------
0243                       ; Setup one shot task for removing overlay message
0244                       ;-------------------------------------------------------
0245 75D8 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     75DA 3818     
0246 75DC C804  38         mov   tmp0,@tv.task.oneshot
     75DE A22C     
0247               
0248 75E0 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     75E2 2FB2     
0249 75E4 0003                   data 3                ; / for getting consistent delay
0250                       ;------------------------------------------------------
0251                       ; Exit
0252                       ;------------------------------------------------------
0253               edb.find.scan.exit:
0254 75E6 C079  30         mov   *stack+,r1            ; Pop r1
0255 75E8 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0256 75EA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0257 75EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0258 75EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0259 75F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0260 75F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0261 75F4 045B  20         b     *r11                  ; Return to caller
0262               
0263 75F6 1053     txt.done.search    stri 'Search completed'
     75F8 6561     
     75FA 7263     
     75FC 6820     
     75FE 636F     
     7600 6D70     
     7602 6C65     
     7604 7465     
     7606 64       
0264                                  even
                   < stevie_b2.asm
0090                       ;-----------------------------------------------------------------------
0091                       ; Stubs
0092                       ;-----------------------------------------------------------------------
0093                       copy  "rom.stubs.bank2.asm" ; Bank specific stubs
     **** ****     > rom.stubs.bank2.asm
0001               * FILE......: rom.stubs.bank2.asm
0002               * Purpose...: Bank 2 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.unpack"
0007               * bank1 vec.11
0008               ********|*****|*********************|**************************
0009               edb.line.unpack:
0010 7608 0649  14         dect  stack
0011 760A C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 760C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     760E 3084     
0016 7610 6002                   data bank1.rom        ; | i  p0 = bank address
0017 7612 7F84                   data vec.11           ; | i  p1 = Vector with target address
0018 7614 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 7616 C2F9  30         mov   *stack+,r11           ; Pop r11
0023 7618 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "fb.vdpdump"
0028               * bank1 vec.21
0029               ********|*****|*********************|**************************
0030               fb.vdpdump:
0031 761A 0649  14         dect  stack
0032 761C C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 761E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7620 3084     
0037 7622 6002                   data bank1.rom        ; | i  p0 = bank address
0038 7624 7F98                   data vec.21           ; | i  p1 = Vector with target address
0039 7626 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 7628 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 762A 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "pane.cursor.hide"
0049               * bank1 vec.29
0050               ********|*****|*********************|**************************
0051               pane.cursor.hide:
0052 762C 0649  14         dect  stack
0053 762E C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 7630 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7632 3084     
0058 7634 6002                   data bank1.rom        ; | i  p0 = bank address
0059 7636 7FA8                   data vec.29           ; | i  p1 = Vector with target address
0060 7638 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 763A C2F9  30         mov   *stack+,r11           ; Pop r11
0065 763C 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.errline.show"
0070               * bank1 vec.30
0071               ********|*****|*********************|**************************
0072               pane.errline.show:
0073 763E 0649  14         dect  stack
0074 7640 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 1
0077                       ;------------------------------------------------------
0078 7642 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7644 3084     
0079 7646 6002                   data bank1.rom        ; | i  p0 = bank address
0080 7648 7FAA                   data vec.30           ; | i  p1 = Vector with target address
0081 764A 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 764C C2F9  30         mov   *stack+,r11           ; Pop r11
0086 764E 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               ***************************************************************
0090               * Stub for "pane.colorscheme.load"
0091               * bank1 vec.31
0092               ********|*****|*********************|**************************
0093               pane.colorscheme.load
0094 7650 0649  14         dect  stack
0095 7652 C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 1
0098                       ;------------------------------------------------------
0099 7654 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7656 3084     
0100 7658 6002                   data bank1.rom        ; | i  p0 = bank address
0101 765A 7FAC                   data vec.31           ; | i  p1 = Vector with target address
0102 765C 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 765E C2F9  30         mov   *stack+,r11           ; Pop r11
0107 7660 045B  20         b     *r11                  ; Return to caller
0108               
0109               
0110               ***************************************************************
0111               * Stub for "pane.colorscheme.botline"
0112               * bank1 vec.32
0113               ********|*****|*********************|**************************
0114               pane.colorscheme.botline:
0115 7662 0649  14         dect  stack
0116 7664 C64B  30         mov   r11,*stack            ; Save return address
0117                       ;------------------------------------------------------
0118                       ; Call function in bank 1
0119                       ;------------------------------------------------------
0120 7666 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7668 3084     
0121 766A 6002                   data bank1.rom        ; | i  p0 = bank address
0122 766C 7FAE                   data vec.32           ; | i  p1 = Vector with target address
0123 766E 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0124                       ;------------------------------------------------------
0125                       ; Exit
0126                       ;------------------------------------------------------
0127 7670 C2F9  30         mov   *stack+,r11           ; Pop r11
0128 7672 045B  20         b     *r11                  ; Return to caller
0129               
0130               
0131               ***************************************************************
0132               * Stub for "pane.cmdb.show"
0133               * bank3 vec.20
0134               ********|*****|*********************|**************************
0135               pane.cmdb.show:
0136 7674 0649  14         dect  stack
0137 7676 C64B  30         mov   r11,*stack            ; Save return address
0138                       ;------------------------------------------------------
0139                       ; Call function in bank 3
0140                       ;------------------------------------------------------
0141 7678 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     767A 3084     
0142 767C 6006                   data bank3.rom        ; | i  p0 = bank address
0143 767E 7F96                   data vec.20           ; | i  p1 = Vector with target address
0144 7680 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0145                       ;------------------------------------------------------
0146                       ; Exit
0147                       ;------------------------------------------------------
0148 7682 C2F9  30         mov   *stack+,r11           ; Pop r11
0149 7684 045B  20         b     *r11                  ; Return to caller
0150               
0151               
0152               ***************************************************************
0153               * Stub for "pane.cmdb.hide"
0154               * bank3 vec.21
0155               ********|*****|*********************|**************************
0156               pane.cmdb.hide:
0157 7686 0649  14         dect  stack
0158 7688 C64B  30         mov   r11,*stack            ; Save return address
0159                       ;------------------------------------------------------
0160                       ; Call function in bank 3
0161                       ;------------------------------------------------------
0162 768A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     768C 3084     
0163 768E 6006                   data bank3.rom        ; | i  p0 = bank address
0164 7690 7F98                   data vec.21           ; | i  p1 = Vector with target address
0165 7692 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0166                       ;------------------------------------------------------
0167                       ; Exit
0168                       ;------------------------------------------------------
0169 7694 C2F9  30         mov   *stack+,r11           ; Pop r11
0170 7696 045B  20         b     *r11                  ; Return to caller
0171               
0172               ***************************************************************
0173               * Stub for "fb.goto.nextmatch"
0174               * bank4 vec.23
0175               ********|*****|*********************|**************************
0176               fb.goto.nextmatch:
0177 7698 0649  14         dect  stack
0178 769A C64B  30         mov   r11,*stack            ; Save return address
0179                       ;------------------------------------------------------
0180                       ; Call function in bank 4
0181                       ;------------------------------------------------------
0182 769C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     769E 3084     
0183 76A0 6008                   data bank4.rom        ; | i  p0 = bank address
0184 76A2 7F9C                   data vec.23           ; | i  p1 = Vector with target address
0185 76A4 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0186                       ;------------------------------------------------------
0187                       ; Exit
0188                       ;------------------------------------------------------
0189 76A6 C2F9  30         mov   *stack+,r11           ; Pop r11
0190 76A8 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               ***************************************************************
0194               * Stub for "pane.botline.busyline.on"
0195               * bank4 vec.38
0196               ********|*****|*********************|**************************
0197               pane.botline.busy.on:
0198 76AA 0649  14         dect  stack
0199 76AC C64B  30         mov   r11,*stack            ; Save return address
0200                       ;------------------------------------------------------
0201                       ; Call function in bank 4
0202                       ;------------------------------------------------------
0203 76AE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76B0 3084     
0204 76B2 6008                   data bank4.rom        ; | i  p0 = bank address
0205 76B4 7FBA                   data vec.38           ; | i  p1 = Vector with target address
0206 76B6 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0207                       ;------------------------------------------------------
0208                       ; Exit
0209                       ;------------------------------------------------------
0210 76B8 C2F9  30         mov   *stack+,r11           ; Pop r11
0211 76BA 045B  20         b     *r11                  ; Return to caller
0212               
0213               
0214               ***************************************************************
0215               * Stub for "pane.botline.busy.off"
0216               * bank4 vec.39
0217               ********|*****|*********************|**************************
0218               pane.botline.busy.off:
0219 76BC 0649  14         dect  stack
0220 76BE C64B  30         mov   r11,*stack            ; Save return address
0221                       ;------------------------------------------------------
0222                       ; Call function in bank 4
0223                       ;------------------------------------------------------
0224 76C0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76C2 3084     
0225 76C4 6008                   data bank4.rom        ; | i  p0 = bank address
0226 76C6 7FBC                   data vec.39           ; | i  p1 = Vector with target address
0227 76C8 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0228                       ;------------------------------------------------------
0229                       ; Exit
0230                       ;------------------------------------------------------
0231 76CA C2F9  30         mov   *stack+,r11           ; Pop r11
0232 76CC 045B  20         b     *r11                  ; Return to caller
0233               
0234               
0235               ***************************************************************
0236               * Stub for "pane.filebrowser"
0237               * bank4 vec.50
0238               ********|*****|*********************|**************************
0239               pane.filebrowser:
0240 76CE 0649  14         dect  stack
0241 76D0 C64B  30         mov   r11,*stack            ; Save return address
0242                       ;------------------------------------------------------
0243                       ; Call function in bank 4
0244                       ;------------------------------------------------------
0245 76D2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76D4 3084     
0246 76D6 6008                   data bank4.rom        ; | i  p0 = bank address
0247 76D8 7FD2                   data vec.50           ; | i  p1 = Vector with target address
0248 76DA 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0249                       ;------------------------------------------------------
0250                       ; Exit
0251                       ;------------------------------------------------------
0252 76DC C2F9  30         mov   *stack+,r11           ; Pop r11
0253 76DE 045B  20         b     *r11                  ; Return to caller
0254               
0255               ***************************************************************
0256               * Stub for "pane.filebrowser.colbar"
0257               * bank4 vec.52
0258               ********|*****|*********************|**************************
0259               pane.filebrowser.colbar:
0260 76E0 0649  14         dect  stack
0261 76E2 C64B  30         mov   r11,*stack            ; Save return address
0262                       ;------------------------------------------------------
0263                       ; Call function in bank 4
0264                       ;------------------------------------------------------
0265 76E4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76E6 3084     
0266 76E8 6008                   data bank4.rom        ; | i  p0 = bank address
0267 76EA 7FD6                   data vec.52           ; | i  p1 = Vector with target address
0268 76EC 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0269                       ;------------------------------------------------------
0270                       ; Exit
0271                       ;------------------------------------------------------
0272 76EE C2F9  30         mov   *stack+,r11           ; Pop r11
0273 76F0 045B  20         b     *r11                  ; Return to caller
0274               
0275               ***************************************************************
0276               * Stub for "pane.filebrowser.colbar.exit"
0277               * bank4 vec.53
0278               ********|*****|*********************|**************************
0279               pane.filebrowser.colbar.remove:
0280 76F2 0649  14         dect  stack
0281 76F4 C64B  30         mov   r11,*stack            ; Save return address
0282                       ;------------------------------------------------------
0283                       ; Call function in bank 4
0284                       ;------------------------------------------------------
0285 76F6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76F8 3084     
0286 76FA 6008                   data bank4.rom        ; | i  p0 = bank address
0287 76FC 7FD8                   data vec.53           ; | i  p1 = Vector with target address
0288 76FE 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0289                       ;------------------------------------------------------
0290                       ; Exit
0291                       ;------------------------------------------------------
0292 7700 C2F9  30         mov   *stack+,r11           ; Pop r11
0293 7702 045B  20         b     *r11                  ; Return to caller
0294               
0295               ***************************************************************
0296               * Stub for "edb.clear.sams"
0297               * bank5 vec.1
0298               ********|*****|*********************|**************************
0299               edb.clear.sams:
0300 7704 0649  14         dect  stack
0301 7706 C64B  30         mov   r11,*stack            ; Save return address
0302                       ;------------------------------------------------------
0303                       ; Call function in bank 5
0304                       ;------------------------------------------------------
0305 7708 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     770A 3084     
0306 770C 600A                   data bank5.rom        ; | i  p0 = bank address
0307 770E 7F70                   data vec.1            ; | i  p1 = Vector with target address
0308 7710 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0309                       ;------------------------------------------------------
0310                       ; Exit
0311                       ;------------------------------------------------------
0312 7712 C2F9  30         mov   *stack+,r11           ; Pop r11
0313 7714 045B  20         b     *r11                  ; Return to caller
0314               
0315               
0316               ***************************************************************
0317               * Stub for "fb.refresh"
0318               * bank4 vec.8
0319               ********|*****|*********************|**************************
0320               fb.refresh:
0321 7716 0649  14         dect  stack
0322 7718 C64B  30         mov   r11,*stack            ; Save return address
0323                       ;------------------------------------------------------
0324                       ; Call function in bank 4
0325                       ;------------------------------------------------------
0326 771A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     771C 3084     
0327 771E 6008                   data bank4.rom        ; | i  p0 = bank address
0328 7720 7F7E                   data vec.8            ; | i  p1 = Vector with target address
0329 7722 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0330                       ;------------------------------------------------------
0331                       ; Exit
0332                       ;------------------------------------------------------
0333 7724 C2F9  30         mov   *stack+,r11           ; Pop r11
0334 7726 045B  20         b     *r11                  ; Return to caller
0335               
0336               
0337               ***************************************************************
0338               * Stub for "vdp.colors.line"
0339               * bank6 vec.3
0340               ********|*****|*********************|**************************
0341               vdp.colors.line:
0342 7728 0649  14         dect  stack
0343 772A C64B  30         mov   r11,*stack            ; Save return address
0344                       ;------------------------------------------------------
0345                       ; Call function in bank 6
0346                       ;------------------------------------------------------
0347 772C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     772E 3084     
0348 7730 600C                   data bank6.rom        ; | i  p0 = bank address
0349 7732 7F74                   data vec.3            ; | i  p1 = Vector with target address
0350 7734 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0351                       ;------------------------------------------------------
0352                       ; Exit
0353                       ;------------------------------------------------------
0354 7736 C2F9  30         mov   *stack+,r11           ; Pop r11
0355 7738 045B  20         b     *r11                  ; Return to caller
0356               
0357               
0358               ***************************************************************
0359               * Stub for "tv.reset"
0360               * bank7 vec.23
0361               ********|*****|*********************|**************************
0362               tv.reset:
0363 773A 0649  14         dect  stack
0364 773C C64B  30         mov   r11,*stack            ; Save return address
0365                       ;------------------------------------------------------
0366                       ; Call routine in specified bank
0367                       ;------------------------------------------------------
0368 773E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7740 3084     
0369 7742 600E                   data bank7.rom        ; | i  p0 = bank address
0370 7744 7F9C                   data vec.23           ; | i  p1 = Vector with target address
0371 7746 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0372                       ;------------------------------------------------------
0373                       ; Exit
0374                       ;------------------------------------------------------
0375               tv.reset.exit:
0376 7748 C2F9  30         mov   *stack+,r11           ; Pop r11
0377 774A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b2.asm
0094                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * Exclude: bank0, bank1
0009               * bank1 vec.1
0010               ********|*****|*********************|**************************
0011               mem.sams.setup.stevie:
0012 774C 0649  14         dect  stack
0013 774E C64B  30         mov   r11,*stack            ; Save return address
0014                       ;------------------------------------------------------
0015                       ; Call function in bank 1
0016                       ;------------------------------------------------------
0017 7750 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7752 3084     
0018 7754 6002                   data bank1.rom        ; | i  p0 = bank address
0019 7756 7F70                   data vec.1            ; | i  p1 = Vector with target address
0020 7758 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0021                       ;------------------------------------------------------
0022                       ; Exit
0023                       ;------------------------------------------------------
0024 775A C2F9  30         mov   *stack+,r11           ; Pop r11
0025 775C 045B  20         b     *r11                  ; Return to caller
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 775E 0649  14         dect  stack
0038 7760 C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 7762 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7764 3084     
0043 7766 600E                   data bank7.rom        ; | i  p0 = bank address
0044 7768 7F70                   data vec.1            ; | i  p1 = Vector with target address
0045 776A 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 776C C2F9  30         mov   *stack+,r11           ; Pop r11
0050 776E 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 7770 0649  14         dect  stack
0060 7772 C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 7774 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7776 3084     
0065 7778 600E                   data bank7.rom        ; | i  p0 = bank address
0066 777A 7F72                   data vec.2            ; | i  p1 = Vector with target address
0067 777C 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 777E C2F9  30         mov   *stack+,r11           ; Pop r11
0072 7780 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7782 0649  14         dect  stack
0081 7784 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7786 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7788 3084     
0086 778A 600E                   data bank7.rom        ; | i  p0 = bank address
0087 778C 7F74                   data vec.3            ; | i  p1 = Vector with target address
0088 778E 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7790 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7792 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 7794 0649  14         dect  stack
0102 7796 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 7798 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     779A 3084     
0107 779C 600E                   data bank7.rom        ; | i  p0 = bank address
0108 779E 7F96                   data vec.20           ; | i  p1 = Vector with target address
0109 77A0 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 77A2 C2F9  30         mov   *stack+,r11           ; Pop r11
0114 77A4 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 77A6 0649  14         dect  stack
0123 77A8 C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 77AA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     77AC 3084     
0128 77AE 600E                   data bank7.rom        ; | i  p0 = bank address
0129 77B0 7F98                   data vec.21           ; | i  p1 = Vector with target address
0130 77B2 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 77B4 C2F9  30         mov   *stack+,r11           ; Pop r11
0135 77B6 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 77B8 0649  14         dect  stack
0144 77BA C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 77BC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     77BE 3084     
0149 77C0 600E                   data bank7.rom        ; | i  p0 = bank address
0150 77C2 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0151 77C4 6004                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 77C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 77C8 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b2.asm
0095                       ;-----------------------------------------------------------------------
0096                       ; Program data
0097                       ;-----------------------------------------------------------------------
0098                       copy  "data.pab.tpl.asm"    ; PAB templates
     **** ****     > data.pab.tpl.asm
0001               * FILE......: data.pab.tpl.asm
0002               * Purpose...: PAB templates for accessing files
0003               
0004               
0005               ***************************************************************
0006               * PAB for accessing catalog file
0007               ********|*****|*********************|**************************
0008                       even                        ; Must always start on even address!!
0009               fh.file.pab.header.cat:
0010 77CA 00               byte  io.op.open            ;  0    - OPEN
0011 77CB   0D             byte  io.rel.inp.int.fix    ;  1    - INPUT, RELATIVE, INTERNAL, FIXED
0012 77CC 2000             data  fh.vrecbuf            ;  2-3  - Record buffer in VDP memory
0013 77CE 26               byte  38                    ;  4    - Record length (unset, DSR control)
0014 77CF   00             byte  00                    ;  5    - Character count
0015 77D0 0000             data  >0000                 ;  6-7  - Seek record (only for fixed recs)
0016 77D2 00               byte  >00                   ;  8    - Screen offset (cassette DSR only)
0017                       ;------------------------------------------------------
0018                       ; Filename descriptor part (variable length)
0019                       ;------------------------------------------------------
0020                       ; byte  12                  ;  9    - File descriptor length
0021                       ; text 'DSK3.XBEADOC'       ; 10-.. - File descriptor
0022                                                   ;         (Device + '.' + File name)
0023               
0024               
0025               ***************************************************************
0026               * PAB for accessing DV/80 file
0027               ********|*****|*********************|**************************
0028                       even                        ; Must always start on even address!!
0029               fh.file.pab.header:
0030 77D4 00               byte  io.op.open            ;  0    - OPEN
0031 77D5   14             byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0032 77D6 2000             data  fh.vrecbuf            ;  2-3  - Record buffer in VDP memory
0033 77D8 50               byte  80                    ;  4    - Record length (80 chars max)
0034 77D9   00             byte  00                    ;  5    - Character count
0035 77DA 0000             data  >0000                 ;  6-7  - Seek record (only for fixed recs)
0036 77DC 00               byte  >00                   ;  8    - Screen offset (cassette DSR only)
0037                       ;------------------------------------------------------
0038                       ; File descriptor part (variable length)
0039                       ;------------------------------------------------------
0040                       ; byte  64                  ;  9    - File descriptor length
0041                       ; text 'DSK3.XBEADOC'       ; 10-.. - File descriptor
0042                                                   ;         (Device + '.' + File name)
0043               
0044               
0045               ***************************************************************
0046               * PAB for loading binary image
0047               ********|*****|*********************|**************************
0048                       even                        ; Must always start on even address!!
0049               fh.file.pab.header.binimage:
0050 77DE 05               byte  io.op.load            ;  0    - LOAD BINARY
0051 77DF   00             byte  00                    ;  1    - Not used
0052 77E0 2000             data  fh.filebuf            ;  2-3  - Buffer location in VDP memory
0053 77E2 0000             data  >0000                 ;  4-5  - Not used in load operation
0054 77E4 201C             data  8220                  ;  6-7  - Maximum number of bytes to load
0055 77E6 00               byte  00                    ;  8    - Not used
0056                       ;------------------------------------------------------
0057                       ; File descriptor part (variable length)
0058                       ;------------------------------------------------------
0059                       ; byte  64                  ;  9    - File descriptor length
0060                       ; text 'DSK3.XBEADOC'       ; 10-.. - File descriptor
0061                                                   ;         (Device + '.' + File name)
                   < stevie_b2.asm
0099                       copy  "data.devices.asm"    ; Device names
     **** ****     > data.devices.asm
0001               * FILE......: data.devices.asm
0002               * Purpose...: Device name strings
0003               
0004               ***************************************************************
0005               *                     Device names
0006               ********|*****|*********************|**************************
0007                             even
0008 77E8 0544     def.dsk1      stri 'DSK1.'
     77EA 534B     
     77EC 312E     
0009 77EE 0544     def.dsk2      stri 'DSK2.'
     77F0 534B     
     77F2 322E     
0010 77F4 0544     def.dsk3      stri 'DSK3.'
     77F6 534B     
     77F8 332E     
0011 77FA 0544     def.dsk4      stri 'DSK4.'
     77FC 534B     
     77FE 342E     
0012 7800 0544     def.dsk5      stri 'DSK5.'
     7802 534B     
     7804 352E     
0013 7806 0544     def.dsk6      stri 'DSK6.'
     7808 534B     
     780A 362E     
0014 780C 0544     def.dsk7      stri 'DSK7.'
     780E 534B     
     7810 372E     
0015 7812 0544     def.dsk8      stri 'DSK8.'
     7814 534B     
     7816 382E     
0016 7818 0544     def.dsk9      stri 'DSK9.'
     781A 534B     
     781C 392E     
0017 781E 0544     def.dska      stri 'DSKA.'
     7820 534B     
     7822 412E     
0018 7824 0544     def.dskb      stri 'DSKB.'
     7826 534B     
     7828 422E     
0019 782A 0544     def.dskc      stri 'DSKC.'
     782C 534B     
     782E 432E     
0020 7830 0544     def.dske      stri 'DSKE.'
     7832 534B     
     7834 452E     
0021 7836 0544     def.dskf      stri 'DSKF.'
     7838 534B     
     783A 462E     
0022               
0023               
0024               *---------------------------------------------------------------
0025               * List with device names
0026               *-------------|---------------------|---------------------------
0027               device.list:
0028                       even
0029                       ;-------------------------------------------------------
0030                       ; Pointers to device strings
0031                       ;-------------------------------------------------------
0032 783C 77E8             data  def.dsk1, def.dsk2, def.dsk3, def.dsk4, def.dsk5
     783E 77EE     
     7840 77F4     
     7842 77FA     
     7844 7800     
0033 7846 7806             data  def.dsk6, def.dsk7, def.dsk8, def.dsk9
     7848 780C     
     784A 7812     
     784C 7818     
0034 784E 781E             data  def.dska, def.dskb, def.dskc, def.dske, def.dskf
     7850 7824     
     7852 782A     
     7854 7830     
     7856 7836     
0035                       ;-------------------------------------------------------
0036                       ; End of list
0037                       ;-------------------------------------------------------
0038 7858 FFFF             data  EOL             ; EOL
                   < stevie_b2.asm
0100                       ;-----------------------------------------------------------------------
0101                       ; Bank full check
0102                       ;-----------------------------------------------------------------------
0106                       ;-----------------------------------------------------------------------
0107                       ; Show ROM bank in CPU crash screen
0108                       ;-----------------------------------------------------------------------
0109                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7FF0 06A0  32         bl    @putat
     7FF2 2442     
0010 7FF4 0314                   byte 3,20
0011 7FF6 7F64                   data cpu.crash.showbank.bankstr
0012 7FF8 10FF  14         jmp   $
                   < stevie_b2.asm
0110                       ;-----------------------------------------------------------------------
0111                       ; Table for VDP modes
0112                       ;-----------------------------------------------------------------------
0113                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b2.asm
0114                       ;-----------------------------------------------------------------------
0115                       ; Vector table
0116                       ;-----------------------------------------------------------------------
0117                       copy  "rom.vectors.bank2.asm"
     **** ****     > rom.vectors.bank2.asm
0001               * FILE......: rom.vectors.bank2.asm
0002               * Purpose...: Bank 2 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#2'
     7F66 4F4D     
     7F68 2332     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 2: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F70 67C2     vec.1   data  fm.loadfile           ;
0015 7F72 68EC     vec.2   data  fm.insertfile         ;
0016 7F74 6A1E     vec.3   data  fm.run.ea5            ;
0017 7F76 6966     vec.4   data  fm.savefile           ;
0018 7F78 69E4     vec.5   data  fm.newfile            ;
0019 7F7A 715A     vec.6   data  fm.directory          ;
0020 7F7C 2026     vec.7   data  cpu.crash             ;
0021 7F7E 2026     vec.8   data  cpu.crash             ;
0022 7F80 2026     vec.9   data  cpu.crash             ;
0023 7F82 701E     vec.10  data  fm.browse.fname.prev  ;
0024 7F84 7078     vec.11  data  fm.browse.fname.next  ;
0025 7F86 6F86     vec.12  data  fm.browse.fname.set   ;
0026 7F88 70DC     vec.13  data  fm.browse.updir       ;
0027 7F8A 2026     vec.14  data  cpu.crash             ;
0028 7F8C 2026     vec.15  data  cpu.crash             ;
0029 7F8E 2026     vec.16  data  cpu.crash             ;
0030 7F90 2026     vec.17  data  cpu.crash             ;
0031 7F92 2026     vec.18  data  cpu.crash             ;
0032 7F94 2026     vec.19  data  cpu.crash             ;
0033 7F96 73E8     vec.20  data  edb.find.init         ;
0034 7F98 7422     vec.21  data  edb.find.search       ;
0035 7F9A 748E     vec.22  data  edb.find.scan         ;
0036 7F9C 2026     vec.23  data  cpu.crash             ;
0037 7F9E 2026     vec.24  data  cpu.crash             ;
0038 7FA0 2026     vec.25  data  cpu.crash             ;
0039 7FA2 2026     vec.26  data  cpu.crash             ;
0040 7FA4 2026     vec.27  data  cpu.crash             ;
0041 7FA6 2026     vec.28  data  cpu.crash             ;
0042 7FA8 2026     vec.29  data  cpu.crash             ;
0043 7FAA 2026     vec.30  data  cpu.crash             ;
0044 7FAC 2026     vec.31  data  cpu.crash             ;
0045 7FAE 2026     vec.32  data  cpu.crash             ;
0046               *--------------------------------------------------------------
0047               * ROM 2: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7FB0 2026     vec.33  data  cpu.crash             ;
0050 7FB2 2026     vec.34  data  cpu.crash             ;
0051 7FB4 2026     vec.35  data  cpu.crash             ;
0052 7FB6 2026     vec.36  data  cpu.crash             ;
0053 7FB8 2026     vec.37  data  cpu.crash             ;
0054 7FBA 2026     vec.38  data  cpu.crash             ;
0055 7FBC 2026     vec.39  data  cpu.crash             ;
0056 7FBE 2026     vec.40  data  cpu.crash             ;
0057 7FC0 2026     vec.41  data  cpu.crash             ;
0058 7FC2 2026     vec.42  data  cpu.crash             ;
0059 7FC4 2026     vec.43  data  cpu.crash             ;
0060 7FC6 2026     vec.44  data  cpu.crash             ;
0061 7FC8 2026     vec.45  data  cpu.crash             ;
0062 7FCA 2026     vec.46  data  cpu.crash             ;
0063 7FCC 2026     vec.47  data  cpu.crash             ;
0064 7FCE 2026     vec.48  data  cpu.crash             ;
0065 7FD0 2026     vec.49  data  cpu.crash             ;
0066 7FD2 2026     vec.50  data  cpu.crash             ;
0067 7FD4 2026     vec.51  data  cpu.crash             ;
0068 7FD6 2026     vec.52  data  cpu.crash             ;
0069 7FD8 2026     vec.53  data  cpu.crash             ;
0070 7FDA 2026     vec.54  data  cpu.crash             ;
0071 7FDC 2026     vec.55  data  cpu.crash             ;
0072 7FDE 2026     vec.56  data  cpu.crash             ;
0073 7FE0 2026     vec.57  data  cpu.crash             ;
0074 7FE2 2026     vec.58  data  cpu.crash             ;
0075 7FE4 2026     vec.59  data  cpu.crash             ;
0076 7FE6 2026     vec.60  data  cpu.crash             ;
0077 7FE8 2026     vec.61  data  cpu.crash             ;
0078 7FEA 2026     vec.62  data  cpu.crash             ;
0079 7FEC 2026     vec.63  data  cpu.crash             ;
0080 7FEE 2026     vec.64  data  cpu.crash             ;
                   < stevie_b2.asm
0118                                                   ; Vector table bank 2

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6004 :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CART.FG99.RUN....... >3838 :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E378 :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLNAME......... >E3BA :     
    CLHOOK.............. >2F7C :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2FA4 :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >334C :     
    CMDB.INIT.EXIT...... >33A0 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >394A :     
    CONST.11............ >394C :     
    CONST.12............ >394E :     
    CONST.13............ >3950 :     
    CONST.14............ >3952 :     
    CONST.15............ >3954 :     
    CONST.2............. >2004 :     
    CONST.3............. >3940 :     
    CONST.32............ >3956 :     
    CONST.4............. >2006 :     
    CONST.5............. >3942 :     
    CONST.6............. >3944 :     
    CONST.7............. >3946 :     
    CONST.8............. >2008 :     
    CONST.80............ >3958 :     
    CONST.9............. >3948 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DATA.PRINTF.RECSIZE. >73C4 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D69 :     
    DEF.CLIP.FNAME.B.... >3D74 :     
    DEF.DEVICES......... >3D7E :     
    DEF.DSK1............ >77E8 :     
    DEF.DSK2............ >77EE :     
    DEF.DSK3............ >77F4 :     
    DEF.DSK4............ >77FA :     
    DEF.DSK5............ >7800 :     
    DEF.DSK6............ >7806 :     
    DEF.DSK7............ >780C :     
    DEF.DSK8............ >7812 :     
    DEF.DSK9............ >7818 :     
    DEF.DSKA............ >781E :     
    DEF.DSKB............ >7824 :     
    DEF.DSKC............ >782A :     
    DEF.DSKE............ >7830 :     
    DEF.DSKF............ >7836 :     
    DEF.FG99.FNAME...... >3DAE :     
    DEF.PRINTER.FNAME... >3D62 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DEVICE.LIST......... >783C :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7704 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FIND.INIT....... >73E8 :     
    EDB.FIND.INIT.EXIT.. >7418 :     
    EDB.FIND.SCAN....... >748E :     
    EDB.FIND.SCAN.BUFFFULL >7564 :     
    EDB.FIND.SCAN.CHECKCOMPLETE >7596 :     
    EDB.FIND.SCAN.COMPARE >751E :     
    EDB.FIND.SCAN.COMPARE.NEXTCHAR >757A :     
    EDB.FIND.SCAN.COMPARE.NOMATCH >756E :     
    EDB.FIND.SCAN.DONE.. >75A6 :     
    EDB.FIND.SCAN.EXIT.. >75E6 :     
    EDB.FIND.SCAN.NEXTLINE >757E :     
    EDB.FIND.SCAN.SHOWBUSY >74DC :     
    EDB.FIND.SCAN.SHOWLINE >758A :     
    EDB.FIND.SCAN.UNPACK_LINE >74EE :     
    EDB.FIND.SEARCH..... >7422 :     
    EDB.FIND.SEARCH.EXIT >7476 :     
    EDB.FREE............ >A5DA :     
    EDB.HIPAGE.ALLOC.... >37D2 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37DE :     
    EDB.HIPAGE.ALLOC.CRASH >3808 :     
    EDB.HIPAGE.ALLOC.EXIT >3810 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37FA :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3300 :     
    EDB.INIT.EXIT....... >3346 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >376A :     
    EDB.LINE.GETLENGTH.EXIT >37A6 :     
    EDB.LINE.GETLENGTH.NULL >37A2 :     
    EDB.LINE.GETLENGTH2. >37AE :     
    EDB.LINE.GETLENGTH2.EXIT >37CC :     
    EDB.LINE.MAPPAGE.... >3720 :     
    EDB.LINE.MAPPAGE.EXIT >3762 :     
    EDB.LINE.MAPPAGE.LOOKUP >373A :     
    EDB.LINE.UNPACK..... >7608 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.SRCH.COL.PTR.... >A5D4 :     
    EDB.SRCH.CURMATCH... >A5D0 :     
    EDB.SRCH.ENDLN...... >A5CA :     
    EDB.SRCH.IDX.CSIZE.. >0400 :     
    EDB.SRCH.IDX.CTOP... >F900 :     
    EDB.SRCH.IDX.RSIZE.. >0800 :     
    EDB.SRCH.IDX.RTOP... >F100 :     
    EDB.SRCH.MATCHCOL... >A5D8 :     
    EDB.SRCH.MATCHES.... >A5CE :     
    EDB.SRCH.OFFSET..... >A5D6 :     
    EDB.SRCH.ROW.PTR.... >A5D2 :     
    EDB.SRCH.STARTLN.... >A5C8 :     
    EDB.SRCH.STR........ >A576 :     
    EDB.SRCH.STRLEN..... >A5C6 :     
    EDB.SRCH.WORKLEN.... >A5CC :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >33CE :     
    ERRPANE.INIT........ >33A8 :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >31A8 :     
    FB.CALC.POINTER.EXIT >31C8 :     
    FB.CALC.SCRROWS..... >31D0 :     
    FB.CALC.SCRROWS.EXIT >31FC :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31F0 :     
    FB.CALC.SCRROWS.HANDLE.MC >31E4 :     
    FB.CALC.SCRROWS.HANDLE.RULER >31DA :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GOTO.NEXTMATCH... >7698 :     
    FB.INIT............. >3134 :     
    FB.INIT.EXIT........ >3186 :     
    FB.REFRESH.......... >7716 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >318E :     
    FB.ROW2LINE.EXIT.... >31A2 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >761A :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2E7E :     
    FG99.EXIT........... >2EB8 :     
    FG99.SEND.LOOP...... >2E8E :     
    FG99.WAIT........... >2EA6 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.CIRCBREAKER...... >A46A :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILE.LOAD.BIN.... >6698 :     
    FH.FILE.LOAD.BIN.ASSERT1 >66E8 :     
    FH.FILE.LOAD.BIN.ASSERT2 >66FA :     
    FH.FILE.LOAD.BIN.ASSERT3 >670C :     
    FH.FILE.LOAD.BIN.CALLBACK2 >678C :     
    FH.FILE.LOAD.BIN.CHECK_FIOERR >676E :     
    FH.FILE.LOAD.BIN.CRSH >671E :     
    FH.FILE.LOAD.BIN.ERROR >6794 :     
    FH.FILE.LOAD.BIN.EXIT >67A8 :     
    FH.FILE.LOAD.BIN.LOAD1 >6726 :     
    FH.FILE.LOAD.BIN.NEWFILE >66E0 :     
    FH.FILE.LOAD.BIN.PABHEADER >672E :     
    FH.FILE.LOAD.BIN.PROCESS >677C :     
    FH.FILE.LOAD.BIN.VDP2CPU >6788 :     
    FH.FILE.PAB.HEADER.. >77D4 :     
    FH.FILE.PAB.HEADER.BINIMAGE >77DE :     
    FH.FILE.PAB.HEADER.CAT >77CA :     
    FH.FILE.READ.CRASH.. >62F2 :     
    FH.FILE.READ.EDB.... >61F2 :     
    FH.FILE.READ.EDB.ASSERT1 >6296 :     
    FH.FILE.READ.EDB.ASSERT2 >62A8 :     
    FH.FILE.READ.EDB.ASSERT3 >62BA :     
    FH.FILE.READ.EDB.ASSERT4 >62CC :     
    FH.FILE.READ.EDB.ASSERT5 >62DE :     
    FH.FILE.READ.EDB.CHECK_FIOERR >63CA :     
    FH.FILE.READ.EDB.CHECK_SETPAGE >633C :     
    FH.FILE.READ.EDB.DISPLAY >644C :     
    FH.FILE.READ.EDB.EOF >649E :     
    FH.FILE.READ.EDB.EOF.CALLBACK >64B6 :     
    FH.FILE.READ.EDB.ERR >6338 :     
    FH.FILE.READ.EDB.ERROR >647E :     
    FH.FILE.READ.EDB.EXIT >64BE :     
    FH.FILE.READ.EDB.INSERTLINE >63D8 :     
    FH.FILE.READ.EDB.LOAD1 >62FA :     
    FH.FILE.READ.EDB.NEWFILE >6286 :     
    FH.FILE.READ.EDB.NEXT >6454 :     
    FH.FILE.READ.EDB.NEXT.DO_IT >647A :     
    FH.FILE.READ.EDB.OPEN >631E :     
    FH.FILE.READ.EDB.PABHEADER >6302 :     
    FH.FILE.READ.EDB.PREPINDEX >642C :     
    FH.FILE.READ.EDB.PREPINDEX.EMPTYLINE >643A :     
    FH.FILE.READ.EDB.PREPPOINTER >641E :     
    FH.FILE.READ.EDB.PROCESS_LINE >63F2 :     
    FH.FILE.READ.EDB.RECORD >6370 :     
    FH.FILE.READ.EDB.UPDINDEX >6448 :     
    FH.FILE.READ.EDB.VDP2CPU >641A :     
    FH.FILE.READ.MEM.... >604A :     
    FH.FILE.READ.MEM.ASSERT1 >60B4 :     
    FH.FILE.READ.MEM.ASSERT2 >60C6 :     
    FH.FILE.READ.MEM.ASSERT3 >60D8 :     
    FH.FILE.READ.MEM.ASSERT4 >60EA :     
    FH.FILE.READ.MEM.ASSERT5 >60FC :     
    FH.FILE.READ.MEM.CHECK_FIOERR >6172 :     
    FH.FILE.READ.MEM.CRSH >6110 :     
    FH.FILE.READ.MEM.DISPLAY >6198 :     
    FH.FILE.READ.MEM.EOF >61CA :     
    FH.FILE.READ.MEM.EOF.CALLBACK >61D0 :     
    FH.FILE.READ.MEM.ERROR >61AE :     
    FH.FILE.READ.MEM.EXIT >61D8 :     
    FH.FILE.READ.MEM.LOAD1 >6118 :     
    FH.FILE.READ.MEM.NEWFILE >60AC :     
    FH.FILE.READ.MEM.NEXT >61A0 :     
    FH.FILE.READ.MEM.PABHEADER >6120 :     
    FH.FILE.READ.MEM.PROCESS >6180 :     
    FH.FILE.READ.MEM.RECORD >6158 :     
    FH.FILE.READ.MEM.VDP2CPU >6194 :     
    FH.FILE.WRITE.CRASH. >6586 :     
    FH.FILE.WRITE.EDB... >64E2 :     
    FH.FILE.WRITE.EDB.CHECK_FIOERR >6646 :     
    FH.FILE.WRITE.EDB.DISPLAY >6654 :     
    FH.FILE.WRITE.EDB.DONE >6674 :     
    FH.FILE.WRITE.EDB.ERROR >6660 :     
    FH.FILE.WRITE.EDB.EXIT >6680 :     
    FH.FILE.WRITE.EDB.LINETERM >65F6 :     
    FH.FILE.WRITE.EDB.PABHEADER >6594 :     
    FH.FILE.WRITE.EDB.RECORD >65BE :     
    FH.FILE.WRITE.EDB.SAVE1 >658E :     
    FH.FILE.WRITE.EDB.UNPACK >6606 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BC :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46C :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >1400 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E22 :     
    FILE.IMAGE.SAVE..... >2E20 :     
    FILE.LOAD........... >2E12 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E1E :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E24 :     
    FILE.STATUS......... >2E26 :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.NEXT >7078 :     
    FM.BROWSE.FNAME.NEXT.DIVOK >70A4 :     
    FM.BROWSE.FNAME.NEXT.EXIT >70D4 :     
    FM.BROWSE.FNAME.NEXT.PAGE >70AC :     
    FM.BROWSE.FNAME.NEXT.SET >70C6 :     
    FM.BROWSE.FNAME.NEXT.SKIP >70D0 :     
    FM.BROWSE.FNAME.PREV >701E :     
    FM.BROWSE.FNAME.PREV.DIVOK >7042 :     
    FM.BROWSE.FNAME.PREV.EXIT >7070 :     
    FM.BROWSE.FNAME.PREV.PAGE >704A :     
    FM.BROWSE.FNAME.PREV.SET >7062 :     
    FM.BROWSE.FNAME.PREV.SKIP >706C :     
    FM.BROWSE.FNAME.SET. >6F86 :     
    FM.BROWSE.FNAME.SET.EXIT >7014 :     
    FM.BROWSE.UPDIR..... >70DC :     
    FM.BROWSE.UPDIR.EXIT >714E :     
    FM.BROWSE.UPDIR.LOOP1 >7108 :     
    FM.BROWSE.UPDIR.LOOP1.CONT >7118 :     
    FM.DIR.CALLBACK1.... >6DA6 :     
    FM.DIR.CALLBACK1.EXIT >6DD2 :     
    FM.DIR.CALLBACK2.... >6DD8 :     
    FM.DIR.CALLBACK2.EXIT >6EF0 :     
    FM.DIR.CALLBACK2.FILEINDEX >6E20 :     
    FM.DIR.CALLBACK2.FILESIZE >6E78 :     
    FM.DIR.CALLBACK2.FILESIZE.RADIX100.PART1 >6E92 :     
    FM.DIR.CALLBACK2.FILESIZE.RADIX100.PART2 >6E9E :     
    FM.DIR.CALLBACK2.FILESIZE.STORE >6EA4 :     
    FM.DIR.CALLBACK2.FILETYPE >6E4C :     
    FM.DIR.CALLBACK2.PREP >6E30 :     
    FM.DIR.CALLBACK2.PREP.FNCOPY >6E42 :     
    FM.DIR.CALLBACK2.RECSIZE >6EB8 :     
    FM.DIR.CALLBACK2.RECSIZE.RADIX100.PART1 >6ECE :     
    FM.DIR.CALLBACK2.RECSIZE.RADIX100.PART2 >6EDA :     
    FM.DIR.CALLBACK2.RECSIZE.STORE >6EE0 :     
    FM.DIR.CALLBACK2.VOLNAME >6E06 :     
    FM.DIR.CALLBACK3.... >6EFE :     
    FM.DIR.CALLBACK3.EXIT >6F32 :     
    FM.DIR.CALLBACK4.... >6F3A :     
    FM.DIR.CALLBACK4.EXIT >6F66 :     
    FM.DIR.CALLBACK5.... >6F6E :     
    FM.DIR.CALLBACK5.EXIT >6F7E :     
    FM.DIRECTORY........ >715A :     
    FM.DIRECTORY.BROWSER >736C :     
    FM.DIRECTORY.CHECKDOT >71E0 :     
    FM.DIRECTORY.EXIT... >7378 :     
    FM.DIRECTORY.FSLOOP. >726C :     
    FM.DIRECTORY.FTLIST. >72AC :     
    FM.DIRECTORY.FTLOOP. >72D4 :     
    FM.DIRECTORY.FTLOOP.NEXT >735A :     
    FM.DIRECTORY.FTLOOP.PREPNEXT >7304 :     
    FM.DIRECTORY.FTLOOP.RECSIZE >7308 :     
    FM.DIRECTORY.READ... >71F8 :     
    FM.INSERTFILE....... >68EC :     
    FM.INSERTFILE.EXIT.. >6950 :     
    FM.LOAD.CB.MEMFULL.. >6D78 :     
    FM.LOAD.CB.MEMFULL.EXIT >6D9E :     
    FM.LOADFILE......... >67C2 :     
    FM.LOADFILE.CLEAR... >6824 :     
    FM.LOADFILE.EXIT.... >68C2 :     
    FM.LOADSAVE.CB.FIOERR >6CA0 :     
    FM.LOADSAVE.CB.FIOERR.ADDMSG >6D10 :     
    FM.LOADSAVE.CB.FIOERR.EXIT >6D66 :     
    FM.LOADSAVE.CB.FIOERR.LOAD >6CEA :     
    FM.LOADSAVE.CB.FIOERR.PRINT >6D06 :     
    FM.LOADSAVE.CB.FIOERR.SAVE >6CFA :     
    FM.LOADSAVE.CB.INDICATOR1 >6A80 :     
    FM.LOADSAVE.CB.INDICATOR1.CHECK.SAVING >6AB0 :     
    FM.LOADSAVE.CB.INDICATOR1.CLIPBLOCK >6B12 :     
    FM.LOADSAVE.CB.INDICATOR1.EXIT >6B46 :     
    FM.LOADSAVE.CB.INDICATOR1.FILENAME >6B38 :     
    FM.LOADSAVE.CB.INDICATOR1.LOADING >6B1C :     
    FM.LOADSAVE.CB.INDICATOR1.PANIC >6AE2 :     
    FM.LOADSAVE.CB.INDICATOR1.PRINTBLOCK >6B08 :     
    FM.LOADSAVE.CB.INDICATOR1.PRINTFILE >6AFE :     
    FM.LOADSAVE.CB.INDICATOR1.SAVEBLOCK >6AF4 :     
    FM.LOADSAVE.CB.INDICATOR1.SAVEFILE >6AEA :     
    FM.LOADSAVE.CB.INDICATOR2 >6B52 :     
    FM.LOADSAVE.CB.INDICATOR2.EXIT >6BFA :     
    FM.LOADSAVE.CB.INDICATOR2.KB >6BAC :     
    FM.LOADSAVE.CB.INDICATOR2.KB.PROCESSED >6BD4 :     
    FM.LOADSAVE.CB.INDICATOR2.LINES >6BEE :     
    FM.LOADSAVE.CB.INDICATOR2.LOADSAVE >6B5A :     
    FM.LOADSAVE.CB.INDICATOR2.REFRESH >6B82 :     
    FM.LOADSAVE.CB.INDICATOR2.TOPLINE >6B7C :     
    FM.LOADSAVE.CB.INDICATOR3 >6C00 :     
    FM.LOADSAVE.CB.INDICATOR3.DATA >6C90 :     
    FM.LOADSAVE.CB.INDICATOR3.EXIT >6C80 :     
    FM.LOADSAVE.CB.MESSAGE >6C52 :     
    FM.NEWFILE.......... >69E4 :     
    FM.NEWFILE.EXIT..... >6A16 :     
    FM.RUN.EA5.......... >6A1E :     
    FM.RUN.EA5.EXIT..... >6A66 :     
    FM.SAVEFILE......... >6966 :     
    FM.SAVEFILE.EXIT.... >69DC :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EC2 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CART.FG99. >0028 :     
    ID.DIALOG.CART.TYPE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FIND...... >001E :     
    ID.DIALOG.FIND.BROWSE >0078 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.OPT....... >006C :     
    ID.DIALOG.OPT.CLIP.. >0013 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >0072 :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3626 :     
    IDX.ENTRY.DELETE.EXIT >367E :     
    IDX.ENTRY.DELETE.LASTLINE >3652 :     
    IDX.ENTRY.DELETE.REORG >365A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3664 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3678 :     
    IDX.ENTRY.INSERT.... >36C8 :     
    IDX.ENTRY.INSERT.EXIT >3714 :     
    IDX.ENTRY.INSERT.REORG >36E6 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36F0 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3704 :     
    IDX.ENTRY.UPDATE.... >3578 :     
    IDX.ENTRY.UPDATE.CLEAR >35B2 :     
    IDX.ENTRY.UPDATE.EXIT >35C2 :     
    IDX.ENTRY.UPDATE.SAVE >35A0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3200 :     
    IDX.INIT.EXIT....... >323C :     
    IDX.POINTER.GET..... >35CA :     
    IDX.POINTER.GET.EXIT >360C :     
    IDX.POINTER.GET.PARM >35FA :     
    IDX.POINTER.GET.PARM.NULL >3604 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F5C :     
    KTHREAD_EXIT........ >2F6E :     
    KTHREAD_KB.......... >2F6A :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >77B8 :     
    MAGIC.CLEAR......... >77A6 :     
    MAGIC.SET........... >7794 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7770 :     
    MEM.SAMS.SET.LEGACY. >775E :     
    MEM.SAMS.SET.STEVIE. >7782 :     
    MEM.SAMS.SETUP.STEVIE >774C :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F7A :     
    MKHOOK.............. >2F72 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2FA0 :     
    MKSLOT.............. >2F86 :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3926 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE.BUSY.OFF >76BC :     
    PANE.BOTLINE.BUSY.ON >76AA :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.HIDE...... >7686 :     
    PANE.CMDB.SHOW...... >7674 :     
    PANE.COLORSCHEME.BOTLINE >7662 :     
    PANE.COLORSCHEME.LOAD >7650 :     
    PANE.CURSOR.HIDE.... >762C :     
    PANE.ERRLINE.SHOW... >763E :     
    PANE.FILEBROWSER.... >76CE :     
    PANE.FILEBROWSER.COLBAR >76E0 :     
    PANE.FILEBROWSER.COLBAR.REMOVE >76F2 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3818 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3830 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >3084 :     
    ROM.FARJUMP.ASSERT.CART >30F6 :     
    ROM.FARJUMP.ASSERT.LOWMEM >3104 :     
    ROM.FARJUMP.BANKSWITCH.CALL >30E6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30DE :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3122 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3114 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30C2 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30C6 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30CE :     
    ROM.FARJUMP.EXIT.... >312A :     
    ROM.FARJUMP.RETURN.. >30E8 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6026 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >391A :     
    RSSLOT.............. >2FB2 :     
    RUNLI1.............. >2FCA :     
    RUNLI2.............. >2FD6 :     
    RUNLI3.............. >2FDA :     
    RUNLI3A............. >2FE2 :     
    RUNLI4.............. >2FEC :     
    RUNLI5.............. >2FF6 :     
    RUNLI6.............. >3004 :     
    RUNLI7.............. >3012 :     
    RUNLI9.............. >3016 :     
    RUNLIA.............. >3038 :     
    RUNLIB.............. >2FC6 :     
    RUNLIC.............. >305C :     
    RUNLID.............. >3072 :     
    RUNLIE.............. >307C :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F3E :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >390E :     
    TASK.ONESHOT.EXIT... >3916 :     
    TASK.VDP.COPY.SAT... >3858 :     
    TASK.VDP.COPY.SAT.CMDB >3880 :     
    TASK.VDP.COPY.SAT.EXIT >38EE :     
    TASK.VDP.COPY.SAT.FB >3890 :     
    TASK.VDP.COPY.SAT.FB.NORULER >38A4 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38DA :     
    TASK.VDP.COPY.SAT.WRITE >38A8 :     
    TASK.VDP.COPY.SAT.WRITE2 >38E4 :     
    TASK.VDP.CURSOR..... >38FA :     
    TASK.VDP.CURSOR.EXIT >3908 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F5A :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F5A :     
    TMGR................ >2EBE :     
    TMGR1............... >2EC2 :     
    TMGR10.............. >2F42 :     
    TMGR11.............. >2F50 :     
    TMGR12.............. >2F54 :     
    TMGR1A.............. >2ED0 :     
    TMGR2............... >2ED6 :     
    TMGR3............... >2EE6 :     
    TMGR4............... >2EF8 :     
    TMGR5............... >2F0E :     
    TMGR6............... >2F12 :     
    TMGR7............... >2F16 :     
    TMGR8............... >2F18 :     
    TMGR9............... >2F20 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BOTCOLOR......... >A21C :     
    TV.BUSYCOLOR........ >A220 :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.COLOR....... >A224 :     
    TV.CMDB.HCOLOR...... >A226 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A23E :     
    TV.ERROR.ROWS....... >A232 :     
    TV.ERROR.VISIBLE.... >A230 :     
    TV.FG99.IMG.PTR..... >A238 :     
    TV.FJ.STACKPNT...... >A22E :     
    TV.FONT.PTR......... >A228 :     
    TV.FREE............. >A2DE :     
    TV.INIT............. >33D8 :     
    TV.INIT.EXIT........ >3424 :     
    TV.LINETERM......... >A23C :     
    TV.MARKCOLOR........ >A21E :     
    TV.PAD.STRING....... >3500 :     
    TV.PAD.STRING.EXIT.. >356C :     
    TV.PAD.STRING.LOOP.. >3556 :     
    TV.PAD.STRING.PANIC. >3564 :     
    TV.PANE.FOCUS....... >A22A :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >342E :     
    TV.RESET............ >773A :     
    TV.RESET.EXIT....... >7748 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A222 :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A234 :     
    TV.SP2.STACK........ >A236 :     
    TV.SPECMSG.PTR...... >A23A :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3928 :     
    TV.TABS.TABLE.RL.... >3934 :     
    TV.TASK.ONESHOT..... >A22C :     
    TV.TOPCOLOR......... >A21A :     
    TV.UINT16.MPY....... >34CA :     
    TV.UINT16.PACK...... >343C :     
    TV.UINT16.PACK.DONE. >34B6 :     
    TV.UINT16.PACK.ERROR >34AE :     
    TV.UINT16.PACK.EXIT. >34BA :     
    TV.UINT16.PACK.LOOP. >3484 :     
    TV.UINT16.UNPACK.... >34D4 :     
    TV.UINT16.UNPACK.EXIT >34FA :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C8A :     
    TXT.AUTOINS.OFF..... >3AF0 :     
    TXT.AUTOINS.ON...... >3AE0 :     
    TXT.AUTOINSERT...... >3970 :     
    TXT.BLOCK.CLIP...... >39F6 :     
    TXT.BLOCK.COPY...... >39C0 :     
    TXT.BLOCK.DEL....... >39AC :     
    TXT.BLOCK.INSIDE.... >3D20 :     
    TXT.BLOCK.MOVE...... >39D2 :     
    TXT.BLOCK.PRINT..... >3A10 :     
    TXT.BLOCK.SAVE...... >39E4 :     
    TXT.BOTTOM.......... >395E :     
    TXT.CLEARMEM........ >3A24 :     
    TXT.CMDB.PROMPT..... >3D4E :     
    TXT.COLON........... >395C :     
    TXT.COLORSCHEME..... >3D50 :     
    TXT.DONE.APPEND..... >3A6E :     
    TXT.DONE.CLIPBOARD.. >3AC2 :     
    TXT.DONE.CLIPDEV.... >3AD2 :     
    TXT.DONE.COPY....... >3A90 :     
    TXT.DONE.DELETE..... >3AB0 :     
    TXT.DONE.INSERT..... >3A5C :     
    TXT.DONE.LOAD....... >3A4C :     
    TXT.DONE.PRINT...... >3AA0 :     
    TXT.DONE.SAVE....... >3A80 :     
    TXT.DONE.SEARCH..... >75F6 :     
    TXT.FASTMODE........ >3B00 :     
    TXT.FILETYPE.DV80... >3B7E :     
    TXT.FILETYPE.NONE... >3C98 :     
    TXT.FILETYPES....... >73A8 :     
    TXT.FIND.HITS....... >7482 :     
    TXT.FTYPE0.......... >73A8 :     
    TXT.FTYPE1.......... >73AC :     
    TXT.FTYPE2.......... >73B0 :     
    TXT.FTYPE3.......... >73B4 :     
    TXT.FTYPE4.......... >73B8 :     
    TXT.FTYPE5.......... >73BC :     
    TXT.FTYPE6.......... >73C0 :     
    TXT.INSERT.......... >396A :     
    TXT.IO.NOFILE....... >3CFC :     
    TXT.IOERR.LOAD...... >3CB4 :     
    TXT.IOERR.PRINT..... >3CE0 :     
    TXT.IOERR.SAVE...... >3CCA :     
    TXT.KB.............. >3B3E :     
    TXT.KEYMARKER....... >3C90 :     
    TXT.KEYS.BASIC1..... >3C5C :     
    TXT.KEYS.BLOCK...... >3C20 :     
    TXT.KEYS.DEFAULT.... >3B8C :     
    TXT.KEYS.DEFAULTB... >3B9E :     
    TXT.KEYS.DEFAULTC... >3BBC :     
    TXT.KEYS.DEFAULTD... >3BE8 :     
    TXT.LINES........... >3B42 :     
    TXT.LOADING......... >3978 :     
    TXT.M1.............. >3B84 :     
    TXT.M2.............. >3B88 :     
    TXT.MEMFULL.LOAD.... >3D14 :     
    TXT.MSG.TIBASIC..... >3C9E :     
    TXT.NEWFILE......... >3B48 :     
    TXT.NODISK.......... >3B0C :     
    TXT.OVRWRITE........ >3964 :     
    TXT.PICKER.ICON1.... >3D5E :     
    TXT.PICKER.ICON2.... >3D60 :     
    TXT.PRINTING........ >3990 :     
    TXT.READDIR......... >3A38 :     
    TXT.SAVING.......... >3984 :     
    TXT.SEARCHING....... >399E :     
    TXT.SLASH........... >395A :     
    TXT.STAR............ >3976 :     
    TXT.TIB1............ >3B54 :     
    TXT.TIB2............ >3B62 :     
    TXT.TIB3............ >3B70 :     
    TXT.UNCRUNCHING..... >3B20 :     
    TXT.VERTLINE........ >3C8E :     
    TXT.WS1............. >3C92 :     
    TXT.WS2............. >3C94 :     
    TXT.WS4............. >3C98 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.COLORS.LINE..... >7728 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E80 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.LOAD.......... >2E14 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2FA6 :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >309C :     
    XROM.FARJUMP.PUSH_RETURN >30AC :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _FILE.RECORD.FOP.... >2E28 :     
    _FILE.RECORD.FOP.EXIT >2E7A :     
    _FILE.RECORD.FOP.OPTIMIZED >2E5E :     
    _FILE.RECORD.FOP.PAB >2E62 :     
    _IDX.ENTRY.DELETE.REORG >3616 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >361E :     
    _IDX.ENTRY.INSERT.REORG >368A :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3690 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36B8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3276 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >32A4 :     
    _IDX.SAMS.MAPCOLUMN.ON >3242 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >326C :     
    _IDX.SAMSPAGE.GET... >32B0 :     
    _IDX.SAMSPAGE.GET.EXIT >32F6 :     
