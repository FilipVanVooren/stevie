XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b4.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2025 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b4.asm
0020               *
0021               * Bank 4 "Janine"
0022               * Delegated Frame Buffer methods & Pane utilities
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 251026-2002340
0003               ***************************************************************
                   < stevie_b4.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b4.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b4.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 30x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 30 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      001D     pane.botrow               equ  29      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      1400     fh.vpab                   equ  >1400   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      000C     spfont  equ   >0c                   ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; \ VDP color table base.
0041                                                   ; / Not used in F18a 80 columns mode
0042      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0043      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0044      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0045               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b4.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028      000C     tv.colorscheme.entries    equ 12       ; Entries in colorscheme table
0029               ;-----------------------------------------------------------------
0030               ;   Dialog ID's
0031               ;-----------------------------------------------------------------
0032      000A     id.dialog.load            equ  10      ; "Load file"
0033      000B     id.dialog.insert          equ  11      ; "Insert file"
0034      000C     id.dialog.append          equ  12      ; "Append file"
0035      000D     id.dialog.cat             equ  13      ; "Catalog"
0036      000F     id.dialog.save            equ  15      ; "Save file"
0037      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0038      0011     id.dialog.print           equ  17      ; "Print file"
0039      0012     id.dialog.printblock      equ  18      ; "Print block"
0040      0013     id.dialog.opt.clip        equ  19      ; "Configure clipboard"
0041      0014     id.dialog.goto            equ  20      ; "Goto"
0042      001E     id.dialog.find            equ  30      ; "Find"
0043      0028     id.dialog.cart.fg99       equ  40      ; "FinalGROM 99 Cartridge"
0044               ;-----------------------------------------------------------------
0045               ;   Dialog ID's >= 100 indicate that command prompt should be
0046               ;   hidden and no characters added to CMDB keyboard buffer.
0047               ;-----------------------------------------------------------------
0048      0064     id.dialog.menu            equ  100     ; "Main Menu"
0049      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0050      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0051      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0052      0068     id.dialog.help            equ  104     ; "About"
0053      0069     id.dialog.file            equ  105     ; "File"
0054      006A     id.dialog.cart.type       equ  106     ; "Cartridge Type"
0055      006B     id.dialog.basic           equ  107     ; "TI Basic"
0056      006C     id.dialog.opt             equ  108     ; "Configure"
0057      006D     id.dialog.editor          equ  109     ; "Configure editor"
0058      006E     id.dialog.font            equ  110     ; "Configure font"
0059      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0060      0072     id.dialog.run             equ  114     ; "Run program image (EA5)"
0061      0078     id.dialog.find.browse     equ  120     ; "Find - Search results"
0062               ;-----------------------------------------------------------------
0063               ; Suffix characters for clipboards
0064               ;-----------------------------------------------------------------
0065      3100     clip1                     equ  >3100   ; '1'
0066      3200     clip2                     equ  >3200   ; '2'
0067      3300     clip3                     equ  >3300   ; '3'
0068      3400     clip4                     equ  >3400   ; '4'
0069      3500     clip5                     equ  >3500   ; '5'
0070               ;-----------------------------------------------------------------
0071               ; Keyboard flags in Stevie
0072               ;-----------------------------------------------------------------
0073      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0074               ;-----------------------------------------------------------------
0075               ; File work mode
0076               ;-----------------------------------------------------------------
0077      0001     id.file.loadfile          equ  1       ; Load file
0078      0002     id.file.insertfile        equ  2       ; Insert file
0079      0003     id.file.appendfile        equ  3       ; Append file
0080      0004     id.file.savefile          equ  4       ; Save file
0081      0005     id.file.saveblock         equ  5       ; Save block to file
0082      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0083      0007     id.file.printfile         equ  7       ; Print file
0084      0008     id.file.printblock        equ  8       ; Print block
0085      FFFF     id.file.interrupt         equ  >ffff   ; File operation interrupted
0086               ;-----------------------------------------------------------------
0087               ; Special file indicator
0088               ;-----------------------------------------------------------------
0089      0000     id.special.normal         equ  0       ; Normal file
0090      0002     id.special.readonly       equ  2       ; Read-only file
0091      0003     id.special.basic          equ  3       ; TI Basic program
0092               ;-----------------------------------------------------------------
0093               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0094               ;-----------------------------------------------------------------
0095      A000     core1.top         equ  >a000           ; Structure begin
0096      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0097      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0098      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0099      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0100      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0101      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0102      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0103      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0104      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0105      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0106      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0107      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0108      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0109      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0110      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0111      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0112      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0113      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0114      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0115      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0116      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0117      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0118      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0119      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0120      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0121      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0122      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0123      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0124                                 ;--------------------------------------------
0125                                 ; TI Basic related
0126                                 ;--------------------------------------------
0127      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0128      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0129      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0130      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0131      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0132      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0133      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0134      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0135      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0136      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0137      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0138      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0139      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0140      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0141      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0142      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0143      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0144      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0145      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0146      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0147      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0148      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0149      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0150      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0151      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0152      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0153      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0154      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0155      A100     core1.free        equ  core1.top + 256 ; End of structure
0156               ;-----------------------------------------------------------------
0157               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0158               ;-----------------------------------------------------------------
0159      A100     core2.top         equ  >a100           ; Structure begin
0160      A100     rambuf            equ  core2.top       ; RAM workbuffer
0161      A200     core2.free        equ  core2.top + 256 ; End of structure
0162               ;-----------------------------------------------------------------
0163               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0164               ;-----------------------------------------------------------------
0165      A200     tv.struct         equ  >a200           ; Structure begin
0166      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0167      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0168      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0169      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0170      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0171      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0172      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0173      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0174      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0175      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0176      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0177      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0178      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer
0179      A21A     tv.topcolor       equ  tv.struct + 26  ; FG/BG-color top status line
0180      A21C     tv.botcolor       equ  tv.struct + 28  ; FG/BG-color bottom status line
0181      A21E     tv.markcolor      equ  tv.struct + 30  ; FG/BG-color marked lines in framebuffer
0182      A220     tv.busycolor      equ  tv.struct + 32  ; FG/BG-color bottom line when busy
0183      A222     tv.rulercolor     equ  tv.struct + 34  ; FG/BG-color ruler line
0184      A224     tv.cmdb.color     equ  tv.struct + 36  ; FG/BG-color cmdb lines
0185      A226     tv.cmdb.hcolor    equ  tv.struct + 38  ; FG/BG-color cmdb header line
0186      A228     tv.font.ptr       equ  tv.struct + 40  ; Pointer to font (in ROM bank 6 or RAM)
0187      A22A     tv.pane.focus     equ  tv.struct + 42  ; Identify pane that has focus
0188      A22C     tv.task.oneshot   equ  tv.struct + 44  ; Pointer to one-shot routine
0189      A22E     tv.fj.stackpnt    equ  tv.struct + 46  ; Pointer to farjump return stack
0190      A230     tv.error.visible  equ  tv.struct + 48  ; Error pane visible
0191      A232     tv.error.rows     equ  tv.struct + 50  ; Number of rows in error pane
0192      A234     tv.sp2.conf       equ  tv.struct + 52  ; Backup of SP2 config register
0193      A236     tv.sp2.stack      equ  tv.struct + 54  ; Backup of SP2 stack register
0194      A238     tv.fg99.img.ptr   equ  tv.struct + 56  ; Pointer to Final GROM cartridge to load
0195      A23A     tv.specmsg.ptr    equ  tv.struct + 58  ; Pointer to special message above botrow
0196      A23C     tv.lineterm       equ  tv.struct + 60  ; Default line termination character(s)
0197      A23E     tv.show.linelen   equ  tv.struct + 62  ; Show line length in status line
0198      A240     tv.error.msg      equ  tv.struct + 64  ; Error message (max. 160 characters)
0199      A2E0     tv.free           equ  tv.struct + 224 ; End of structure
0200               ;-----------------------------------------------------------------
0201               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0202               ;-----------------------------------------------------------------
0203      A300     fb.struct         equ  >a300           ; Structure begin
0204      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0205      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0206      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0207                                                      ; line X in editor buffer).
0208      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0209                                                      ; (offset 0 .. @fb.scrrows)
0210      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0211      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0212      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0213      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0214      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0215      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0216      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0217      A316     fb.prevcursor     equ  fb.struct + 22  ; Previous cursor position
0218      A318     fb.yxsave         equ  fb.struct + 24  ; Copy of cursor YX for toggling fb/cmdb
0219      A31A     fb.dirty          equ  fb.struct + 26  ; Frame buffer dirty flag
0220      A31C     fb.status.dirty   equ  fb.struct + 28  ; Status line(s) dirty flag
0221      A31E     fb.scrrows        equ  fb.struct + 30  ; Rows on physical screen for framebuffer
0222      A320     fb.scrrows.max    equ  fb.struct + 32  ; Max # of rows on physical screen for fb
0223      A322     fb.ruler.sit      equ  fb.struct + 34  ; 80 char ruler  (no length-prefix!)
0224      A372     fb.ruler.tat      equ  fb.struct + 114 ; 80 char colors (no length-prefix!)
0225      A3C2     fb.free           equ  fb.struct + 194 ; End of structure
0226               ;-----------------------------------------------------------------
0227               ; File handle structure                @>a400-a4ff   (256 bytes)
0228               ;-----------------------------------------------------------------
0229      A400     fh.struct         equ  >a400           ; stevie file handling structures
0230               ;*******************************************************************************
0231               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0232               ;*******************************************************************************
0233      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0234      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0235      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0236      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0237      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0238      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0239      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0240      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0241      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0242      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0243      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0244      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0245      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0246      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0247      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0248      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0249      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0250      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0251      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0252      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0253      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0254      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0255      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0256      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0257      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0258      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0259      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0260      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0261      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0262      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0263      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0264      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0265      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0266      A464     fh.temp3          equ  fh.struct + 100 ; Temporary variable 3
0267      A466     fh.pabtpl.ptr     equ  fh.struct + 102 ; Pointer to PAB template in ROM/RAM
0268      A468     fh.dir.rec.ptr    equ  fh.struct + 104 ; Pointer to directory record
0269      A46A     fh.circbreaker    equ  fh.struct + 106 ; Circuit breaker. Halt file operation
0270      A46C     fh.membuffer      equ  fh.struct + 108 ; 80 bytes file memory buffer
0271      A4BC     fh.free           equ  fh.struct + 188 ; End of structure
0272               ;-----------------------------------------------------------------
0273               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0274               ; Overloads file handle structure
0275               ;-----------------------------------------------------------------
0276      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0277      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0278               ;-----------------------------------------------------------------
0279               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0280               ;-----------------------------------------------------------------
0281      A500     edb.struct        equ  >a500            ; Begin structure
0282      A500     edb.top.ptr       equ  edb.struct       ; Pointer to editor buffer
0283      A502     edb.index.ptr     equ  edb.struct + 2   ; Pointer to index
0284      A504     edb.lines         equ  edb.struct + 4   ; Total lines in editor buffer - 1
0285      A506     edb.dirty         equ  edb.struct + 6   ; Editor buffer dirty (Text changed!)
0286      A508     edb.next_free.ptr equ  edb.struct + 8   ; Pointer to next free line
0287      A50A     edb.insmode       equ  edb.struct + 10  ; Insert mode (>ffff=insert)
0288      A50C     edb.autoinsert    equ  edb.struct + 12  ; Auto-insert on ENTER flag (>ffff=on)
0289      A50E     edb.block.m1      equ  edb.struct + 14  ; Block start line marker (>ffff=unset)
0290      A510     edb.block.m2      equ  edb.struct + 16  ; Block end line marker (>ffff=unset)
0291      A512     edb.block.var     equ  edb.struct + 18  ; Local var used in block operation
0292      A514     edb.filename.ptr  equ  edb.struct + 20  ; Pointer to length-prefixed string
0293                                                       ; with current filename.
0294      A516     edb.filetype.ptr  equ  edb.struct + 22  ; Pointer to length-prefixed string
0295                                                       ; with current file type.
0296      A518     edb.sams.page     equ  edb.struct + 24  ; Current SAMS page
0297      A51A     edb.sams.lopage   equ  edb.struct + 26  ; Lowest SAMS page in use
0298      A51C     edb.sams.hipage   equ  edb.struct + 28  ; Highest SAMS page in use
0299      A51E     edb.bk.fb.topline equ  edb.struct + 30  ; Backup of @fb.topline before opening
0300                                                       ; other file from special file.
0301      A520     edb.bk.fb.row     equ  edb.struct + 32  ; Backup of @fb.row before opening
0302                                                       ; other file from special file.
0303      A522     edb.special.file  equ  edb.struct + 34  ; Special file in editor buffer
0304      A524     edb.lineterm      equ  edb.struct + 36  ; Line termination character
0305                                                       ; MSB: Mode on (>ff) or off (>00)
0306                                                       ; LSB: Line termination character
0307      A526     edb.filename      equ  edb.struct + 38  ; 80 characters inline buffer reserved
0308                                                       ; for filename, but not always used.
0309      A576     edb.srch.str      equ  edb.struct + 118 ; 80 characters search string buffer
0310      A5C6     edb.srch.strlen   equ  edb.struct + 198 ; Length of search string
0311      A5C8     edb.srch.startln  equ  edb.struct + 200 ; Start line in editor buffer for search
0312      A5CA     edb.srch.endln    equ  edb.struct + 202 ; End line in editor buffer for search
0313      A5CC     edb.srch.worklen  equ  edb.struct + 204 ; Length of unpacked line in work buffer
0314      A5CE     edb.srch.matches  equ  edb.struct + 206 ; Number of search matches
0315      A5D0     edb.srch.curmatch equ  edb.struct + 208 ; Current index entry in search matches
0316      A5D2     edb.srch.row.ptr  equ  edb.struct + 210 ; Pointer entry in rows search index
0317      A5D4     edb.srch.col.ptr  equ  edb.struct + 212 ; Pointer entry in cols search index
0318      A5D6     edb.srch.offset   equ  edb.struct + 214 ; Offset into current row index entry
0319      A5D8     edb.srch.matchcol equ  edb.struct + 216 ; Column of search match in current row
0320      A5DA     edb.locked        equ  edb.struct + 218 ; Editor locked flag (>ffff=locked)
0321      A5DC     edb.free          equ  edb.struct + 220 ; End of structure
0322               ;-----------------------------------------------------------------
0323               ; Index structure                      @>a600-a6ff   (256 bytes)
0324               ;-----------------------------------------------------------------
0325      A600     idx.struct        equ  >a600           ; stevie index structure
0326      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0327      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0328      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0329      A606     idx.free          equ  idx.struct + 6  ; End of structure
0330               ;-----------------------------------------------------------------
0331               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0332               ;-----------------------------------------------------------------
0333      A700     cmdb.struct       equ  >a700             ; Command Buffer structure
0334      A700     cmdb.top.ptr      equ  cmdb.struct       ; Pointer to command buffer (history)
0335      A702     cmdb.visible      equ  cmdb.struct + 2   ; Command buffer visible? (>ffff=yes)
0336      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4   ; Copy of FB WYX if entering cmdb pane
0337      A706     cmdb.scrrows      equ  cmdb.struct + 6   ; Current size of CMDB pane (in rows)
0338      A708     cmdb.default      equ  cmdb.struct + 8   ; Default size of CMDB pane (in rows)
0339      A70A     cmdb.cursor       equ  cmdb.struct + 10  ; Screen YX of cursor in CMDB pane
0340      A70C     cmdb.yxsave       equ  cmdb.struct + 12  ; Copy of WYX
0341      A70E     cmdb.free1        equ  cmdb.struct + 14  ; **free**
0342      A710     cmdb.prevcursor   equ  cmdb.struct + 16  ; Previous cursor position
0343      A712     cmdb.vdptop       equ  cmdb.struct + 18  ; VDP addr CMDB pane header line (TAT)
0344      A714     cmdb.yxtop        equ  cmdb.struct + 20  ; YX pos CMDB pane header line
0345      A716     cmdb.yxprompt     equ  cmdb.struct + 22  ; YX pos of command buffer prompt
0346      A718     cmdb.column       equ  cmdb.struct + 24  ; Current column in command buffer pane
0347      A71A     cmdb.length       equ  cmdb.struct + 26  ; Length of current row in CMDB
0348      A71C     cmdb.lines        equ  cmdb.struct + 28  ; Total lines in CMDB
0349      A71E     cmdb.dirty        equ  cmdb.struct + 30  ; Command buffer dirty (Text changed!)
0350      A720     cmdb.dialog       equ  cmdb.struct + 32  ; Dialog identifier
0351      A722     cmdb.dialog.var   equ  cmdb.struct + 34  ; Dialog private variable or pointer
0352      A724     cmdb.panhead      equ  cmdb.struct + 36  ; Pointer string pane header
0353      A726     cmdb.paninfo      equ  cmdb.struct + 38  ; Pointer string pane info (1st line)
0354      A728     cmdb.panhint      equ  cmdb.struct + 40  ; Pointer string pane hint (2nd line)
0355      A72A     cmdb.panhint2     equ  cmdb.struct + 42  ; Pointer string pane hint (extra)
0356      A72C     cmdb.panmarkers   equ  cmdb.struct + 44  ; Pointer key marker list  (3rd line)
0357      A72E     cmdb.pankeys      equ  cmdb.struct + 46  ; Pointer string pane keys (stat line)
0358      A730     cmdb.action.ptr   equ  cmdb.struct + 48  ; Pointer function to execute
0359      A732     cmdb.cmdall       equ  cmdb.struct + 50  ; Current command including length-byte
0360      A732     cmdb.cmdlen       equ  cmdb.struct + 50  ; Length of current command (MSB byte!)
0361      A733     cmdb.cmd          equ  cmdb.struct + 51  ; Current command (80 bytes max.)
0362      A784     cmdb.panhead.buf  equ  cmdb.struct + 132 ; String buffer for pane header
0363      A7B6     cmdb.dflt.fname   equ  cmdb.struct + 182 ; Default for filename
0364      A800     cmdb.free         equ  cmdb.struct + 256 ; End of structure
0365               ;-----------------------------------------------------------------
0366               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0367               ;-----------------------------------------------------------------
0368      A900     sp2.stktop        equ  >a900           ; \
0369                                                      ; | The stack grows from high memory
0370                                                      ; | towards low memory.
0371                                                      ; |
0372                                                      ; | Stack leaking is checked in SP2
0373                                                      ; | user hook "edkey.keyscan.hook"
0374                                                      ; /
0375               ;-----------------------------------------------------------------
0376               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0377               ;-----------------------------------------------------------------
0378      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0379                                                      ; / stored in cartridge ROM bank7.asm
0380               
0381      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0382                                                      ; | scratchpad backup/restore routines.
0383                                                      ; /
0384               
0385      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0386      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0387                                                      ; calling TI Basic/External programs
0388               ;-----------------------------------------------------------------
0389               ; Farjump return stack                 @>af00-afff     (256 bytes)
0390               ;-----------------------------------------------------------------
0391      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0392                                                      ; Grows downwards from high to low.
0393               ;-----------------------------------------------------------------
0394               ; Index                                @>b000-bfff    (4096 bytes)
0395               ;-----------------------------------------------------------------
0396      B000     idx.top           equ  >b000           ; Top of index
0397      1000     idx.size          equ  4096            ; Index size
0398               ;-----------------------------------------------------------------
0399               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0400               ;-----------------------------------------------------------------
0401      C000     edb.top           equ  >c000           ; Editor buffer high memory
0402      1000     edb.size          equ  4096            ; Editor buffer size
0403               ;-----------------------------------------------------------------
0404               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0405               ;-----------------------------------------------------------------
0406      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0407      0960     fb.size           equ  80*30           ; Frame buffer size
0408      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0409                                                      ; / >d960->dcff
0410               ;-----------------------------------------------------------------
0411               ; Defaults area                        @>de00-dfff     (512 bytes)
0412               ;-----------------------------------------------------------------
0413      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0414      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0415      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0416               ;-----------------------------------------------------------------
0417               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0418               ;-----------------------------------------------------------------
0419      E000     cat.top           equ  >e000           ; Top of file catalog
0420      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0421      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0422      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0423      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0424      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0425      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0426      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0427      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0428      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0429      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0430      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0431      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0432               ;-----------------------------------------------------------------
0433               ; Directory/File catalog pointers and numbers
0434               ;-----------------------------------------------------------------
0435      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0436      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0437      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0438      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0439      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0440      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0441      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0442      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0443      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0444      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0445      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0446      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0447      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0448      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0449      E378     cat.volsize       equ  cat.top + 888   ; Volume size
0450      E37A     cat.volused       equ  cat.top + 890   ; Volume used
0451      E37C     cat.volfree       equ  cat.top + 892   ; Volume free
0452      E37E     cat.free1         equ  cat.top + 894   ; **free** up to 954
0453               ;-----------------------------------------------------------------
0454               ; Directory/File catalog strings (always length byte included)
0455               ;-----------------------------------------------------------------
0456      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0457      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0458      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0459      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0460      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0461      0F00     cat.size          equ  3840            ; Catalog total size
0462               ;-----------------------------------------------------------------
0463               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0464               ;-----------------------------------------------------------------
0465      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0466      0100     cmdb.size         equ  256             ; Command buffer size
0467               ;-----------------------------------------------------------------
0468               ; Heap & Strings area                  @>f000-f0ff     (256 bytes)
0469               ;-----------------------------------------------------------------
0470      F000     heap.top          equ  >f000           ; 80 Current filename
0471      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0472      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0473               ;-----------------------------------------------------------------
0474               ; Search results index for rows        @>f100-f8ff    (2048 bytes)
0475               ;-----------------------------------------------------------------
0476      F100     edb.srch.idx.rtop   equ  >f100         ; Search match index for rows
0477      0800     edb.srch.idx.rsize  equ  2048          ; Size of search match index for rows
0478               ;-----------------------------------------------------------------
0479               ; Search results index for columns     @>f900-fcff    (1024 bytes)
0480               ;-----------------------------------------------------------------
0481      F900     edb.srch.idx.ctop   equ  >f900         ; Search match index for columns
0482      0400     edb.srch.idx.csize  equ  1024          ; Size of search match index for columns
0483               ;-----------------------------------------------------------------
0484               ; Stevie specific equates
0485               ;-----------------------------------------------------------------
0486      0000     fh.fopmode.none      equ  0            ; No file operation in progress
0487      0001     fh.fopmode.readfile  equ  1            ; Read file from disk to memory
0488      0002     fh.fopmode.writefile equ  2            ; Save file from memory to disk
0489      0006     cmdb.rows            equ  6            ; Number of rows in CMDB pane
0490      A028     rom0_kscan_out       equ  keycode1     ; W here to store value of key pressed
0491      9900     tv.colorize.reset    equ  >9900        ; Colorization off
0492      00FE     tv.1timeonly         equ  254          ; One-time only flag indicator
0493      0100     tv.sams.maxpage      equ  256          ; Max SAMS pages supported
                   < stevie_b4.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b4.asm
0030                       copy  "equ.tib.asm"         ; Equates related to TI Basic session
     **** ****     > equ.tib.asm
0001               * FILE......: equ.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b4.asm
0031                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      004F     key.uc.o      equ >4f               ; O
0036      0050     key.uc.p      equ >50               ; P
0037      0051     key.uc.q      equ >51               ; Q
0038      0052     key.uc.r      equ >52               ; R
0039      0053     key.uc.s      equ >53               ; S
0040      0054     key.uc.t      equ >54               ; T
0041      0055     key.uc.u      equ >55               ; U
0042      0056     key.uc.v      equ >56               ; V
0043      0057     key.uc.w      equ >57               ; W
0044      0058     key.uc.x      equ >58               ; X
0045      0059     key.uc.y      equ >59               ; Y
0046      005A     key.uc.z      equ >5a               ; Z
0047      0061     key.lc.a      equ >61               ; a
0048      00A2     key.lc.b      equ >a2               ; b
0049      00A3     key.lc.c      equ >a3               ; c
0050      00A4     key.lc.d      equ >a4               ; d
0051      00A5     key.lc.e      equ >a5               ; e
0052      00A6     key.lc.f      equ >a6               ; f
0053      00A7     key.lc.g      equ >a7               ; g
0054      00A8     key.lc.h      equ >a8               ; h
0055      00A9     key.lc.i      equ >a9               ; i
0056      00AA     key.lc.j      equ >aa               ; j
0057      00AB     key.lc.k      equ >ab               ; k
0058      00AC     key.lc.l      equ >ac               ; l
0059      00AD     key.lc.m      equ >ad               ; m
0060      006E     key.lc.n      equ >6e               ; n
0061      006F     key.lc.o      equ >6f               ; o
0062      0070     key.lc.p      equ >70               ; p
0063      0071     key.lc.q      equ >71               ; q
0064      0072     key.lc.r      equ >72               ; r
0065      0073     key.lc.s      equ >73               ; s
0066      0074     key.lc.t      equ >74               ; t
0067      0075     key.lc.u      equ >75               ; u
0068      0076     key.lc.v      equ >76               ; v
0069      0077     key.lc.w      equ >77               ; w
0070      0078     key.lc.x      equ >78               ; x
0071      0079     key.lc.y      equ >79               ; y
0072      007A     key.lc.z      equ >7a               ; z
0073               *---------------------------------------------------------------
0074               * Keyboard scancodes - Function keys
0075               *-------------|---------------------|---------------------------
0076      00BC     key.fctn.0    equ >bc               ; fctn + 0
0077      0003     key.fctn.1    equ >03               ; fctn + 1
0078      0004     key.fctn.2    equ >04               ; fctn + 2
0079      0007     key.fctn.3    equ >07               ; fctn + 3
0080      0002     key.fctn.4    equ >02               ; fctn + 4
0081      000E     key.fctn.5    equ >0e               ; fctn + 5
0082      000C     key.fctn.6    equ >0c               ; fctn + 6
0083      0001     key.fctn.7    equ >01               ; fctn + 7
0084      0006     key.fctn.8    equ >06               ; fctn + 8
0085      000F     key.fctn.9    equ >0f               ; fctn + 9
0086      0000     key.fctn.a    equ >00               ; fctn + a
0087      00BE     key.fctn.b    equ >be               ; fctn + b
0088      0000     key.fctn.c    equ >00               ; fctn + c
0089      0009     key.fctn.d    equ >09               ; fctn + d
0090      000B     key.fctn.e    equ >0b               ; fctn + e
0091      0000     key.fctn.f    equ >00               ; fctn + f
0092      0000     key.fctn.g    equ >00               ; fctn + g
0093      00BF     key.fctn.h    equ >bf               ; fctn + h
0094      0000     key.fctn.i    equ >00               ; fctn + i
0095      00C0     key.fctn.j    equ >c0               ; fctn + j
0096      00C1     key.fctn.k    equ >c1               ; fctn + k
0097      00C2     key.fctn.l    equ >c2               ; fctn + l
0098      00C3     key.fctn.m    equ >c3               ; fctn + m
0099      00C4     key.fctn.n    equ >c4               ; fctn + n
0100      0000     key.fctn.o    equ >00               ; fctn + o
0101      0000     key.fctn.p    equ >00               ; fctn + p
0102      00C5     key.fctn.q    equ >c5               ; fctn + q
0103      0000     key.fctn.r    equ >00               ; fctn + r
0104      0008     key.fctn.s    equ >08               ; fctn + s
0105      0000     key.fctn.t    equ >00               ; fctn + t
0106      0000     key.fctn.u    equ >00               ; fctn + u
0107      007F     key.fctn.v    equ >7f               ; fctn + v
0108      007E     key.fctn.w    equ >7e               ; fctn + w
0109      000A     key.fctn.x    equ >0a               ; fctn + x
0110      00C6     key.fctn.y    equ >c6               ; fctn + y
0111      0000     key.fctn.z    equ >00               ; fctn + z
0112               *---------------------------------------------------------------
0113               * Keyboard scancodes - Function keys extra
0114               *---------------------------------------------------------------
0115      00B9     key.fctn.dot    equ >b9             ; fctn + .
0116      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0117      0005     key.fctn.plus   equ >05             ; fctn + +
0118               *---------------------------------------------------------------
0119               * Keyboard scancodes - control keys
0120               *-------------|---------------------|---------------------------
0121      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0122      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0123      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0124      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0125      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0126      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0127      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0128      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0129      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0130      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0131      0081     key.ctrl.a    equ >81               ; ctrl + a
0132      0082     key.ctrl.b    equ >82               ; ctrl + b
0133      0083     key.ctrl.c    equ >83               ; ctrl + c
0134      0084     key.ctrl.d    equ >84               ; ctrl + d
0135      0085     key.ctrl.e    equ >85               ; ctrl + e
0136      0086     key.ctrl.f    equ >86               ; ctrl + f
0137      0087     key.ctrl.g    equ >87               ; ctrl + g
0138      0088     key.ctrl.h    equ >88               ; ctrl + h
0139      0089     key.ctrl.i    equ >89               ; ctrl + i
0140      008A     key.ctrl.j    equ >8a               ; ctrl + j
0141      008B     key.ctrl.k    equ >8b               ; ctrl + k
0142      008C     key.ctrl.l    equ >8c               ; ctrl + l
0143      008D     key.ctrl.m    equ >8d               ; ctrl + m
0144      008E     key.ctrl.n    equ >8e               ; ctrl + n
0145      008F     key.ctrl.o    equ >8f               ; ctrl + o
0146      0090     key.ctrl.p    equ >90               ; ctrl + p
0147      0091     key.ctrl.q    equ >91               ; ctrl + q
0148      0092     key.ctrl.r    equ >92               ; ctrl + r
0149      0093     key.ctrl.s    equ >93               ; ctrl + s
0150      0094     key.ctrl.t    equ >94               ; ctrl + t
0151      0095     key.ctrl.u    equ >95               ; ctrl + u
0152      0096     key.ctrl.v    equ >96               ; ctrl + v
0153      0097     key.ctrl.w    equ >97               ; ctrl + w
0154      0098     key.ctrl.x    equ >98               ; ctrl + x
0155      0099     key.ctrl.y    equ >99               ; ctrl + y
0156      009A     key.ctrl.z    equ >9a               ; ctrl + z
0157               *---------------------------------------------------------------
0158               * Keyboard scancodes - control keys extra
0159               *---------------------------------------------------------------
0160      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0161      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0162      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0163      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0164      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0165               *---------------------------------------------------------------
0166               * Special keys
0167               *---------------------------------------------------------------
0168      000D     key.enter     equ >0d               ; enter
0169      0020     key.space     equ >20               ; space
                   < stevie_b4.asm
0032               
0033               ***************************************************************
0034               * BANK 4
0035               ********|*****|*********************|**************************
0036      6008     bankid  equ   bank4.rom             ; Set bank identifier to current bank
0037                       aorg  >6000
0038                       save  >6000,>8000           ; Save bank
0039                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE x.x.x RESET MEM"
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Change to rom.program2 to skip menu option "STEVIE x.x.x RESET MEM"
0024                       ;
0025 6006 6026             data  rom.program2          ; 6  \ Pointer to program list         >6006
0026                                                   ; 7  /
0027               
0028 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0029                                                   ; 9  /
0030               
0031 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0032                                                   ; 11 /
0033               
0034                       ;-----------------------------------------------------------------------
0035                       ; Program list entry
0036                       ;-----------------------------------------------------------------------
0037               rom.program1:
0038 600C 6026             data  rom.program2          ; 12 \ Next program list entry         >600c
0039                                                   ; 13 / (no more items following)
0040               
0041 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0042                                                   ; 15 /
0043               
0044 6010 1553             stri 'STEVIE 1.9.0 MEMRESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 312E     
     601A 392E     
     601C 3020     
     601E 4D45     
     6020 4D52     
     6022 4553     
     6024 4554     
0045                       even
0046               
0047                       ;-----------------------------------------------------------------------
0048                       ; Program list entry
0049                       ;-----------------------------------------------------------------------
0050               rom.program2:
0051 6026 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0052                                                   ; 13 / (no more items following)
0053               
0054 6028 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0055                                                   ; 15 /
0056               
0058 602A 0C53                 stri 'STEVIE 1.9.0'
     602C 5445     
     602E 5649     
     6030 4520     
     6032 312E     
     6034 392E     
     6036 30       
0060               
0064               
0068               
                   < stevie_b4.asm
0040               
0041               ***************************************************************
0042               * Step 1: Switch to bank 0 (uniform code accross all banks)
0043               ********|*****|*********************|**************************
0044                       aorg  kickstart.code1       ; >6040
0045 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0046               ***************************************************************
0047               * Step 2: Satisfy assembler, must know relocated code
0048               ********|*****|*********************|**************************
0049                       aorg  >2000                 ; Relocate to >2000
0050                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FC0     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7FF0     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2E12 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2E14 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2E16 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2E18 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2E1A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2E1C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2E1E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E20 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2E22 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2E24 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E26 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2E28 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E2A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2E2E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2E30 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E32 A44C     
0246               
0247 2E34 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E36 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2E38 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E3A 0009     
0254 2E3C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E3E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2E40 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E42 8322     
     2E44 833C     
0259               
0260 2E46 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E48 A42A     
0261 2E4A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2E4C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E4E 2C4A     
0268 2E50 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2E52 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2E54 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E56 2D7A     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2E58 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2E5A C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E5C 833C     
     2E5E 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2E60 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E62 A436     
0292 2E64 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E66 0005     
0293 2E68 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E6A 22E4     
0294 2E6C C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2E6E C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2E70 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2E72 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E74 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E76 0649  22         dect  stack
0038 2E78 C64B  38         mov   r11,*stack            ; Save return address
0039 2E7A 0649  22         dect  stack
0040 2E7C C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E7E C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E80 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E82 0014     
0046               fg99.send.loop:
0047 2E84 04E0  34         clr   @>6000                ; Signal new byte
     2E86 6000     
0048 2E88 0201  24         li    r1,>0038              ; >7000 >> 9
     2E8A 0038     
0049 2E8C D070  44         movb  *r0+,r1
0050 2E8E 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E90 04D1  30         clr   *r1                   ; Send byte
0053 2E92 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E94 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2E96 04E0  34         clr   @>6000                ; Done sending filename
     2E98 6000     
0057 2E9A 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2E9C 0200  24         li    r0,>6000              ; check >6000->6200
     2E9E 6000     
0063 2EA0 0202  24         li    r2,>100
     2EA2 0100     
0064 2EA4 C070  46 !       mov   *r0+, r1
0065 2EA6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2EA8 0602  22         dec   r2
0067 2EAA 16FC  14         jne   -!
0068 2EAC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EAE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EB0 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EB2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EB4 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EB6 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EB8 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EBA 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EBC 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EBE 201C     
0029 2EC0 1602  14         jne   tmgr1a                ; No, so move on
0030 2EC2 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2EC4 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2EC6 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2EC8 2020     
0035 2ECA 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ECC 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ECE 2010     
0048 2ED0 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2ED2 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2ED4 200E     
0050 2ED6 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2ED8 0460  28         b     @kthread              ; Run kernel thread
     2EDA 2F52     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EDC 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EDE 2014     
0056 2EE0 13EB  14         jeq   tmgr1
0057 2EE2 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EE4 2012     
0058 2EE6 16E8  14         jne   tmgr1
0059 2EE8 C120  38         mov   @wtiusr,tmp0
     2EEA 832E     
0060 2EEC 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EEE 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EF0 2F50     
0065 2EF2 C10A  30         mov   r10,tmp0
0066 2EF4 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2EF6 00FF     
0067 2EF8 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2EFA 201C     
0068 2EFC 1303  14         jeq   tmgr5
0069 2EFE 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F00 003C     
0070 2F02 1002  14         jmp   tmgr6
0071 2F04 0284  26 tmgr5   ci    tmp0,50
     2F06 0032     
0072 2F08 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F0A 1001  14         jmp   tmgr8
0074 2F0C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F0E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F10 832C     
0079 2F12 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F14 FF00     
0080 2F16 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F18 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F1A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F1C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F1E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F20 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F22 830C     
     2F24 830D     
0089 2F26 1608  14         jne   tmgr10                ; No, get next slot
0090 2F28 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F2A FF00     
0091 2F2C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F2E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F30 8330     
0096 2F32 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F34 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F36 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F38 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F3A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F3C 8315     
     2F3E 8314     
0103 2F40 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F42 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F44 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F46 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F48 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F4A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F4C FF00     
0109 2F4E 10B4  14         jmp   tmgr1
0110 2F50 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F52 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F54 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F56 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F58 2006     
0023 2F5A 1602  14         jne   kthread_kb
0024 2F5C 06A0  36         bl    @sdpla1               ; Run sound player
     2F5E 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F60 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F62 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F64 0460  28         b     @tmgr3                ; Exit
     2F66 2EDC     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F68 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F6A 832E     
0018 2F6C E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F6E 2012     
0019 2F70 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EB8     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F72 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F74 832E     
0029 2F76 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F78 FEFF     
0030 2F7A 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F7C C13B  46 mkslot  mov   *r11+,tmp0
0018 2F7E C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F80 C184  30         mov   tmp0,tmp2
0023 2F82 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F84 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F86 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F88 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F8A 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F8C C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F8E 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F90 2022     
0035 2F92 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F94 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2F96 05CB  22 mkslo1  inct  r11
0041 2F98 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2F9A C13B  46 clslot  mov   *r11+,tmp0
0053 2F9C 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2F9E A120  38         a     @wtitab,tmp0          ; Add table base
     2FA0 832C     
0055 2FA2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FA4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FA6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FA8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FAA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FAC A120  38         a     @wtitab,tmp0          ; Add table base
     2FAE 832C     
0071 2FB0 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FB2 C154  38         mov   *tmp0,tmp1
0073 2FB4 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FB6 FF00     
0074 2FB8 C505  38         mov   tmp1,*tmp0
0075 2FBA 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FBC 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FBE 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FC0 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FC2 0000     
0288 2FC4 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FC6 8300     
0289 2FC8 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FCA 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FCC 0202  20 runli2  li    r2,>8308
     2FCE 8308     
0294 2FD0 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FD2 0282  22         ci    r2,>8400
     2FD4 8400     
0296 2FD6 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FD8 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FDA FFFF     
0301 2FDC 1602  14         jne   runli4                ; No, continue
0302 2FDE 0420  42         blwp  @0                    ; Yes, bye bye
     2FE0 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FE2 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FE4 833C     
0307 2FE6 04C1  14         clr   r1                    ; Reset counter
0308 2FE8 0202  20         li    r2,10                 ; We test 10 times
     2FEA 000A     
0309 2FEC C0E0  30 runli5  mov   @vdps,r3
     2FEE 8802     
0310 2FF0 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FF2 2020     
0311 2FF4 1302  14         jeq   runli6
0312 2FF6 0581  14         inc   r1                    ; Increase counter
0313 2FF8 10F9  14         jmp   runli5
0314 2FFA 0602  14 runli6  dec   r2                    ; Next test
0315 2FFC 16F7  14         jne   runli5
0316 2FFE 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     3000 1250     
0317 3002 1202  14         jle   runli7                ; No, so it must be NTSC
0318 3004 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3006 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3008 06A0  32 runli7  bl    @loadmc
     300A 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 300C 04C1  14 runli9  clr   r1
0327 300E 04C2  14         clr   r2
0328 3010 04C3  14         clr   r3
0329 3012 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     3014 A900     
0330 3016 020F  20         li    r15,vdpw              ; Set VDP write address
     3018 8C00     
0332 301A 06A0  32         bl    @mute                 ; Mute sound generators
     301C 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 301E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     3020 4A4A     
0339 3022 1605  14         jne   runlia
0340 3024 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3026 228E     
0341 3028 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     302A 0000     
     302C 3000     
0346 302E 06A0  32 runlia  bl    @filv
     3030 228E     
0347 3032 0FC0             data  pctadr,spfclr,16      ; Load color table
     3034 00F4     
     3036 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3038 06A0  32         bl    @f18unl               ; Unlock the F18A
     303A 278A     
0355 303C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     303E 27B4     
0356 3040 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     3042 27B4     
0357 3044 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3046 27B4     
0358 3048 06A0  32         bl    @f18lck               ; Lock the F18A again
     304A 27A0     
0359               
0360 304C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     304E 2332     
0361 3050 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 3052 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     3054 22F8     
0375 3056 7F50             data  spvmod                ; Equate selected video mode table
0376 3058 0204  20         li    tmp0,spfont           ; Get font option
     305A 000C     
0377 305C 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 305E 1304  14         jeq   runlid                ; Yes, skip it
0379 3060 06A0  32         bl    @ldfnt
     3062 2360     
0380 3064 1900             data  fntadr,spfont         ; Load specified font
     3066 000C     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3068 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     306A 4A4A     
0385 306C 1602  14         jne   runlie                ; No, continue
0386 306E 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     3070 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 3072 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     3074 0040     
0391 3076 0460  28         b     @main                 ; Give control to main program
     3078 6046     
                   < stevie_b4.asm
0051                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 307A 0649  14         dect  stack
0029 307C C644  30         mov   tmp0,*stack           ; Push tmp0
0030 307E 0649  14         dect  stack
0031 3080 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 3082 0649  14         dect  stack
0033 3084 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3086 0649  14         dect  stack
0035 3088 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 308A C13B  30         mov   *r11+,tmp0            ; P0
0040 308C C17B  30         mov   *r11+,tmp1            ; P1
0041 308E C1BB  30         mov   *r11+,tmp2            ; P2
0042 3090 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 3092 0649  14         dect  stack
0048 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 3096 0649  14         dect  stack
0050 3098 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 309A 0649  14         dect  stack
0052 309C C646  30         mov   tmp2,*stack           ; Push tmp2
0053 309E 0649  14         dect  stack
0054 30A0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30A2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30A4 6000     
0060 30A6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30A8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30AA A22E     
0064 30AC 0647  14         dect  tmp3
0065 30AE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30B0 0647  14         dect  tmp3
0067 30B2 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30B4 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30B6 A22E     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30B8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30BA 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30BC 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30BE 0224  22         ai    tmp0,>0800
     30C0 0800     
0086 30C2 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30C4 0285  22         ci    tmp1,>ffff
     30C6 FFFF     
0095 30C8 1602  14         jne   !
0096 30CA C160  34         mov   @trmpvector,tmp1
     30CC A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30CE C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30D0 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30D2 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30D4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30D6 FFCE     
0111 30D8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30DA 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30DC 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30DE C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30E0 A22E     
0122 30E2 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30E4 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30E6 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30E8 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30EA 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30EC 028B  22         ci    r11,>6000
     30EE 6000     
0139 30F0 1104  14         jlt   rom.farjump.assert.lowmem
0140 30F2 028B  22         ci    r11,>7fff
     30F4 7FFF     
0141 30F6 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 30F8 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 30FA 028B  22         ci    r11,>2000
     30FC 2000     
0148 30FE 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 3100 028B  22         ci    r11,>3fff
     3102 3FFF     
0150 3104 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3106 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3108 A22E     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 310A 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 310C 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 310E 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 3110 0225  22         ai    tmp1,>0800
     3112 0800     
0171 3114 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3116 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3118 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     311A FFCE     
0178 311C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     311E 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 3120 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 3122 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 3124 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3126 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3128 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 312A 0649  14         dect  stack
0021 312C C64B  30         mov   r11,*stack            ; Save return address
0022 312E 0649  14         dect  stack
0023 3130 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3132 0649  14         dect  stack
0025 3134 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3136 0204  20         li    tmp0,fb.top
     3138 D000     
0030 313A C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     313C A300     
0031 313E 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3140 A304     
0032 3142 04E0  34         clr   @fb.row               ; Current row=0
     3144 A306     
0033 3146 04E0  34         clr   @fb.column            ; Current column=0
     3148 A30C     
0034               
0035 314A 0204  20         li    tmp0,colrow
     314C 0050     
0036 314E C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3150 A30E     
0037 3152 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3154 A310     
0038               
0039 3156 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3158 001C     
0040 315A C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     315C A320     
0041               
0042 315E 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     3160 31C6     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 3162 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3164 A22A     
0048 3166 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3168 A312     
0049 316A 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     316C A31A     
0050 316E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3170 A31C     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 3172 06A0  32         bl    @film
     3174 2236     
0055 3176 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3178 0000     
     317A 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 317C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 317E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 3180 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 3182 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 3184 0649  14         dect  stack
0025 3186 C64B  30         mov   r11,*stack            ; Save return address
0026 3188 0649  14         dect  stack
0027 318A C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 318C C120  34         mov   @parm1,tmp0
     318E A006     
0032 3190 A120  34         a     @fb.topline,tmp0
     3192 A304     
0033 3194 C804  38         mov   tmp0,@outparm1
     3196 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3198 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 319A C2F9  30         mov   *stack+,r11           ; Pop r11
0040 319C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 319E 0649  14         dect  stack
0028 31A0 C64B  30         mov   r11,*stack            ; Save return address
0029 31A2 0649  14         dect  stack
0030 31A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31A6 0649  14         dect  stack
0032 31A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31AA C120  34         mov   @fb.row,tmp0
     31AC A306     
0037 31AE 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31B0 A30E     
0038 31B2 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31B4 A30C     
0039 31B6 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31B8 A300     
0040 31BA C805  38         mov   tmp1,@fb.current
     31BC A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31BE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31C0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31C2 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31C4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31C6 0649  14         dect  stack
0026 31C8 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31CA C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31CC A320     
     31CE A31E     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31D0 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31D2 A210     
0037 31D4 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31D6 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31D8 A31E     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31DA 8820  50         c     @edb.special.file,@const.0
     31DC A522     
     31DE 2000     
0044 31E0 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31E2 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E4 A31E     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31E6 0760  38         abs   @tv.error.visible     ; Error area visible?
     31E8 A230     
0051 31EA 1303  14         jeq   fb.calc.scrrows.exit
0052 31EC 6820  54         s     @tv.error.rows,@fb.scrrows
     31EE A232     
     31F0 A31E     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 31F6 0649  14         dect  stack
0052 31F8 C64B  30         mov   r11,*stack            ; Save return address
0053 31FA 0649  14         dect  stack
0054 31FC C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 31FE 0204  20         li    tmp0,idx.top
     3200 B000     
0059 3202 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3204 A502     
0060               
0061 3206 C120  34         mov   @tv.sams.b000,tmp0
     3208 A206     
0062 320A C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     320C A600     
0063 320E C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     3210 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3212 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3214 0004     
0068 3216 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3218 A604     
0069               
0070 321A 06A0  32         bl    @_idx.sams.mapcolumn.on
     321C 3238     
0071                                                   ; Index in continuous memory region
0072               
0073 321E 06A0  32         bl    @film
     3220 2236     
0074 3222 B000                   data idx.top,>00,idx.size * 5
     3224 0000     
     3226 5000     
0075                                                   ; Clear index
0076               
0077 3228 06A0  32         bl    @_idx.sams.mapcolumn.off
     322A 326C     
0078                                                   ; Restore memory window layout
0079               
0080 322C C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     322E A602     
     3230 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3232 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3234 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3236 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3238 0649  14         dect  stack
0102 323A C64B  30         mov   r11,*stack            ; Push return address
0103 323C 0649  14         dect  stack
0104 323E C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3240 0649  14         dect  stack
0106 3242 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3244 0649  14         dect  stack
0108 3246 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3248 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     324A A602     
0113 324C 0205  20         li    tmp1,idx.top
     324E B000     
0114 3250 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3252 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3254 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3256 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3258 0584  14         inc   tmp0                  ; Next SAMS index page
0123 325A 0225  22         ai    tmp1,>1000            ; Next memory region
     325C 1000     
0124 325E 0606  14         dec   tmp2                  ; Update loop counter
0125 3260 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3262 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3264 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3266 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3268 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 326A 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 326C 0649  14         dect  stack
0151 326E C64B  30         mov   r11,*stack            ; Push return address
0152 3270 0649  14         dect  stack
0153 3272 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3274 0649  14         dect  stack
0155 3276 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3278 0649  14         dect  stack
0157 327A C646  30         mov   tmp2,*stack           ; Push tmp2
0158 327C 0649  14         dect  stack
0159 327E C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3280 0205  20         li    tmp1,idx.top
     3282 B000     
0164 3284 0206  20         li    tmp2,5                ; Always 5 pages
     3286 0005     
0165 3288 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     328A A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 328C C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 328E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3290 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3292 0225  22         ai    tmp1,>1000            ; Next memory region
     3294 1000     
0176 3296 0606  14         dec   tmp2                  ; Update loop counter
0177 3298 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 329A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 329C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 329E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32A0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32A2 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32A4 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32A6 0649  14         dect  stack
0212 32A8 C64B  30         mov   r11,*stack            ; Save return address
0213 32AA 0649  14         dect  stack
0214 32AC C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32AE 0649  14         dect  stack
0216 32B0 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32B2 0649  14         dect  stack
0218 32B4 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32B6 C184  18         mov   tmp0,tmp2             ; Line number
0223 32B8 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32BA 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32BC 0800     
0225               
0226 32BE 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32C0 0A16  18         sla   tmp2,1                ; line number * 2
0231 32C2 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32C4 A018     
0232               
0233 32C6 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32C8 A602     
0234 32CA 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32CC A600     
0235               
0236 32CE 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32D0 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32D2 A600     
0242 32D4 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32D6 A206     
0243 32D8 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32DA 0205  20         li    tmp1,>b000            ; Memory window for index page
     32DC B000     
0246               
0247 32DE 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32E0 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32E2 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32E4 A604     
0254 32E6 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32E8 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32EA A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 32F6 0649  14         dect  stack
0023 32F8 C64B  30         mov   r11,*stack            ; Save return address
0024 32FA 0649  14         dect  stack
0025 32FC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 32FE 0204  20         li    tmp0,edb.top          ; \
     3300 C000     
0030 3302 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3304 A500     
0031 3306 C804  38         mov   tmp0,@edb.next_free.ptr
     3308 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 330A 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     330C A50A     
0035               
0036 330E 0204  20         li    tmp0,1
     3310 0001     
0037 3312 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3314 A504     
0038               
0039 3316 0720  34         seto  @edb.block.m1         ; Reset block start line
     3318 A50E     
0040 331A 0720  34         seto  @edb.block.m2         ; Reset block end line
     331C A510     
0041               
0042 331E C820  54         mov   @tv.lineterm,@edb.lineterm
     3320 A23C     
     3322 A524     
0043                                                   ; Set line termination char from default
0044               
0045 3324 0204  20         li    tmp0,txt.newfile      ; "New file"
     3326 3B26     
0046 3328 C804  38         mov   tmp0,@edb.filename.ptr
     332A A514     
0047               
0048 332C 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     332E A440     
0049 3330 04E0  34         clr   @fh.kilobytes.prev    ; /
     3332 A45C     
0050               
0051 3334 0204  20         li    tmp0,txt.filetype.none
     3336 3C9E     
0052 3338 C804  38         mov   tmp0,@edb.filetype.ptr
     333A A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 333C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 333E C2F9  30         mov   *stack+,r11           ; Pop r11
0060 3340 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 3342 0649  14         dect  stack
0023 3344 C64B  30         mov   r11,*stack            ; Save return address
0024 3346 0649  14         dect  stack
0025 3348 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 334A 0649  14         dect  stack
0027 334C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 334E 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3350 EF00     
0032 3352 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3354 A700     
0033               
0034 3356 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3358 A702     
0035 335A 0204  20         li    tmp0,6
     335C 0006     
0036 335E C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3360 A706     
0037 3362 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3364 A708     
0038               
0039 3366 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3368 A71C     
0040 336A 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     336C A71E     
0041 336E 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3370 A730     
0042 3372 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     3374 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3376 0204  20         li    tmp0,pane.botrow      ; \
     3378 001D     
0047 337A 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     337C A706     
0048 337E 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3380 833A     
0049 3382 C105  18         mov   tmp1,tmp0             ; | Get result
0050 3384 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3386 0980     
0051 3388 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     338A A712     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 338C 06A0  32         bl    @film
     338E 2236     
0056 3390 EF00                   data  cmdb.top,>00,cmdb.size
     3392 0000     
     3394 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3396 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3398 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 339A C2F9  30         mov   *stack+,r11           ; Pop r11
0065 339C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 339E 0649  14         dect  stack
0023 33A0 C64B  30         mov   r11,*stack            ; Save return address
0024 33A2 0649  14         dect  stack
0025 33A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33A6 0649  14         dect  stack
0027 33A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33AA 0649  14         dect  stack
0029 33AC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33AE 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33B0 A230     
0034 33B2 0204  20         li    tmp0,3
     33B4 0003     
0035 33B6 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33B8 A232     
0036               
0037 33BA 06A0  32         bl    @film
     33BC 2236     
0038 33BE A240                   data tv.error.msg,0,160
     33C0 0000     
     33C2 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33C4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33CA C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33CC 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33CE 0649  14         dect  stack
0023 33D0 C64B  30         mov   r11,*stack            ; Save return address
0024 33D2 0649  14         dect  stack
0025 33D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33D6 0649  14         dect  stack
0027 33D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33DA 0649  14         dect  stack
0029 33DC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33DE 0204  20         li    tmp0,1                ; \ Set default color scheme
     33E0 0001     
0034 33E2 C804  38         mov   tmp0,@tv.colorscheme  ; /
     33E4 A212     
0035               
0036 33E6 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33E8 A22C     
0037 33EA E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33EC 200C     
0038               
0039 33EE 0204  20         li    tmp0,fj.bottom
     33F0 B000     
0040 33F2 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33F4 A22E     
0041               
0042 33F6 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     33F8 A23A     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 33FA 06A0  32         bl    @cpym2m
     33FC 253A     
0047 33FE 3D94                   data def.printer.fname,tv.printer.fname,7
     3400 DE00     
     3402 0007     
0048               
0049 3404 06A0  32         bl    @cpym2m
     3406 253A     
0050 3408 3D9B                   data def.clip.fname.a,tv.clip.fname,10
     340A DE50     
     340C 000A     
0051               
0052 340E 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3410 A50C     
0053 3412 04E0  34         clr   @tv.show.linelen      ; Show line length off by default
     3414 A23E     
0054               
0055 3416 0204  20         li    tmp0,13               ; \
     3418 000D     
0056 341A C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     341C A23C     
0057                                                   ; / LSB = 13 Carriage return
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               tv.init.exit:
0062 341E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0063 3420 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0064 3422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0065 3424 C2F9  30         mov   *stack+,r11           ; Pop R11
0066 3426 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3428 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     342A 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 342C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     342E 307A     
0028 3430 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3432 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3434 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3436 0649  14         dect  stack
0025 3438 C64B  30         mov   r11,*stack            ; Push return address
0026 343A 0649  14         dect  stack
0027 343C C644  30         mov   tmp0,*stack           ; Push tmp0
0028 343E 0649  14         dect  stack
0029 3440 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3442 0649  14         dect  stack
0031 3444 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3446 0649  14         dect  stack
0033 3448 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 344A 0649  14         dect  stack
0035 344C C640  30         mov   r0,*stack             ; Push r0
0036 344E 0649  14         dect  stack
0037 3450 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3452 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3454 A006     
0042 3456 04C5  14         clr   tmp1                  ; Termination character >00
0043 3458 04E0  34         clr   @outparm1             ; Reset output parameters
     345A A018     
0044 345C 04E0  34         clr   @outparm2             ; Reset output parameters
     345E A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3460 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3462 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 3464 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3466 833C     
0056 3468 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 346A 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     346C 0005     
0058 346E 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3470 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3472 A006     
0063               
0064 3474 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 3476 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     3478 FFF6     
0066 347A 0746  18         abs   tmp2                  ; /
0067               
0068 347C 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 347E D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3480 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3482 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 3484 0285  22         ci    tmp1,32               ; Blank ?
     3486 0020     
0080 3488 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 348A 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     348C FFD0     
0085 348E 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3490 0285  22         ci    tmp1,9
     3492 0009     
0087 3494 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 3496 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     3498 34C4     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 349A 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 349C A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 349E 05C6  14         inct  tmp2                  ; Update loop counter
0102 34A0 0286  22         ci    tmp2,8                ; Last digit done?
     34A2 0008     
0103 34A4 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34A6 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34A8 04E0  34         clr   @outparm1             ; Empty uint16
     34AA A018     
0110 34AC 0720  34         seto  @outparm2             ; Invalid input string
     34AE A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34B0 C807  38         mov   tmp3,@outparm1
     34B2 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34B4 C079  30         mov   *stack+,r1            ; Pop r1
0121 34B6 C039  30         mov   *stack+,r0            ; Pop r0
0122 34B8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34BA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34BC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34C0 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34C2 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34C4 2710             data  10000,1000,100,10,1
     34C6 03E8     
     34C8 0064     
     34CA 000A     
     34CC 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34CE 0649  14         dect  stack
0022 34D0 C64B  30         mov   r11,*stack            ; Save return address
0023 34D2 0649  14         dect  stack
0024 34D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34D6 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34D8 2A56     
0029 34DA A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34DC A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34DE 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34DF   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34E0 0204  20         li    tmp0,uint16.unpacked
     34E2 A02C     
0035 34E4 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34E6 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34E8 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34EA 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34EC 2AAE     
0040 34EE A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34F0 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34F2 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34F8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 34FA 0649  14         dect  stack
0031 34FC C64B  30         mov   r11,*stack            ; Push return address
0032 34FE 0649  14         dect  stack
0033 3500 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 3502 0649  14         dect  stack
0035 3504 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 3506 0649  14         dect  stack
0037 3508 C646  30         mov   tmp2,*stack           ; Push tmp2
0038 350A 0649  14         dect  stack
0039 350C C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 350E C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3510 A006     
0044 3512 D194  26         movb  *tmp0,tmp2            ; /
0045 3514 0986  32         srl   tmp2,8                ; Right align
0046 3516 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 3518 8806  34         c     tmp2,@parm2           ; String length > requested length?
     351A A008     
0049 351C 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 351E C120  34         mov   @parm1,tmp0           ; Get source address
     3520 A006     
0054 3522 C160  34         mov   @parm4,tmp1           ; Get destination address
     3524 A00C     
0055 3526 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 3528 0649  14         dect  stack
0058 352A C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 352C 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     352E 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 3530 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 3532 C120  34         mov   @parm2,tmp0           ; Get requested length
     3534 A008     
0070 3536 0A84  32         sla   tmp0,8                ; Left align
0071 3538 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     353A A00C     
0072 353C D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 353E A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 3540 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 3542 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3544 A008     
0079 3546 6187  18         s     tmp3,tmp2             ; |
0080 3548 0586  14         inc   tmp2                  ; /
0081               
0082 354A C120  34         mov   @parm3,tmp0           ; Get byte to padd
     354C A00A     
0083 354E 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 3550 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 3552 0606  14         dec   tmp2                  ; Update loop counter
0090 3554 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 3556 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3558 A00C     
     355A A018     
0093 355C 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 355E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3560 FFCE     
0099 3562 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3564 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 3566 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 3568 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 356A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 356C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 356E C2F9  30         mov   *stack+,r11           ; Pop r11
0109 3570 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3572 0649  14         dect  stack
0023 3574 C64B  30         mov   r11,*stack            ; Save return address
0024 3576 0649  14         dect  stack
0025 3578 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 357A 0649  14         dect  stack
0027 357C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 357E C120  34         mov   @parm1,tmp0           ; Get line number
     3580 A006     
0032 3582 C160  34         mov   @parm2,tmp1           ; Get pointer
     3584 A008     
0033 3586 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 3588 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     358A 0FFF     
0039 358C 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 358E 06E0  34         swpb  @parm3
     3590 A00A     
0044 3592 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3594 A00A     
0045 3596 06E0  34         swpb  @parm3                ; \ Restore original order again,
     3598 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 359A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     359C 32A6     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 359E C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     35A0 A018     
0056 35A2 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35A4 B000     
0057 35A6 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35A8 A018     
0058 35AA 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35AC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35AE 32A6     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35B0 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35B2 A018     
0068 35B4 04E4  34         clr   @idx.top(tmp0)        ; /
     35B6 B000     
0069 35B8 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35BA A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35BC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35C0 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35C2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35C4 0649  14         dect  stack
0022 35C6 C64B  30         mov   r11,*stack            ; Save return address
0023 35C8 0649  14         dect  stack
0024 35CA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35CC 0649  14         dect  stack
0026 35CE C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35D0 0649  14         dect  stack
0028 35D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35D4 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35D6 A006     
0033               
0034 35D8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35DA 32A6     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35DC C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35DE A018     
0039 35E0 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35E2 B000     
0040               
0041 35E4 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35E6 C185  18         mov   tmp1,tmp2             ; \
0047 35E8 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35EA 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35EC 00FF     
0052 35EE 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35F0 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35F2 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35F4 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35F6 A018     
0059 35F8 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     35FA A01A     
0060 35FC 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 35FE 04E0  34         clr   @outparm1
     3600 A018     
0066 3602 04E0  34         clr   @outparm2
     3604 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3606 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3608 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 360A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 360C C2F9  30         mov   *stack+,r11           ; Pop r11
0075 360E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3610 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3612 B000     
0018 3614 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3616 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3618 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 361A 0606  14         dec   tmp2                  ; tmp2--
0026 361C 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 361E 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3620 0649  14         dect  stack
0047 3622 C64B  30         mov   r11,*stack            ; Save return address
0048 3624 0649  14         dect  stack
0049 3626 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3628 0649  14         dect  stack
0051 362A C645  30         mov   tmp1,*stack           ; Push tmp1
0052 362C 0649  14         dect  stack
0053 362E C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3630 0649  14         dect  stack
0055 3632 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3634 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3636 A006     
0060               
0061 3638 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     363A 32A6     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 363C C120  34         mov   @outparm1,tmp0        ; Index offset
     363E A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3640 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3642 A008     
0070 3644 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3646 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3648 A006     
0074 364A 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 364C 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     364E B000     
0081 3650 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3652 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3654 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3656 A008     
0088 3658 0287  22         ci    tmp3,2048
     365A 0800     
0089 365C 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 365E 06A0  32         bl    @_idx.sams.mapcolumn.on
     3660 3238     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3662 C120  34         mov   @parm1,tmp0           ; Restore line number
     3664 A006     
0103 3666 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3668 06A0  32         bl    @_idx.entry.delete.reorg
     366A 3610     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 366C 06A0  32         bl    @_idx.sams.mapcolumn.off
     366E 326C     
0111                                                   ; Restore memory window layout
0112               
0113 3670 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3672 06A0  32         bl    @_idx.entry.delete.reorg
     3674 3610     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 3676 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 3678 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 367A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 367C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 367E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3680 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3682 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3684 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     3686 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 3688 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 368A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     368C FFCE     
0027 368E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3690 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3692 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3694 B000     
0032 3696 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 3698 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 369A 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 369C C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 369E 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 36A0 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 36A2 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36A4 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36A6 AFFC     
0043 36A8 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36AA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36AC FFCE     
0049 36AE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36B0 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36B2 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36B4 0644  14         dect  tmp0                  ; Move pointer up
0056 36B6 0645  14         dect  tmp1                  ; Move pointer up
0057 36B8 0606  14         dec   tmp2                  ; Next index entry
0058 36BA 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36BC 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36BE 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36C0 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36C2 0649  14         dect  stack
0089 36C4 C64B  30         mov   r11,*stack            ; Save return address
0090 36C6 0649  14         dect  stack
0091 36C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36CA 0649  14         dect  stack
0093 36CC C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36CE 0649  14         dect  stack
0095 36D0 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36D2 0649  14         dect  stack
0097 36D4 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36D6 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36D8 A008     
0102 36DA 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36DC A006     
0103 36DE 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36E0 C1E0  34         mov   @parm2,tmp3
     36E2 A008     
0110 36E4 0287  22         ci    tmp3,2048
     36E6 0800     
0111 36E8 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36EA 06A0  32         bl    @_idx.sams.mapcolumn.on
     36EC 3238     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36EE C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36F0 A008     
0123 36F2 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36F4 06A0  32         bl    @_idx.entry.insert.reorg
     36F6 3684     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36F8 06A0  32         bl    @_idx.sams.mapcolumn.off
     36FA 326C     
0131                                                   ; Restore memory window layout
0132               
0133 36FC 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 36FE C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3700 A008     
0139               
0140 3702 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3704 32A6     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3706 C120  34         mov   @outparm1,tmp0        ; Index offset
     3708 A018     
0145               
0146 370A 06A0  32         bl    @_idx.entry.insert.reorg
     370C 3684     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 370E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3710 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3712 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3714 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3716 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3718 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 371A 0649  14         dect  stack
0022 371C C64B  30         mov   r11,*stack            ; Push return address
0023 371E 0649  14         dect  stack
0024 3720 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3722 0649  14         dect  stack
0026 3724 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3726 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3728 A504     
0031 372A 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 372C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     372E FFCE     
0037 3730 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3732 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3734 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3736 A006     
0043               
0044 3738 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     373A 35C4     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 373C C120  34         mov   @outparm2,tmp0        ; SAMS page
     373E A01A     
0050 3740 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3742 A018     
0051 3744 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3746 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3748 A208     
0057 374A 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 374C 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     374E 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3750 C820  54         mov   @outparm2,@tv.sams.c000
     3752 A01A     
     3754 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3756 C820  54         mov   @outparm2,@edb.sams.page
     3758 A01A     
     375A A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 375C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 375E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3760 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3762 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3764 0649  14         dect  stack
0022 3766 C64B  30         mov   r11,*stack            ; Push return address
0023 3768 0649  14         dect  stack
0024 376A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 376C 0649  14         dect  stack
0026 376E C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3770 04E0  34         clr   @outparm1             ; Reset length
     3772 A018     
0031 3774 04E0  34         clr   @outparm2             ; Reset SAMS bank
     3776 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3778 C120  34         mov   @parm1,tmp0           ; \
     377A A006     
0036 377C 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 377E 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3780 A504     
0039 3782 1201  14         jle   !                     ; No, continue processing
0040 3784 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 3786 C120  34 !       mov   @parm1,tmp0           ; Get line
     3788 A006     
0046               
0047 378A 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     378C 371A     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 378E C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3790 A018     
0053 3792 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3794 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 3796 C805  38         mov   tmp1,@outparm1        ; Save length
     3798 A018     
0060 379A 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 379C 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     379E A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 37A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 37A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37A8 0649  14         dect  stack
0021 37AA C64B  30         mov   r11,*stack            ; Save return address
0022 37AC 0649  14         dect  stack
0023 37AE C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37B0 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37B2 A304     
0028 37B4 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37B6 A306     
0029 37B8 C804  38         mov   tmp0,@parm1
     37BA A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37BC 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37BE 3764     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37C0 C820  54         mov   @outparm1,@fb.row.length
     37C2 A018     
     37C4 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37C6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37C8 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37CA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37CC 0649  14         dect  stack
0021 37CE C64B  30         mov   r11,*stack            ; Save return address
0022 37D0 0649  14         dect  stack
0023 37D2 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37D4 0649  14         dect  stack
0025 37D6 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37D8 C120  34         mov   @edb.next_free.ptr,tmp0
     37DA A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37DC 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37DE 0FFF     
0035 37E0 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37E2 0052     
0036 37E4 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37E6 0FF0     
0037 37E8 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37EA 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37EC A51C     
0043 37EE C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37F0 A500     
     37F2 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37F4 C120  34         mov   @edb.sams.hipage,tmp0
     37F6 A51C     
0050 37F8 C160  34         mov   @edb.top.ptr,tmp1
     37FA A500     
0051 37FC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     37FE 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3800 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3802 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3804 FFCE     
0061 3806 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3808 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 380A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 380C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 380E C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3810 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3812 0649  14         dect  stack
0022 3814 C64B  30         mov   r11,*stack            ; Push return address
0023 3816 0649  14         dect  stack
0024 3818 C660  42         mov   @wyx,*stack           ; Push cursor position
     381A 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 381C 06A0  32         bl    @hchar
     381E 2832     
0029 3820 0032                   byte 0,50,32,22
     3822 2016     
0030 3824 FFFF                   data EOL              ; Clear message
0031               
0032 3826 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3828 A22C     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 382A C839  42         mov   *stack+,@wyx          ; Pop cursor position
     382C 832A     
0038 382E C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3830 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "cart.fg99.run.asm"         ; Run FinalGROM cartridge image
     **** ****     > cart.fg99.run.asm
0001               * FILE......: cart.fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * cart.fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @cart.fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               * Is expected to run from RAM and not from cartridge space.
0023               ********|*****|*********************|**************************
0024               cart.fg99.run:
0025                       ;-------------------------------------------------------
0026                       ; Put VDP in TI Basic compatible mode (32x24)
0027                       ;-------------------------------------------------------
0028 3832 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3834 2806     
0029               
0030 3836 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3838 22F8     
0031 383A 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0032               
0033 383C 06A0  32         bl    @scroff               ; Turn off screen
     383E 26E6     
0034                       ;------------------------------------------------------
0035                       ; Clear magic string
0036                       ;------------------------------------------------------
0037                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0038                       ; Indicate it's unsafe to resume Stevie and initialization
0039                       ; is necessary.
0040                       ; clr   @magic.str.w1
0041                       ; clr   @magic.str.w2
0042                       ; clr   @magic.str.w3
0043                       ;-------------------------------------------------------
0044                       ; Load FG99 cartridge, but do not start cartridge yet
0045                       ;-------------------------------------------------------
0046 3840 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3842 A238     
0047 3844 06A0  32         bl    @xfg99                ; Load FinalGROM cartridge image
     3846 2E76     
0048                                                   ; \ i tmp0 = Pointer to cartridge image
0049                                                   ; /
0050                       ;-------------------------------------------------------
0051                       ; Turn SAMS mapper off and exit to monitor
0052                       ;-------------------------------------------------------
0053 3848 020C  20         li    r12,>1e00             ; SAMS CRU address
     384A 1E00     
0054 384C 1E01  16         sbz   1                     ; Disable SAMS mapper
0055                                                   ; \ We keep the mapper off while
0056                                                   ; | running TI Basic or other external
0057                                                   ; / programs.
0058               
0059 384E 0420  42         blwp @0                     ; Return to monitor
     3850 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 3852 0649  14         dect  stack
0009 3854 C64B  30         mov   r11,*stack            ; Save return address
0010 3856 0649  14         dect  stack
0011 3858 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 385A 0649  14         dect  stack
0013 385C C645  30         mov   tmp1,*stack           ; Push tmp1
0014 385E 0649  14         dect  stack
0015 3860 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 3862 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     3864 A22A     
0020               
0021 3866 0284  22         ci    tmp0,pane.focus.fb
     3868 0000     
0022 386A 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 386C 0284  22         ci    tmp0,pane.focus.cmdb
     386E 0001     
0025 3870 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 3872 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3874 FFCE     
0031 3876 06A0  32         bl    @cpu.crash            ; / Halt system.
     3878 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 387A C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     387C A70A     
     387E 832A     
0037 3880 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3882 2020     
0038 3884 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3886 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3888 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 388A E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     388C 2020     
0048 388E 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3890 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 3892 C160  34         mov   @tv.ruler.visible,tmp1
     3894 A210     
0056 3896 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 3898 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     389A 1000     
0058 389C 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 389E 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     38A0 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 38A2 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38A4 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38A6 C160  34         mov   @tv.ruler.visible,tmp1
     38A8 A210     
0071                                                   ; Ruler visible?
0072 38AA 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38AC C160  34         mov   @cmdb.visible,tmp1
     38AE A702     
0076 38B0 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38B2 FFFF     
0077 38B4 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38B6 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38B8 FF00     
0081 38BA 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38BC 00F0     
0082 38BE C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38C0 A05A     
0083               
0084 38C2 C120  34         mov   @ramsat,tmp0
     38C4 A056     
0085 38C6 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38C8 00FF     
0086 38CA 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38CC 0800     
0087 38CE C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38D0 A05E     
0088               
0089 38D2 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38D4 04C5  14         clr   tmp1
0095 38D6 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38D8 A05D     
0096                                                   ; / by transparant color
0097 38DA D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38DC A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38DE 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38E0 24E6     
0104 38E2 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38E4 A056     
     38E6 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38E8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38EA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38EE C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38F0 0460  28         b     @slotok               ; Exit task
     38F2 2F34     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38F4 0649  14         dect  stack
0009 38F6 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 38F8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     38FA 307A     
0014 38FC 600C                   data bank6.rom        ; | i  p0 = bank address
0015 38FE 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 3900 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 3902 C2F9  30         mov   *stack+,r11           ; Pop r11
0022 3904 0460  28         b     @slotok               ; Exit task
     3906 2F34     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3908 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     390A A22C     
0010 390C 1301  14         jeq   task.oneshot.exit
0011               
0012 390E 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3910 0460  28         b     @slotok                ; Exit task
     3912 2F34     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3914 0000             data  >0000,>8201           ; Cursor
     3916 8201     
0014 3918 0000             data  >0000,>8301           ; Current line indicator     <
     391A 8301     
0015 391C 0820             data  >0820,>8401           ; Current column indicator   v
     391E 8401     
0016               nosprite:
0017 3920 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               ***************************************************************
0020               * Tab positions
0021               ********|*****|*********************|**************************
0022               tv.tabs.table.lr:
0023 3922 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3924 0C19     
0024 3926 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3928 3B4F     
0025 392A FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     392C 0000     
0026                                                   ; /   >ff means end-of-list.
0027               
0028               tv.tabs.table.rl:
0029 392E 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3930 2D1E     
0030 3932 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3934 0700     
0031 3936 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3938 0000     
0032                                                   ; /   >ff means end-of-list.
0033               
0034               ***************************************************************
0035               * Constants for numbers 0-10
0036               ********|*****|*********************|**************************
0037      2000     const.0       equ   w$0000          ; 0
0038      2002     const.1       equ   w$0001          ; 1
0039      2004     const.2       equ   w$0002          ; 2
0040 393A 0003     const.3       data  3               ; 3
0041      2006     const.4       equ   w$0004          ; 4
0042 393C 0005     const.5       data  5               ; 5
0043 393E 0006     const.6       data  6               ; 6
0044 3940 0007     const.7       data  7               ; 7
0045      2008     const.8       equ   w$0008          ; 8
0046 3942 0009     const.9       data  9               ; 9
0047 3944 000A     const.10      data  10              ; 10 ; A
0048 3946 000B     const.11      data  11              ; 11 ; B
0049 3948 000C     const.12      data  12              ; 12 ; C
0050 394A 000D     const.13      data  13              ; 13 ; D
0051 394C 000E     const.14      data  14              ; 14 ; E
0052 394E 000F     const.15      data  15              ; 15 ; F
0053 3950 0010     const.16      data  16              ; 16
0054 3952 0020     const.32      data  32              ; 32
0055 3954 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 3956 012F     txt.slash          stri '/'
0008                                  even
0009 3958 013A     txt.colon          stri ':'
0010                                  even
0011 395A 0520     txt.bottom         stri '  BOT'
     395C 2042     
     395E 4F54     
0012                                  even
0013 3960 044F     txt.ovrwrite       stri 'OVR '
     3962 5652     
     3964 20       
0014                                  even
0015 3966 0449     txt.insert         stri 'INS '
     3968 4E53     
     396A 20       
0016                                  even
0017 396C 0449     txt.autoinsert     stri 'INS+'
     396E 4E53     
     3970 2B       
0018                                  even
0019 3972 012A     txt.star           stri '*'
0020                                  even
0021 3974 011D     txt.lockicon       byte 1,29
0022                                  even
0023 3976 0A4C     txt.loading        stri 'Loading...'
     3978 6F61     
     397A 6469     
     397C 6E67     
     397E 2E2E     
     3980 2E       
0024                                  even
0025 3982 0A53     txt.saving         stri 'Saving....'
     3984 6176     
     3986 696E     
     3988 672E     
     398A 2E2E     
     398C 2E       
0026                                  even
0027 398E 0C50     txt.printing       stri 'Printing....'
     3990 7269     
     3992 6E74     
     3994 696E     
     3996 672E     
     3998 2E2E     
     399A 2E       
0028                                  even
0029 399C 0C53     txt.searching      stri 'Searching...'
     399E 6561     
     39A0 7263     
     39A2 6869     
     39A4 6E67     
     39A6 2E2E     
     39A8 2E       
0030                                  even
0031 39AA 1244     txt.block.del      stri 'Deleting block....'
     39AC 656C     
     39AE 6574     
     39B0 696E     
     39B2 6720     
     39B4 626C     
     39B6 6F63     
     39B8 6B2E     
     39BA 2E2E     
     39BC 2E       
0032                                  even
0033 39BE 1143     txt.block.copy     stri 'Copying block....'
     39C0 6F70     
     39C2 7969     
     39C4 6E67     
     39C6 2062     
     39C8 6C6F     
     39CA 636B     
     39CC 2E2E     
     39CE 2E2E     
0034                                  even
0035 39D0 104D     txt.block.move     stri 'Moving block....'
     39D2 6F76     
     39D4 696E     
     39D6 6720     
     39D8 626C     
     39DA 6F63     
     39DC 6B2E     
     39DE 2E2E     
     39E0 2E       
0036                                  even
0037 39E2 1053     txt.block.save     stri 'Saving block....'
     39E4 6176     
     39E6 696E     
     39E8 6720     
     39EA 626C     
     39EC 6F63     
     39EE 6B2E     
     39F0 2E2E     
     39F2 2E       
0038                                  even
0039 39F4 1843     txt.block.clip     stri 'Copying to clipboard....'
     39F6 6F70     
     39F8 7969     
     39FA 6E67     
     39FC 2074     
     39FE 6F20     
     3A00 636C     
     3A02 6970     
     3A04 626F     
     3A06 6172     
     3A08 642E     
     3A0A 2E2E     
     3A0C 2E       
0040                                  even
0041 3A0E 1250     txt.block.print    stri 'Printing block....'
     3A10 7269     
     3A12 6E74     
     3A14 696E     
     3A16 6720     
     3A18 626C     
     3A1A 6F63     
     3A1C 6B2E     
     3A1E 2E2E     
     3A20 2E       
0042                                  even
0043 3A22 1343     txt.clearmem       stri 'Clearing memory....'
     3A24 6C65     
     3A26 6172     
     3A28 696E     
     3A2A 6720     
     3A2C 6D65     
     3A2E 6D6F     
     3A30 7279     
     3A32 2E2E     
     3A34 2E2E     
0044                                  even
0045 3A36 1352     txt.readdir        stri 'Reading catalog....'
     3A38 6561     
     3A3A 6469     
     3A3C 6E67     
     3A3E 2063     
     3A40 6174     
     3A42 616C     
     3A44 6F67     
     3A46 2E2E     
     3A48 2E2E     
0046                                  even
0047 3A4A 0E4C     txt.done.load      stri 'Load completed'
     3A4C 6F61     
     3A4E 6420     
     3A50 636F     
     3A52 6D70     
     3A54 6C65     
     3A56 7465     
     3A58 64       
0048                                  even
0049 3A5A 1049     txt.done.insert    stri 'Insert completed'
     3A5C 6E73     
     3A5E 6572     
     3A60 7420     
     3A62 636F     
     3A64 6D70     
     3A66 6C65     
     3A68 7465     
     3A6A 64       
0050                                  even
0051 3A6C 1041     txt.done.append    stri 'Append completed'
     3A6E 7070     
     3A70 656E     
     3A72 6420     
     3A74 636F     
     3A76 6D70     
     3A78 6C65     
     3A7A 7465     
     3A7C 64       
0052                                  even
0053 3A7E 0E53     txt.done.save      stri 'Save completed'
     3A80 6176     
     3A82 6520     
     3A84 636F     
     3A86 6D70     
     3A88 6C65     
     3A8A 7465     
     3A8C 64       
0054                                  even
0055 3A8E 0E43     txt.done.copy      stri 'Copy completed'
     3A90 6F70     
     3A92 7920     
     3A94 636F     
     3A96 6D70     
     3A98 6C65     
     3A9A 7465     
     3A9C 64       
0056                                  even
0057 3A9E 0F50     txt.done.print     stri 'Print completed'
     3AA0 7269     
     3AA2 6E74     
     3AA4 2063     
     3AA6 6F6D     
     3AA8 706C     
     3AAA 6574     
     3AAC 6564     
0058                                  even
0059 3AAE 1044     txt.done.delete    stri 'Delete completed'
     3AB0 656C     
     3AB2 6574     
     3AB4 6520     
     3AB6 636F     
     3AB8 6D70     
     3ABA 6C65     
     3ABC 7465     
     3ABE 64       
0060                                  even
0061 3AC0 0F43     txt.done.clipboard stri 'Clipboard saved'
     3AC2 6C69     
     3AC4 7062     
     3AC6 6F61     
     3AC8 7264     
     3ACA 2073     
     3ACC 6176     
     3ACE 6564     
0062                                  even
0063 3AD0 0D43     txt.done.clipdev   stri 'Clipboard set'
     3AD2 6C69     
     3AD4 7062     
     3AD6 6F61     
     3AD8 7264     
     3ADA 2073     
     3ADC 6574     
0064                                  even
0065 3ADE 0B46     txt.fastmode       stri 'Fastmode IO'
     3AE0 6173     
     3AE2 746D     
     3AE4 6F64     
     3AE6 6520     
     3AE8 494F     
0066                                  even
0067 3AEA 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3AEC 6F20     
     3AEE 4465     
     3AF0 7669     
     3AF2 6365     
     3AF4 2F44     
     3AF6 6973     
     3AF8 6B2F     
     3AFA 5061     
     3AFC 7468     
0068                                  even
0069 3AFE 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3B00 6E63     
     3B02 7275     
     3B04 6E63     
     3B06 6869     
     3B08 6E67     
     3B0A 2054     
     3B0C 4920     
     3B0E 4261     
     3B10 7369     
     3B12 6320     
     3B14 6C69     
     3B16 6E65     
     3B18 2E2E     
     3B1A 2E2E     
0070                                  even
0071 3B1C 026B     txt.kb             stri 'kb'
     3B1E 62       
0072                                  even
0073 3B20 054C     txt.lines          stri 'Lines'
     3B22 696E     
     3B24 6573     
0074                                  even
0075 3B26 0A5B     txt.newfile        stri '[New file]'
     3B28 4E65     
     3B2A 7720     
     3B2C 6669     
     3B2E 6C65     
     3B30 5D       
0076                                  even
0077 3B32 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B34 5449     
     3B36 2042     
     3B38 6173     
     3B3A 6963     
     3B3C 2023     
     3B3E 315D     
0078                                  even
0079 3B40 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B42 5449     
     3B44 2042     
     3B46 6173     
     3B48 6963     
     3B4A 2023     
     3B4C 325D     
0080                                  even
0081 3B4E 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B50 5449     
     3B52 2042     
     3B54 6173     
     3B56 6963     
     3B58 2023     
     3B5A 335D     
0082                                  even
0083 3B5C 0444     txt.filetype.dv80  stri 'DV80'
     3B5E 5638     
     3B60 30       
0084                                  even
0085 3B62 034D     txt.m1             stri 'M1='
     3B64 313D     
0086                                  even
0087 3B66 034D     txt.m2             stri 'M2='
     3B68 323D     
0088                                  even
0089 3B6A 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3B6C 392D     
     3B6E 4D65     
     3B70 6E75     
     3B72 2020     
     3B74 5E48     
     3B76 2D48     
     3B78 656C     
     3B7A 70       
0090                                  even
0091 3B7C 1C46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic# '
     3B7E 392D     
     3B80 4D65     
     3B82 6E75     
     3B84 2020     
     3B86 5E48     
     3B88 2D48     
     3B8A 656C     
     3B8C 7020     
     3B8E 2046     
     3B90 302D     
     3B92 4261     
     3B94 7369     
     3B96 6323     
     3B98 20       
0092                                  even
0093 3B9A 2B46     txt.keys.defaultc  stri 'F9-Menu  ^H-Help  ^,=Prev  ^.=Next  ^/=Done'
     3B9C 392D     
     3B9E 4D65     
     3BA0 6E75     
     3BA2 2020     
     3BA4 5E48     
     3BA6 2D48     
     3BA8 656C     
     3BAA 7020     
     3BAC 205E     
     3BAE 2C3D     
     3BB0 5072     
     3BB2 6576     
     3BB4 2020     
     3BB6 5E2E     
     3BB8 3D4E     
     3BBA 6578     
     3BBC 7420     
     3BBE 205E     
     3BC0 2F3D     
     3BC2 446F     
     3BC4 6E65     
0094                                  even
0095 3BC6 3746     txt.keys.defaultd  stri 'F9-Menu  ^H-Help  F0-Basic#   ^,=Prev  ^.=Next  ^/=Done'
     3BC8 392D     
     3BCA 4D65     
     3BCC 6E75     
     3BCE 2020     
     3BD0 5E48     
     3BD2 2D48     
     3BD4 656C     
     3BD6 7020     
     3BD8 2046     
     3BDA 302D     
     3BDC 4261     
     3BDE 7369     
     3BE0 6323     
     3BE2 2020     
     3BE4 205E     
     3BE6 2C3D     
     3BE8 5072     
     3BEA 6576     
     3BEC 2020     
     3BEE 5E2E     
     3BF0 3D4E     
     3BF2 6578     
     3BF4 7420     
     3BF6 205E     
     3BF8 2F3D     
     3BFA 446F     
     3BFC 6E65     
0096                                  even
0097               
0098 3BFE 3A46     txt.keys.block     stri 'F9-Exit  ^Copy  ^Move  ^Del  ^Save  ^Print  ^1-3=Clipboard'
     3C00 392D     
     3C02 4578     
     3C04 6974     
     3C06 2020     
     3C08 5E43     
     3C0A 6F70     
     3C0C 7920     
     3C0E 205E     
     3C10 4D6F     
     3C12 7665     
     3C14 2020     
     3C16 5E44     
     3C18 656C     
     3C1A 2020     
     3C1C 5E53     
     3C1E 6176     
     3C20 6520     
     3C22 205E     
     3C24 5072     
     3C26 696E     
     3C28 7420     
     3C2A 205E     
     3C2C 312D     
     3C2E 333D     
     3C30 436C     
     3C32 6970     
     3C34 626F     
     3C36 6172     
     3C38 64       
0099                                  even
0100 3C3A 2646     txt.keys.blocklock stri 'F9-Exit  ^Save  ^Print  ^1-3=Clipboard'
     3C3C 392D     
     3C3E 4578     
     3C40 6974     
     3C42 2020     
     3C44 5E53     
     3C46 6176     
     3C48 6520     
     3C4A 205E     
     3C4C 5072     
     3C4E 696E     
     3C50 7420     
     3C52 205E     
     3C54 312D     
     3C56 333D     
     3C58 436C     
     3C5A 6970     
     3C5C 626F     
     3C5E 6172     
     3C60 64       
0101                                  even
0102               
0103 3C62 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C64 392D     
     3C66 4261     
     3C68 636B     
     3C6A 2020     
     3C6C 4635     
     3C6E 2D41     
     3C70 7574     
     3C72 6F55     
     3C74 6E70     
     3C76 6163     
     3C78 6B20     
     3C7A 2053     
     3C7C 5041     
     3C7E 4345     
     3C80 2D55     
     3C82 6E70     
     3C84 6163     
     3C86 6B20     
     3C88 7072     
     3C8A 6F67     
     3C8C 7261     
     3C8E 6D       
0104                                  even
0105 3C90 020E     txt.alpha.down     data >020e,>0f00
     3C92 0F00     
0106 3C94 0110     txt.vertline       data >0110
0107 3C96 011C     txt.keymarker      byte 1,28
0108                                  even
0109 3C98 0120     txt.ws1            stri ' '
0110                                  even
0111 3C9A 0220     txt.ws2            stri '  '
     3C9C 20       
0112                                  even
0113 3C9E 0420     txt.ws4            stri '    '
     3CA0 2020     
     3CA2 20       
0114                                  even
0115      3C9E     txt.filetype.none  equ txt.ws4
0116               
0117 3CA4 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CA6 4920     
     3CA8 4261     
     3CAA 7369     
     3CAC 6320     
     3CAE 6D6F     
     3CB0 6465     
     3CB2 2061     
     3CB4 6374     
     3CB6 6976     
     3CB8 652E     
0118                                  even
0119               ;--------------------------------------------------------------
0120               ; Strings for error line pane
0121               ;--------------------------------------------------------------
0122 3CBA 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CBC 6169     
     3CBE 6C65     
     3CC0 6420     
     3CC2 6C6F     
     3CC4 6164     
     3CC6 696E     
     3CC8 6720     
     3CCA 6669     
     3CCC 6C65     
     3CCE 3A20     
0123                                  even
0124 3CD0 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CD2 6169     
     3CD4 6C65     
     3CD6 6420     
     3CD8 7361     
     3CDA 7669     
     3CDC 6E67     
     3CDE 2066     
     3CE0 696C     
     3CE2 653A     
     3CE4 20       
0125                                  even
0126 3CE6 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CE8 6169     
     3CEA 6C65     
     3CEC 6420     
     3CEE 7072     
     3CF0 696E     
     3CF2 7469     
     3CF4 6E67     
     3CF6 2074     
     3CF8 6F20     
     3CFA 6465     
     3CFC 7669     
     3CFE 6365     
     3D00 3A20     
0127                                  even
0128 3D02 164E     txt.io.nofile      stri 'No filename specified.'
     3D04 6F20     
     3D06 6669     
     3D08 6C65     
     3D0A 6E61     
     3D0C 6D65     
     3D0E 2073     
     3D10 7065     
     3D12 6369     
     3D14 6669     
     3D16 6564     
     3D18 2E       
0129                                  even
0130 3D1A 0B49     txt.memfull.load   stri 'Index full.'
     3D1C 6E64     
     3D1E 6578     
     3D20 2066     
     3D22 756C     
     3D24 6C2E     
0131                                  even
0132 3D26 2C43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range'
     3D28 6F70     
     3D2A 792F     
     3D2C 4D6F     
     3D2E 7665     
     3D30 2074     
     3D32 6172     
     3D34 6765     
     3D36 7420     
     3D38 6D75     
     3D3A 7374     
     3D3C 2062     
     3D3E 6520     
     3D40 6F75     
     3D42 7473     
     3D44 6964     
     3D46 6520     
     3D48 4D31     
     3D4A 2D4D     
     3D4C 3220     
     3D4E 7261     
     3D50 6E67     
     3D52 65       
0133                                  even
0134 3D54 2B46     txt.ioerr.break    stri 'File operation interrupted by user (break).'
     3D56 696C     
     3D58 6520     
     3D5A 6F70     
     3D5C 6572     
     3D5E 6174     
     3D60 696F     
     3D62 6E20     
     3D64 696E     
     3D66 7465     
     3D68 7272     
     3D6A 7570     
     3D6C 7465     
     3D6E 6420     
     3D70 6279     
     3D72 2075     
     3D74 7365     
     3D76 7220     
     3D78 2862     
     3D7A 7265     
     3D7C 616B     
     3D7E 292E     
0135                                  even
0136               ;--------------------------------------------------------------
0137               ; Strings for command buffer
0138               ;--------------------------------------------------------------
0139 3D80 013E     txt.cmdb.prompt    stri '>'
0140                                  even
0141 3D82 0D43     txt.colorscheme    stri 'Color scheme:'
     3D84 6F6C     
     3D86 6F72     
     3D88 2073     
     3D8A 6368     
     3D8C 656D     
     3D8E 653A     
0142                                  even
0143               ;--------------------------------------------------------------
0144               ; Strings for command buffer
0145               ;--------------------------------------------------------------
0146 3D90 0102     txt.picker.icon1   byte 1,2
0147                                  even
0148 3D92 0103     txt.picker.icon2   byte 1,3
0149                                  even
0150               
0151               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D94 0650     def.printer.fname   stri 'PI.PIO'
     3D96 492E     
     3D98 5049     
     3D9A 4F       
0008 3D9B   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D9C 4453     
     3D9E 4B31     
     3DA0 2E43     
     3DA2 4C49     
     3DA4 50       
0009                                   even
0010 3DA6 0954     def.clip.fname.b    stri 'TIPI.CLIP'
     3DA8 4950     
     3DAA 492E     
     3DAC 434C     
     3DAE 4950     
0011                                   even
0012 3DB0 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DB2 4453     
     3DB4 4B2C     
     3DB6 4844     
     3DB8 582C     
     3DBA 4944     
     3DBC 452C     
     3DBE 5049     
     3DC0 2E2C     
     3DC2 5049     
     3DC4 4F2C     
     3DC6 5449     
     3DC8 5049     
     3DCA 2E2C     
     3DCC 5244     
     3DCE 2C53     
     3DD0 4353     
     3DD2 2C53     
     3DD4 4444     
     3DD6 2C57     
     3DD8 4453     
     3DDA 2C52     
     3DDC 5332     
     3DDE 3332     
0013                                   even
0014 3DE0 0546     def.fg99.fname      stri 'FCMDC'
     3DE2 434D     
     3DE4 4443     
0015                                   even
                   < ram.resident.asm
                   < stevie_b4.asm
0052                       ;------------------------------------------------------
0053                       ; Activate bank 1 and branch to  >6036
0054                       ;------------------------------------------------------
0055 3DE6 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3DE8 6002     
0056               
0060               
0061 3DEA 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3DEC 6046     
0062               ***************************************************************
0063               * Step 3: Include main editor modules
0064               ********|*****|*********************|**************************
0065               main:
0066                       aorg  kickstart.code2       ; >6046
0067 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0068                       ;-----------------------------------------------------------------------
0069                       ; Logic for Framebuffer
0070                       ;-----------------------------------------------------------------------
0071                       copy  "fb.cursor.top.asm"     ; Cursor top of file
     **** ****     > fb.cursor.top.asm
0001               * FILE......: fb.cursor.top.asm
0002               * Purpose...: Move cursor to top of file
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.top
0007               * Move cursor to top of file
0008               ***************************************************************
0009               * bl @fb.cursor.top
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.top:
0021 604A 0649  14         dect  stack
0022 604C C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Cursor top
0025                       ;------------------------------------------------------
0026 604E 8820  50         c     @fb.row.dirty,@w$ffff
     6050 A30A     
     6052 2022     
0027 6054 1604  14         jne   fb.cursor.top.refresh
0028               
0029 6056 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6058 7D3A     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 605A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     605C A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh page
0038                       ;-------------------------------------------------------
0039               fb.cursor.top.refresh:
0040 605E 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     6060 A006     
0041 6062 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6064 A312     
0042               
0043 6066 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6068 A008     
0044               
0045 606A 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     606C 6514     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               fb.cursor.top.exit:
0052 606E C2F9  30         mov   *stack+,r11           ; Pop r11
0053 6070 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0072                       copy  "fb.cursor.topscr.asm"  ; Cursor top of screen
     **** ****     > fb.cursor.topscr.asm
0001               * FILE......: fb.cursor.top.asm
0002               * Purpose...: Move cursor to top of screen in editor buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.topscr
0007               * Move cursor to top of screen in frame buffer
0008               ***************************************************************
0009               * bl @fb.cursor.topscr
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.topscr:
0021 6072 0649  14         dect  stack
0022 6074 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current row if dirty
0025                       ;-------------------------------------------------------
0026 6076 8820  50         c     @fb.row.dirty,@w$ffff
     6078 A30A     
     607A 2022     
0027 607C 1604  14         jne   fb.cursor.topscr.refresh
0028               
0029 607E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6080 7D3A     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 6082 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6084 A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh screen
0038                       ;-------------------------------------------------------
0039               fb.cursor.topscr.refresh:
0040 6086 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     6088 A304     
     608A A006     
0041 608C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     608E A008     
0042               
0043 6090 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     6092 6514     
0044                                                   ; | i  @parm1 = Top line in editor buffer
0045                                                   ; / i  @parm2 = Row offset in frame buffer
0046                       ;-------------------------------------------------------
0047                       ; Exit
0048                       ;-------------------------------------------------------
0049               fb.cursor.topscr.exit:
0050 6094 C2F9  30         mov   *stack+,r11           ; Pop r11
0051 6096 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0073                       copy  "fb.cursor.bot.asm"     ; Cursor bottom of file
     **** ****     > fb.cursor.bot.asm
0001               * FILE......: fb.cursor.bot.asm
0002               * Purpose...: Move cursor to bottom of file
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.bot
0007               * Move cursor to bottom of file
0008               ***************************************************************
0009               * bl @fb.cursor.bot
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.bot:
0021 6098 0649  14         dect  stack
0022 609A C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current row if dirty
0025                       ;-------------------------------------------------------
0026 609C 8820  50         c     @fb.row.dirty,@w$ffff
     609E A30A     
     60A0 2022     
0027 60A2 1604  14         jne   fb.cursor.bot.refresh
0028               
0029 60A4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     60A6 7D3A     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.row      = Current row in FB
0032                                                   ; | i   @fb.column   = Current column in FB
0033                                                   ; / i   @fb.colsline = Cols per line in FB
0034               
0035 60A8 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     60AA A30A     
0036                       ;-------------------------------------------------------
0037                       ; Refresh page
0038                       ;-------------------------------------------------------
0039               fb.cursor.bot.refresh:
0040 60AC 8820  50         c     @edb.lines,@fb.scrrows
     60AE A504     
     60B0 A31E     
0041 60B2 120E  14         jle   fb.cursor.bot.exit    ; Skip if whole editor buffer on screen
0042               
0043 60B4 C120  34         mov   @edb.lines,tmp0
     60B6 A504     
0044 60B8 6120  34         s     @fb.scrrows,tmp0
     60BA A31E     
0045 60BC C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     60BE A006     
0046 60C0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     60C2 A312     
0047               
0048 60C4 04E0  34         clr   @parm2                ; No row offset in frame buffer
     60C6 A008     
0049               
0050 60C8 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     60CA 6514     
0051                                                   ; | i  @parm1 = Top line in editor buffer
0052                                                   ; / i  @parm2 = Row offset in frame buffer
0053               
0054 60CC 06A0  32         bl    @fb.cursor.botscr     ; Position cursor at bottom of screen
     60CE 60D4     
0055                       ;-------------------------------------------------------
0056                       ; Exit
0057                       ;-------------------------------------------------------
0058               fb.cursor.bot.exit:
0059 60D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 60D2 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0074                       copy  "fb.cursor.botscr.asm"  ; Cursor bottom of screen
     **** ****     > fb.cursor.botscr.asm
0001               * FILE......: fb.cursor.botscr.asm
0002               * Purpose...: Move cursor to bottom of screen
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.botscr
0007               * Move cursor to bottom of screen
0008               ***************************************************************
0009               * bl @fb.cursor.botscr
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.botscr:
0021 60D4 0649  14         dect  stack
0022 60D6 C64B  30         mov   r11,*stack            ; Save return address
0023 60D8 0649  14         dect  stack
0024 60DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Crunch current row if dirty
0027                       ;-------------------------------------------------------
0028 60DC 8820  50         c     @fb.row.dirty,@w$ffff
     60DE A30A     
     60E0 2022     
0029 60E2 1604  14         jne   fb.cursor.botscr.cursor
0030               
0031 60E4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     60E6 7D3A     
0032                                                   ; \ i   @fb.top      = Address top row in FB
0033                                                   ; | i   @fb.row      = Current row in FB
0034                                                   ; | i   @fb.column   = Current column in FB
0035                                                   ; / i   @fb.colsline = Cols per line in FB
0036               
0037 60E8 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     60EA A30A     
0038                       ;-------------------------------------------------------
0039                       ; Position cursor
0040                       ;-------------------------------------------------------
0041               fb.cursor.botscr.cursor:
0042 60EC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     60EE A31C     
0043 60F0 8820  50         c     @fb.scrrows,@edb.lines
     60F2 A31E     
     60F4 A504     
0044 60F6 1503  14         jgt   fb.cursor.botscr.eof
0045 60F8 C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     60FA A31E     
0046 60FC 1002  14         jmp   !
0047                       ;-------------------------------------------------------
0048                       ; Cursor at EOF
0049                       ;-------------------------------------------------------
0050               fb.cursor.botscr.eof:
0051 60FE C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     6100 A504     
0052                       ;-------------------------------------------------------
0053                       ; Position cursor
0054                       ;-------------------------------------------------------
0055 6102 0604  14 !       dec   tmp0                  ; Base 0
0056 6104 C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     6106 A306     
0057 6108 04E0  34         clr   @fb.column            ; Frame buffer column 0
     610A A30C     
0058               
0059 610C C120  34         mov   @fb.row,tmp0          ;
     610E A306     
0060 6110 0A84  32         sla   tmp0,8                ; Position cursor
0061 6112 C804  30         mov   tmp0,@wyx             ;
     6114 832A     
0062               
0063 6116 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6118 319E     
0064                                                   ; \ i   @fb.top      = Address top row in FB
0065                                                   ; | i   @fb.topline  = Top line in FB
0066                                                   ; | i   @fb.row      = Current row in FB
0067                                                   ; |                  (offset 0..@fb.scrrows)
0068                                                   ; | i   @fb.column   = Current column in FB
0069                                                   ; | i   @fb.colsline = Columns per line FB
0070                                                   ; |
0071                                                   ; / o   @fb.current  = Updated pointer
0072               
0073 611A 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     611C 37A8     
0074                                                   ; | i  @fb.row        = Row in frame buffer
0075                                                   ; / o  @fb.row.length = Length of row
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079               fb.cursor.botscr.exit:
0080 611E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0081 6120 C2F9  30         mov   *stack+,r11           ; Pop r11
0082 6122 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0075                       copy  "fb.cursor.up.asm"      ; Cursor up
     **** ****     > fb.cursor.up.asm
0001               * FILE......: fb.cursor.up.asm
0002               * Purpose...: Move the cursor up 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.up
0007               * Move cursor up 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.up
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.up
0021 6124 0649  14         dect  stack
0022 6126 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current line if dirty
0025                       ;-------------------------------------------------------
0026 6128 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     612A A31C     
0027 612C 8820  50         c     @fb.row.dirty,@w$ffff
     612E A30A     
     6130 2022     
0028 6132 1604  14         jne   fb.cursor.up.cursor
0029               
0030 6134 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6136 7D3A     
0031                                                   ; \ i   @fb.top      = Address top row in FB
0032                                                   ; | i   @fb.row      = Current row in FB
0033                                                   ; | i   @fb.column   = Current column in FB
0034                                                   ; / i   @fb.colsline = Cols per line in FB
0035               
0036 6138 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     613A A30A     
0037                       ;-------------------------------------------------------
0038                       ; Move cursor
0039                       ;-------------------------------------------------------
0040               fb.cursor.up.cursor:
0041 613C C120  34         mov   @fb.row,tmp0
     613E A306     
0042 6140 150B  14         jgt   fb.cursor.up.cursor_up
0043                                                   ; Move cursor up if fb.row > 0
0044 6142 C120  34         mov   @fb.topline,tmp0      ; Do we need to scroll?
     6144 A304     
0045 6146 130C  14         jeq   fb.cursor.up.set_cursorx
0046                                                   ; At top, only position cursor X
0047                       ;-------------------------------------------------------
0048                       ; Scroll 1 line
0049                       ;-------------------------------------------------------
0050 6148 0604  14         dec   tmp0                  ; fb.topline--
0051 614A C804  38         mov   tmp0,@parm1           ; Scroll one line up
     614C A006     
0052               
0053 614E 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6150 68EA     
0054                                                   ; | i  @parm1 = Line to start with
0055                                                   ; /             (becomes @fb.topline)
0056               
0057 6152 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6154 A312     
0058 6156 1004  14         jmp   fb.cursor.up.set_cursorx
0059                       ;-------------------------------------------------------
0060                       ; Move cursor up
0061                       ;-------------------------------------------------------
0062               fb.cursor.up.cursor_up:
0063 6158 0620  34         dec   @fb.row               ; Row-- in screen buffer
     615A A306     
0064 615C 06A0  32         bl    @up                   ; Row-- VDP cursor
     615E 2734     
0065                       ;-------------------------------------------------------
0066                       ; Check line length and position cursor
0067                       ;-------------------------------------------------------
0068               fb.cursor.up.set_cursorx:
0069 6160 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6162 37A8     
0070                                                   ; | i  @fb.row        = Row in frame buffer
0071                                                   ; / o  @fb.row.length = Length of row
0072               
0073 6164 8820  50         c     @fb.column,@fb.row.length
     6166 A30C     
     6168 A308     
0074 616A 1207  14         jle   fb.cursor.up.exit
0075                       ;-------------------------------------------------------
0076                       ; Adjust cursor column position
0077                       ;-------------------------------------------------------
0078 616C C820  54         mov   @fb.row.length,@fb.column
     616E A308     
     6170 A30C     
0079 6172 C120  34         mov   @fb.column,tmp0
     6174 A30C     
0080 6176 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6178 273E     
0081                       ;-------------------------------------------------------
0082                       ; Exit
0083                       ;-------------------------------------------------------
0084               fb.cursor.up.exit:
0085 617A 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     617C 319E     
0086                                                   ; \ i   @fb.top      = Address top row in FB
0087                                                   ; | i   @fb.topline  = Top line in FB
0088                                                   ; | i   @fb.row      = Current row in FB
0089                                                   ; |                  (offset 0..@fb.scrrows)
0090                                                   ; | i   @fb.column   = Current column in FB
0091                                                   ; | i   @fb.colsline = Columns per line FB
0092                                                   ; |
0093                                                   ; / o   @fb.current  = Updated pointer
0094               
0098               
0099 617E C2F9  30         mov   *stack+,r11           ; Pop r11
0100 6180 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0076                       copy  "fb.cursor.down.asm"    ; Cursor down
     **** ****     > fb.cursor.down.asm
0001               * FILE......: fb.cursor.down.asm
0002               * Purpose...: Move the cursor down 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.down
0007               * Logic for moving cursor down 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.down
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.down:
0021 6182 0649  14         dect  stack
0022 6184 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Last line?
0025                       ;------------------------------------------------------
0026 6186 8820  50         c     @fb.row,@edb.lines    ; Last line in editor buffer ?
     6188 A306     
     618A A504     
0027 618C 1332  14         jeq   fb.cursor.down.exit
0028                                                   ; Yes, skip further processing
0029 618E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6190 A31C     
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6192 8820  50         c     @fb.row.dirty,@w$ffff
     6194 A30A     
     6196 2022     
0034 6198 1604  14         jne   fb.cursor.down.move
0035               
0036 619A 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     619C 7D3A     
0037                                                   ; \ i   @fb.top      = Address top row in FB
0038                                                   ; | i   @fb.row      = Current row in FB
0039                                                   ; | i   @fb.column   = Current column in FB
0040                                                   ; / i   @fb.colsline = Cols per line in FB
0041               
0042 619E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     61A0 A30A     
0043                       ;-------------------------------------------------------
0044                       ; Move cursor
0045                       ;-------------------------------------------------------
0046               fb.cursor.down.move:
0047                       ;-------------------------------------------------------
0048                       ; EOF reached?
0049                       ;-------------------------------------------------------
0050 61A2 C120  34         mov   @fb.topline,tmp0
     61A4 A304     
0051 61A6 A120  34         a     @fb.row,tmp0
     61A8 A306     
0052 61AA 8120  34         c     @edb.lines,tmp0       ; fb.topline + fb.row = edb.lines ?
     61AC A504     
0053 61AE 1314  14         jeq   fb.cursor.down.set_cursorx
0054                                                   ; Yes, only position cursor X
0055                       ;-------------------------------------------------------
0056                       ; Check if scrolling required
0057                       ;-------------------------------------------------------
0058 61B0 C120  34         mov   @fb.scrrows,tmp0
     61B2 A31E     
0059 61B4 0604  14         dec   tmp0
0060 61B6 8120  34         c     @fb.row,tmp0
     61B8 A306     
0061 61BA 110A  14         jlt   fb.cursor.down.cursor
0062                       ;-------------------------------------------------------
0063                       ; Scroll 1 line
0064                       ;-------------------------------------------------------
0065 61BC C820  54         mov   @fb.topline,@parm1
     61BE A304     
     61C0 A006     
0066 61C2 05A0  34         inc   @parm1
     61C4 A006     
0067               
0068 61C6 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     61C8 68EA     
0069                                                   ; | i  @parm1 = Line to start with
0070                                                   ; /             (becomes @fb.topline)
0071               
0072 61CA 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     61CC A312     
0073 61CE 1004  14         jmp   fb.cursor.down.set_cursorx
0074                       ;-------------------------------------------------------
0075                       ; Move cursor down a row, there are still rows left
0076                       ;-------------------------------------------------------
0077               fb.cursor.down.cursor:
0078 61D0 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     61D2 A306     
0079 61D4 06A0  32         bl    @down                 ; Row++ VDP cursor
     61D6 272C     
0080                       ;-------------------------------------------------------
0081                       ; Check line length and position cursor
0082                       ;-------------------------------------------------------
0083               fb.cursor.down.set_cursorx:
0084 61D8 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     61DA 37A8     
0085                                                   ; | i  @fb.row        = Row in frame buffer
0086                                                   ; / o  @fb.row.length = Length of row
0087               
0088 61DC 8820  50         c     @fb.column,@fb.row.length
     61DE A30C     
     61E0 A308     
0089 61E2 1207  14         jle   fb.cursor.down.exit
0090                                                   ; Exit
0091                       ;-------------------------------------------------------
0092                       ; Adjust cursor column position
0093                       ;-------------------------------------------------------
0094 61E4 C820  54         mov   @fb.row.length,@fb.column
     61E6 A308     
     61E8 A30C     
0095 61EA C120  34         mov   @fb.column,tmp0
     61EC A30C     
0096 61EE 06A0  32         bl    @xsetx                ; Set VDP cursor X
     61F0 273E     
0097                       ;-------------------------------------------------------
0098                       ; Exit
0099                       ;-------------------------------------------------------
0100               fb.cursor.down.exit:
0101 61F2 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     61F4 319E     
0102                                                   ; \ i   @fb.top      = Address top row in FB
0103                                                   ; | i   @fb.topline  = Top line in FB
0104                                                   ; | i   @fb.row      = Current row in FB
0105                                                   ; |                  (offset 0..@fb.scrrows)
0106                                                   ; | i   @fb.column   = Current column in FB
0107                                                   ; | i   @fb.colsline = Columns per line FB
0108                                                   ; |
0109                                                   ; / o   @fb.current  = Updated pointer
0110               
0114               
0115 61F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 61F8 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0077                       copy  "fb.cursor.home.asm"    ; Cursor home
     **** ****     > fb.cursor.home.asm
0001               * FILE......: fb.cursor.home.asm
0002               * Purpose...: Move cursor home
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.home
0007               * Move cursor home
0008               ***************************************************************
0009               * bl @fb.cursor.home
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ********|*****|*********************|**************************
0020               fb.cursor.home:
0021 61FA 0649  14         dect  stack
0022 61FC C64B  30         mov   r11,*stack            ; Save return address
0023 61FE 0649  14         dect  stack
0024 6200 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Cursor home
0027                       ;------------------------------------------------------
0028 6202 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6204 A31C     
0029 6206 C120  30         mov   @wyx,tmp0
     6208 832A     
0030 620A 0244  22         andi  tmp0,>ff00            ; Reset cursor X position to 0
     620C FF00     
0031 620E C804  30         mov   tmp0,@wyx             ; VDP cursor column=0
     6210 832A     
0032 6212 04E0  34         clr   @fb.column
     6214 A30C     
0033               
0034 6216 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6218 319E     
0035                                                   ; \ i   @fb.top      = Address top row in FB
0036                                                   ; | i   @fb.topline  = Top line in FB
0037                                                   ; | i   @fb.row      = Current row in FB
0038                                                   ; |                  (offset 0..@fb.scrrows)
0039                                                   ; | i   @fb.column   = Current column in FB
0040                                                   ; | i   @fb.colsline = Columns per line FB
0041                                                   ; |
0042                                                   ; / o   @fb.current  = Updated pointer
0043               
0044 621A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     621C A31C     
0045               
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               fb.cursor.home.exit:
0053 621E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 6220 C2F9  30         mov   *stack+,r11           ; Pop r11
0055 6222 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0078                       copy  "fb.insert.line.asm"    ; Insert new line
     **** ****     > fb.insert.line.asm
0001               * FILE......: fb.insert.line.asm
0002               * Purpose...: Insert new line
0003               
0004               ***************************************************************
0005               * fb.insert.line.asm
0006               * Insert new line
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Insert line on current line or on following line.
0012               *          @parm1  = 0  -> current line
0013               *          @parm1 <> 0  -> following line
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1
0020               ********|*****|*********************|**************************
0021               fb.insert.line:
0022 6224 0649  14         dect  stack
0023 6226 C64B  30         mov   r11,*stack            ; Save return address
0024 6228 0649  14         dect  stack
0025 622A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 622C 0649  14         dect  stack
0027 622E C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Initialisation
0030                       ;-------------------------------------------------------
0031 6230 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6232 A506     
0032 6234 04C5  14         clr   tmp1                  ; Offset is current line
0033               
0034 6236 C120  34         mov   @parm1,tmp0           ; Insert on current line or following line?
     6238 A006     
0035 623A 1301  14         jeq   !                     ; Current line
0036 623C 0585  14         inc   tmp1                  ; Offset is Following line
0037                       ;-------------------------------------------------------
0038                       ; Crunch current line if dirty
0039                       ;-------------------------------------------------------
0040 623E 8820  50 !       c     @fb.row.dirty,@w$ffff
     6240 A30A     
     6242 2022     
0041 6244 1604  14         jne   fb.insert.line.insert
0042               
0043 6246 06A0  32         bl    @edb.line.pack.fb     ; Pack current line in framebuffer
     6248 7D3A     
0044                                                   ; \ i  @fb.top      = Address top row in FB
0045                                                   ; | i  @fb.row      = Current row in FB
0046                                                   ; | i  @fb.column   = Current column in FB
0047                                                   ; / i  @fb.colsline = Columns per line in FB
0048               
0049 624A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     624C A30A     
0050                       ;-------------------------------------------------------
0051                       ; Insert entry in index
0052                       ;-------------------------------------------------------
0053               fb.insert.line.insert:
0054 624E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6250 319E     
0055                                                   ; \ i   @fb.top      = Address top row in FB
0056                                                   ; | i   @fb.topline  = Top line in FB
0057                                                   ; | i   @fb.row      = Current row in FB
0058                                                   ; |                  (offset 0..@fb.scrrows)
0059                                                   ; | i   @fb.column   = Current column in FB
0060                                                   ; | i   @fb.colsline = Columns per line FB
0061                                                   ; |
0062                                                   ; / o   @fb.current  = Updated pointer
0063               
0064 6252 C820  54         mov   @fb.topline,@parm1
     6254 A304     
     6256 A006     
0065 6258 A820  54         a     @fb.row,@parm1        ; Line number to insert
     625A A306     
     625C A006     
0066 625E A805  38         a     tmp1,@parm1           ; Add optional offset (for following line)
     6260 A006     
0067 6262 C820  54         mov   @edb.lines,@parm2     ; Last line to reorganize
     6264 A504     
     6266 A008     
0068               
0069 6268 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     626A 36C2     
0070                                                   ; \ i  parm1 = Line for insert
0071                                                   ; / i  parm2 = Last line to reorg
0072               
0073 626C 05A0  34         inc   @edb.lines            ; One line added to editor buffer
     626E A504     
0074 6270 04E0  34         clr   @fb.row.length        ; Current row length = 0
     6272 A308     
0075                       ;-------------------------------------------------------
0076                       ; Check/Adjust marker M1
0077                       ;-------------------------------------------------------
0078               fb.insert.line.m1:
0079 6274 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6276 A50E     
     6278 2022     
0080 627A 1308  14         jeq   fb.insert.line.m2     ; Yes, skip to M2 check
0081               
0082 627C 8820  50         c     @parm1,@edb.block.m1
     627E A006     
     6280 A50E     
0083 6282 1504  14         jgt   fb.insert.line.m2
0084 6284 05A0  34         inc   @edb.block.m1         ; M1++
     6286 A50E     
0085 6288 0720  34         seto  @fb.colorize          ; Set colorize flag
     628A A312     
0086                       ;-------------------------------------------------------
0087                       ; Check/Adjust marker M2
0088                       ;-------------------------------------------------------
0089               fb.insert.line.m2:
0090 628C 8820  50         c     @edb.block.m2,@w$ffff ; Marker M1 unset?
     628E A510     
     6290 2022     
0091 6292 1308  14         jeq   fb.insert.line.refresh
0092                                                   ; Yes, skip to refresh frame buffer
0093               
0094 6294 8820  50         c     @parm1,@edb.block.m2
     6296 A006     
     6298 A510     
0095 629A 1504  14         jgt   fb.insert.line.refresh
0096 629C 05A0  34         inc   @edb.block.m2         ; M2++
     629E A510     
0097 62A0 0720  34         seto  @fb.colorize          ; Set colorize flag
     62A2 A312     
0098                       ;-------------------------------------------------------
0099                       ; Refresh frame buffer and physical screen
0100                       ;-------------------------------------------------------
0101               fb.insert.line.refresh:
0102 62A4 C820  54         mov   @fb.topline,@parm1
     62A6 A304     
     62A8 A006     
0103               
0104 62AA 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     62AC 68EA     
0105                                                   ; | i  @parm1 = Line to start with
0106                                                   ; /             (becomes @fb.topline)
0107               
0108 62AE 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     62B0 A31A     
0109 62B2 06A0  32         bl    @fb.cursor.home       ; Move cursor home
     62B4 61FA     
0110                       ;-------------------------------------------------------
0111                       ; Exit
0112                       ;-------------------------------------------------------
0113               fb.insert.line.exit:
0114 62B6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0115 62B8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0116 62BA C2F9  30         mov   *stack+,r11           ; Pop r11
0117 62BC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0079                       copy  "fb.insert.char.asm"    ; Insert character
     **** ****     > fb.insert.char.asm
0001               * FILE......: fb.insert.char.asm
0002               * Purpose...: Insert character
0003               
0004               ***************************************************************
0005               * fb.insert.char.asm
0006               * Insert character
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = MSB has character to insert
0012               *          LSB = 0 move cursor right
0013               *          LSB > 0 do not move cursor
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1, tmp2, tmp3
0020               ********|*****|*********************|**************************
0021               fb.insert.char:
0022 62BE 0649  14         dect  stack
0023 62C0 C64B  30         mov   r11,*stack            ; Save return address
0024 62C2 0649  14         dect  stack
0025 62C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 62C6 0649  14         dect  stack
0027 62C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 62CA 0649  14         dect  stack
0029 62CC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 62CE 0649  14         dect  stack
0031 62D0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-------------------------------------------------------
0033                       ; Initialisation
0034                       ;-------------------------------------------------------
0035 62D2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     62D4 A506     
0036               
0037 62D6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     62D8 319E     
0038                                                   ; \ i   @fb.top      = Address top row in FB
0039                                                   ; | i   @fb.topline  = Top line in FB
0040                                                   ; | i   @fb.row      = Current row in FB
0041                                                   ; |                  (offset 0..@fb.scrrows)
0042                                                   ; | i   @fb.column   = Current column in FB
0043                                                   ; | i   @fb.colsline = Columns per line FB
0044                                                   ; |
0045                                                   ; / o   @fb.current  = Updated pointer
0046                       ;-------------------------------------------------------
0047                       ; Check 1 - Empty line
0048                       ;-------------------------------------------------------
0049               fb.insert.char.check1:
0050 62DA C120  34         mov   @fb.current,tmp0      ; Get pointer
     62DC A302     
0051 62DE C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     62E0 A308     
0052 62E2 1347  14         jeq   fb.insert.char.append ; Add character in append mode
0053                       ;-------------------------------------------------------
0054                       ; Check 2 - line-wrap if at column 80
0055                       ;-------------------------------------------------------
0056               fb.insert.char.check2:
0057 62E4 C160  34         mov   @fb.column,tmp1       ; \
     62E6 A30C     
0058 62E8 0285  22         ci    tmp1,colrow-1         ; | Skip if cursor < 80th column
     62EA 004F     
0059 62EC 1118  14         jlt   fb.insert.char.check3 ; /
0060               
0061 62EE C160  34         mov   @fb.row.length,tmp1   ; \
     62F0 A308     
0062 62F2 0285  22         ci    tmp1,colrow           ; | Skip if line length < 80
     62F4 0050     
0063 62F6 1613  14         jne   fb.insert.char.check3 ; /
0064                       ;-------------------------------------------------------
0065                       ; Wrap to new line
0066                       ;-------------------------------------------------------
0067 62F8 0649  14         dect  Stack
0068 62FA C660  46         mov   @parm1,*stack         ; Save character to add
     62FC A006     
0069               
0070 62FE 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6300 A506     
0071               
0072 6302 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6304 7D3A     
0073                                                   ; \ i   @fb.top      = Address top row in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; | i   @fb.column   = Current column in FB
0076                                                   ; / i   @fb.colsline = Cols per line in FB
0077               
0078 6306 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6308 A30A     
0079 630A 0720  34         seto  @parm1                ; Insert on following line
     630C A006     
0080               
0081 630E 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6310 6224     
0082                                                   ; \ i  @parm1 = 0 for insert current line
0083                                                   ; /            >0 for insert following line
0084               
0085 6312 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     6314 6182     
0086 6316 04C6  14         clr   tmp2                  ; Clear line length
0087               
0088 6318 C839  50         mov   *stack+,@parm1        ; Restore character to add
     631A A006     
0089 631C 102A  14         jmp   fb.insert.char.append ; Add character in append mode
0090                       ;-------------------------------------------------------
0091                       ; Check 3 - EOL
0092                       ;-------------------------------------------------------
0093               fb.insert.char.check3:
0094 631E 8820  50         c     @fb.column,@fb.row.length
     6320 A30C     
     6322 A308     
0095 6324 1326  14         jeq   fb.insert.char.append ; Add character in append mode
0096                       ;-------------------------------------------------------
0097                       ; Check 4 - Insert only until line length reaches 80th column
0098                       ;-------------------------------------------------------
0099               fb.insert.char.check4:
0100 6326 C160  34         mov   @fb.row.length,tmp1   ; \
     6328 A308     
0101 632A 0285  22         ci    tmp1,colrow           ; / 80th col reached?
     632C 0050     
0102 632E 1101  14         jlt   fb.insert.char.calc   ; No, continue
0103 6330 1022  14         jmp   fb.insert.char.exit   ; Yes, exit
0104                       ;-------------------------------------------------------
0105                       ; Calculate number of characters to move
0106                       ;-------------------------------------------------------
0107               fb.insert.char.calc:
0108 6332 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0109 6334 61E0  34         s     @fb.column,tmp3
     6336 A30C     
0110 6338 0607  14         dec   tmp3                  ; Remove base 1 offset
0111 633A A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0112 633C C144  18         mov   tmp0,tmp1
0113 633E 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0114 6340 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     6342 A30C     
0115                       ;-------------------------------------------------------
0116                       ; Loop from end of line until current character
0117                       ;-------------------------------------------------------
0118               fb.insert.char.loop:
0119 6344 D554  38         movb  *tmp0,*tmp1           ; Copy character
0120 6346 0604  14         dec   tmp0                  ; Adjust source pointer
0121 6348 0605  14         dec   tmp1                  ; Adjust target pointer
0122 634A 0606  14         dec   tmp2                  ; Adjust counter
0123 634C 16FB  14         jne   fb.insert.char.loop   ; All characters copied?
0124                       ;-------------------------------------------------------
0125                       ; Insert specified character at current position
0126                       ;-------------------------------------------------------
0127 634E D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     6350 A006     
0128                       ;-------------------------------------------------------
0129                       ; Save variables and exit
0130                       ;-------------------------------------------------------
0131 6352 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6354 A30A     
0132 6356 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6358 A31A     
0133 635A 05A0  34         inc   @fb.row.length        ; @fb.row.length
     635C A308     
0134               
0135 635E C120  34         mov   @parm1,tmp0           ; Get parameter
     6360 A006     
0136 6362 0244  22         andi  tmp0,>00ff            ; Keep LSB
     6364 00FF     
0137 6366 1607  14         jne   fb.insert.char.exit   ; Freeze cursor if LSB > 0
0138               
0139 6368 05A0  34         inc   @fb.column            ; \ Adjust cursor position
     636A A30C     
0140 636C 05A0  26         inc   @wyx                  ; /
     636E 832A     
0141 6370 1002  14         jmp   fb.insert.char.exit   ; Exit
0142                       ;-------------------------------------------------------
0143                       ; Add character in append mode
0144                       ;-------------------------------------------------------
0145               fb.insert.char.append:
0146 6372 06A0  32         bl    @fb.replace.char      ; Replace (overwrite) character
     6374 6382     
0147                                                   ; \ i  @parm1 = MSB character to replace
0148                                                   ; /
0149                       ;-------------------------------------------------------
0150                       ; Exit
0151                       ;-------------------------------------------------------
0152               fb.insert.char.exit:
0153 6376 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0154 6378 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0155 637A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0156 637C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0157 637E C2F9  30         mov   *stack+,r11           ; Pop r11
0158 6380 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0080                       copy  "fb.replace.char.asm"   ; Replace character
     **** ****     > fb.replace.char.asm
0001               * FILE......: fb.replace.char.asm
0002               * Purpose...: Replace (overwrite) character in line
0003               
0004               ***************************************************************
0005               * fb.replace.char.asm
0006               * Replace (overwrite) character in line
0007               ***************************************************************
0008               * bl @fb.replace.char.asm
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = MSB has character to replace
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               ********|*****|*********************|**************************
0019               fb.replace.char:
0020 6382 0649  14         dect  stack
0021 6384 C64B  30         mov   r11,*stack            ; Save return address
0022 6386 0649  14         dect  stack
0023 6388 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 638A 0649  14         dect  stack
0025 638C C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;-------------------------------------------------------
0027                       ; Initialisation
0028                       ;-------------------------------------------------------
0029 638E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6390 319E     
0030                                                   ; \ i   @fb.top      = Address top row in FB
0031                                                   ; | i   @fb.topline  = Top line in FB
0032                                                   ; | i   @fb.row      = Current row in FB
0033                                                   ; |                  (offset 0..@fb.scrrows)
0034                                                   ; | i   @fb.column   = Current column in FB
0035                                                   ; | i   @fb.colsline = Columns per line FB
0036                                                   ; |
0037                                                   ; / o   @fb.current  = Updated pointer
0038               
0039 6392 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6394 A302     
0040               
0041 6396 D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     6398 A006     
0042 639A 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     639C A30A     
0043 639E 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     63A0 A31A     
0044                       ;-------------------------------------------------------
0045                       ; Last column on screen reached?
0046                       ;-------------------------------------------------------
0047 63A2 C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79
     63A4 A30C     
0048 63A6 0285  22         ci    tmp1,colrow - 1       ; | Last column on screen?
     63A8 004F     
0049 63AA 1105  14         jlt   fb.replace.char.incx  ; / No, increase X position
0050               
0051 63AC 0205  20         li    tmp1,colrow           ; \
     63AE 0050     
0052 63B0 C805  38         mov   tmp1,@fb.row.length   ; | Yes, set row length and exit.
     63B2 A308     
0053 63B4 100B  14         jmp   fb.replace.char.exit  ; /
0054                       ;-------------------------------------------------------
0055                       ; Increase column
0056                       ;-------------------------------------------------------
0057               fb.replace.char.incx:
0058 63B6 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     63B8 A30C     
0059 63BA 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     63BC 832A     
0060                       ;-------------------------------------------------------
0061                       ; Update line length in frame buffer
0062                       ;-------------------------------------------------------
0063 63BE 8820  50         c     @fb.column,@fb.row.length
     63C0 A30C     
     63C2 A308     
0064                                                   ; column < line length ?
0065 63C4 1103  14         jlt   fb.replace.char.exit  ; Yes, don't update row length
0066 63C6 C820  54         mov   @fb.column,@fb.row.length
     63C8 A30C     
     63CA A308     
0067                                                   ; Set row length
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               fb.replace.char.exit:
0072 63CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 63CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 63D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 63D2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0081                       copy  "fb.null2char.asm"      ; Replace null characters in framebuf row
     **** ****     > fb.null2char.asm
0001               * FILE......: fb.null2char.asm
0002               * Purpose...: Replace all null characters with specified character
0003               
0004               ***************************************************************
0005               * fb.null2char
0006               * Replace all null characters with specified character
0007               ***************************************************************
0008               *  bl   @fb.null2char
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * tmp1 = Replacement character
0012               * tmp2 = Length of row
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2,tmp3
0019               ********|*****|*********************|**************************
0020               fb.null2char:
0021 63D4 0649  14         dect  stack
0022 63D6 C64B  30         mov   r11,*stack            ; Save return address
0023 63D8 0649  14         dect  stack
0024 63DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 63DC 0649  14         dect  stack
0026 63DE C645  30         mov   tmp1,*stack           ; Push tmp1
0027 63E0 0649  14         dect  stack
0028 63E2 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 63E4 0649  14         dect  stack
0030 63E6 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Sanity checks
0033                       ;-------------------------------------------------------
0034 63E8 C186  18         mov   tmp2,tmp2             ; Minimum 1 character
0035 63EA 1303  14         jeq   fb.null2char.crash
0036 63EC 0286  22         ci    tmp2,80               ; Maximum 80 characters
     63EE 0050     
0037 63F0 1204  14         jle   fb.null2char.init
0038                       ;------------------------------------------------------
0039                       ; Asserts failed
0040                       ;------------------------------------------------------
0041               fb.null2char.crash:
0042 63F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     63F4 FFCE     
0043 63F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     63F8 2026     
0044                       ;-------------------------------------------------------
0045                       ; Initialize
0046                       ;-------------------------------------------------------
0047               fb.null2char.init:
0048 63FA C1C5  18         mov   tmp1,tmp3             ; Get character to write
0049 63FC 0A87  32         sla   tmp3,8                ; LSB to MSB
0050 63FE 04E0  34         clr   @fb.column
     6400 A30C     
0051               
0052 6402 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6404 319E     
0053                                                   ; \ i   @fb.top      = Address top row in FB
0054                                                   ; | i   @fb.topline  = Top line in FB
0055                                                   ; | i   @fb.row      = Current row in FB
0056                                                   ; |                  (offset 0..@fb.scrrows)
0057                                                   ; | i   @fb.column   = Current column in FB
0058                                                   ; | i   @fb.colsline = Columns per line FB
0059                                                   ; |
0060                                                   ; / o   @fb.current  = Updated pointer
0061               
0062 6406 C120  34         mov   @fb.current,tmp0      ; Get position
     6408 A302     
0063                       ;-------------------------------------------------------
0064                       ; Loop over characters in line
0065                       ;-------------------------------------------------------
0066               fb.null2char.loop:
0067 640A 04C5  14         clr   tmp1
0068 640C D154  26         movb  *tmp0,tmp1            ; Get character
0069 640E 1603  14         jne   !                     ; Not a null character, skip it
0070 6410 0205  20         li    tmp1,>2a00            ; ASCII 32 in MSB
     6412 2A00     
0071 6414 D507  30         movb  tmp3,*tmp0            ; Replace null character
0072                       ;-------------------------------------------------------
0073                       ; Prepare for next iteration
0074                       ;-------------------------------------------------------
0075 6416 0584  14 !       inc   tmp0                  ; Move to next character
0076 6418 0606  14         dec   tmp2
0077 641A 15F7  14         jgt   fb.null2char.loop     ; Repeat until done
0078                       ;------------------------------------------------------
0079                       ; Exit
0080                       ;------------------------------------------------------
0081               fb.null2char.exit:
0082 641C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0083 641E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0084 6420 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0085 6422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 6424 C2F9  30         mov   *stack+,r11           ; Pop R11
0087 6426 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0082                       copy  "fb.tab.prev.asm"       ; Move cursor to previous tab position
     **** ****     > fb.tab.prev.asm
0001               * FILE......: fb.tab.prev.asm
0002               * Purpose...: Tabbing functionality in frame buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.tab.prev
0007               * Move cursor to previous tab position
0008               ***************************************************************
0009               *  bl   @fb.tab.prev
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * For simplicity reasons we're assuming base 1 during copy
0022               * (first line starts at 1 instead of 0).
0023               * Makes it easier when comparing values.
0024               ********|*****|*********************|**************************
0025               fb.tab.prev:
0026 6428 0649  14         dect  stack
0027 642A C64B  30         mov   r11,*stack            ; Save return address
0028 642C 0649  14         dect  stack
0029 642E C644  30         mov   tmp0,*stack           ; Push tmp0
0030 6430 0649  14         dect  stack
0031 6432 C645  30         mov   tmp1,*stack           ; Push tmp1
0032                       ;-------------------------------------------------------
0033                       ; Initialize
0034                       ;-------------------------------------------------------
0035 6434 0204  20         li    tmp0,tv.tabs.table.rl ; Get pointer to tabs table
     6436 392E     
0036                       ;-------------------------------------------------------
0037                       ; Find previous tab position
0038                       ;-------------------------------------------------------
0039               fb.tab.prev.loop:
0040 6438 D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0041 643A 0985  32         srl   tmp1,8                ; / Right align
0042               
0043 643C 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     643E 00FF     
0044 6440 1316  14         jeq   fb.tab.prev.eol       ; Yes, home cursor and exit
0045                       ;-------------------------------------------------------
0046                       ; Compare position
0047                       ;-------------------------------------------------------
0048 6442 8160  34         c     @fb.column,tmp1       ; Cursor < tab position?
     6444 A30C     
0049 6446 121B  14         jle   !                     ; Yes, next loop iteration
0050                       ;-------------------------------------------------------
0051                       ; Set cursor
0052                       ;-------------------------------------------------------
0053 6448 C805  38         mov   tmp1,@fb.column       ; Set cursor on tab position
     644A A30C     
0054               
0055 644C 0649  14         dect  stack
0056 644E C644  30         mov   tmp0,*stack           ; Push tmp0
0057               
0058 6450 C105  18         mov   tmp1,tmp0             ; \ Set VDP cursor column position
0059 6452 06A0  32         bl    @xsetx                ; / i  tmp0 = new X value
     6454 273E     
0060               
0061 6456 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062               
0063 6458 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     645A 319E     
0064                                                   ; \ i   @fb.top      = Address top row in FB
0065                                                   ; | i   @fb.topline  = Top line in FB
0066                                                   ; | i   @fb.row      = Current row in FB
0067                                                   ; |                  (offset 0..@fb.scrrows)
0068                                                   ; | i   @fb.column   = Current column in FB
0069                                                   ; | i   @fb.colsline = Columns per line FB
0070                                                   ; |
0071                                                   ; / o   @fb.current  = Updated pointer
0072               
0073 645C 0720  34         seto  @fb.row.dirty         ; Current row dirty in frame buffer
     645E A30A     
0074 6460 0720  34         seto  @fb.dirty             ; Frame buffer dirty
     6462 A31A     
0075 6464 0720  34         seto  @fb.status.dirty      ; Refresh status line
     6466 A31C     
0076 6468 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed)
     646A A506     
0077 646C 100A  14         jmp   fb.tab.prev.exit
0078                       ;-------------------------------------------------------
0079                       ; End-of-list reached, special treatment home cursor
0080                       ;-------------------------------------------------------
0081               fb.tab.prev.eol:
0082 646E 04E0  34         clr   @fb.column            ; Home cursor
     6470 A30C     
0083 6472 04C4  14         clr   tmp0                  ; Home cursor
0084               
0085 6474 06A0  32         bl    @xsetx                ; \ Set VDP cursor column position
     6476 273E     
0086                                                   ; / i  tmp0 = new X value
0087               
0088 6478 0720  34         seto  @fb.status.dirty      ; Refresh status line
     647A A31C     
0089               
0090 647C 1002  14         jmp   fb.tab.prev.exit      ; Exit
0091                       ;-------------------------------------------------------
0092                       ; Prepare for next iteration
0093                       ;-------------------------------------------------------
0094 647E 0606  14 !       dec   tmp2
0095 6480 15DB  14         jgt   fb.tab.prev.loop
0096                       ;------------------------------------------------------
0097                       ; Exit
0098                       ;------------------------------------------------------
0099               fb.tab.prev.exit:
0100 6482 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 6484 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 6486 C2F9  30         mov   *stack+,r11           ; Pop R11
0103 6488 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0083                       copy  "fb.tab.next.asm"       ; Move cursor to next tab position
     **** ****     > fb.tab.next.asm
0001               * FILE......: fb.tab.next.asm
0002               * Purpose...: Tabbing functionality in frame buffer
0003               
0004               
0005               ***************************************************************
0006               * fb.tab.next
0007               * Move cursor to next tab position
0008               ***************************************************************
0009               *  bl   @fb.tab.next
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * For simplicity reasons we're assuming base 1 during copy
0022               * (first line starts at 1 instead of 0).
0023               * Makes it easier when comparing values.
0024               ********|*****|*********************|**************************
0025               fb.tab.next:
0026 648A 0649  14         dect  stack
0027 648C C64B  30         mov   r11,*stack            ; Save return address
0028 648E 0649  14         dect  stack
0029 6490 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 6492 0649  14         dect  stack
0031 6494 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 6496 0649  14         dect  stack
0033 6498 C646  30         mov   tmp2,*stack           ; Push tmp2
0034                       ;-------------------------------------------------------
0035                       ; Initialize
0036                       ;-------------------------------------------------------
0037 649A 0204  20         li    tmp0,tv.tabs.table.lr ; Get pointer to tabs table
     649C 3922     
0038                       ;-------------------------------------------------------
0039                       ; Find next tab position
0040                       ;-------------------------------------------------------
0041               fb.tab.next.loop:
0042 649E D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0043 64A0 0985  32         srl   tmp1,8                ; / Right align
0044               
0045 64A2 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     64A4 00FF     
0046 64A6 1325  14         jeq   fb.tab.next.eol       ; Yes, home cursor and exit
0047                       ;-------------------------------------------------------
0048                       ; Compare position
0049                       ;-------------------------------------------------------
0050 64A8 8160  34         c     @fb.column,tmp1       ; Cursor > tab position?
     64AA A30C     
0051 64AC 142C  14         jhe   !                     ; Yes, next loop iteration
0052                       ;-------------------------------------------------------
0053                       ; Set cursor
0054                       ;-------------------------------------------------------
0055 64AE C185  18         mov   tmp1,tmp2             ; Set length of row
0056 64B0 0205  20         li    tmp1,32               ; Replacement character = ASCII 32
     64B2 0020     
0057               
0058 64B4 06A0  32         bl    @fb.null2char         ; Replace any null characters with space
     64B6 63D4     
0059                                                   ; \ i  tmp1 = Replacement character
0060                                                   ; / i  tmp2 = Length of row
0061               
0062 64B8 C146  18         mov   tmp2,tmp1             ; Restore tmp1
0063 64BA C805  38         mov   tmp1,@fb.column       ; Set cursor on tab position
     64BC A30C     
0064               
0065 64BE 0649  14         dect  stack
0066 64C0 C644  30         mov   tmp0,*stack           ; Push tmp0
0067               
0068 64C2 C105  18         mov   tmp1,tmp0             ; \ Set VDP cursor column position
0069 64C4 06A0  32         bl    @xsetx                ; / i  tmp0 = new X value
     64C6 273E     
0070               
0071 64C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072               
0073 64CA 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     64CC 319E     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.topline  = Top line in FB
0076                                                   ; | i   @fb.row      = Current row in FB
0077                                                   ; |                  (offset 0..@fb.scrrows)
0078                                                   ; | i   @fb.column   = Current column in FB
0079                                                   ; | i   @fb.colsline = Columns per line FB
0080                                                   ; |
0081                                                   ; / o   @fb.current  = Updated pointer
0082               
0083 64CE 0720  34         seto  @fb.row.dirty         ; Current row dirty in frame buffer
     64D0 A30A     
0084 64D2 0720  34         seto  @fb.dirty             ; Frame buffer dirty
     64D4 A31A     
0085 64D6 0720  34         seto  @fb.status.dirty      ; Refresh status line
     64D8 A31C     
0086 64DA 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed)
     64DC A506     
0087                       ;-------------------------------------------------------
0088                       ; Set row length
0089                       ;-------------------------------------------------------
0090 64DE C120  34         mov   @fb.column,tmp0
     64E0 A30C     
0091 64E2 0584  14         inc   tmp0                  ; Base 1
0092 64E4 8820  50         c     @fb.column,@fb.row.length
     64E6 A30C     
     64E8 A308     
0093 64EA 110F  14         jlt   fb.tab.next.exit      ; No need to set row length, exit
0094 64EC C804  38         mov   tmp0,@fb.row.length   ; Set new length
     64EE A308     
0095 64F0 100C  14         jmp   fb.tab.next.exit      ; Exit
0096                       ;-------------------------------------------------------
0097                       ; End-of-list reached, special treatment home cursor
0098                       ;-------------------------------------------------------
0099               fb.tab.next.eol:
0100 64F2 04E0  34         clr   @fb.column            ; Home cursor
     64F4 A30C     
0101 64F6 04C4  14         clr   tmp0                  ; Home cursor
0102               
0103 64F8 06A0  32         bl    @xsetx                ; \ Set VDP cursor column position
     64FA 273E     
0104                                                   ; / i  tmp0 = new X value
0105               
0106 64FC 0720  34         seto  @fb.status.dirty      ; Refresh status line
     64FE A31C     
0107               
0108 6500 04E0  34         clr   @edb.insmode          ; Turn on overwrite mode
     6502 A50A     
0109                                                   ; This is a hack really. Because of the
0110                                                   ; whitespace that is dragged by tabbing, we
0111                                                   ; have a full 80 characters line so insert
0112                                                   ; does not work.
0113               
0114 6504 1002  14         jmp   fb.tab.next.exit      ; Exit
0115                       ;-------------------------------------------------------
0116                       ; Prepare for next iteration
0117                       ;-------------------------------------------------------
0118 6506 0606  14 !       dec   tmp2
0119 6508 15CA  14         jgt   fb.tab.next.loop
0120                       ;------------------------------------------------------
0121                       ; Exit
0122                       ;------------------------------------------------------
0123               fb.tab.next.exit:
0124 650A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0125 650C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0126 650E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 6510 C2F9  30         mov   *stack+,r11           ; Pop R11
0128 6512 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0084                       copy  "fb.goto.toprow.asm"    ; Refresh FB with top-row and row offset
     **** ****     > fb.goto.toprow.asm
0001               * FILE......: fb.goto.toprow.asm
0002               * Purpose...: Refresh frame buffer with specified top-row and row offset
0003               
0004               
0005               ***************************************************************
0006               * fb.goto.toprow
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               ****************************************************************
0010               * bl @fb.goto.toprow
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * @parm1  = Line in editor buffer to display as top row (goto)
0014               * @parm2  = Row offset in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0
0021               ********|*****|*********************|**************************
0022               fb.goto.toprow:
0023 6514 0649  14         dect  stack
0024 6516 C64B  30         mov   r11,*stack            ; Save return address
0025 6518 0649  14         dect  stack
0026 651A C644  30         mov   tmp0,*stack           ; Push tmp0
0027                       ;-------------------------------------------------------
0028                       ; Assert on line
0029                       ;-------------------------------------------------------
0030 651C C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     651E A006     
0031 6520 8120  34         c     @edb.lines,tmp0       ; /
     6522 A504     
0032 6524 1B05  14         jh    !                     ; No, keep on going
0033 6526 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     6528 A504     
     652A A006     
0034 652C 0620  34         dec   @parm1                ; / Base 0
     652E A006     
0035                       ;-------------------------------------------------------
0036                       ; Assert on row offset in frame buffer
0037                       ;-------------------------------------------------------
0038 6530 8820  50 !       c     @parm2,@fb.scrrows    ; Row offset off page ?
     6532 A008     
     6534 A31E     
0039 6536 1104  14         jlt   fb.goto.toprow.offset ; No, use row offset
0040 6538 C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     653A A31E     
     653C A306     
0041 653E 1003  14         jmp   fb.goto.toprow.line   ; Goto line
0042               fb.goto.toprow.offset:
0043 6540 C820  54         mov   @parm2,@fb.row        ; Set row offset
     6542 A008     
     6544 A306     
0044                       ;-------------------------------------------------------
0045                       ; Goto line
0046                       ;-------------------------------------------------------
0047               fb.goto.toprow.line:
0048 6546 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6548 A31C     
0049               
0050 654A 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     654C 68EA     
0051                                                   ; | i  @parm1 = Line to start with
0052                                                   ; /             (becomes @fb.topline)
0053               
0054 654E 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6550 A30C     
0055               
0056 6552 C120  34         mov   @fb.row,tmp0          ; \
     6554 A306     
0057 6556 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0058 6558 C804  30         mov   tmp0,@wyx             ; /
     655A 832A     
0059               
0060 655C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     655E 319E     
0061                                                   ; \ i   @fb.top      = Address top row in FB
0062                                                   ; | i   @fb.topline  = Top line in FB
0063                                                   ; | i   @fb.row      = Current row in FB
0064                                                   ; |                  (offset 0..@fb.scrrows)
0065                                                   ; | i   @fb.column   = Current column in FB
0066                                                   ; | i   @fb.colsline = Columns per line FB
0067                                                   ; |
0068                                                   ; / o   @fb.current  = Updated pointer
0069               
0070 6560 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6562 37A8     
0071                                                   ; | i  @fb.row        = Row in frame buffer
0072                                                   ; / o  @fb.row.length = Length of row
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               fb.goto.toprow.exit:
0077 6564 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0078 6566 C2F9  30         mov   *stack+,r11           ; Pop r11
0079 6568 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0085                       copy  "fb.goto.nextmatch.asm" ; Goto next search match
     **** ****     > fb.goto.nextmatch.asm
0001               * FILE......: fb.goto.nextmatch.asm
0002               * Purpose...: Goto next search match
0003               
0004               
0005               ***************************************************************
0006               * fb.goto.nextmatch
0007               * Refresh frame buffer with next search match
0008               * Align variables in editor buffer to match with that position.
0009               ****************************************************************
0010               * bl @fb.goto.nextmatch
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * none
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               ********|*****|*********************|**************************
0021               fb.goto.nextmatch:
0022 656A 0649  14         dect  stack
0023 656C C64B  30         mov   r11,*stack            ; Save return address
0024 656E 0649  14         dect  stack
0025 6570 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Initialisation
0028                       ;-------------------------------------------------------
0029 6572 0760  38         abs   @edb.srch.matches      ; \ Exit early if no matches
     6574 A5CE     
0030 6576 132C  14         jeq   fb.goto.nextmatch.exit ; /
0031                       ;-------------------------------------------------------
0032                       ; Goto next match
0033                       ;-------------------------------------------------------
0034 6578 C120  34         mov   @edb.srch.matches,tmp0  ; \
     657A A5CE     
0035 657C 0604  14         dec   tmp0                    ; | Already at last entry?
0036 657E 8120  34         c     @edb.srch.curmatch,tmp0 ; /
     6580 A5D0     
0037 6582 1101  14         jlt   !                       ; Not yet, keep going
0038 6584 1003  14         jmp   fg.goto.nextmatch.first ; Yes, show first entry
0039               
0040 6586 05A0  34 !       inc   @edb.srch.curmatch      ; Next entry
     6588 A5D0     
0041 658A 1002  14         jmp   fg.goto.nextmatch.goto  ; No, show next match
0042                       ;-------------------------------------------------------
0043                       ; First match
0044                       ;-------------------------------------------------------
0045               fg.goto.nextmatch.first:
0046 658C 04E0  34         clr   @edb.srch.curmatch    ; 1st entry
     658E A5D0     
0047                       ;-------------------------------------------------------
0048                       ; Goto line in editor buffer
0049                       ;-------------------------------------------------------
0050               fg.goto.nextmatch.goto:
0051 6590 C120  34         mov   @edb.srch.curmatch,tmp0
     6592 A5D0     
0052                                                   ; Get index entry
0053 6594 0A14  18         sla   tmp0,1                ; Make word offset
0054 6596 C824  54         mov   @edb.srch.idx.rtop(tmp0),@parm1
     6598 F100     
     659A A006     
0055                                                   ; Goto matched line
0056 659C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     659E A008     
0057               
0058 65A0 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     65A2 6514     
0059                                                   ; | i  @parm1 = Top line in editor buffer
0060                                                   ; / i  @parm2 = Row offset in frame buffer
0061               
0062 65A4 0914  18         srl   tmp0,1                ; Make byte offset again
0063 65A6 D124  34         movb  @edb.srch.idx.ctop(tmp0),tmp0
     65A8 F900     
0064                                                   ; \ Get column from index
0065 65AA 0984  32         srl   tmp0,8                ; | MSB to LSB
0066 65AC C804  38         mov   tmp0,@fb.column       ; / Set column on 1st letter current match
     65AE A30C     
0067               
0068 65B0 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     65B2 319E     
0069                                                   ; \ i   @fb.top      = Address top row in FB
0070                                                   ; | i   @fb.topline  = Top line in FB
0071                                                   ; | i   @fb.row      = Current row in FB
0072                                                   ; |                  (offset 0..@fb.scrrows)
0073                                                   ; | i   @fb.column   = Current column in FB
0074                                                   ; | i   @fb.colsline = Columns per line FB
0075                                                   ; |
0076                                                   ; / o   @fb.current  = Updated pointer
0077               
0078 65B4 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65B6 A31A     
0079 65B8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status line
     65BA A31C     
0080               
0081 65BC D820  46         movb  @fb.column+1,@wyx+1   ; Set cursor on column
     65BE A30D     
     65C0 832B     
0082                       ;-------------------------------------------------------
0083                       ; Refresh colors if block marker M1 is set
0084                       ;-------------------------------------------------------
0085 65C2 C120  34         mov   @edb.block.m1,tmp0    ; \ Block marker M1 set?
     65C4 A50E     
0086 65C6 0284  22         ci    tmp0,>ffff            ; /
     65C8 FFFF     
0087 65CA 1302  14         jeq   fb.goto.nextmatch.exit
0088 65CC 0720  34         seto  @fb.colorize          ; Color refresh required
     65CE A312     
0089                       ;-------------------------------------------------------
0090                       ; Exit
0091                       ;-------------------------------------------------------
0092               fb.goto.nextmatch.exit:
0093 65D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0094 65D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0095 65D4 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0086                       copy  "fb.goto.prevmatch.asm" ; Goto previous search match
     **** ****     > fb.goto.prevmatch.asm
0001               * FILE......: fb.goto.prevmatch.asm
0002               * Purpose...: Goto previous search match
0003               
0004               
0005               ***************************************************************
0006               * fb.goto.prevmatch
0007               * Refresh frame buffer with next search match
0008               * Align variables in editor buffer to match with that position.
0009               ****************************************************************
0010               * bl @fb.goto.prevmatch
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * none
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               ********|*****|*********************|**************************
0021               fb.goto.prevmatch:
0022 65D6 0649  14         dect  stack
0023 65D8 C64B  30         mov   r11,*stack            ; Save return address
0024 65DA 0649  14         dect  stack
0025 65DC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Initialisation
0028                       ;-------------------------------------------------------
0029 65DE 0760  38         abs   @edb.srch.matches      ; \ Exit early if no matches
     65E0 A5CE     
0030 65E2 1329  14         jeq   fb.goto.prevmatch.exit ; /
0031                       ;-------------------------------------------------------
0032                       ; Goto previous match
0033                       ;-------------------------------------------------------
0034 65E4 0760  38         abs   @edb.srch.curmatch     ; 1st match?
     65E6 A5D0     
0035 65E8 1301  14         jeq   fg.goto.prevmatch.last ; Yes, goto last match
0036 65EA 1003  14         jmp   fg.goto.prevmatch.goto ; No, show previous match
0037                       ;-------------------------------------------------------
0038                       ; Last match
0039                       ;-------------------------------------------------------
0040               fg.goto.prevmatch.last:
0041 65EC C820  54         mov   @edb.srch.matches,@edb.srch.curmatch
     65EE A5CE     
     65F0 A5D0     
0042                                                   ; Last entry + 1
0043                       ;-------------------------------------------------------
0044                       ; Goto line in editor buffer
0045                       ;-------------------------------------------------------
0046               fg.goto.prevmatch.goto:
0047 65F2 0620  34         dec   @edb.srch.curmatch    ; Previous entry
     65F4 A5D0     
0048 65F6 C120  34         mov   @edb.srch.curmatch,tmp0
     65F8 A5D0     
0049                                                   ; Get index entry
0050 65FA 0A14  18         sla   tmp0,1                ; Make word offset
0051 65FC C824  54         mov   @edb.srch.idx.rtop(tmp0),@parm1
     65FE F100     
     6600 A006     
0052                                                   ; Goto matched line
0053 6602 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6604 A008     
0054               
0055 6606 06A0  32         bl    @fb.goto.toprow       ; \ Position cursor and exit
     6608 6514     
0056                                                   ; | i  @parm1 = Top line in editor buffer
0057                                                   ; / i  @parm2 = Row offset in frame buffer
0058               
0059 660A 0914  18         srl   tmp0,1                ; Make byte offset again
0060 660C D124  34         movb  @edb.srch.idx.ctop(tmp0),tmp0
     660E F900     
0061                                                   ; \ Get column from index
0062 6610 0984  32         srl   tmp0,8                ; | MSB to LSB
0063 6612 C804  38         mov   tmp0,@fb.column       ; / Set column on 1st letter current match
     6614 A30C     
0064               
0065 6616 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6618 319E     
0066                                                   ; \ i   @fb.top      = Address top row in FB
0067                                                   ; | i   @fb.topline  = Top line in FB
0068                                                   ; | i   @fb.row      = Current row in FB
0069                                                   ; |                  (offset 0..@fb.scrrows)
0070                                                   ; | i   @fb.column   = Current column in FB
0071                                                   ; | i   @fb.colsline = Columns per line FB
0072                                                   ; |
0073                                                   ; / o   @fb.current  = Updated pointer
0074               
0075 661A 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     661C A31A     
0076 661E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status line
     6620 A31C     
0077               
0078 6622 D820  46         movb  @fb.column+1,@wyx+1   ; Set cursor on column
     6624 A30D     
     6626 832B     
0079                       ;-------------------------------------------------------
0080                       ; Refresh colors if block marker M1 is set
0081                       ;-------------------------------------------------------
0082 6628 C120  34         mov   @edb.block.m1,tmp0    ; \ Block marker M1 set?
     662A A50E     
0083 662C 0284  22         ci    tmp0,>ffff            ; /
     662E FFFF     
0084 6630 1302  14         jeq   fb.goto.prevmatch.exit
0085 6632 0720  34         seto  @fb.colorize          ; Color refresh required
     6634 A312     
0086                       ;-------------------------------------------------------
0087                       ; Exit
0088                       ;-------------------------------------------------------
0089               fb.goto.prevmatch.exit:
0090 6636 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0091 6638 C2F9  30         mov   *stack+,r11           ; Pop r11
0092 663A 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0087                       copy  "fb.ruler.asm"          ; Setup ruler with tab positions in memory
     **** ****     > fb.ruler.asm
0001               * FILE......: fb.ruler.asm
0002               * Purpose...: Setup ruler with tab-positions
0003               
0004               ***************************************************************
0005               * fb.ruler.init
0006               * Setup ruler line
0007               ***************************************************************
0008               * bl  @ruler.init
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0,tmp1,tmp2
0015               ********|*****|*********************|**************************
0016               fb.ruler.init:
0017 663C 0649  14         dect  stack
0018 663E C64B  30         mov   r11,*stack            ; Save return address
0019 6640 0649  14         dect  stack
0020 6642 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 6644 0649  14         dect  stack
0022 6646 C645  30         mov   tmp1,*stack           ; Push tmp1
0023 6648 0649  14         dect  stack
0024 664A C646  30         mov   tmp2,*stack           ; Push tmp2
0025                       ;-------------------------------------------------------
0026                       ; Initialize
0027                       ;-------------------------------------------------------
0028 664C 06A0  32         bl    @cpym2m
     664E 253A     
0029 6650 6694                   data fb.ruler.txt,fb.ruler.sit,80
     6652 A322     
     6654 0050     
0030                                                   ; Copy ruler from ROM to RAM
0031               
0032 6656 0204  20         li    tmp0,fb.ruler.tat
     6658 A372     
0033 665A C160  34         mov   @tv.rulercolor,tmp1
     665C A222     
0034 665E 0206  20         li    tmp2,80
     6660 0050     
0035               
0036 6662 06A0  32         bl    @xfilm                ; Setup FG/BG color for ruler in RAM
     6664 223C     
0037                                                   ; \ i  tmp0 = Target address in RAM
0038                                                   ; | i  tmp1 = Byte to fill
0039                                                   ; / i  tmp2 = Number of bytes to fill
0040               
0041 6666 0204  20         li    tmp0,tv.tabs.table.lr ; Get pointer to tabs table
     6668 3922     
0042                       ;------------------------------------------------------
0043                       ; Setup ruler with current tab positions
0044                       ;------------------------------------------------------
0045               fb.ruler.init.loop:
0046 666A D174  28         movb  *tmp0+,tmp1           ; \ Get tab position
0047 666C 0985  32         srl   tmp1,8                ; / Right align
0048               
0049 666E 0285  22         ci    tmp1,>00ff            ; End-of-list reached?
     6670 00FF     
0050 6672 130B  14         jeq   fb.ruler.init.exit
0051                       ;------------------------------------------------------
0052                       ; Add tab-marker to ruler SIT in RAM
0053                       ;------------------------------------------------------
0054 6674 0225  22         ai    tmp1,fb.ruler.sit     ; Add base address
     6676 A322     
0055 6678 0206  20         li    tmp2,>1100            ; Tab indicator (ASCII 16)
     667A 1100     
0056 667C D546  30         movb  tmp2,*tmp1            ; Add tab-marker
0057                       ;------------------------------------------------------
0058                       ; Add tab-marker color to ruler TAT in RAM
0059                       ;------------------------------------------------------
0060 667E 0225  22         ai    tmp1,80
     6680 0050     
0061 6682 C1A0  34         mov   @tv.color,tmp2        ; AB is in MSB (see color scheme table)
     6684 A218     
0062 6686 D546  30         movb  tmp2,*tmp1            ; Tab indicator FG/BG color
0063 6688 10F0  14         jmp   fb.ruler.init.loop    ; Next iteration
0064                       ;------------------------------------------------------
0065                       ; Exit
0066                       ;------------------------------------------------------
0067               fb.ruler.init.exit:
0068 668A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0069 668C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0070 668E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0071 6690 C2F9  30         mov   *stack+,r11           ; Pop r11
0072 6692 045B  20         b     *r11                  ; Return
0073               
0074                       ;------------------------------------------------------
0075                       ; Ruler default string
0076                       ;------------------------------------------------------
0077               fb.ruler.txt:
0078                       even
0079 6694 2E2E             text    '.........'
     6696 2E2E     
     6698 2E2E     
     669A 2E2E     
     669C 2E       
0080 669D   12             byte    18
0081 669E 2E2E             text    '.........'
     66A0 2E2E     
     66A2 2E2E     
     66A4 2E2E     
     66A6 2E       
0082 66A7   13             byte    19
0083 66A8 2E2E             text    '.........'
     66AA 2E2E     
     66AC 2E2E     
     66AE 2E2E     
     66B0 2E       
0084 66B1   14             byte    20
0085 66B2 2E2E             text    '.........'
     66B4 2E2E     
     66B6 2E2E     
     66B8 2E2E     
     66BA 2E       
0086 66BB   15             byte    21
0087 66BC 2E2E             text    '.........'
     66BE 2E2E     
     66C0 2E2E     
     66C2 2E2E     
     66C4 2E       
0088 66C5   16             byte    22
0089 66C6 2E2E             text    '.........'
     66C8 2E2E     
     66CA 2E2E     
     66CC 2E2E     
     66CE 2E       
0090 66CF   17             byte    23
0091 66D0 2E2E             text    '.........'
     66D2 2E2E     
     66D4 2E2E     
     66D6 2E2E     
     66D8 2E       
0092 66D9   18             byte    24
0093 66DA 2E2E             text    '.........'
     66DC 2E2E     
     66DE 2E2E     
     66E0 2E2E     
     66E2 2E       
0094 66E3   19             byte    25
0095                       even
                   < stevie_b4.asm
0088                       copy  "fb.colorlines.asm"     ; Colorize lines in framebuffer
     **** ****     > fb.colorlines.asm
0001               * FILE......: fb.colorlines.asm
0002               * Purpose...: Colorize frame buffer content
0003               
0004               ***************************************************************
0005               * fb.colorlines
0006               * Colorize frame buffer content
0007               ***************************************************************
0008               * bl @fb.colorlines
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1       = Force refresh if >ffff (overrides @fb.colorize)
0012               * @fb.colorize = Colorize frame buffer content if >ffff
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2,tmp3,tmp4
0019               ********|*****|*********************|**************************
0020               fb.colorlines:
0021 66E4 0649  14         dect  stack
0022 66E6 C64B  30         mov   r11,*stack            ; Save return address
0023 66E8 0649  14         dect  stack
0024 66EA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 66EC 0649  14         dect  stack
0026 66EE C645  30         mov   tmp1,*stack           ; Push tmp1
0027 66F0 0649  14         dect  stack
0028 66F2 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 66F4 0649  14         dect  stack
0030 66F6 C647  30         mov   tmp3,*stack           ; Push tmp3
0031 66F8 0649  14         dect  stack
0032 66FA C648  30         mov   tmp4,*stack           ; Push tmp4
0033                       ;------------------------------------------------------
0034                       ; Force refresh flag set
0035                       ;------------------------------------------------------
0036 66FC C120  34         mov   @parm1,tmp0           ; \ Force refresh flag set?
     66FE A006     
0037 6700 0284  22         ci    tmp0,>ffff            ; /
     6702 FFFF     
0038 6704 1309  14         jeq   !                     ; Yes, so skip Asserts
0039                       ;------------------------------------------------------
0040                       ; Assert
0041                       ;------------------------------------------------------
0042 6706 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     6708 A312     
0043 670A 132A  14         jeq   fb.colorlines.exit    ; Exit if nothing to do.
0044                       ;------------------------------------------------------
0045                       ; Speedup screen refresh dramatically
0046                       ;------------------------------------------------------
0047 670C C120  34         mov   @edb.block.m1,tmp0
     670E A50E     
0048 6710 1327  14         jeq   fb.colorlines.exit    ; Exit if marker M1 unset
0049 6712 C120  34         mov   @edb.block.m2,tmp0
     6714 A510     
0050 6716 1324  14         jeq   fb.colorlines.exit    ; Exit if marker M2 unset
0051                       ;------------------------------------------------------
0052                       ; Color the lines in the framebuffer (TAT)
0053                       ;------------------------------------------------------
0054 6718 0204  20 !       li    tmp0,vdp.fb.toprow.tat
     671A 09D0     
0055                                                   ; VDP start address
0056 671C C1E0  34         mov   @fb.scrrows,tmp3      ; Set loop counter
     671E A31E     
0057               
0058 6720 C220  34         mov   @tv.ruler.visible,tmp4
     6722 A210     
0059 6724 1303  14         jeq   fb.colorlines.noruler ; Skip row adjustment if no ruler visible
0060               
0061 6726 0224  22         ai    tmp0,80               ; Skip ruler line
     6728 0050     
0062 672A 0607  14         dec   tmp3                  ; Skip ruler line
0063               fb.colorlines.noruler:
0064 672C C220  34         mov   @fb.topline,tmp4      ; Position in editor buffer
     672E A304     
0065 6730 0588  14         inc   tmp4                  ; M1/M2 use base 1 offset
0066                       ;------------------------------------------------------
0067                       ; 1. Set color for each line in framebuffer
0068                       ;------------------------------------------------------
0069               fb.colorlines.loop:
0070 6732 C1A0  34         mov   @edb.block.m1,tmp2
     6734 A50E     
0071 6736 8206  18         c     tmp2,tmp4             ; M1 > current line
0072 6738 1507  14         jgt   fb.colorlines.normal  ; Yes, skip marking color
0073               
0074 673A C1A0  34         mov   @edb.block.m2,tmp2
     673C A510     
0075 673E 8206  18         c     tmp2,tmp4             ; M2 < current line
0076 6740 1103  14         jlt   fb.colorlines.normal  ; Yes, skip marking color
0077                       ;------------------------------------------------------
0078                       ; 1a. Set marking color
0079                       ;------------------------------------------------------
0080 6742 C160  34         mov   @tv.markcolor,tmp1
     6744 A21E     
0081 6746 1003  14         jmp   fb.colorlines.fill
0082                       ;------------------------------------------------------
0083                       ; 1b. Set normal text color
0084                       ;------------------------------------------------------
0085               fb.colorlines.normal:
0086 6748 C160  34         mov   @tv.color,tmp1
     674A A218     
0087 674C 0985  32         srl   tmp1,8
0088                       ;------------------------------------------------------
0089                       ; 1c. Fill line with selected color
0090                       ;------------------------------------------------------
0091               fb.colorlines.fill:
0092 674E 0206  20         li    tmp2,80               ; 80 characters to fill
     6750 0050     
0093               
0094 6752 06A0  32         bl    @xfilv                ; Fill VDP VRAM
     6754 2294     
0095                                                   ; \ i  tmp0 = VDP start address
0096                                                   ; | i  tmp1 = Byte to fill
0097                                                   ; / i  tmp2 = count
0098               
0099 6756 0224  22         ai    tmp0,80               ; Next line
     6758 0050     
0100 675A 0588  14         inc   tmp4
0101 675C 0607  14         dec   tmp3                  ; Update loop counter
0102 675E 15E9  14         jgt   fb.colorlines.loop    ; Back to (1)
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106               fb.colorlines.exit
0107 6760 04E0  34         clr   @fb.colorize          ; Reset colorize flag
     6762 A312     
0108 6764 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0109 6766 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0110 6768 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0111 676A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0112 676C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0113 676E C2F9  30         mov   *stack+,r11           ; Pop r11
0114 6770 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0089                       copy  "fb.vdpdump.asm"        ; Dump framebuffer to VDP SIT
     **** ****     > fb.vdpdump.asm
0001               * FILE......: fb.vdpdump.asm
0002               * Purpose...: Dump framebuffer to VDP
0003               
0004               
0005               ***************************************************************
0006               * fb.vdpdump
0007               * Dump framebuffer to VDP SIT
0008               ***************************************************************
0009               * bl @fb.vdpdump
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Number of lines to dump
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               fb.vdpdump:
0021 6772 0649  14         dect  stack
0022 6774 C64B  30         mov   r11,*stack            ; Save return address
0023 6776 0649  14         dect  stack
0024 6778 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 677A 0649  14         dect  stack
0026 677C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 677E 0649  14         dect  stack
0028 6780 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Assert
0031                       ;------------------------------------------------------
0032 6782 C160  34         mov   @parm1,tmp1
     6784 A006     
0033 6786 0285  22         ci    tmp1,80*30
     6788 0960     
0034 678A 1204  14         jle   !
0035                       ;------------------------------------------------------
0036                       ; Crash the system
0037                       ;------------------------------------------------------
0038 678C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     678E FFCE     
0039 6790 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6792 2026     
0040                       ;------------------------------------------------------
0041                       ; Setup start position in VDP memory
0042                       ;------------------------------------------------------
0043 6794 0204  20 !       li    tmp0,vdp.fb.toprow.sit
     6796 0050     
0044                                                   ; VDP target address (Xth line on screen!)
0045 6798 C1A0  34         mov   @tv.ruler.visible,tmp2
     679A A210     
0046                                                   ; Is ruler visible on screen?
0047 679C 1302  14         jeq   fb.vdpdump.calc       ; No, continue with calculation
0048 679E A120  34         a     @fb.colsline,tmp0     ; Yes, add 2nd line offset
     67A0 A30E     
0049                       ;------------------------------------------------------
0050                       ; Refresh VDP content with framebuffer
0051                       ;------------------------------------------------------
0052               fb.vdpdump.calc:
0053 67A2 3960  74         mpy   @fb.colsline,tmp1     ; columns per line * number of rows in parm1
     67A4 A30E     
0054                                                   ; 16 bit part is in tmp2!
0055 67A6 C160  34         mov   @fb.top.ptr,tmp1      ; RAM Source address
     67A8 A300     
0056               
0057 67AA 0286  22         ci    tmp2,0                ; \ Exit early if nothing to copy
     67AC 0000     
0058 67AE 1304  14         jeq   fb.vdpdump.exit       ; /
0059               
0060 67B0 06A0  32         bl    @xpym2v               ; Copy to VDP
     67B2 24EC     
0061                                                   ; \ i  tmp0 = VDP target address
0062                                                   ; | i  tmp1 = RAM source address
0063                                                   ; / i  tmp2 = Bytes to copy
0064               
0065 67B4 04E0  34         clr   @fb.dirty             ; Reset frame buffer dirty flag
     67B6 A31A     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               fb.vdpdump.exit:
0070 67B8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0071 67BA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0072 67BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 67BE C2F9  30         mov   *stack+,r11           ; Pop r11
0074 67C0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0090                       copy  "fb.scan.fname.asm"     ; Scan line for device & filename
     **** ****     > fb.scan.fname.asm
0001               * FILE......: fb.scan.fname.asm
0002               * Purpose...: Scan current line for possible filename
0003               
0004               ***************************************************************
0005               * fb.scan.fname
0006               * Scan current line for possible filename
0007               ***************************************************************
0008               *  bl   @fb.scan.fname
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @cmdb.dflt.fname = Pointer to string with default filename
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4,r2,r3
0018               ********|*****|*********************|**************************
0019               fb.scan.fname:
0020 67C2 0649  14         dect  stack
0021 67C4 C64B  30         mov   r11,*stack            ; Save return address
0022 67C6 0649  14         dect  stack
0023 67C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 67CA 0649  14         dect  stack
0025 67CC C645  30         mov   tmp1,*stack           ; Push tmp1
0026 67CE 0649  14         dect  stack
0027 67D0 C646  30         mov   tmp2,*stack           ; Push tmp2
0028 67D2 0649  14         dect  stack
0029 67D4 C647  30         mov   tmp3,*stack           ; Push tmp3
0030 67D6 0649  14         dect  stack
0031 67D8 C648  30         mov   tmp4,*stack           ; Push tmp4
0032 67DA 0649  14         dect  stack
0033 67DC C642  30         mov   r2,*stack             ; Push r2
0034 67DE 0649  14         dect  stack
0035 67E0 C643  30         mov   r3,*stack             ; Push r3
0036                       ;-------------------------------------------------------
0037                       ; Initialisation
0038                       ;-------------------------------------------------------
0039               fb.scan.fname.copy:
0040 67E2 06A0  32         bl    @film
     67E4 2236     
0041 67E6 A7B6                   data cmdb.dflt.fname,>00,80
     67E8 0000     
     67EA 0050     
0042                                                   ; Clear filename in buffer
0043               
0044 67EC 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     67EE 319E     
0045                                                   ; \ i   @fb.top      = Address top row in FB
0046                                                   ; | i   @fb.topline  = Top line in FB
0047                                                   ; | i   @fb.row      = Current row in FB
0048                                                   ; |                  (offset 0..@fb.scrrows)
0049                                                   ; | i   @fb.column   = Current column in FB
0050                                                   ; | i   @fb.colsline = Columns per line FB
0051                                                   ; |
0052                                                   ; / o   @fb.current  = Updated pointer
0053               
0054                       ; Register usage in following code
0055                       ;
0056                       ; tmp0 = Pointer to first character in framebuffer line
0057                       ; tmp1 = Destination address for filename copy
0058                       ; tmp2 = Pointer to last character in framebuffer line
0059                       ; tmp3 = Pointer to first character in valid devices string
0060                       ; tmp4 = Pointer to last character in valid devices string
0061                       ; r3   = Temporary storage
0062               
0063                       ;-------------------------------------------------------
0064                       ; (1) Prepare for lookup
0065                       ;-------------------------------------------------------
0066 67F0 04C2  14         clr   r2                    ; Length counter
0067 67F2 0203  20         li    r3,>2c00              ; Delimiter is ASCII 44 (>2c) ","
     67F4 2C00     
0068               
0069 67F6 C120  34         mov   @fb.current,tmp0      ; Start address in framebuffer
     67F8 A302     
0070 67FA C184  18         mov   tmp0,tmp2             ; \ calculate end address of
0071 67FC A1A0  34         a     @fb.row.length,tmp2   ; / source line in framebuffer
     67FE A308     
0072               
0073 6800 0205  20         li    tmp1,cmdb.dflt.fname  ; Destination for character copy
     6802 A7B6     
0074 6804 0585  14         inc   tmp1                  ; Skip length byte, will be set later
0075               
0076 6806 0207  20         li    tmp3,def.devices      ; Get string with valid devices
     6808 3DB0     
0077 680A C217  26         mov   *tmp3,tmp4            ; \ Get length byte, skipping
0078 680C 0988  32         srl   tmp4,8                ; / 1st following character
0079 680E A207  18         a     tmp3,tmp4             ; Calc end address of valid devices
0080 6810 05C7  14         inct  tmp3                  ; Skip length byte and following char
0081                       ;-------------------------------------------------------
0082                       ; (2) Compare char in framebuffer with device lookup
0083                       ;-------------------------------------------------------
0084               fb.scan.fname.device.loop:
0085 6812 95D4  34         cb    *tmp0,*tmp3           ; Does char match with lookup?
0086 6814 160A  14         jne   fb.scan.fname.nextdev.loop
0087                                                   ; No, look for next device (3)
0088               
0089 6816 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte to destination
0090 6818 0582  14         inc   r2                    ; Increase length
0091               
0092 681A 0587  14         inc   tmp3                  ; Next char in lookup
0093 681C 90D7  26         cb    *tmp3,r3              ; Did we find the delimiter?
0094 681E 130A  14         jeq   fb.scan.fname.copy.rest
0095                                                   ; Yes, device match. Now copy rest (4)
0096               
0097 6820 8207  18         c     tmp3,tmp4             ; At end in lookup string?
0098 6822 1323  14         jeq   fb.scan.fname.exit    ; Yes, exit without match
0099               
0100 6824 8184  18         c     tmp0,tmp2             ; End of line reached?
0101 6826 12F5  14         jle   fb.scan.fname.device.loop
0102                                                   ; Not yet, next iteration (2)
0103               
0104 6828 1020  14         jmp   fb.scan.fname.exit    ; Yes, exit without match
0105                       ;-------------------------------------------------------
0106                       ; (3) Goto next device in lookup string
0107                       ;-------------------------------------------------------
0108               fb.scan.fname.nextdev.loop:
0109 682A 90F7  28         cb    *tmp3+,r3             ; Did we find the delimiter (comma)?
0110 682C 13F2  14         jeq   fb.scan.fname.device.loop
0111                                                   ; Yes, exit here and start compare (2)
0112               
0113 682E 8207  18         c     tmp3,tmp4             ; End of lookup string reached?
0114 6830 151C  14         jgt   fb.scan.fname.exit    ; Yes, exit without match!
0115               
0116 6832 10FB  14         jmp   fb.scan.fname.nextdev.loop
0117                                                   ; No, next char in lookup string
0118                       ;------------------------------------------------------
0119                       ; (4) Copy rest of device/filename
0120                       ;------------------------------------------------------
0121               fb.scan.fname.copy.rest:
0122 6834 1000  14         nop                         ; Placeholder for now
0123               fb.scan.fname.copy.rest.loop:
0124 6836 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte to destination
0125 6838 0582  14         inc   r2                    ; Increase length
0126                       ;------------------------------------------------------
0127                       ; (4a) Look for delimiters SPACE and NULL
0128                       ;------------------------------------------------------
0129 683A 0203  20         li    r3,>2000              ; \ Delimiters ASCII 32 (>20) " "
     683C 2000     
0130                                                   ; /            ASCII 00 (>00) ""
0131 683E 90D4  26         cb    *tmp0,r3
0132 6840 1311  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0133 6842 06C3  14         swpb  r3
0134 6844 90D4  26         cb    *tmp0,r3
0135 6846 130E  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0136               
0137                       ;------------------------------------------------------
0138                       ; (4b) Look for delimiters " and '
0139                       ;------------------------------------------------------
0140 6848 0203  20         li    r3,>2227              ; \ Delimiters ASCII 34 (>22) """
     684A 2227     
0141                                                   ; /            ASCII 39 (>27) "'"
0142               
0143 684C 90D4  26         cb    *tmp0,r3
0144 684E 130A  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0145 6850 06C3  14         swpb  r3
0146 6852 90D4  26         cb    *tmp0,r3
0147 6854 1307  14         jeq   fb.scan.fname.done    ; Match, file name copy done (5)
0148               
0149 6856 8184  18         c     tmp0,tmp2             ; End of line reached?
0150 6858 12EE  14         jle   fb.scan.fname.copy.rest.loop
0151                                                   ; Not yet, next iteration (4)
0152               
0153 685A 1004  14         jmp   fb.scan.fname.done    ; File name copy done (5)
0154                       ;------------------------------------------------------
0155                       ; Asserts failed
0156                       ;------------------------------------------------------
0157               fb.scan.fname.crash
0158 685C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     685E FFCE     
0159 6860 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6862 2026     
0160                       ;------------------------------------------------------
0161                       ; (5) File name copy done
0162                       ;------------------------------------------------------
0163               fb.scan.fname.done:
0164 6864 0A82  32         sla   r2,8                  ; Left align
0165 6866 D802  38         movb  r2,@cmdb.dflt.fname   ; Set length byte
     6868 A7B6     
0166                       ;------------------------------------------------------
0167                       ; Exit
0168                       ;------------------------------------------------------
0169               fb.scan.fname.exit:
0170 686A C0F9  30         mov   *stack+,r3            ; Pop r3
0171 686C C0B9  30         mov   *stack+,r2            ; Pop r2
0172 686E C239  30         mov   *stack+,tmp4          ; Pop tmp4
0173 6870 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0174 6872 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0175 6874 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0176 6876 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0177 6878 C2F9  30         mov   *stack+,r11           ; Pop R11
0178 687A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0091                       copy  "fb.hscroll.asm"        ; Horizontal scroll frame buffer
     **** ****     > fb.hscroll.asm
0001               * FILE......: fb.hscroll.asm
0002               * Purpose...: Horizontal scroll frame buffer window
0003               
0004               ***************************************************************
0005               * fb.hscroll.asm
0006               * Horizontal scroll frame buffer window
0007               ***************************************************************
0008               *  bl   @fb.hscroll.asm
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = View Window Column Offset
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               ********|*****|*********************|**************************
0019               fb.hscroll:
0020 687C 0649  14         dect  stack
0021 687E C64B  30         mov   r11,*stack            ; Save return address
0022 6880 0649  14         dect  stack
0023 6882 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6884 0649  14         dect  stack
0025 6886 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6888 0649  14         dect  stack
0027 688A C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;-------------------------------------------------------
0029                       ; Set View Window Column Offset
0030                       ;-------------------------------------------------------
0031 688C C820  54         mov   @parm1,@fb.vwco       ; Set View Window Column Offset
     688E A006     
     6890 A310     
0032               
0033 6892 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6894 A31C     
0034 6896 0720  34         seto  @fb.dirty             ; Trigger refresh
     6898 A31A     
0035               
0036 689A C820  54         mov   @fb.topline,@parm1
     689C A304     
     689E A006     
0037 68A0 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     68A2 68EA     
0038                                                   ; | i  @parm1 = Line to start with
0039                                                   ; /             (becomes @fb.topline)
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               fb.hscroll.exit:
0044 68A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0045 68A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 68A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 68AA C2F9  30         mov   *stack+,r11           ; Pop r11
0048 68AC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0092                       copy  "fb.restore.asm"        ; Restore framebuffer to normal opr.
     **** ****     > fb.restore.asm
0001               * FILE......: fb.restore.asm
0002               * Purpose...: Restore frame buffer to normal operation
0003               
0004               ***************************************************************
0005               * fb.restore
0006               * Restore frame buffer to normal operation (e.g. after command
0007               * has completed)
0008               ***************************************************************
0009               *  bl   @fb.restore
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = cursor YX position
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * NONE
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * NONE
0019               ********|*****|*********************|**************************
0020               fb.restore:
0021 68AE 0649  14         dect  stack
0022 68B0 C64B  30         mov   r11,*stack            ; Save return address
0023 68B2 0649  14         dect  stack
0024 68B4 C660  46         mov   @parm1,*stack         ; Push @parm1
     68B6 A006     
0025                       ;------------------------------------------------------
0026                       ; Refresh framebuffer
0027                       ;------------------------------------------------------
0028 68B8 C820  54         mov   @fb.topline,@parm1
     68BA A304     
     68BC A006     
0029 68BE 06A0  32         bl    @fb.refresh           ; Refresh frame buffer content
     68C0 68EA     
0030                                                   ; \ @i  parm1 = Line to start with
0031                       ;------------------------------------------------------
0032                       ; Color marked lines
0033                       ;------------------------------------------------------
0034 68C2 0720  34         seto  @parm1                ; Skip Asserts
     68C4 A006     
0035 68C6 06A0  32         bl    @fb.colorlines        ; Colorize frame buffer content
     68C8 66E4     
0036                                                   ; \ i  @parm1 = Force refresh if >ffff
0037                                                   ; /
0038                       ;------------------------------------------------------
0039                       ; Color status bottom line
0040                       ;------------------------------------------------------
0041 68CA C820  54         mov   @tv.botcolor,@parm1   ; Set normal color
     68CC A21C     
     68CE A006     
0042 68D0 06A0  32         bl    @pane.colorscheme.botline
     68D2 70FE     
0043                                                   ; Set colors for bottom line
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; /
0046                       ;------------------------------------------------------
0047                       ; Update status line and show cursor
0048                       ;------------------------------------------------------
0049 68D4 0720  34         seto  @fb.status.dirty      ; Trigger status line update
     68D6 A31C     
0050               
0051 68D8 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     68DA 7D5E     
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055               fb.restore.exit:
0056 68DC C839  50         mov   *stack+,@parm1        ; Pop @parm1
     68DE A006     
0057 68E0 C820  46         mov   @parm1,@wyx           ; Set cursor position
     68E2 A006     
     68E4 832A     
0058 68E6 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 68E8 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0093                       copy  "fb.refresh.asm"        ; Refresh framebuffer
     **** ****     > fb.refresh.asm
0001               * FILE......: fb.refresh.asm
0002               * Purpose...: Refresh frame buffer with editor buffer content
0003               
0004               ***************************************************************
0005               * fb.refresh
0006               * Refresh frame buffer with editor buffer content
0007               ***************************************************************
0008               * bl @fb.refresh
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to start with (becomes @fb.topline)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               ********|*****|*********************|**************************
0019               fb.refresh:
0020 68EA 0649  14         dect  stack
0021 68EC C64B  30         mov   r11,*stack            ; Push return address
0022 68EE 0649  14         dect  stack
0023 68F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 68F2 0649  14         dect  stack
0025 68F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 68F6 0649  14         dect  stack
0027 68F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;------------------------------------------------------
0029                       ; Setup starting position in index
0030                       ;------------------------------------------------------
0031 68FA C820  54         mov   @parm1,@fb.topline
     68FC A006     
     68FE A304     
0032 6900 04E0  34         clr   @parm2                ; Target row in frame buffer
     6902 A008     
0033                       ;------------------------------------------------------
0034                       ; Check if already at EOF
0035                       ;------------------------------------------------------
0036 6904 8820  50         c     @parm1,@edb.lines     ; EOF reached?
     6906 A006     
     6908 A504     
0037 690A 1312  14         jeq   fb.refresh.erase_eob  ; Yes, no need to unpack
0038                       ;------------------------------------------------------
0039                       ; Unpack line to frame buffer
0040                       ;------------------------------------------------------
0041               fb.refresh.unpack_line:
0042 690C C820  54         mov   @fb.vwco,@parm3       ; Set view window column offset
     690E A310     
     6910 A00A     
0043               
0044 6912 06A0  32         bl    @edb.line.unpack.fb   ; Unpack line from editor buffer
     6914 7D4C     
0045                                                   ; \ i  parm1    = Line to unpack
0046                                                   ; | i  parm2    = Target row in frame buffer
0047                                                   ; | i  parm3    = Column offset
0048                                                   ; / o  outparm1 = Length of line
0049               
0050 6916 05A0  34         inc   @parm1                ; Next line in editor buffer
     6918 A006     
0051 691A 05A0  34         inc   @parm2                ; Next row in frame buffer
     691C A008     
0052                       ;------------------------------------------------------
0053                       ; Last row in editor buffer reached ?
0054                       ;------------------------------------------------------
0055 691E 8820  50         c     @parm1,@edb.lines     ; BOT reached?
     6920 A006     
     6922 A504     
0056 6924 1305  14         jeq   fb.refresh.erase_eob  ; yes, erase until end of frame buffer
0057               
0058 6926 8820  50         c     @parm2,@fb.scrrows
     6928 A008     
     692A A31E     
0059 692C 11EF  14         jlt   fb.refresh.unpack_line
0060                                                   ; No, unpack next line
0061 692E 1011  14         jmp   fb.refresh.exit       ; Yes, exit without erasing
0062                       ;------------------------------------------------------
0063                       ; Erase until end of frame buffer
0064                       ;------------------------------------------------------
0065               fb.refresh.erase_eob:
0066 6930 C120  34         mov   @parm2,tmp0           ; Current row
     6932 A008     
0067 6934 C160  34         mov   @fb.scrrows,tmp1      ; Rows framebuffer
     6936 A31E     
0068 6938 6144  18         s     tmp0,tmp1             ; tmp1 = rows framebuffer - current row
0069 693A 3960  74         mpy   @fb.colsline,tmp1     ; tmp2 = cols per row * tmp1
     693C A30E     
0070               
0071 693E C186  18         mov   tmp2,tmp2             ; Already at end of frame buffer?
0072 6940 1308  14         jeq   fb.refresh.exit       ; Yes, so exit
0073               
0074 6942 3920  74         mpy   @fb.colsline,tmp0     ; cols per row * tmp0 (Result in tmp1!)
     6944 A30E     
0075 6946 A160  34         a     @fb.top.ptr,tmp1      ; Add framebuffer base
     6948 A300     
0076               
0077 694A C105  18         mov   tmp1,tmp0             ; tmp0 = Memory start address
0078 694C 04C5  14         clr   tmp1                  ; Clear with >00 character
0079               
0080 694E 06A0  32         bl    @xfilm                ; \ Fill memory
     6950 223C     
0081                                                   ; | i  tmp0 = Memory start address
0082                                                   ; | i  tmp1 = Byte to fill
0083                                                   ; / i  tmp2 = Number of bytes to fill
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               fb.refresh.exit:
0088 6952 0720  34         seto  @fb.dirty             ; Refresh screen
     6954 A31A     
0089               
0090 6956 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0091 6958 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 695A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 695C C2F9  30         mov   *stack+,r11           ; Pop r11
0094 695E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0094                       copy  "fb.get.nonblank.asm"   ; Get column of first non-blank char
     **** ****     > fb.get.nonblank.asm
0001               * FILE......: fb.get.nonblank.asm
0002               * Purpose...: Get column of first non-blank character
0003               
0004               ***************************************************************
0005               * fb.get.nonblank
0006               * Get column of first non-blank character in specified line
0007               ***************************************************************
0008               * bl @fb.get.nonblank
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * @outparm1 = Matching column
0012               * @outparm2 = Character on matching column
0013               ********|*****|*********************|**************************
0014               fb.get.nonblank:
0015 6960 0649  14         dect  stack
0016 6962 C64B  30         mov   r11,*stack            ; Save return address
0017                       ;------------------------------------------------------
0018                       ; Prepare for scanning
0019                       ;------------------------------------------------------
0020 6964 04E0  34         clr   @fb.column            ; Start from column 0
     6966 A30C     
0021               
0022 6968 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     696A 319E     
0023                                                   ; \ i   @fb.top      = Address top row in FB
0024                                                   ; | i   @fb.topline  = Top line in FB
0025                                                   ; | i   @fb.row      = Current row in FB
0026                                                   ; |                  (offset 0..@fb.scrrows)
0027                                                   ; | i   @fb.column   = Current column in FB
0028                                                   ; | i   @fb.colsline = Columns per line FB
0029                                                   ; |
0030                                                   ; / o   @fb.current  = Updated pointer
0031               
0032 696C 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     696E 37A8     
0033                                                   ; | i  @fb.row        = Row in frame buffer
0034                                                   ; / o  @fb.row.length = Length of row
0035               
0036 6970 C1A0  34         mov   @fb.row.length,tmp2   ; Set loop counter
     6972 A308     
0037 6974 1313  14         jeq   fb.get.nonblank.nomatch
0038                                                   ; Exit if empty line
0039 6976 C120  34         mov   @fb.current,tmp0      ; Pointer to current char
     6978 A302     
0040 697A 04C5  14         clr   tmp1
0041                       ;------------------------------------------------------
0042                       ; Scan line for non-blank character
0043                       ;------------------------------------------------------
0044               fb.get.nonblank.loop:
0045 697C D174  28         movb  *tmp0+,tmp1           ; Get character
0046 697E 130E  14         jeq   fb.get.nonblank.nomatch
0047                                                   ; Exit if empty line
0048 6980 0285  22         ci    tmp1,>2000            ; Whitespace?
     6982 2000     
0049 6984 1503  14         jgt   fb.get.nonblank.match
0050 6986 0606  14         dec   tmp2                  ; Counter--
0051 6988 16F9  14         jne   fb.get.nonblank.loop
0052 698A 1008  14         jmp   fb.get.nonblank.nomatch
0053                       ;------------------------------------------------------
0054                       ; Non-blank character found
0055                       ;------------------------------------------------------
0056               fb.get.nonblank.match:
0057 698C 6120  34         s     @fb.current,tmp0      ; Calculate column
     698E A302     
0058 6990 0604  14         dec   tmp0
0059 6992 C804  38         mov   tmp0,@outparm1        ; Save column
     6994 A018     
0060 6996 D805  38         movb  tmp1,@outparm2        ; Save character
     6998 A01A     
0061 699A 1004  14         jmp   fb.get.nonblank.exit
0062                       ;------------------------------------------------------
0063                       ; No non-blank character found
0064                       ;------------------------------------------------------
0065               fb.get.nonblank.nomatch:
0066 699C 04E0  34         clr   @outparm1             ; X=0
     699E A018     
0067 69A0 04E0  34         clr   @outparm2             ; Null
     69A2 A01A     
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071               fb.get.nonblank.exit:
0072 69A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 69A6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0095                       ;-----------------------------------------------------------------------
0096                       ; Screen panes
0097                       ;-----------------------------------------------------------------------
0098                       copy  "pane.topline.asm"      ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
0017 69A8 0649  14         dect  stack
0018 69AA C64B  30         mov   r11,*stack            ; Save return address
0019 69AC 0649  14         dect  stack
0020 69AE C644  30         mov   tmp0,*stack           ; Push tmp0
0021 69B0 0649  14         dect  stack
0022 69B2 C660  42         mov   @wyx,*stack           ; Push cursor position
     69B4 832A     
0023                       ;------------------------------------------------------
0024                       ; Any search matches
0025                       ;------------------------------------------------------
0026 69B6 0760  38         abs   @edb.srch.matches     ; Do we have any search matches?
     69B8 A5CE     
0027 69BA 130E  14         jeq   pane.topline.file     ; No search matches, show current file
0028                       ;------------------------------------------------------
0029                       ; Show search string
0030                       ;------------------------------------------------------
0031 69BC 06A0  32         bl    @putat
     69BE 2442     
0032 69C0 0000                   byte 0,0
0033 69C2 6AE6                   data txt.find         ; Show find message
0034               
0035 69C4 06A0  32         bl    @at
     69C6 2726     
0036 69C8 0006                   byte 0,6              ; y=0, x=6
0037               
0038 69CA 0204  20         li    tmp0,edb.srch.str     ; Get pointer to search string
     69CC A576     
0039 69CE C804  38         mov   tmp0,@parm1           ; Show search string
     69D0 A006     
0040 69D2 0204  20         li    tmp0,44               ; Set PAD length
     69D4 002C     
0041 69D6 1008  14         jmp   pane.topline.padstr
0042                       ;------------------------------------------------------
0043                       ; Show current file
0044                       ;------------------------------------------------------
0045               pane.topline.file:
0046 69D8 C820  54         mov   @edb.filename.ptr,@parm1
     69DA A514     
     69DC A006     
0047                                                   ; Get string to display
0048 69DE 06A0  32         bl    @at
     69E0 2726     
0049 69E2 0000                   byte 0,0              ; y=0, x=0
0050               
0051 69E4 0204  20         li    tmp0,50               ; Set PAD length
     69E6 0032     
0052                       ;------------------------------------------------------
0053                       ; Show padded string
0054                       ;------------------------------------------------------
0055               pane.topline.padstr:
0056 69E8 C804  38         mov   tmp0,@parm2           ; Set requested length
     69EA A008     
0057 69EC 0204  20         li    tmp0,32
     69EE 0020     
0058 69F0 C804  38         mov   tmp0,@parm3           ; Set character to fill
     69F2 A00A     
0059 69F4 0204  20         li    tmp0,rambuf
     69F6 A100     
0060 69F8 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     69FA A00C     
0061               
0062 69FC 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     69FE 34FA     
0063                                                   ; \ i  @parm1 = Pointer to string
0064                                                   ; | i  @parm2 = Requested length
0065                                                   ; | i  @parm3 = Fill character
0066                                                   ; | i  @parm4 = Pointer to buffer with
0067                                                   ; |             output string
0068                                                   ; / o  @outparm1 = Padded string
0069               
0070 6A00 C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     6A02 A018     
0071 6A04 06A0  32         bl    @xutst0               ; /
     6A06 2420     
0072                       ;------------------------------------------------------
0073                       ; Check if M1/M2 markers need to be shown
0074                       ;------------------------------------------------------
0075               pane.topline.showmarkers:
0076 6A08 C120  34         mov   @edb.block.m1,tmp0      ; \
     6A0A A50E     
0077 6A0C 0284  22         ci    tmp0,>ffff              ; | Skip early if M1 unset (>ffff)
     6A0E FFFF     
0078 6A10 132C  14         jeq   pane.topline.searchhits ; /
0079               
0080 6A12 C120  34         mov   @tv.task.oneshot,tmp0   ; \
     6A14 A22C     
0081 6A16 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     6A18 3812     
0082                                                     ; | Skip early if overlay message visible
0083 6A1A 1327  14         jeq   pane.topline.searchhits ; /
0084                       ;------------------------------------------------------
0085                       ; Show M1 marker
0086                       ;------------------------------------------------------
0087 6A1C 06A0  32         bl    @putat
     6A1E 2442     
0088 6A20 0034                   byte 0,52
0089 6A22 3B62                   data txt.m1           ; Show M1 marker message
0090               
0091 6A24 C820  54         mov   @edb.block.m1,@parm1
     6A26 A50E     
     6A28 A006     
0092 6A2A 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     6A2C 34CE     
0093                                                   ; \ i @parm1           = uint16
0094                                                   ; / o @uint16.unpacked = Output string
0095               
0096 6A2E 0204  20         li    tmp0,>0500
     6A30 0500     
0097 6A32 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     6A34 A02C     
0098               
0099 6A36 06A0  32         bl    @putat
     6A38 2442     
0100 6A3A 0037                   byte 0,55
0101 6A3C A02C                   data uint16.unpacked  ; Show M1 value
0102                       ;------------------------------------------------------
0103                       ; Show M2 marker
0104                       ;------------------------------------------------------
0105 6A3E C120  34         mov   @edb.block.m2,tmp0      ; \
     6A40 A510     
0106 6A42 0284  22         ci    tmp0,>ffff              ; | Skip early if M2 unset (>ffff)
     6A44 FFFF     
0107 6A46 1311  14         jeq   pane.topline.searchhits ; /
0108               
0109 6A48 06A0  32         bl    @putat
     6A4A 2442     
0110 6A4C 003D                   byte 0,61
0111 6A4E 3B66                   data txt.m2           ; Show M2 marker message
0112               
0113 6A50 C820  54         mov   @edb.block.m2,@parm1
     6A52 A510     
     6A54 A006     
0114 6A56 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     6A58 34CE     
0115                                                   ; \ i @parm1           = uint16
0116                                                   ; / o @uint16.unpacked = Output string
0117               
0118 6A5A 0204  20         li    tmp0,>0500
     6A5C 0500     
0119 6A5E D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     6A60 A02C     
0120               
0121 6A62 06A0  32         bl    @putat
     6A64 2442     
0122 6A66 0040                   byte 0,64
0123 6A68 A02C                   data uint16.unpacked  ; Show M2 value
0124                       ;------------------------------------------------------
0125                       ; Show search hits counter
0126                       ;------------------------------------------------------
0127               pane.topline.searchhits:
0128 6A6A 0760  38         abs   @edb.srch.matches     ; Any search hits?
     6A6C A5CE     
0129 6A6E 1328  14         jeq   pane.topline.total    ; No, skip to next display element
0130                       ;------------------------------------------------------
0131                       ; Add current hit number
0132                       ;------------------------------------------------------
0133 6A70 06A0  32         bl    @film
     6A72 2236     
0134 6A74 A100                   data rambuf,>00,18    ; Clear ram buffer
     6A76 0000     
     6A78 0012     
0135               
0136 6A7A C820  46         mov   @edb.srch.curmatch,@waux1
     6A7C A5D0     
     6A7E 833C     
0137                                                   ; \ Turn matches into base 1
0138 6A80 05A0  26         inc   @waux1                ; /
     6A82 833C     
0139               
0140 6A84 0242  22         andi  config,>7fff          ; Do not print number
     6A86 7FFF     
0141                                                   ; (Reset bit 0 in config register)
0142               
0143 6A88 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6A8A 2A56     
0144 6A8C 833C                   data waux1            ; \ i  p1    = Source
0145 6A8E A100                   data rambuf           ; | i  p2    = Destination
0146 6A90 30                     byte 48               ; | i  p3MSB = ASCII offset
0147 6A91   20                   byte 32               ; / i  p3LSB = Padding character
0148                       ;------------------------------------------------------
0149                       ; Add total hits
0150                       ;------------------------------------------------------
0151 6A92 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6A94 2A56     
0152 6A96 A5CE                   data edb.srch.matches ; \ i  p1    = Source
0153 6A98 A10C                   data rambuf + 12      ; | i  p2    = Destination
0154 6A9A 30                     byte 48               ; | i  p3MSB = ASCII offset
0155 6A9B   20                   byte 32               ; / i  p3LSB = Padding character
0156               
0157 6A9C 06A0  32         bl    @trimnum              ; Trim number to the left
     6A9E 2AAE     
0158 6AA0 A10C                   data rambuf+12,rambuf+5,32
     6AA2 A105     
     6AA4 0020     
0159               
0160 6AA6 0204  20         li    tmp0,>2f00            ; \ MSB = ASCII 47 (hex 2f) slash character
     6AA8 2F00     
0161 6AAA D804  38         movb  tmp0,@rambuf + 5      ; | Overwrite length-byte prefix in
     6AAC A105     
0162                                                   ; / trimmed number with slash
0163                       ;------------------------------------------------------
0164                       ; Display current hit/total hits
0165                       ;------------------------------------------------------
0166 6AAE 0204  20         li    tmp0,>0a00            ; \
     6AB0 0A00     
0167 6AB2 D804  38         movb  tmp0,@rambuf          ; / Set length prefix byte
     6AB4 A100     
0168               
0169 6AB6 06A0  32         bl    @putat
     6AB8 2442     
0170 6ABA 0046                   byte 0,70
0171 6ABC A100                   data rambuf           ; Display string
0172               
0173 6ABE 100E  14         jmp   pane.topline.exit
0174                       ;------------------------------------------------------
0175                       ; Display total number of lines in file
0176                       ;------------------------------------------------------
0177               pane.topline.total:
0178 6AC0 06A0  32         bl    @hchar
     6AC2 2832     
0179 6AC4 0044                   byte 0,68,32,6
     6AC6 2006     
0180 6AC8 FFFF                   data EOL              ; Remove any junk characters
0181               
0182 6ACA C820  46         mov   @edb.lines,@waux1     ; Get total lines
     6ACC A504     
     6ACE 833C     
0183               
0184 6AD0 06A0  32         bl    @putnum
     6AD2 2AD4     
0185 6AD4 004A                   byte 0,74             ; YX
0186 6AD6 833C                   data waux1,rambuf     ; Display total lines
     6AD8 A100     
0187 6ADA 30                     byte 48
0188 6ADB   20                   byte 32
0189                       ;------------------------------------------------------
0190                       ; Exit
0191                       ;------------------------------------------------------
0192               pane.topline.exit:
0193 6ADC C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6ADE 832A     
0194 6AE0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0195 6AE2 C2F9  30         mov   *stack+,r11           ; Pop r11
0196 6AE4 045B  20         b     *r11                  ; Return
0197               
0198 6AE6 0646     txt.find stri  'Find: '             ; Find message
     6AE8 696E     
     6AEA 643A     
     6AEC 20       
                   < stevie_b4.asm
0099                       copy  "pane.botline.asm"      ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0, tmp1
0015               ********|*****|*********************|**************************
0016               pane.botline:
0017 6AEE 0649  14         dect  stack
0018 6AF0 C64B  30         mov   r11,*stack            ; Save return address
0019 6AF2 0649  14         dect  stack
0020 6AF4 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 6AF6 0649  14         dect  stack
0022 6AF8 C645  30         mov   tmp1,*stack           ; Push tmp1
0023 6AFA 0649  14         dect  stack
0024 6AFC C660  42         mov   @wyx,*stack           ; Push cursor position
     6AFE 832A     
0025                       ;------------------------------------------------------
0026                       ; Prepare for special message
0027                       ;------------------------------------------------------
0028               pane.botline.mc:
0029 6B00 0760  38         abs   @tv.specmsg.ptr       ; \
     6B02 A23A     
0030                                                   ; / Check if special message set
0031               
0032 6B04 131F  14         jeq   pane.botline.shortcuts
0033                                                   ; No, skip message
0034               
0035 6B06 C820  54         mov   @tv.cmdb.hcolor,@parm1
     6B08 A226     
     6B0A A006     
0036                                                   ; Get color combination of CMDB header line
0037               
0038 6B0C 0204  20         li    tmp0,pane.botrow-1    ; \
     6B0E 001C     
0039 6B10 C804  38         mov   tmp0,@parm2           ; / Set row on physical screen
     6B12 A008     
0040               
0041 6B14 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     6B16 7DA6     
0042                                                   ; \ i  @parm1 = Color combination
0043                                                   ; / i  @parm2 = Row on physical screen
0044               
0045 6B18 06A0  32         bl    @at
     6B1A 2726     
0046 6B1C 1C00                   byte pane.botrow-1,0  ; Cursor YX position
0047                       ;------------------------------------------------------
0048                       ; Pad message to 80 characters
0049                       ;------------------------------------------------------
0050 6B1E C820  54         mov   @tv.specmsg.ptr,@parm1
     6B20 A23A     
     6B22 A006     
0051                                                   ; Pointer to length-prefixed string
0052 6B24 C820  54         mov   @const.80,@parm2      ; Requested length
     6B26 3954     
     6B28 A008     
0053 6B2A C820  54         mov   @const.32,@parm3      ; Fill with white space
     6B2C 3952     
     6B2E A00A     
0054 6B30 0204  20         li    tmp0,rambuf           ; \
     6B32 A100     
0055 6B34 C804  38         mov   tmp0,@parm4           ; / Pointer to work buffer
     6B36 A00C     
0056               
0057 6B38 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6B3A 34FA     
0058                                                   ; \ i  @parm1 = Pointer to string
0059                                                   ; | i  @parm2 = Requested length
0060                                                   ; | i  @parm3 = Fill character
0061                                                   ; | i  @parm4 = Pointer to buffer with
0062                                                   ; /             output string
0063                       ;------------------------------------------------------
0064                       ; Show special message
0065                       ;------------------------------------------------------
0066 6B3C C160  34         mov   @outparm1,tmp1        ; Pointer to padded string
     6B3E A018     
0067               
0068 6B40 06A0  32         bl    @xutst0               ; Display string
     6B42 2420     
0069                                                   ; \ i  tmp1 = Pointer to string
0070                                                   ; / i  @wyx = Cursor position at
0071                       ;------------------------------------------------------
0072                       ; Show block shortcuts if set
0073                       ;------------------------------------------------------
0074               pane.botline.shortcuts:
0075 6B44 C120  34         mov   @edb.block.m2,tmp0    ; \
     6B46 A510     
0076 6B48 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0077                                                   ; /
0078 6B4A 130D  14         jeq   pane.botline.show_keys
0079                       ;------------------------------------------------------
0080                       ; Show reduced block shortcuts (editor buffer locked)
0081                       ;------------------------------------------------------
0082 6B4C C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     6B4E A5DA     
0083 6B50 1305  14         jeq   pane.botline.shortcuts.all
0084                                                   ; No, show all block shortcuts
0085                       ;------------------------------------------------------
0086                       ; Show reduced block shortcuts
0087                       ;------------------------------------------------------
0088 6B52 06A0  32         bl    @putat
     6B54 2442     
0089 6B56 1D00                   byte pane.botrow,0
0090 6B58 3C3A                   data txt.keys.blocklock ; Show reduced shortcuts
0091 6B5A 103F  14         jmp   pane.botline.show_mode
0092                       ;------------------------------------------------------
0093                       ; Show all block shortcuts
0094                       ;------------------------------------------------------
0095               pane.botline.shortcuts.all:
0096 6B5C 06A0  32         bl    @putat
     6B5E 2442     
0097 6B60 1D00                   byte pane.botrow,0
0098 6B62 3BFE                   data txt.keys.block     ; Show block shortcuts
0099 6B64 103A  14         jmp   pane.botline.show_mode
0100                       ;------------------------------------------------------
0101                       ; Active TI Basic session?
0102                       ;------------------------------------------------------
0103               pane.botline.show_keys:
0104 6B66 C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     6B68 A0B4     
0105 6B6A 1321  14         jeq   pane.botline.show_keys.default
0106                                                   ; No show default keys only
0107                       ;------------------------------------------------------
0108                       ; Show search matches?
0109                       ;------------------------------------------------------
0110 6B6C 0760  38         abs   @edb.srch.matches     ; Do we have any search matches?
     6B6E A5CE     
0111 6B70 130A  14         jeq   pane.botline.show_keys.defaultb
0112                                                   ; No, show TI Basic session
0113                       ;------------------------------------------------------
0114                       ; Default Keys, TI Basic Session ID, Search matches
0115                       ;------------------------------------------------------
0116               pane.botline.show_keys.defaultd:
0117 6B72 06A0  32         bl    @putat
     6B74 2442     
0118 6B76 1D00                   byte pane.botrow,0
0119 6B78 3BC6                   data txt.keys.defaultd
0120                                                   ; Show defaults + TI Basic + Matches
0121               
0122 6B7A 06A0  32         bl    @hchar
     6B7C 2832     
0123 6B7E 1D3A                   byte pane.botrow,58,32,6
     6B80 2006     
0124 6B82 FFFF                   data EOL              ; Remove any leftover junk after key markers
0125               
0126 6B84 1009  14         jmp   pane.botline.show_keys.setbasic
0127                       ;------------------------------------------------------
0128                       ; Default Keys, TI Basic Session ID
0129                       ;------------------------------------------------------
0130               pane.botline.show_keys.defaultb
0131 6B86 06A0  32         bl    @putat
     6B88 2442     
0132 6B8A 1D00                   byte pane.botrow,0
0133 6B8C 3B7C                   data txt.keys.defaultb
0134                                                   ; Show defaults + TI Basic
0135               
0136 6B8E 06A0  32         bl    @hchar
     6B90 2832     
0137 6B92 1D1C                   byte pane.botrow,28,32,36
     6B94 2024     
0138 6B96 FFFF                   data EOL              ; Remove any leftover junk after key markers
0139                       ;------------------------------------------------------
0140                       ; Add TI Basic session ID to string
0141                       ;------------------------------------------------------
0142               pane.botline.show_keys.setbasic:
0143 6B98 C120  34         mov   @tib.session,tmp0     ; Get Session ID
     6B9A A0B4     
0144 6B9C 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     6B9E 0130     
0145                                                   ; | length-byte prefix and
0146                                                   ; / ASCII offset 48 (>30)
0147               
0148 6BA0 C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     6BA2 A100     
0149               
0150 6BA4 06A0  32         bl    @putat                ; \
     6BA6 2442     
0151 6BA8 1D1B                   byte pane.botrow,27   ; | Display session-ID string
0152 6BAA A100                   data rambuf           ; / Y=bottom row, X=27
0153               
0154 6BAC 1016  14         jmp   pane.botline.show_mode
0155                       ;------------------------------------------------------
0156                       ; Show default keys?
0157                       ;------------------------------------------------------
0158               pane.botline.show_keys.default:
0159 6BAE 0760  38         abs   @edb.srch.matches     ; Do we have any search matches?
     6BB0 A5CE     
0160 6BB2 130A  14         jeq   !                     ; No, show default keys
0161                       ;------------------------------------------------------
0162                       ; Default keys, Search matches
0163                       ;------------------------------------------------------
0164 6BB4 06A0  32         bl    @putat
     6BB6 2442     
0165 6BB8 1D00                   byte pane.botrow,0
0166 6BBA 3B9A                   data txt.keys.defaultc  ; Show default keys, including search keys
0167               
0168 6BBC 06A0  32         bl    @hchar
     6BBE 2832     
0169 6BC0 1D2B                   byte pane.botrow,43,32,21
     6BC2 2015     
0170 6BC4 FFFF                   data EOL              ; Remove any leftover junk after key markers
0171 6BC6 1009  14         jmp   pane.botline.show_mode
0172                       ;------------------------------------------------------
0173                       ; Default keys only
0174                       ;------------------------------------------------------
0175 6BC8 06A0  32 !       bl    @putat
     6BCA 2442     
0176 6BCC 1D00                   byte pane.botrow,0
0177 6BCE 3B6A                   data txt.keys.default ; Show default keys only
0178               
0179 6BD0 06A0  32         bl    @hchar
     6BD2 2832     
0180 6BD4 1D12                   byte pane.botrow,18,32,60
     6BD6 203C     
0181 6BD8 FFFF                   data EOL              ; Remove any leftover junk after key markers
0182                       ;------------------------------------------------------
0183                       ; Show text editing mode
0184                       ;------------------------------------------------------
0185               pane.botline.show_mode:
0186 6BDA C120  34         mov   @edb.insmode,tmp0
     6BDC A50A     
0187 6BDE 1605  14         jne   pane.botline.show_mode.insert
0188                       ;------------------------------------------------------
0189                       ; Overwrite mode
0190                       ;------------------------------------------------------
0191 6BE0 06A0  32         bl    @putat
     6BE2 2442     
0192 6BE4 1D3D                   byte  pane.botrow,61
0193 6BE6 3960                   data  txt.ovrwrite
0194 6BE8 100C  14         jmp   pane.botline.show_dirty
0195                       ;------------------------------------------------------
0196                       ; Insert mode
0197                       ;------------------------------------------------------
0198               pane.botline.show_mode.insert:
0199 6BEA C120  34         mov   @edb.autoinsert,tmp0
     6BEC A50C     
0200 6BEE 1305  14         jeq   pane.botline.show_mode.insert.noauto
0201                       ;------------------------------------------------------
0202                       ; Auto-Insert
0203                       ;------------------------------------------------------
0204 6BF0 06A0  32         bl    @putat
     6BF2 2442     
0205 6BF4 1D3D                   byte  pane.botrow,61
0206 6BF6 396C                   data  txt.autoinsert
0207 6BF8 1004  14         jmp   pane.botline.show_dirty
0208                       ;------------------------------------------------------
0209                       ; No Auto-Insert
0210                       ;------------------------------------------------------
0211               pane.botline.show_mode.insert.noauto:
0212 6BFA 06A0  32         bl    @putat
     6BFC 2442     
0213 6BFE 1D3D                   byte  pane.botrow,61
0214 6C00 3966                   data  txt.insert
0215                       ;------------------------------------------------------
0216                       ; Show if text was changed in editor buffer
0217                       ;------------------------------------------------------
0218               pane.botline.show_dirty:
0219 6C02 C120  34         mov   @edb.dirty,tmp0
     6C04 A506     
0220 6C06 1305  14         jeq   pane.botline.locked
0221                       ;------------------------------------------------------
0222                       ; Show "*"
0223                       ;------------------------------------------------------
0224 6C08 06A0  32         bl    @putat
     6C0A 2442     
0225 6C0C 1D41                   byte pane.botrow,65
0226 6C0E 3972                   data txt.star
0227 6C10 100C  14         jmp   pane.botline.show_linecol
0228                       ;------------------------------------------------------
0229                       ; Show locked icon
0230                       ;------------------------------------------------------
0231               pane.botline.locked:
0232 6C12 C120  34         mov    @edb.locked,tmp0
     6C14 A5DA     
0233 6C16 1305  14         jeq    pane.botline.nochange
0234 6C18 06A0  32         bl     @putat
     6C1A 2442     
0235 6C1C 1D41                    byte pane.botrow,65
0236 6C1E 3974                    data txt.lockicon    ; Show locked icon
0237 6C20 1004  14         jmp    pane.botline.show_linecol
0238                       ;------------------------------------------------------
0239                       ; Show " "
0240                       ;------------------------------------------------------
0241               pane.botline.nochange:
0242 6C22 06A0  32         bl    @putat
     6C24 2442     
0243 6C26 1D41                   byte pane.botrow,65
0244 6C28 3C98                   data txt.ws1          ; Single white space
0245                       ;------------------------------------------------------
0246                       ; Show "line,column"
0247                       ;------------------------------------------------------
0248               pane.botline.show_linecol:
0249 6C2A C820  54         mov   @fb.row,@parm1
     6C2C A306     
     6C2E A006     
0250 6C30 06A0  32         bl    @fb.row2line          ; Row to editor line
     6C32 3184     
0251                                                   ; \ i @fb.topline = Top line in frame buffer
0252                                                   ; | i @parm1      = Row in frame buffer
0253                                                   ; / o @outparm1   = Matching line in EB
0254               
0255 6C34 05A0  34         inc   @outparm1             ; Add base 1
     6C36 A018     
0256                       ;------------------------------------------------------
0257                       ; Show line
0258                       ;------------------------------------------------------
0259 6C38 06A0  32         bl    @putnum
     6C3A 2AD4     
0260 6C3C 1D42                   byte  pane.botrow,66  ; YX
0261 6C3E A018                   data  outparm1,rambuf
     6C40 A100     
0262 6C42 30                     byte  48              ; ASCII offset
0263 6C43   20                   byte  32              ; Padding character
0264                       ;------------------------------------------------------
0265                       ; Show delimiter
0266                       ;------------------------------------------------------
0267 6C44 06A0  32         bl    @putat
     6C46 2442     
0268 6C48 1D47                   byte  pane.botrow,71
0269 6C4A 3958                   data  txt.colon
0270                       ;------------------------------------------------------
0271                       ; Show column
0272                       ;------------------------------------------------------
0273 6C4C 06A0  32         bl    @film
     6C4E 2236     
0274 6C50 A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     6C52 0020     
     6C54 000C     
0275               
0276 6C56 C120  34         mov   @fb.column,tmp0       ; Get column
     6C58 A30C     
0277 6C5A A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     6C5C A310     
0278 6C5E 0584  14         inc   tmp0                  ; Offset 1
0279 6C60 C804  30         mov   tmp0,@waux1           ; Save in temporary
     6C62 833C     
0280               
0281 6C64 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6C66 2A56     
0282 6C68 833C                   data waux1,rambuf     ; \
     6C6A A100     
0283 6C6C 30                     byte 48               ; | ASCII offset
0284 6C6D   20                   byte 32               ; / Fill character
0285               
0286 6C6E 06A0  32         bl    @trimnum              ; Trim number to the left
     6C70 2AAE     
0287 6C72 A100                   data rambuf,rambuf+5,32
     6C74 A105     
     6C76 0020     
0288               
0289 6C78 0204  20         li    tmp0,>0500            ; "Fix" number length to clear junk chars
     6C7A 0500     
0290 6C7C D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     6C7E A105     
0291                       ;------------------------------------------------------
0292                       ; Do not show line length if option is off
0293                       ;------------------------------------------------------
0294 6C80 C120  34         mov   @tv.show.linelen,tmp0 ; Check if line length is to be shown
     6C82 A23E     
0295 6C84 1337  14         jeq   pane.botline.show_linecol.colstring
0296                                                   ; No, skip showing line length
0297                       ;------------------------------------------------------
0298                       ; Decide if row length is to be shown
0299                       ;------------------------------------------------------
0300 6C86 C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     6C88 A30C     
0301 6C8A A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     6C8C A310     
0302 6C8E 0584  14         inc   tmp0                  ; /
0303 6C90 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     6C92 A308     
0304 6C94 1101  14         jlt   pane.botline.show_linecol.linelen
0305 6C96 102E  14         jmp   pane.botline.show_linecol.colstring
0306                                                   ; Yes, skip showing row length
0307                       ;------------------------------------------------------
0308                       ; Add ',' delimiter and length of line to string
0309                       ;------------------------------------------------------
0310               pane.botline.show_linecol.linelen:
0311 6C98 C120  34         mov   @fb.column,tmp0       ; \
     6C9A A30C     
0312 6C9C A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     6C9E A310     
0313 6CA0 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     6CA2 A107     
0314 6CA4 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     6CA6 0009     
0315 6CA8 1101  14         jlt   !                     ; | column.
0316 6CAA 0585  14         inc   tmp1                  ; /
0317               
0318 6CAC 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     6CAE 2F00     
0319 6CB0 DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0320               
0321 6CB2 C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     6CB4 833C     
0322               
0323 6CB6 06A0  32         bl    @mknum
     6CB8 2A56     
0324 6CBA A308                   data  fb.row.length,rambuf
     6CBC A100     
0325 6CBE 30                     byte  48              ; ASCII offset
0326 6CBF   20                   byte  32              ; Padding character
0327               
0328 6CC0 C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     6CC2 833C     
0329               
0330 6CC4 C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     6CC6 A308     
0331 6CC8 0284  22         ci    tmp0,10               ; /
     6CCA 000A     
0332 6CCC 110C  14         jlt   pane.botline.show_line.1digit
0333                       ;------------------------------------------------------
0334                       ; Assert
0335                       ;------------------------------------------------------
0336 6CCE 0284  22         ci    tmp0,99
     6CD0 0063     
0337 6CD2 1205  14         jle   pane.botline.show_line.2digits
0338                       ;------------------------------------------------------
0339                       ; Show length of line (3 digits)
0340                       ;------------------------------------------------------
0341               pane.botline.show_line.3digits:
0342 6CD4 0204  20         li    tmp0,rambuf+2
     6CD6 A102     
0343 6CD8 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0344 6CDA DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0345 6CDC 1006  14         jmp   pane.botline.show_line.rest
0346                       ;------------------------------------------------------
0347                       ; Show length of line (2 digits)
0348                       ;------------------------------------------------------
0349               pane.botline.show_line.2digits:
0350 6CDE 0204  20         li    tmp0,rambuf+3
     6CE0 A103     
0351 6CE2 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0352 6CE4 1002  14         jmp   pane.botline.show_line.rest
0353                       ;------------------------------------------------------
0354                       ; Show length of line (1 digit)
0355                       ;------------------------------------------------------
0356               pane.botline.show_line.1digit:
0357 6CE6 0204  20         li    tmp0,rambuf+4
     6CE8 A104     
0358               pane.botline.show_line.rest:
0359 6CEA DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0360 6CEC DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     6CEE A100     
0361 6CF0 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     6CF2 A100     
0362                       ;------------------------------------------------------
0363                       ; Show column string
0364                       ;------------------------------------------------------
0365               pane.botline.show_linecol.colstring:
0366 6CF4 06A0  32         bl    @putat
     6CF6 2442     
0367 6CF8 1D48                   byte pane.botrow,72
0368 6CFA A105                   data rambuf+5         ; Show string
0369                       ;------------------------------------------------------
0370                       ; Exit
0371                       ;------------------------------------------------------
0372               pane.botline.exit:
0373 6CFC C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6CFE 832A     
0374 6D00 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0375 6D02 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0376 6D04 C2F9  30         mov   *stack+,r11           ; Pop r11
0377 6D06 045B  20         b     *r11                  ; Return
                   < stevie_b4.asm
0100                       copy  "pane.botline.busy.asm" ; Bottom line busy indicator
     **** ****     > pane.botline.busy.asm
0001               * FILE......: pane.botline.busy.asm
0002               * Purpose...: Busy indicator functions
0003               
0004               ***************************************************************
0005               * pane.botline.busy.on
0006               * Turn on busy indicator (colorscheme)
0007               ***************************************************************
0008               * bl  @pane.botline.busy.on
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.botline.busy.on:
0020 6D08 0649  14         dect  stack
0021 6D0A C64B  30         mov   r11,*stack            ; Save return address
0022 6D0C 0649  14         dect  stack
0023 6D0E C660  46         mov   @parm1,*stack         ; Push @parm1
     6D10 A006     
0024                       ;------------------------------------------------------
0025                       ; Show busyline indicator
0026                       ;------------------------------------------------------
0027 6D12 06A0  32         bl    @hchar
     6D14 2832     
0028 6D16 1D00                   byte pane.botrow,0,32,78
     6D18 204E     
0029 6D1A FFFF                   data EOL              ; Clear hint on bottom row
0030               
0031 6D1C C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     6D1E A220     
     6D20 A006     
0032 6D22 06A0  32         bl    @pane.colorscheme.botline
     6D24 70FE     
0033                                                   ; Set colros for bottom line
0034                                                   ; \ i  @parm1 = Color combination
0035                                                   ; /
0036                       ;------------------------------------------------------
0037                       ; Exit
0038                       ;------------------------------------------------------
0039               pane.botline.busy.on.exit:
0040 6D26 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6D28 A006     
0041 6D2A C2F9  30         mov   *stack+,r11           ; Pop R11
0042 6D2C 045B  20         b     *r11                  ; Return to caller
0043               
0044               
0045               ***************************************************************
0046               * pane.botline.busy.off
0047               * Turn off busyline indicator (colorscheme)
0048               ***************************************************************
0049               * bl  @pane.botline.busy.off
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * none
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * none
0056               *--------------------------------------------------------------
0057               * Register usage
0058               * none
0059               ********|*****|*********************|**************************
0060               pane.botline.busy.off:
0061 6D2E 0649  14         dect  stack
0062 6D30 C64B  30         mov   r11,*stack            ; Save return address
0063 6D32 0649  14         dect  stack
0064 6D34 C660  46         mov   @parm1,*stack         ; Push @parm1
     6D36 A006     
0065                       ;------------------------------------------------------
0066                       ; Hide busyline indicator
0067                       ;------------------------------------------------------
0068 6D38 06A0  32         bl    @hchar
     6D3A 2832     
0069 6D3C 1D00                   byte pane.botrow,0,32,78
     6D3E 204E     
0070 6D40 FFFF                   data EOL              ; Erase indicator in bottom row
0071               
0072 6D42 C820  54         mov   @tv.botcolor,@parm1   ; Set normal color
     6D44 A21C     
     6D46 A006     
0073 6D48 06A0  32         bl    @pane.colorscheme.botline
     6D4A 70FE     
0074                                                   ; Set colors for bottom line
0075                                                   ; \ i  @parm1 = Color combination
0076                                                   ; /
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080               pane.botline.busy.off.exit:
0081 6D4C C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6D4E A006     
0082 6D50 C2F9  30         mov   *stack+,r11           ; Pop R11
0083 6D52 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0101                       copy  "pane.errline.asm"      ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
0023 6D54 0649  14         dect  stack
0024 6D56 C64B  30         mov   r11,*stack            ; Save return address
0025 6D58 0649  14         dect  stack
0026 6D5A C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6D5C 0649  14         dect  stack
0028 6D5E C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6D60 0649  14         dect  stack
0030 6D62 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 6D64 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     6D66 001D     
0035 6D68 C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 6D6A 6160  34         s     @tv.error.rows,tmp1   ; /
     6D6C A232     
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
0041 6D6E C805  38         mov   tmp1,@parm2           ; Row on physical screen
     6D70 A008     
0042               
0043 6D72 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     6D74 7DA6     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 6D76 0585  14         inc   tmp1                  ; Next row
0048 6D78 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 6D7A 11F9  14         jlt   pane.errline.drawcolor.loop
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
0055 6D7C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 6D7E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 6D80 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 6D82 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 6D84 045B  20         b     *r11                  ; Return to caller
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
0082 6D86 0649  14         dect  stack
0083 6D88 C64B  30         mov   r11,*stack            ; Save return address
0084 6D8A 0649  14         dect  stack
0085 6D8C C644  30         mov   tmp0,*stack           ; Push tmp0
0086 6D8E 0649  14         dect  stack
0087 6D90 C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 6D92 0205  20         li    tmp1,>00f6            ; White on dark red
     6D94 00F6     
0090 6D96 C805  38         mov   tmp1,@parm1
     6D98 A006     
0091               
0092 6D9A 06A0  32         bl    @pane.errline.drawcolor
     6D9C 6D54     
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
0099 6D9E 0204  20         li    tmp0,tv.error.msg
     6DA0 A240     
0100 6DA2 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6DA4 A006     
0101               
0102 6DA6 0204  20         li    tmp0,240
     6DA8 00F0     
0103 6DAA C804  38         mov   tmp0,@parm2           ; Set requested length
     6DAC A008     
0104               
0105 6DAE 0204  20         li    tmp0,32
     6DB0 0020     
0106 6DB2 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6DB4 A00A     
0107               
0108 6DB6 0204  20         li    tmp0,rambuf
     6DB8 A100     
0109 6DBA C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6DBC A00C     
0110               
0111 6DBE 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6DC0 34FA     
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
0120 6DC2 06A0  32         bl    @at
     6DC4 2726     
0121 6DC6 1A00                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 6DC8 C160  34         mov   @outparm1,tmp1        ; \ Display error message
     6DCA A018     
0124 6DCC 06A0  32         bl    @xutst0               ; /
     6DCE 2420     
0125               
0126 6DD0 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6DD2 31C6     
0127                                                   ; \ i  @tv.ruler.visible = Ruler visible
0128                                                   ; | i  @edb.special.file = Special file flag
0129                                                   ; / i  @tv.error.visible = Error visible
0130               
0131 6DD4 0720  34         seto  @tv.error.visible     ; Error line is visible
     6DD6 A230     
0132                       ;------------------------------------------------------
0133                       ; Exit
0134                       ;------------------------------------------------------
0135               pane.errline.show.exit:
0136 6DD8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 6DDA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 6DDC C2F9  30         mov   *stack+,r11           ; Pop r11
0139 6DDE 045B  20         b     *r11                  ; Return to caller
0140               
0141               
0142               
0143               ***************************************************************
0144               * pane.errline.hide
0145               * Hide error line
0146               ***************************************************************
0147               * bl @pane.errline.hide
0148               *--------------------------------------------------------------
0149               * INPUT
0150               * none
0151               *--------------------------------------------------------------
0152               * OUTPUT
0153               * none
0154               *--------------------------------------------------------------
0155               * Register usage
0156               * tmp0
0157               *--------------------------------------------------------------
0158               * Hiding the error line passes pane focus to frame buffer.
0159               ********|*****|*********************|**************************
0160               pane.errline.hide:
0161 6DE0 0649  14         dect  stack
0162 6DE2 C64B  30         mov   r11,*stack            ; Save return address
0163 6DE4 0649  14         dect  stack
0164 6DE6 C644  30         mov   tmp0,*stack           ; Push tmp0
0165                       ;------------------------------------------------------
0166                       ; Get color combination
0167                       ;------------------------------------------------------
0168 6DE8 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     6DEA 339E     
0169               
0170 6DEC C120  34         mov   @cmdb.visible,tmp0
     6DEE A702     
0171 6DF0 1303  14         jeq   pane.errline.hide.fbcolor
0172                       ;------------------------------------------------------
0173                       ; CMDB pane color
0174                       ;------------------------------------------------------
0175 6DF2 C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     6DF4 A226     
0176 6DF6 1003  14         jmp   !
0177                       ;------------------------------------------------------
0178                       ; Frame buffer color
0179                       ;------------------------------------------------------
0180               pane.errline.hide.fbcolor:
0181 6DF8 C120  34         mov   @tv.color,tmp0        ; Get colors
     6DFA A218     
0182 6DFC 0984  32         srl   tmp0,8                ; Get rid of status line colors
0183                       ;------------------------------------------------------
0184                       ; Dump colors
0185                       ;------------------------------------------------------
0186 6DFE C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     6E00 A006     
0187               
0188 6E02 06A0  32         bl    @pane.errline.drawcolor
     6E04 6D54     
0189                                                   ; Draw color on rows in error pane
0190                                                   ; \ i  @tv.error.rows = Number of rows
0191                                                   ; / i  @parm1         = Color combination
0192               
0193 6E06 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     6E08 A230     
0194               
0195 6E0A 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6E0C 31C6     
0196                                                   ; \ i  @tv.ruler.visible = Ruler visible
0197                                                   ; | i  @edb.special.file = Special file flag
0198                                                   ; / i  @tv.error.visible = Error visible
0199                       ;------------------------------------------------------
0200                       ; Exit
0201                       ;------------------------------------------------------
0202               pane.errline.hide.exit:
0203 6E0E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0204 6E10 C2F9  30         mov   *stack+,r11           ; Pop r11
0205 6E12 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0102                       copy  "pane.utils.hint.asm"   ; Show hint in pane
     **** ****     > pane.utils.hint.asm
0001               * FILE......: pane.utils.asm
0002               * Purpose...: Show hint message in pane
0003               
0004               ***************************************************************
0005               * pane.show_hintx
0006               * Show hint message
0007               ***************************************************************
0008               * bl  @pane.show_hintx
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Cursor YX position
0012               * @parm2 = Pointer to Length-prefixed string
0013               * @parm3 = Pad length
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1, tmp2
0020               ********|*****|*********************|**************************
0021               pane.show_hintx:
0022 6E14 0649  14         dect  stack
0023 6E16 C64B  30         mov   r11,*stack            ; Save return address
0024 6E18 0649  14         dect  stack
0025 6E1A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6E1C 0649  14         dect  stack
0027 6E1E C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6E20 0649  14         dect  stack
0029 6E22 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6E24 0649  14         dect  stack
0031 6E26 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-------------------------------------------------------
0033                       ; Display string
0034                       ;-------------------------------------------------------
0035 6E28 C820  46         mov   @parm1,@wyx           ; Set cursor
     6E2A A006     
     6E2C 832A     
0036 6E2E C160  34         mov   @parm2,tmp1           ; Get string to display
     6E30 A008     
0037 6E32 06A0  32         bl    @xutst0               ; Display string
     6E34 2420     
0038                       ;-------------------------------------------------------
0039                       ; Get number of bytes to fill ...
0040                       ;-------------------------------------------------------
0041 6E36 C120  34         mov   @parm2,tmp0           ; \
     6E38 A008     
0042 6E3A D114  26         movb  *tmp0,tmp0            ; | Get length byte of hint
0043 6E3C 0984  32         srl   tmp0,8                ; / MSB to LSB
0044                       ;-------------------------------------------------------
0045                       ; Skip padding if source string longer than pad length
0046                       ;-------------------------------------------------------
0047 6E3E 8804  34         c     tmp0,@parm3           ;  String too long?
     6E40 A00A     
0048 6E42 1518  14         jgt   pane.show_hintx.exit  ;  Yes, exit
0049 6E44 1317  14         jeq   pane.show_hintx.exit  ;  Yes, exit
0050                       ;-------------------------------------------------------
0051                       ; Prepare for padding
0052                       ;-------------------------------------------------------
0053 6E46 C1C4  18         mov   tmp0,tmp3             ; Work copy
0054 6E48 C184  18         mov   tmp0,tmp2             ; \
0055 6E4A 0506  14         neg   tmp2                  ; | Calc number of bytes
0056 6E4C A1A0  34         a     @parm3,tmp2           ; / to fill
     6E4E A00A     
0057                       ;------------------------------------------------------
0058                       ; Assert
0059                       ;------------------------------------------------------
0060 6E50 0286  22         ci    tmp2,80               ; Pad length bogus?
     6E52 0050     
0061 6E54 1204  14         jle   !                     ; No, is fine. Continue
0062 6E56 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6E58 FFCE     
0063 6E5A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6E5C 2026     
0064                       ;-------------------------------------------------------
0065                       ; ... and clear until end of line
0066                       ;-------------------------------------------------------
0067 6E5E C120  34 !       mov   @parm1,tmp0           ; \ Restore YX position
     6E60 A006     
0068 6E62 A107  18         a     tmp3,tmp0             ; | Adjust X position to end of string
0069 6E64 C804  30         mov   tmp0,@wyx             ; / Set cursor
     6E66 832A     
0070               
0071 6E68 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6E6A 23FA     
0072                                                   ; \ i  @wyx = Cursor position
0073                                                   ; / o  tmp0 = VDP target address
0074               
0075 6E6C 0205  20         li    tmp1,32               ; Byte to fill
     6E6E 0020     
0076               
0077 6E70 06A0  32         bl    @xfilv                ; Clear line
     6E72 2294     
0078                                                   ; i \  tmp0 = start address
0079                                                   ; i |  tmp1 = byte to fill
0080                                                   ; i /  tmp2 = number of bytes to fill
0081                       ;-------------------------------------------------------
0082                       ; Exit
0083                       ;-------------------------------------------------------
0084               pane.show_hintx.exit:
0085 6E74 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0086 6E76 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0087 6E78 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 6E7A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 6E7C C2F9  30         mov   *stack+,r11           ; Pop R11
0090 6E7E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0103                       ;-----------------------------------------------------------------------
0104                       ; Screen pane utilities
0105                       ;-----------------------------------------------------------------------
0106                       copy  "pane.colorscheme.cycle.asm"   ; Cycle through color schemes
     **** ****     > pane.colorscheme.cycle.asm
0001               * FILE......: pane.colorscheme.cycle.asm
0002               * Purpose...: Cycle through available color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.cycle
0006               * Cycle through available color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.cycle
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.colorscheme.cycle:
0017 6E80 0649  14         dect  stack
0018 6E82 C64B  30         mov   r11,*stack            ; Push return address
0019 6E84 0649  14         dect  stack
0020 6E86 C644  30         mov   tmp0,*stack           ; Push tmp0
0021               
0022 6E88 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     6E8A A212     
0023 6E8C 0284  22         ci    tmp0,tv.colorscheme.entries
     6E8E 000C     
0024                                                   ; Last entry reached?
0025 6E90 1103  14         jlt   !
0026 6E92 0204  20         li    tmp0,1                ; Reset color scheme index
     6E94 0001     
0027 6E96 1001  14         jmp   pane.colorscheme.switch
0028 6E98 0584  14 !       inc   tmp0
0029                       ;-------------------------------------------------------
0030                       ; Switch to new color scheme
0031                       ;-------------------------------------------------------
0032               pane.colorscheme.switch:
0033 6E9A C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     6E9C A212     
0034               
0035 6E9E 06A0  32         bl    @pane.colorscheme.load
     6EA0 6EDE     
0036                                                   ; Load current color scheme
0037                       ;-------------------------------------------------------
0038                       ; Show current color palette message
0039                       ;-------------------------------------------------------
0040 6EA2 C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     6EA4 832A     
     6EA6 833C     
0041               
0042 6EA8 06A0  32         bl    @putnum
     6EAA 2AD4     
0043 6EAC 003E                   byte 0,62
0044 6EAE A212                   data tv.colorscheme,rambuf,>3020
     6EB0 A100     
     6EB2 3020     
0045               
0046 6EB4 06A0  32         bl    @putat
     6EB6 2442     
0047 6EB8 0034                   byte 0,52
0048 6EBA 3D82                   data txt.colorscheme  ; Show color palette message
0049               
0050 6EBC C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     6EBE 833C     
     6EC0 832A     
0051                       ;-------------------------------------------------------
0052                       ; Delay
0053                       ;-------------------------------------------------------
0054 6EC2 0204  20         li    tmp0,6000
     6EC4 1770     
0055 6EC6 0604  14 !       dec   tmp0
0056 6EC8 16FE  14         jne   -!
0057                       ;-------------------------------------------------------
0058                       ; Setup one shot task for removing message
0059                       ;-------------------------------------------------------
0060 6ECA 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6ECC 3812     
0061 6ECE C804  38         mov   tmp0,@tv.task.oneshot
     6ED0 A22C     
0062               
0063 6ED2 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6ED4 2FA8     
0064 6ED6 0003                   data 3                ; / for getting consistent delay
0065                       ;-------------------------------------------------------
0066                       ; Exit
0067                       ;-------------------------------------------------------
0068               pane.colorscheme.cycle.exit:
0069 6ED8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6EDA C2F9  30         mov   *stack+,r11           ; Pop R11
0071 6EDC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0107                       copy  "pane.colorscheme.load.asm"    ; Load color scheme
     **** ****     > pane.colorscheme.load.asm
0001               * FILE......: pane.colorscheme.load.asm
0002               * Purpose...: Load color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.load
0006               * Load color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.colorscheme = Index into color scheme table
0012               * @parm1          = Skip screen off if >FFFF
0013               * @parm2          = Skip colorizing marked lines if >FFFF
0014               * @parm3          = Only colorize CMDB pane if >FFFF
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0,tmp1,tmp2
0021               ********|*****|*********************|**************************
0022               pane.colorscheme.load:
0023 6EDE 0649  14         dect  stack
0024 6EE0 C64B  30         mov   r11,*stack            ; Save return address
0025 6EE2 0649  14         dect  stack
0026 6EE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6EE6 0649  14         dect  stack
0028 6EE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6EEA 0649  14         dect  stack
0030 6EEC C646  30         mov   tmp2,*stack           ; Push tmp2
0031 6EEE 0649  14         dect  stack
0032 6EF0 C660  46         mov   @parm1,*stack         ; Push parm1
     6EF2 A006     
0033 6EF4 0649  14         dect  stack
0034 6EF6 C660  46         mov   @parm2,*stack         ; Push parm2
     6EF8 A008     
0035 6EFA 0649  14         dect  stack
0036 6EFC C660  46         mov   @parm3,*stack         ; Push parm3
     6EFE A00A     
0037                       ;-------------------------------------------------------
0038                       ; Turn screen off
0039                       ;-------------------------------------------------------
0040 6F00 C120  34         mov   @parm1,tmp0
     6F02 A006     
0041 6F04 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     6F06 FFFF     
0042 6F08 1302  14         jeq   !                     ; Yes, so skip screen off
0043 6F0A 06A0  32         bl    @scroff               ; Turn screen off
     6F0C 26E6     
0044                       ;-------------------------------------------------------
0045                       ; Calculate index into colorscheme table
0046                       ;-------------------------------------------------------
0047 6F0E C120  34 !       mov   @tv.colorscheme,tmp0      ; Get color scheme index
     6F10 A212     
0048 6F12 0604  14         dec   tmp0                      ; Internally work with base 0
0049 6F14 C144  18         mov   tmp0,tmp1                 ; \
0050 6F16 0A34  22         sla   tmp0,3                    ; | index = index * 10
0051 6F18 0A15  18         sla   tmp1,1                    ; |
0052 6F1A A105  18         a     tmp1,tmp0                 ; /
0053 6F1C 0224  22         ai    tmp0,tv.colorscheme.table ; Add base for color scheme data table
     6F1E 7E48     
0054                       ;-------------------------------------------------------
0055                       ; ABCD) Get FG/BG colors framebuffer and topline
0056                       ;-------------------------------------------------------
0057 6F20 C174  30         mov   *tmp0+,tmp1           ; Get colors ABCD
0058 6F22 C805  38         mov   tmp1,@tv.color        ; Save colors ABCD
     6F24 A218     
0059                       ;-------------------------------------------------------
0060                       ; EFGH) Get cursor color CMDB & framebuffer
0061                       ;-------------------------------------------------------
0062 6F26 C154  26         mov   *tmp0,tmp1            ; Get colors EFGH
0063 6F28 0245  22         andi  tmp1,>00ff            ; Only keep LSB (GH)
     6F2A 00FF     
0064 6F2C C805  38         mov   tmp1,@tv.curcolor     ; Save cursor color
     6F2E A216     
0065                       ;-------------------------------------------------------
0066                       ; EFGH) Get FG/BG color CMDB pane
0067                       ;-------------------------------------------------------
0068 6F30 C174  30         mov   *tmp0+,tmp1           ; Get colors EFGH again
0069 6F32 0245  22         andi  tmp1,>ff00            ; Only keep MSB (EF)
     6F34 FF00     
0070 6F36 0985  32         srl   tmp1,8                ; MSB to LSB
0071 6F38 C805  38         mov   tmp1,@tv.cmdb.color   ; Save CMDB pane color
     6F3A A224     
0072                       ;-------------------------------------------------------
0073                       ; IJKL) Get busy and marker colors
0074                       ;-------------------------------------------------------
0075 6F3C C154  26         mov   *tmp0,tmp1            ; Get colors IJKL
0076 6F3E 0985  32         srl   tmp1,8                ; \ Right align IJ and
0077 6F40 C805  38         mov   tmp1,@tv.busycolor    ; / save to @tv.busycolor
     6F42 A220     
0078 6F44 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL again
0079 6F46 0245  22         andi  tmp1,>00ff            ; \ save KL to @tv.markcolor
     6F48 00FF     
0080 6F4A C805  38         mov   tmp1,@tv.markcolor    ; /
     6F4C A21E     
0081                       ;-------------------------------------------------------
0082                       ; MNOP) Colors CMDB header line
0083                       ;-------------------------------------------------------
0084 6F4E C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0085 6F50 0985  32         srl   tmp1,8                ; MSB to LSB
0086 6F52 C805  38         mov   tmp1,@tv.cmdb.hcolor  ; Save CMDB header color
     6F54 A226     
0087                       ;-------------------------------------------------------
0088                       ; MNOP) Get ruler and line/col counters color
0089                       ;-------------------------------------------------------
0090 6F56 C174  30         mov   *tmp0+,tmp1           ; Get colors MNOP again
0091 6F58 0245  22         andi  tmp1,>000f            ; Only keep P
     6F5A 000F     
0092 6F5C 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0093 6F5E C805  38         mov   tmp1,@tv.rulercolor   ; Save ruler color
     6F60 A222     
0094                       ;-------------------------------------------------------
0095                       ; QRST) Colors bottom line
0096                       ;-------------------------------------------------------
0097 6F62 C174  30         mov   *tmp0+,tmp1           ; Get colors QRST
0098 6F64 0985  32         srl   tmp1,8                ; MSB to LSB
0099 6F66 C805  38         mov   tmp1,@tv.botcolor     ; Save bottom line color
     6F68 A21C     
0100                       ;-------------------------------------------------------
0101                       ; Check if only CMDB needs to be colorized
0102                       ;-------------------------------------------------------
0103 6F6A 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     6F6C A00A     
     6F6E 2022     
0104 6F70 133B  14         jeq   pane.colorscheme.cmdbpane
0105                                                   ; Yes, shortcut jump to CMDB pane
0106                       ;-------------------------------------------------------
0107                       ; MNOP) Write sprite color of line and column indicators to SAT
0108                       ;-------------------------------------------------------
0109 6F72 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0110 6F74 0245  22         andi  tmp1,>00f0            ; Only keep O
     6F76 00F0     
0111 6F78 0A45  24         sla   tmp1,4                ; Move O to MSB
0112 6F7A D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     6F7C A05D     
0113 6F7E D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     6F80 A061     
0114                       ;-------------------------------------------------------
0115                       ; Dump colors to VDP register 7 (text mode)
0116                       ;-------------------------------------------------------
0117 6F82 C120  34         mov   @tv.color,tmp0        ; Get work copy of colors ABCD
     6F84 A218     
0118 6F86 0984  32         srl   tmp0,8                ; MSB to LSB
0119 6F88 0264  22         ori   tmp0,>0700            ; VDP register #7
     6F8A 0700     
0120 6F8C 06A0  32         bl    @putvrx               ; Write VDP register
     6F8E 2334     
0121                       ;-------------------------------------------------------
0122                       ; Dump colors for frame buffer pane (TAT)
0123                       ;-------------------------------------------------------
0124 6F90 C120  34         mov   @tv.ruler.visible,tmp0
     6F92 A210     
0125 6F94 130C  14         jeq   pane.colorscheme.fbdump.noruler
0126 6F96 C120  34         mov   @cmdb.dialog,tmp0
     6F98 A720     
0127 6F9A 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     6F9C 0068     
0128 6F9E 1307  14         jeq   pane.colorscheme.fbdump.noruler
0129                                                   ; Yes, skip ruler
0130                       ;-------------------------------------------------------
0131                       ; Ruler visible on screen (TAT)
0132                       ;-------------------------------------------------------
0133 6FA0 0204  20         li    tmp0,vdp.fb.toprow.tat
     6FA2 09D0     
0134 6FA4 0224  22         ai    tmp0,160              ; Skip 2 top rows
     6FA6 00A0     
0135 6FA8 0206  20         li    tmp2,(pane.botrow-2)*80
     6FAA 0870     
0136                                                   ; Number of bytes to fill
0137 6FAC 1004  14         jmp   pane.colorscheme.checkcmdb
0138                       ;-------------------------------------------------------
0139                       ; No ruler visible on screen (TAT)
0140                       ;-------------------------------------------------------
0141               pane.colorscheme.fbdump.noruler:
0142 6FAE 0204  20         li    tmp0,vdp.fb.toprow.tat
     6FB0 09D0     
0143                                                   ; VDP start address (frame buffer area)
0144 6FB2 0206  20         li    tmp2,(pane.botrow-1)*80
     6FB4 08C0     
0145                                                   ; Number of bytes to fill
0146                       ;-------------------------------------------------------
0147                       ; Adjust bottom of frame buffer if CMDB visible
0148                       ;-------------------------------------------------------
0149               pane.colorscheme.checkcmdb:
0150 6FB6 C820  54         mov   @cmdb.visible,@cmdb.visible
     6FB8 A702     
     6FBA A702     
0151 6FBC 1302  14         jeq   pane.colorscheme.fbdump
0152                                                   ; Not visible, skip adjustment
0153 6FBE 0226  22         ai    tmp2,-320             ; CMDB adjustment
     6FC0 FEC0     
0154                       ;-------------------------------------------------------
0155                       ; Dump colors to VDP (TAT)
0156                       ;-------------------------------------------------------
0157               pane.colorscheme.fbdump:
0158 6FC2 C160  34         mov   @tv.color,tmp1        ; Get work copy of colors ABCD
     6FC4 A218     
0159 6FC6 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0160 6FC8 06A0  32         bl    @xfilv                ; Fill colors
     6FCA 2294     
0161                                                   ; i \  tmp0 = start address
0162                                                   ; i |  tmp1 = byte to fill
0163                                                   ; i /  tmp2 = number of bytes to fill
0164                       ;-------------------------------------------------------
0165                       ; Colorize marked lines
0166                       ;-------------------------------------------------------
0167 6FCC C120  34         mov   @cmdb.dialog,tmp0
     6FCE A720     
0168 6FD0 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     6FD2 0068     
0169 6FD4 1309  14         jeq   pane.colorscheme.cmdbpane
0170                                                   ; Yes, skip marked lines
0171 6FD6 C120  34         mov   @parm2,tmp0
     6FD8 A008     
0172 6FDA 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     6FDC FFFF     
0173 6FDE 1304  14         jeq   pane.colorscheme.cmdbpane
0174 6FE0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6FE2 A312     
0175 6FE4 06A0  32         bl    @fb.colorlines        ; Colorize lines
     6FE6 66E4     
0176                                                   ; \ i  @parm1       = Force refresh if >ffff
0177                                                   ; / i  @fb.colorize = Colorize if >ffff
0178                       ;-------------------------------------------------------
0179                       ; Dump colors for CMDB header line (TAT)
0180                       ;-------------------------------------------------------
0181               pane.colorscheme.cmdbpane:
0182 6FE8 C120  34         mov   @cmdb.visible,tmp0
     6FEA A702     
0183 6FEC 133C  14         jeq   pane.colorscheme.errpane
0184                                                   ; Skip if CMDB pane is hidden
0185 6FEE C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     6FF0 A712     
0186 6FF2 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     6FF4 A226     
0187 6FF6 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     6FF8 0040     
0188 6FFA 06A0  32         bl    @xfilv                ; Fill colors
     6FFC 2294     
0189                                                   ; i \  tmp0 = start address
0190                                                   ; i |  tmp1 = byte to fill
0191                                                   ; i /  tmp2 = number of bytes to fill
0192                       ;-------------------------------------------------------
0193                       ; Dump colors for CMDB Stevie logo (TAT)
0194                       ;-------------------------------------------------------
0195 6FFE C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7000 A712     
0196 7002 0224  22         ai    tmp0,63               ; Add offset for logo
     7004 003F     
0197 7006 C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     7008 A226     
0198 700A D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     700C A227     
0199                                                   ; Copy same value into MSB
0200 700E 0945  24         srl   tmp1,4                ;
0201 7010 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     7012 00FF     
0202 7014 0206  20         li    tmp2,17               ; Number of bytes to fill
     7016 0011     
0203 7018 06A0  32         bl    @xfilv                ; Fill colors
     701A 2294     
0204                                                   ; i \  tmp0 = start address
0205                                                   ; i |  tmp1 = byte to fill
0206                                                   ; i /  tmp2 = number of bytes to fill
0207                       ;-------------------------------------------------------
0208                       ; Row 1-5: Dump colors for CMDB pane content (TAT)
0209                       ;-------------------------------------------------------
0210 701C C120  34         mov   @cmdb.vdptop,tmp0     ; \ CMDB PANE: All 5 rows
     701E A712     
0211 7020 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     7022 0050     
0212 7024 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     7026 A226     
0213 7028 0206  20         li    tmp2,5*80             ; Number of bytes to fill
     702A 0190     
0214 702C 06A0  32         bl    @xfilv                ; Fill colors
     702E 2294     
0215                                                   ; i \  tmp0 = start address
0216                                                   ; i |  tmp1 = byte to fill
0217                                                   ; i /  tmp2 = number of bytes to fill
0218                       ;-------------------------------------------------------
0219                       ; Row 1: Dump colors for CMDB pane content (TAT)
0220                       ;-------------------------------------------------------
0221 7030 C120  34         mov   @cmdb.vdptop,tmp0     ; \ CMDB PANE: Row 1
     7032 A712     
0222 7034 0224  22         ai    tmp0,82               ; / VDP start address (CMDB top line + 1)
     7036 0052     
0223 7038 C160  34         mov   @tv.cmdb.color,tmp1   ; Get work copy fg/bg color
     703A A224     
0224 703C 0206  20         li    tmp2,76               ; Number of bytes to fill
     703E 004C     
0225 7040 06A0  32         bl    @xfilv                ; Fill colors
     7042 2294     
0226                                                   ; i \  tmp0 = start address
0227                                                   ; i |  tmp1 = byte to fill
0228                                                   ; i /  tmp2 = number of bytes to fill
0229                       ;-------------------------------------------------------
0230                       ; Row 4: Dump colors for CMDB pane content (TAT)
0231                       ;-------------------------------------------------------
0232 7044 C120  34         mov   @cmdb.vdptop,tmp0     ; \ CMDB PANE: Row 4
     7046 A712     
0233 7048 0224  22         ai    tmp0,322              ; / VDP start address (CMDB top line + 4)
     704A 0142     
0234 704C C160  34         mov   @tv.cmdb.color,tmp1   ; Get work copy fg/bg color
     704E A224     
0235 7050 0206  20         li    tmp2,76               ; Number of bytes to fill
     7052 004C     
0236 7054 06A0  32         bl    @xfilv                ; Fill colors
     7056 2294     
0237                                                   ; i \  tmp0 = start address
0238                                                   ; i |  tmp1 = byte to fill
0239                                                   ; i /  tmp2 = number of bytes to fill
0240 7058 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     705A 7D70     
0241                       ;-------------------------------------------------------
0242                       ; Exit early if only CMDB needed to be colorized
0243                       ;-------------------------------------------------------
0244 705C C120  34         mov   @parm3,tmp0
     705E A00A     
0245 7060 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     7062 FFFF     
0246 7064 1330  14         jeq   pane.colorscheme.cursorcolor.cmdb
0247                                                   ; Yes, shortcut to CMDB cursor color
0248                       ;-------------------------------------------------------
0249                       ; Dump colors for error pane (TAT)
0250                       ;-------------------------------------------------------
0251               pane.colorscheme.errpane:
0252 7066 C120  34         mov   @tv.error.visible,tmp0
     7068 A230     
0253 706A 1306  14         jeq   pane.colorscheme.topline
0254                                                   ; Skip if error pane is hidden
0255 706C 0205  20         li    tmp1,>00f6            ; White on dark red
     706E 00F6     
0256 7070 C805  38         mov   tmp1,@parm1           ; Pass color combination
     7072 A006     
0257 7074 06A0  32         bl    @pane.errline.drawcolor
     7076 6D54     
0258                                                   ; Draw color on rows in error pane
0259                                                   ; \ i  @tv.error.rows = Number of rows
0260                                                   ; / i  @parm1         = Color combination
0261                       ;-------------------------------------------------------
0262                       ; Dump colors for top line (TAT)
0263                       ;-------------------------------------------------------
0264               pane.colorscheme.topline:
0265 7078 C160  34         mov   @tv.color,tmp1
     707A A218     
0266 707C 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     707E 00FF     
0267 7080 C805  38         mov   tmp1,@parm1           ; Set color combination
     7082 A006     
0268 7084 04E0  34         clr   @parm2                ; Top row on screen
     7086 A008     
0269 7088 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     708A 7DA6     
0270                                                   ; \ i  @parm1 = Color combination
0271                                                   ; / i  @parm2 = Row on physical screen
0272                       ;-------------------------------------------------------
0273                       ; Dump colors for bottom line (TAT)
0274                       ;-------------------------------------------------------
0275 708C C820  54         mov   @tv.botcolor,@parm1   ; Get color combination
     708E A21C     
     7090 A006     
0276 7092 0205  20         li    tmp1,pane.botrow
     7094 001D     
0277 7096 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     7098 A008     
0278 709A 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     709C 7DA6     
0279                                                   ; \ i  @parm1 = Color combination
0280                                                   ; / i  @parm2 = Row on physical screen
0281                       ;-------------------------------------------------------
0282                       ; Dump colors for ruler if visible (TAT)
0283                       ;-------------------------------------------------------
0284               pane.colorscheme.ruler:
0285 709E C160  34         mov   @cmdb.dialog,tmp1
     70A0 A720     
0286 70A2 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     70A4 0068     
0287 70A6 130A  14         jeq   pane.colorscheme.cursorcolor
0288                                                   ; Yes, skip ruler
0289               
0290 70A8 C160  34         mov   @tv.ruler.visible,tmp1
     70AA A210     
0291 70AC 1307  14         jeq   pane.colorscheme.cursorcolor
0292               
0293 70AE 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     70B0 663C     
0294 70B2 06A0  32         bl    @cpym2v
     70B4 24E6     
0295 70B6 09D0                   data vdp.fb.toprow.tat
0296 70B8 A372                   data fb.ruler.tat
0297 70BA 0050                   data 80               ; Show ruler colors
0298                       ;-------------------------------------------------------
0299                       ; Dump cursor FG color to sprite table (SAT)
0300                       ;-------------------------------------------------------
0301               pane.colorscheme.cursorcolor:
0302 70BC C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     70BE A22A     
0303 70C0 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     70C2 0000     
0304 70C4 1306  14         jeq   pane.colorscheme.cursorcolor.fb
0305                                                   ; Yes, set cursor color
0306               pane.colorscheme.cursorcolor.cmdb:
0307 70C6 C120  34         mov   @tv.curcolor,tmp0     ; Get cursor color
     70C8 A216     
0308 70CA 0244  22         andi  tmp0,>f0              ; Only keep high-nibble -> Word 2 (G)
     70CC 00F0     
0309 70CE 0A44  24         sla   tmp0,4                ; Move to MSB
0310 70D0 1005  14         jmp   !
0311               pane.colorscheme.cursorcolor.fb:
0312 70D2 C120  34         mov   @tv.curcolor,tmp0     ; Get cursor color
     70D4 A216     
0313 70D6 0244  22         andi  tmp0,>0f              ; Only keep low-nibble -> Word 2 (H)
     70D8 000F     
0314 70DA 0A84  32         sla   tmp0,8                ; Move to MSB
0315 70DC D804  38 !       movb  tmp0,@ramsat+3        ; Update FG color in sprite table (SAT)
     70DE A059     
0316 70E0 D804  38         movb  tmp0,@tv.curshape+1   ; Save cursor color
     70E2 A215     
0317                       ;-------------------------------------------------------
0318                       ; Exit
0319                       ;-------------------------------------------------------
0320               pane.colorscheme.load.exit:
0321 70E4 06A0  32         bl    @scron                ; Turn screen on
     70E6 26EE     
0322 70E8 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     70EA A00A     
0323 70EC C839  50         mov   *stack+,@parm2        ; Pop @parm2
     70EE A008     
0324 70F0 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     70F2 A006     
0325 70F4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0326 70F6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0327 70F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0328 70FA C2F9  30         mov   *stack+,r11           ; Pop R11
0329 70FC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0108                       copy  "pane.colorscheme.botline.asm" ; Set colors for bottom line
     **** ****     > pane.colorscheme.botline.asm
0001               * FILE......: pane.colorscheme.botline.asm
0002               * Purpose...: Set color combination for bottom status line
0003               
0004               ***************************************************************
0005               * pane.colorscheme.botline
0006               * Set color combination for bottom status line
0007               ***************************************************************
0008               * bl @pane.colorscheme.botline
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Color combination to set
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.colorscheme.botline:
0020 70FE 0649  14         dect  stack
0021 7100 C64B  30         mov   r11,*stack            ; Save return address
0022 7102 0649  14         dect  stack
0023 7104 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Bottom line
0026                       ;------------------------------------------------------
0027 7106 0204  20         li    tmp0,pane.botrow
     7108 001D     
0028 710A C804  38         mov   tmp0,@parm2           ; Last row on screen
     710C A008     
0029 710E 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     7110 7DA6     
0030                                                   ; \ i  @parm1 = Color combination
0031                                                   ; / i  @parm2 = Row on physical screen
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               pane.colorscheme.botline.exit:
0036 7112 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0037 7114 C2F9  30         mov   *stack+,r11           ; Pop R11
0038 7116 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0109                       ;-----------------------------------------------------------------------
0110                       ; Dialogs & filebrowser
0111                       ;-----------------------------------------------------------------------
0112                       copy  "dialog.help.content.asm"      ; Draw help dialog content
     **** ****     > dialog.help.content.asm
0001               * FILE......: dialog.help.content.asm
0002               * Purpose...: Content for Help dialog
0003               
0004               
0005               ***************************************************************
0006               * dialog.help.content
0007               * Show content in modal dialog
0008               ***************************************************************
0009               * bl  @dialog.help.content
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0
0016               ********|*****|*********************|**************************
0017               dialog.help.content:
0018 7118 0649  14         dect  stack
0019 711A C64B  30         mov   r11,*stack            ; Save return address
0020 711C 0649  14         dect  stack
0021 711E C644  30         mov   tmp0,*stack           ; Push tmp0
0022 7120 0649  14         dect  stack
0023 7122 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 7124 0649  14         dect  stack
0025 7126 C646  30         mov   tmp2,*stack           ; Push tmp2
0026 7128 0649  14         dect  stack
0027 712A C647  30         mov   tmp3,*stack           ; Push tmp3
0028 712C 0649  14         dect  stack
0029 712E C660  42         mov   @wyx,*stack           ; Push cursor position
     7130 832A     
0030                       ;------------------------------------------------------
0031                       ; Clear screen and set colors
0032                       ;------------------------------------------------------
0033 7132 06A0  32         bl    @filv
     7134 228E     
0034 7136 0050                   data vdp.fb.toprow.sit,32,vdp.sit.size - (cmdb.rows * 80) - 160
     7138 0020     
     713A 06E0     
0035                                                   ; Clear screen
0036               
0037                       ;
0038                       ; Colours are also set in pane.colorscheme.load
0039                       ; but we also set them here to avoid flickering due to
0040                       ; timing delay before function is called.
0041                       ;
0042               
0043 713C 0204  20         li    tmp0,vdp.fb.toprow.tat + 80
     713E 0A20     
0044 7140 C160  34         mov   @tv.color,tmp1        ; Get color for framebuffer
     7142 A218     
0045 7144 0985  32         srl   tmp1,8                ; Right justify
0046 7146 0206  20         li    tmp2,15 * 80          ; Prepare for loading color attributes
     7148 04B0     
0047               
0048 714A 06A0  32         bl    @xfilv                ; \ Fill VDP memory
     714C 2294     
0049                                                   ; | i  tmp0 = Memory start address
0050                                                   ; | i  tmp1 = Byte to fill
0051                                                   ; / i  tmp2 = Number of bytes to fill
0052               
0053 714E 06A0  32         bl    @filv
     7150 228E     
0054 7152 1300                   data sprsat,>d0,12    ; Turn off sprites
     7154 00D0     
     7156 000C     
0055                       ;------------------------------------------------------
0056                       ; Display left column
0057                       ;------------------------------------------------------
0058 7158 06A0  32         bl    @at                   ; Set cursor position
     715A 2726     
0059 715C 0100                   byte 1,0              ; Y=1, X=0
0060               
0061 715E C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     7160 A722     
0062               
0063 7162 04C4  14         clr   tmp0                  ; Single-column list
0064               
0065 7164 C167  34         mov   @dialog.help.data.pages(tmp3),tmp1
     7166 719C     
0066                                                   ; Pointer to list of strings
0067 7168 C1A7  34         mov   @dialog.help.data.pages+2(tmp3),tmp2
     716A 719E     
0068                                                   ; Number of strings to display
0069               
0070 716C 04C7  14         clr   tmp3                  ; No string padding
0071               
0072 716E 06A0  32         bl    @putlst               ; Loop over string list and display
     7170 244A     
0073                                                   ; \ i  @wyx = Cursor position
0074                                                   ; | i  tmp0 = Cutover row and column offset
0075                                                   ; |           for next column, >0000 for
0076                                                   ; |           single column list
0077                                                   ; | i  tmp1 = Pointer to first length-
0078                                                   ; |           prefixed string in list
0079                                                   ; | i  tmp2 = Number of strings to display
0080                                                   ; | i  tmp3 = String padding length
0081                                                   ; |
0082                                                   ; | o  @waux1 = Pointer to next entry
0083                                                   ; |             in list after displaying
0084                                                   ; /             (tmp2) entries
0085               
0086                       ;------------------------------------------------------
0087                       ; Display right column
0088                       ;------------------------------------------------------
0089 7172 06A0  32         bl    @at                   ; Set cursor position
     7174 2726     
0090 7176 002A                   byte 0,42             ; Y=0, X=42
0091               
0092 7178 C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     717A A722     
0093               
0094 717C 04C4  14         clr   tmp0                  ; Single-column list
0095               
0096 717E C167  34         mov   @dialog.help.data.pages+4(tmp3),tmp1
     7180 71A0     
0097                                                   ; Pointer to list of strings
0098 7182 C1A7  34         mov   @dialog.help.data.pages+6(tmp3),tmp2
     7184 71A2     
0099                                                   ; Number of strings to display
0100               
0101 7186 04C7  14         clr   tmp3                  ; No string padding
0102               
0103 7188 06A0  32         bl    @putlst               ; Loop over string list and display
     718A 244A     
0104                                                   ; \ i  @wyx = Cursor position
0105                                                   ; | i  tmp0 = Cutover row and column offset
0106                                                   ; |           for next column, >0000 for
0107                                                   ; |           single column list
0108                                                   ; | i  tmp1 = Pointer to first length-
0109                                                   ; |           prefixed string in list
0110                                                   ; | i  tmp2 = Number of strings to display
0111                                                   ; | i  tmp3 = String padding length
0112                                                   ; |
0113                                                   ; | o  @waux1 = Pointer to next entry
0114                                                   ; |             in list after displaying
0115                                                   ; /             (tmp2) entries
0116               
0117                       ;------------------------------------------------------
0118                       ; Exit
0119                       ;------------------------------------------------------
0120               dialog.help.content.exit:
0121 718C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     718E 832A     
0122 7190 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 7192 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 7194 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 7196 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 7198 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 719A 045B  20         b     *r11                  ; Return
0128               
0129               
0130               
0131               dialog.help.data.pages:
0132 719C 71AC             data  dialog.help.data.page1.left,16
     719E 0010     
0133 71A0 73CF             data  dialog.help.data.page1.right,13
     71A2 000D     
0134 71A4 755D             data  dialog.help.data.page2.left,15
     71A6 000F     
0135 71A8 76F8             data  dialog.help.data.page2.right,17
     71AA 0011     
0136               
0137               
0138               dialog.help.data.page1.left:
0139 71AC 26               byte    38
0140 71AD   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     71AE 0101     
     71B0 0101     
     71B2 0101     
     71B4 0101     
     71B6 0101     
     71B8 0101     
     71BA 0101     
0141 71BC 2043             text    ' Cursor '
     71BE 7572     
     71C0 736F     
     71C2 7220     
0142 71C4 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     71C6 0101     
     71C8 0101     
     71CA 0101     
     71CC 0101     
     71CE 0101     
     71D0 0101     
     71D2 01       
0143 71D3   23             stri 'Fctn s/d/e/x  Left, Right, Up, Down'
     71D4 4663     
     71D6 746E     
     71D8 2073     
     71DA 2F64     
     71DC 2F65     
     71DE 2F78     
     71E0 2020     
     71E2 4C65     
     71E4 6674     
     71E6 2C20     
     71E8 5269     
     71EA 6768     
     71EC 742C     
     71EE 2055     
     71F0 702C     
     71F2 2044     
     71F4 6F77     
     71F6 6E       
0144 71F7   1F             stri 'Fctn h/l      Home, End of line'
     71F8 4663     
     71FA 746E     
     71FC 2068     
     71FE 2F6C     
     7200 2020     
     7202 2020     
     7204 2020     
     7206 486F     
     7208 6D65     
     720A 2C20     
     720C 456E     
     720E 6420     
     7210 6F66     
     7212 206C     
     7214 696E     
     7216 65       
0145 7217   26             stri 'Fctn j/k      Previous word, Next word'
     7218 4663     
     721A 746E     
     721C 206A     
     721E 2F6B     
     7220 2020     
     7222 2020     
     7224 2020     
     7226 5072     
     7228 6576     
     722A 696F     
     722C 7573     
     722E 2077     
     7230 6F72     
     7232 642C     
     7234 204E     
     7236 6578     
     7238 7420     
     723A 776F     
     723C 7264     
0146 723E 1746             stri 'Fctn 4   ^x   Page down'
     7240 6374     
     7242 6E20     
     7244 3420     
     7246 2020     
     7248 5E78     
     724A 2020     
     724C 2050     
     724E 6167     
     7250 6520     
     7252 646F     
     7254 776E     
0147 7256 2446             stri 'Fctn 5        move view window right'
     7258 6374     
     725A 6E20     
     725C 3520     
     725E 2020     
     7260 2020     
     7262 2020     
     7264 206D     
     7266 6F76     
     7268 6520     
     726A 7669     
     726C 6577     
     726E 2077     
     7270 696E     
     7272 646F     
     7274 7720     
     7276 7269     
     7278 6768     
     727A 74       
0148 727B   23             stri 'Ctrl 5   ^5   move view window left'
     727C 4374     
     727E 726C     
     7280 2035     
     7282 2020     
     7284 205E     
     7286 3520     
     7288 2020     
     728A 6D6F     
     728C 7665     
     728E 2076     
     7290 6965     
     7292 7720     
     7294 7769     
     7296 6E64     
     7298 6F77     
     729A 206C     
     729C 6566     
     729E 74       
0149 729F   15             stri 'Fctn 6   ^e   Page up'
     72A0 4663     
     72A2 746E     
     72A4 2036     
     72A6 2020     
     72A8 205E     
     72AA 6520     
     72AC 2020     
     72AE 5061     
     72B0 6765     
     72B2 2075     
     72B4 70       
0150 72B5   16             stri 'Fctn 7        Next tab'
     72B6 4663     
     72B8 746E     
     72BA 2037     
     72BC 2020     
     72BE 2020     
     72C0 2020     
     72C2 2020     
     72C4 4E65     
     72C6 7874     
     72C8 2074     
     72CA 6162     
0151 72CC 1643             stri 'Ctrl 7   ^7   Prev tab'
     72CE 7472     
     72D0 6C20     
     72D2 3720     
     72D4 2020     
     72D6 5E37     
     72D8 2020     
     72DA 2050     
     72DC 7265     
     72DE 7620     
     72E0 7461     
     72E2 62       
0152 72E3   18             stri 'Fctn v        Screen top'
     72E4 4663     
     72E6 746E     
     72E8 2076     
     72EA 2020     
     72EC 2020     
     72EE 2020     
     72F0 2020     
     72F2 5363     
     72F4 7265     
     72F6 656E     
     72F8 2074     
     72FA 6F70     
0153 72FC 1643             stri 'Ctrl v   ^v   File top'
     72FE 7472     
     7300 6C20     
     7302 7620     
     7304 2020     
     7306 5E76     
     7308 2020     
     730A 2046     
     730C 696C     
     730E 6520     
     7310 746F     
     7312 70       
0154 7313   1B             stri 'Fctn b        Screen bottom'
     7314 4663     
     7316 746E     
     7318 2062     
     731A 2020     
     731C 2020     
     731E 2020     
     7320 2020     
     7322 5363     
     7324 7265     
     7326 656E     
     7328 2062     
     732A 6F74     
     732C 746F     
     732E 6D       
0155 732F   01             stri ''
     7330 00       
0156 7331   4D             stri 'Licensed under GPLv3 or later. This program comes with ABSOLUTELY NO WARRANTY'
     7332 4C69     
     7334 6365     
     7336 6E73     
     7338 6564     
     733A 2075     
     733C 6E64     
     733E 6572     
     7340 2047     
     7342 504C     
     7344 7633     
     7346 206F     
     7348 7220     
     734A 6C61     
     734C 7465     
     734E 722E     
     7350 2054     
     7352 6869     
     7354 7320     
     7356 7072     
     7358 6F67     
     735A 7261     
     735C 6D20     
     735E 636F     
     7360 6D65     
     7362 7320     
     7364 7769     
     7366 7468     
     7368 2041     
     736A 4253     
     736C 4F4C     
     736E 5554     
     7370 454C     
     7372 5920     
     7374 4E4F     
     7376 2057     
     7378 4152     
     737A 5241     
     737C 4E54     
     737E 59       
0157 737F   4F             stri 'This is free software, you are welcome to redistribute under certain conditions'
     7380 5468     
     7382 6973     
     7384 2069     
     7386 7320     
     7388 6672     
     738A 6565     
     738C 2073     
     738E 6F66     
     7390 7477     
     7392 6172     
     7394 652C     
     7396 2079     
     7398 6F75     
     739A 2061     
     739C 7265     
     739E 2077     
     73A0 656C     
     73A2 636F     
     73A4 6D65     
     73A6 2074     
     73A8 6F20     
     73AA 7265     
     73AC 6469     
     73AE 7374     
     73B0 7269     
     73B2 6275     
     73B4 7465     
     73B6 2075     
     73B8 6E64     
     73BA 6572     
     73BC 2063     
     73BE 6572     
     73C0 7461     
     73C2 696E     
     73C4 2063     
     73C6 6F6E     
     73C8 6469     
     73CA 7469     
     73CC 6F6E     
     73CE 73       
0158               
0159               
0160               dialog.help.data.page1.right:
0161 73CF   26             stri '                            Page 1/2  '
     73D0 2020     
     73D2 2020     
     73D4 2020     
     73D6 2020     
     73D8 2020     
     73DA 2020     
     73DC 2020     
     73DE 2020     
     73E0 2020     
     73E2 2020     
     73E4 2020     
     73E6 2020     
     73E8 2020     
     73EA 2020     
     73EC 5061     
     73EE 6765     
     73F0 2031     
     73F2 2F32     
     73F4 2020     
0162 73F6 1943             stri 'Ctrl b   ^b   File bottom'
     73F8 7472     
     73FA 6C20     
     73FC 6220     
     73FE 2020     
     7400 5E62     
     7402 2020     
     7404 2046     
     7406 696C     
     7408 6520     
     740A 626F     
     740C 7474     
     740E 6F6D     
0163 7410 1743             stri 'Ctrl g   ^g   Goto line'
     7412 7472     
     7414 6C20     
     7416 6720     
     7418 2020     
     741A 5E67     
     741C 2020     
     741E 2047     
     7420 6F74     
     7422 6F20     
     7424 6C69     
     7426 6E65     
0164 7428 2143             stri 'Ctrl ,   ^,   Goto previous match'
     742A 7472     
     742C 6C20     
     742E 2C20     
     7430 2020     
     7432 5E2C     
     7434 2020     
     7436 2047     
     7438 6F74     
     743A 6F20     
     743C 7072     
     743E 6576     
     7440 696F     
     7442 7573     
     7444 206D     
     7446 6174     
     7448 6368     
0165 744A 1D43             stri 'Ctrl .   ^.   Goto next match'
     744C 7472     
     744E 6C20     
     7450 2E20     
     7452 2020     
     7454 5E2E     
     7456 2020     
     7458 2047     
     745A 6F74     
     745C 6F20     
     745E 6E65     
     7460 7874     
     7462 206D     
     7464 6174     
     7466 6368     
0166 7468 24               byte    36
0167 7469   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     746A 0101     
     746C 0101     
     746E 0101     
     7470 0101     
     7472 0101     
     7474 0101     
     7476 0101     
0168 7478 2046             text    ' File '
     747A 696C     
     747C 6520     
0169 747E 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     7480 0101     
     7482 0101     
     7484 0101     
     7486 0101     
     7488 0101     
     748A 0101     
     748C 01       
0170 748D   19             stri 'Ctrl a   ^a   Append file'
     748E 4374     
     7490 726C     
     7492 2061     
     7494 2020     
     7496 205E     
     7498 6120     
     749A 2020     
     749C 4170     
     749E 7065     
     74A0 6E64     
     74A2 2066     
     74A4 696C     
     74A6 65       
0171 74A7   21             stri 'Ctrl i   ^i   Insert file at line'
     74A8 4374     
     74AA 726C     
     74AC 2069     
     74AE 2020     
     74B0 205E     
     74B2 6920     
     74B4 2020     
     74B6 496E     
     74B8 7365     
     74BA 7274     
     74BC 2066     
     74BE 696C     
     74C0 6520     
     74C2 6174     
     74C4 206C     
     74C6 696E     
     74C8 65       
0172 74C9   24             stri 'Ctrl c   ^c   Copy clipboard to line'
     74CA 4374     
     74CC 726C     
     74CE 2063     
     74D0 2020     
     74D2 205E     
     74D4 6320     
     74D6 2020     
     74D8 436F     
     74DA 7079     
     74DC 2063     
     74DE 6C69     
     74E0 7062     
     74E2 6F61     
     74E4 7264     
     74E6 2074     
     74E8 6F20     
     74EA 6C69     
     74EC 6E65     
0173 74EE 1743             stri 'Ctrl o   ^o   Open file'
     74F0 7472     
     74F2 6C20     
     74F4 6F20     
     74F6 2020     
     74F8 5E6F     
     74FA 2020     
     74FC 204F     
     74FE 7065     
     7500 6E20     
     7502 6669     
     7504 6C65     
0174 7506 1843             stri 'Ctrl p   ^p   Print file'
     7508 7472     
     750A 6C20     
     750C 7020     
     750E 2020     
     7510 5E70     
     7512 2020     
     7514 2050     
     7516 7269     
     7518 6E74     
     751A 2066     
     751C 696C     
     751E 65       
0175 751F   25             stri 'Ctrl r   ^r   Run program image (EA5)'
     7520 4374     
     7522 726C     
     7524 2072     
     7526 2020     
     7528 205E     
     752A 7220     
     752C 2020     
     752E 5275     
     7530 6E20     
     7532 7072     
     7534 6F67     
     7536 7261     
     7538 6D20     
     753A 696D     
     753C 6167     
     753E 6520     
     7540 2845     
     7542 4135     
     7544 29       
0176 7545   17             stri 'Ctrl s   ^s   Save file'
     7546 4374     
     7548 726C     
     754A 2073     
     754C 2020     
     754E 205E     
     7550 7320     
     7552 2020     
     7554 5361     
     7556 7665     
     7558 2066     
     755A 696C     
     755C 65       
0177               
0178               
0179               dialog.help.data.page2.left:
0180 755D   23             byte    35
0181 755E 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     7560 0101     
     7562 0101     
     7564 0101     
     7566 0101     
     7568 0101     
     756A 01       
0182 756B   20             text    ' Modifiers '
     756C 4D6F     
     756E 6469     
     7570 6669     
     7572 6572     
     7574 7320     
0183 7576 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     7578 0101     
     757A 0101     
     757C 0101     
     757E 0101     
     7580 01       
0184 7581   1E             stri 'Fctn 1        Delete character'
     7582 4663     
     7584 746E     
     7586 2031     
     7588 2020     
     758A 2020     
     758C 2020     
     758E 2020     
     7590 4465     
     7592 6C65     
     7594 7465     
     7596 2063     
     7598 6861     
     759A 7261     
     759C 6374     
     759E 6572     
0185 75A0 1E46             stri 'Fctn 2        Insert character'
     75A2 6374     
     75A4 6E20     
     75A6 3220     
     75A8 2020     
     75AA 2020     
     75AC 2020     
     75AE 2049     
     75B0 6E73     
     75B2 6572     
     75B4 7420     
     75B6 6368     
     75B8 6172     
     75BA 6163     
     75BC 7465     
     75BE 72       
0186 75BF   19             stri 'Fctn 3        Delete line'
     75C0 4663     
     75C2 746E     
     75C4 2033     
     75C6 2020     
     75C8 2020     
     75CA 2020     
     75CC 2020     
     75CE 4465     
     75D0 6C65     
     75D2 7465     
     75D4 206C     
     75D6 696E     
     75D8 65       
0187 75D9   20             stri 'Ctrl l   ^l   Delete end of line'
     75DA 4374     
     75DC 726C     
     75DE 206C     
     75E0 2020     
     75E2 205E     
     75E4 6C20     
     75E6 2020     
     75E8 4465     
     75EA 6C65     
     75EC 7465     
     75EE 2065     
     75F0 6E64     
     75F2 206F     
     75F4 6620     
     75F6 6C69     
     75F8 6E65     
0188 75FA 1946             stri 'Fctn 8        Insert line'
     75FC 6374     
     75FE 6E20     
     7600 3820     
     7602 2020     
     7604 2020     
     7606 2020     
     7608 2049     
     760A 6E73     
     760C 6572     
     760E 7420     
     7610 6C69     
     7612 6E65     
0189 7614 1E46             stri 'Fctn .        Insert/Overwrite'
     7616 6374     
     7618 6E20     
     761A 2E20     
     761C 2020     
     761E 2020     
     7620 2020     
     7622 2049     
     7624 6E73     
     7626 6572     
     7628 742F     
     762A 4F76     
     762C 6572     
     762E 7772     
     7630 6974     
     7632 65       
0190 7633   1C             stri 'Ctrl c   ^c   Copy clipboard'
     7634 4374     
     7636 726C     
     7638 2063     
     763A 2020     
     763C 205E     
     763E 6320     
     7640 2020     
     7642 436F     
     7644 7079     
     7646 2063     
     7648 6C69     
     764A 7062     
     764C 6F61     
     764E 7264     
0191 7650 0120             stri ' '
0192 7652 23               byte    35
0193 7653   01             byte    1,1,1,1,1,1
     7654 0101     
     7656 0101     
     7658 01       
0194 7659   20             text    ' File picker (catalog) '
     765A 4669     
     765C 6C65     
     765E 2070     
     7660 6963     
     7662 6B65     
     7664 7220     
     7666 2863     
     7668 6174     
     766A 616C     
     766C 6F67     
     766E 2920     
0195 7670 0101             byte    1,1,1,1,1,1
     7672 0101     
     7674 0101     
0196 7676 1B43             stri 'Ctrl e   ^e   Previous page'
     7678 7472     
     767A 6C20     
     767C 6520     
     767E 2020     
     7680 5E65     
     7682 2020     
     7684 2050     
     7686 7265     
     7688 7669     
     768A 6F75     
     768C 7320     
     768E 7061     
     7690 6765     
0197 7692 1743             stri 'Ctrl x   ^x   Next page'
     7694 7472     
     7696 6C20     
     7698 7820     
     769A 2020     
     769C 5E78     
     769E 2020     
     76A0 204E     
     76A2 6578     
     76A4 7420     
     76A6 7061     
     76A8 6765     
0198 76AA 1D43             stri 'Ctrl s   ^s   Previous column'
     76AC 7472     
     76AE 6C20     
     76B0 7320     
     76B2 2020     
     76B4 5E73     
     76B6 2020     
     76B8 2050     
     76BA 7265     
     76BC 7669     
     76BE 6F75     
     76C0 7320     
     76C2 636F     
     76C4 6C75     
     76C6 6D6E     
0199 76C8 1943             stri 'Ctrl d   ^d   Next column'
     76CA 7472     
     76CC 6C20     
     76CE 6420     
     76D0 2020     
     76D2 5E64     
     76D4 2020     
     76D6 204E     
     76D8 6578     
     76DA 7420     
     76DC 636F     
     76DE 6C75     
     76E0 6D6E     
0200 76E2 1546             stri 'Fctn e/x      Up/Down'
     76E4 6374     
     76E6 6E20     
     76E8 652F     
     76EA 7820     
     76EC 2020     
     76EE 2020     
     76F0 2055     
     76F2 702F     
     76F4 446F     
     76F6 776E     
0201               
0202               dialog.help.data.page2.right:
0203 76F8 2620             stri '                            Page 2/2  '
     76FA 2020     
     76FC 2020     
     76FE 2020     
     7700 2020     
     7702 2020     
     7704 2020     
     7706 2020     
     7708 2020     
     770A 2020     
     770C 2020     
     770E 2020     
     7710 2020     
     7712 2020     
     7714 2050     
     7716 6167     
     7718 6520     
     771A 322F     
     771C 3220     
     771E 20       
0204 771F   1F             stri 'Ctrl 0-9 ^0-9 Catalog DSK1-DSK9'
     7720 4374     
     7722 726C     
     7724 2030     
     7726 2D39     
     7728 205E     
     772A 302D     
     772C 3920     
     772E 4361     
     7730 7461     
     7732 6C6F     
     7734 6720     
     7736 4453     
     7738 4B31     
     773A 2D44     
     773C 534B     
     773E 39       
0205 773F   1E             stri 'SPACE         Parent directory'
     7740 5350     
     7742 4143     
     7744 4520     
     7746 2020     
     7748 2020     
     774A 2020     
     774C 2020     
     774E 5061     
     7750 7265     
     7752 6E74     
     7754 2064     
     7756 6972     
     7758 6563     
     775A 746F     
     775C 7279     
0206 775E 0100             stri ''
0207 7760 24               byte    36
0208 7761   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     7762 0101     
     7764 0101     
     7766 0101     
     7768 0101     
     776A 0101     
     776C 0101     
0209 776E 2042             text    ' Block Mode '
     7770 6C6F     
     7772 636B     
     7774 204D     
     7776 6F64     
     7778 6520     
0210 777A 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     777C 0101     
     777E 0101     
     7780 0101     
     7782 0101     
     7784 01       
0211 7785   1E             stri 'Ctrl SPACE    Set M1/M2 marker'
     7786 4374     
     7788 726C     
     778A 2053     
     778C 5041     
     778E 4345     
     7790 2020     
     7792 2020     
     7794 5365     
     7796 7420     
     7798 4D31     
     779A 2F4D     
     779C 3220     
     779E 6D61     
     77A0 726B     
     77A2 6572     
0212 77A4 1A43             stri 'Ctrl d   ^d   Delete block'
     77A6 7472     
     77A8 6C20     
     77AA 6420     
     77AC 2020     
     77AE 5E64     
     77B0 2020     
     77B2 2044     
     77B4 656C     
     77B6 6574     
     77B8 6520     
     77BA 626C     
     77BC 6F63     
     77BE 6B       
0213 77BF   18             stri 'Ctrl c   ^c   Copy block'
     77C0 4374     
     77C2 726C     
     77C4 2063     
     77C6 2020     
     77C8 205E     
     77CA 6320     
     77CC 2020     
     77CE 436F     
     77D0 7079     
     77D2 2062     
     77D4 6C6F     
     77D6 636B     
0214 77D8 1743             stri 'Ctrl g   ^g   Goto line'
     77DA 7472     
     77DC 6C20     
     77DE 6720     
     77E0 2020     
     77E2 5E67     
     77E4 2020     
     77E6 2047     
     77E8 6F74     
     77EA 6F20     
     77EC 6C69     
     77EE 6E65     
0215 77F0 1843             stri 'Ctrl m   ^m   Move block'
     77F2 7472     
     77F4 6C20     
     77F6 6D20     
     77F8 2020     
     77FA 5E6D     
     77FC 2020     
     77FE 204D     
     7800 6F76     
     7802 6520     
     7804 626C     
     7806 6F63     
     7808 6B       
0216 7809   20             stri 'Ctrl s   ^s   Save block to file'
     780A 4374     
     780C 726C     
     780E 2073     
     7810 2020     
     7812 205E     
     7814 7320     
     7816 2020     
     7818 5361     
     781A 7665     
     781C 2062     
     781E 6C6F     
     7820 636B     
     7822 2074     
     7824 6F20     
     7826 6669     
     7828 6C65     
0217 782A 2343             stri 'Ctrl ^1..^3   Copy to clipboard 1-3'
     782C 7472     
     782E 6C20     
     7830 5E31     
     7832 2E2E     
     7834 5E33     
     7836 2020     
     7838 2043     
     783A 6F70     
     783C 7920     
     783E 746F     
     7840 2063     
     7842 6C69     
     7844 7062     
     7846 6F61     
     7848 7264     
     784A 2031     
     784C 2D33     
0218 784E 0120             stri ' '
0219 7850 23               byte    35
0220 7851   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     7852 0101     
     7854 0101     
     7856 0101     
     7858 0101     
     785A 0101     
     785C 0101     
0221 785E 204F             text    ' Others '
     7860 7468     
     7862 6572     
     7864 7320     
0222 7866 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     7868 0101     
     786A 0101     
     786C 0101     
     786E 0101     
     7870 0101     
     7872 0101     
0223 7874 1246             stri 'Fctn +   ^q   Quit'
     7876 6374     
     7878 6E20     
     787A 2B20     
     787C 2020     
     787E 5E71     
     7880 2020     
     7882 2051     
     7884 7569     
     7886 74       
0224 7887   1E             stri 'Fctn 0        TI Basic session'
     7888 4663     
     788A 746E     
     788C 2030     
     788E 2020     
     7890 2020     
     7892 2020     
     7894 2020     
     7896 5449     
     7898 2042     
     789A 6173     
     789C 6963     
     789E 2073     
     78A0 6573     
     78A2 7369     
     78A4 6F6E     
0225 78A6 1E43             stri 'Ctrl 0   ^0   TI Basic submenu'
     78A8 7472     
     78AA 6C20     
     78AC 3020     
     78AE 2020     
     78B0 5E30     
     78B2 2020     
     78B4 2054     
     78B6 4920     
     78B8 4261     
     78BA 7369     
     78BC 6320     
     78BE 7375     
     78C0 626D     
     78C2 656E     
     78C4 75       
0226 78C5   12             stri 'Ctrl h   ^h   Help'
     78C6 4374     
     78C8 726C     
     78CA 2068     
     78CC 2020     
     78CE 205E     
     78D0 6820     
     78D2 2020     
     78D4 4865     
     78D6 6C70     
0227 78D8 1C43             stri 'Ctrl u   ^u   Shortcuts menu'
     78DA 7472     
     78DC 6C20     
     78DE 7520     
     78E0 2020     
     78E2 5E75     
     78E4 2020     
     78E6 2053     
     78E8 686F     
     78EA 7274     
     78EC 6375     
     78EE 7473     
     78F0 206D     
     78F2 656E     
     78F4 75       
0228 78F5   21             stri 'Ctrl z   ^z   Cycle color schemes'
     78F6 4374     
     78F8 726C     
     78FA 207A     
     78FC 2020     
     78FE 205E     
     7900 7A20     
     7902 2020     
     7904 4379     
     7906 636C     
     7908 6520     
     790A 636F     
     790C 6C6F     
     790E 7220     
     7910 7363     
     7912 6865     
     7914 6D65     
     7916 73       
                   < stevie_b4.asm
0113                       copy  "pane.filebrowser.asm"         ; File browser
     **** ****     > pane.filebrowser.asm
0001               * FILE......: pane.filebrowser.asm
0002               * Purpose...: File browser in dialog pane
0003               
0004               *---------------------------------------------------------------
0005               * File browser
0006               *---------------------------------------------------------------
0007               * bl   @pane.filebrowser
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @cat.fpicker.idx = 1st file to show in file browser
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0, tmp1, tmp2
0014               ********|*****|*********************|**************************
0015               pane.filebrowser:
0016 7918 0649  14         dect  stack
0017 791A C64B  30         mov   r11,*stack            ; Save return address
0018 791C 0649  14         dect  stack
0019 791E C644  30         mov   tmp0,*stack           ; Push tmp0
0020 7920 0649  14         dect  stack
0021 7922 C645  30         mov   tmp1,*stack           ; Push tmp1
0022 7924 0649  14         dect  stack
0023 7926 C646  30         mov   tmp2,*stack           ; Push tmp2
0024 7928 0649  14         dect  stack
0025 792A C660  42         mov   @wyx,*stack           ; Push cursor position
     792C 832A     
0026                       ;------------------------------------------------------
0027                       ; Initialisation
0028                       ;------------------------------------------------------
0029 792E 06A0  32         bl    @filv
     7930 228E     
0030 7932 0000                   data vdp.sit.base,32,vdp.sit.size - 560
     7934 0020     
     7936 0730     
0031                                                   ; Clear screen (up to CMDB)
0032               
0033                       ;------------------------------------------------------
0034                       ; Load colorscheme and turn on screen
0035                       ;------------------------------------------------------
0036 7938 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     793A A006     
0037 793C 0720  34         seto  @parm2                ; Skip colorizing marked lines
     793E A008     
0038 7940 04E0  34         clr   @parm3                ; Colorize all panes
     7942 A00A     
0039               
0040 7944 06A0  32         bl    @pane.colorscheme.load
     7946 6EDE     
0041                                                   ; Reload color scheme
0042                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0043                                                   ; | i  @parm2 = Skip colorizing marked lines
0044                                                   ; |             if >FFFF
0045                                                   ; | i  @parm3 = Only colorize CMDB pane
0046                                                   ; /             if >FFFF
0047                       ;------------------------------------------------------
0048                       ; Prepare for displaying top row
0049                       ;------------------------------------------------------
0050 7948 C120  34         mov   @cat.filecount,tmp0      ; Get number of files
     794A E000     
0051 794C 1602  14         jne   pane.filebrowser.noruler ; \
0052 794E 0460  28         b     @pane.filebrowser.exit   ; / Exit if nothing to display
     7950 7B42     
0053                       ;------------------------------------------------------
0054                       ; Reset ruler color on 2nd row
0055                       ;------------------------------------------------------
0056               pane.filebrowser.noruler:
0057 7952 C120  34         mov   @tv.ruler.visible,tmp0  ; \ Skip if ruler is off
     7954 A210     
0058 7956 1309  14         jeq   pane.filebrowser.volume ; /
0059               
0060 7958 0204  20         li    tmp0,vdp.fb.toprow.tat  ; \ i  tmp0 = source address
     795A 09D0     
0061 795C C160  34         mov   @tv.color,tmp1
     795E A218     
0062 7960 0985  32         srl   tmp1,8
0063 7962 0206  20         li    tmp2,80                 ; / i  tmp2 = Number of bytes to fill
     7964 0050     
0064 7966 06A0  32         bl    @xfilv                  ; Fill bytes in VDP memory
     7968 2294     
0065                       ;------------------------------------------------------
0066                       ; Show volume name, number of files, device path
0067                       ;------------------------------------------------------
0068               pane.filebrowser.volume:
0069 796A 06A0  32         bl    @putat
     796C 2442     
0070 796E 0000                   byte 0,0
0071 7970 7B50                   data txt.volume       ; Display "Volume:...."
0072               
0073 7972 C120  34         mov   @cat.volname,tmp0     ; Volume name set?
     7974 E3BA     
0074 7976 1304  14         jeq   pane.filebrowser.nofiles
0075                                                   ; No, skip
0076 7978 06A0  32         bl    @putat
     797A 2442     
0077 797C 0008                   byte 0,8
0078 797E E3BA                   data cat.volname      ; Display volume name
0079                       ;-------------------------------------------------------
0080                       ; Show number of files
0081                       ;-------------------------------------------------------
0082               pane.filebrowser.nofiles:
0083 7980 0242  22         andi  config,>7fff          ; Do not print number
     7982 7FFF     
0084                                                   ; (Reset bit 0 in config register)
0085               
0086 7984 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7986 2A56     
0087 7988 E000                   data cat.filecount    ; \ i  p1    = Source
0088 798A A100                   data rambuf           ; | i  p2    = Destination
0089 798C 30                     byte 48               ; | i  p3MSB = ASCII offset
0090 798D   20                   byte 32               ; / i  p3LSB = Padding character
0091               
0092 798E 06A0  32         bl    @trimnum              ; Trim number to the left
     7990 2AAE     
0093 7992 A100                   data rambuf,rambuf + 5,32
     7994 A105     
     7996 0020     
0094               
0095 7998 06A0  32         bl    @putat
     799A 2442     
0096 799C 001B                   byte 0,27
0097 799E A105                   data rambuf + 5       ; Display number of files
0098                       ;-------------------------------------------------------
0099                       ; Show volume size
0100                       ;-------------------------------------------------------
0101 79A0 0242  22         andi  config,>7fff          ; Do not print number
     79A2 7FFF     
0102                                                   ; (Reset bit 0 in config register)
0103               
0104 79A4 06A0  32         bl    @mknum                ; Convert unsigned number to string
     79A6 2A56     
0105 79A8 E378                   data cat.volsize      ; \ i  p1    = Source
0106 79AA A100                   data rambuf           ; | i  p2    = Destination
0107 79AC 30                     byte 48               ; | i  p3MSB = ASCII offset
0108 79AD   20                   byte 32               ; / i  p3LSB = Padding character
0109               
0110 79AE 06A0  32         bl    @trimnum              ; Trim number to the left
     79B0 2AAE     
0111 79B2 A100                   data rambuf,rambuf + 5,32
     79B4 A105     
     79B6 0020     
0112               
0113 79B8 06A0  32         bl    @putat
     79BA 2442     
0114 79BC 0027                   byte 0,39
0115 79BE A105                   data rambuf + 5       ; Display volume size
0116                       ;-------------------------------------------------------
0117                       ; Show volume free
0118                       ;-------------------------------------------------------
0119 79C0 0242  22         andi  config,>7fff          ; Do not print number
     79C2 7FFF     
0120                                                   ; (Reset bit 0 in config register)
0121               
0122 79C4 06A0  32         bl    @mknum                ; Convert unsigned number to string
     79C6 2A56     
0123 79C8 E37C                   data cat.volfree      ; \ i  p1    = Source
0124 79CA A100                   data rambuf           ; | i  p2    = Destination
0125 79CC 30                     byte 48               ; | i  p3MSB = ASCII offset
0126 79CD   20                   byte 32               ; / i  p3LSB = Padding character
0127               
0128 79CE 06A0  32         bl    @trimnum              ; Trim number to the left
     79D0 2AAE     
0129 79D2 A100                   data rambuf,rambuf + 5,32
     79D4 A105     
     79D6 0020     
0130               
0131 79D8 06A0  32         bl    @putat
     79DA 2442     
0132 79DC 0034                   byte 0,52
0133 79DE A105                   data rambuf + 5       ; Display volume free
0134                       ;-------------------------------------------------------
0135                       ; Show volume used
0136                       ;-------------------------------------------------------
0137 79E0 0242  22         andi  config,>7fff          ; Do not print number
     79E2 7FFF     
0138                                                   ; (Reset bit 0 in config register)
0139               
0140 79E4 06A0  32         bl    @mknum                ; Convert unsigned number to string
     79E6 2A56     
0141 79E8 E37A                   data cat.volused      ; \ i  p1    = Source
0142 79EA A100                   data rambuf           ; | i  p2    = Destination
0143 79EC 30                     byte 48               ; | i  p3MSB = ASCII offset
0144 79ED   20                   byte 32               ; / i  p3LSB = Padding character
0145               
0146 79EE 06A0  32         bl    @trimnum              ; Trim number to the left
     79F0 2AAE     
0147 79F2 A100                   data rambuf,rambuf + 5,32
     79F4 A105     
     79F6 0020     
0148               
0149 79F8 06A0  32         bl    @putat
     79FA 2442     
0150 79FC 0041                   byte 0,65
0151 79FE A105                   data rambuf + 5       ; Display volume used
0152                       ;------------------------------------------------------
0153                       ; Draw vertical lines
0154                       ;------------------------------------------------------
0155               pane.filebrowser.lines:
0156 7A00 06A0  32         bl    @vchar
     7A02 285A     
0157 7A04 0119                   byte 1,25                        ; Starting position YX
0158 7A06 10                     byte >10                         ; Vertical line char
0159 7A07   16                   byte pane.botrow - cmdb.rows - 1 ; Y-repeat
0160 7A08 0133                   byte 1,51                        ; Starting position YX
0161 7A0A 10                     byte >10                         ; Vertical line char
0162 7A0B   16                   byte pane.botrow - cmdb.rows - 1 ; Y-repeat
0163 7A0C FFFF                   data EOL
0164                       ;------------------------------------------------------
0165                       ; Show column headers
0166                       ;------------------------------------------------------
0167               pane.filebrowser.headers:
0168 7A0E 06A0  32         bl    @putat
     7A10 2442     
0169 7A12 0101                   byte 1,1
0170 7A14 7B98                   data txt.header       ; Column 1
0171               
0172 7A16 06A0  32         bl    @putat
     7A18 2442     
0173 7A1A 011B                   byte 1,27
0174 7A1C 7B98                   data txt.header       ; Column 2
0175               
0176 7A1E 06A0  32         bl    @putat
     7A20 2442     
0177 7A22 0135                   byte 1,53
0178 7A24 7B98                   data txt.header       ; Column 3
0179               
0180 7A26 06A0  32         bl    @hchar                ; Show horizontal lines
     7A28 2832     
0181 7A2A 0201                   byte 2,1,1,23         ; Column 1
     7A2C 0117     
0182 7A2E 021B                   byte 2,27,1,23        ; Column 2
     7A30 0117     
0183 7A32 0235                   byte 2,53,1,23        ; Column 3
     7A34 0117     
0184 7A36 FFFF                   data eol
0185                       ;------------------------------------------------------
0186                       ; Prepare for displaying filenames
0187                       ;------------------------------------------------------
0188 7A38 C120  34         mov   @cat.fpicker.idx,tmp0   ; Get current index
     7A3A E002     
0189 7A3C 0A14  18         sla   tmp0,1                  ; Make it an offset
0190 7A3E C164  34         mov   @cat.ptrlist(tmp0),tmp1 ; Get filename list
     7A40 E076     
0191 7A42 1602  14         jne   pane.filebrowser.show   ; Show filenames if list not empty
0192 7A44 0460  28         b     @pane.filebrowser.exit  ; Skip on empty list
     7A46 7B42     
0193                       ;------------------------------------------------------
0194                       ; Show Catalog
0195                       ;------------------------------------------------------
0196                       ; @cat.var1 = Cutover row and column offset
0197                       ; @cat.var2 = Files per page to display
0198                       ;------------------------------------------------------
0199               pane.filebrowser.show:
0200 7A48 06A0  32         bl    @at                   ; Set cursor position
     7A4A 2726     
0201 7A4C 0301                   byte 3,1              ; Y=3, X=1
0202               
0203 7A4E C120  34         mov   @fb.scrrows,tmp0      ; \ Determine cutover row for filename
     7A50 A31E     
0204 7A52 6120  34         s     @cmdb.scrrows,tmp0    ; | column list and store in MSB of tmp0.
     7A54 A706     
0205 7A56 C184  18         mov   tmp0,tmp2             ; | Also use for calculating files per page.
0206 7A58 0A84  32         sla   tmp0,8                ; /
0207 7A5A 0264  22         ori   tmp0,26               ; Set offset for new column in filename list
     7A5C 001A     
0208 7A5E C804  38         mov   tmp0,@cat.var1        ; Save cutover row and offset
     7A60 E066     
0209               
0210 7A62 0646  14         dect  tmp2                  ; Take header lines into account
0211 7A64 C806  38         mov   tmp2,@cat.norowscol   ; Save number of rows per column
     7A66 E014     
0212               
0213 7A68 C1C6  18         mov   tmp2,tmp3             ; \
0214 7A6A A187  18         a     tmp3,tmp2             ; | tmp2 = tmp2 * 3
0215 7A6C A187  18         a     tmp3,tmp2             ; /
0216 7A6E C806  38         mov   tmp2,@cat.var2        ; Save files per page to display
     7A70 E068     
0217 7A72 C806  38         mov   tmp2,@cat.nofilespage ; For later use
     7A74 E008     
0218                       ;------------------------------------------------------
0219                       ; Prepare for calculations
0220                       ;------------------------------------------------------
0221 7A76 0649  14         dect  stack
0222 7A78 C644  30         mov   tmp0,*stack           ; Push tmp0
0223 7A7A 0649  14         dect  stack
0224 7A7C C645  30         mov   tmp1,*stack           ; Push tmp1
0225 7A7E 0649  14         dect  stack
0226 7A80 C646  30         mov   tmp2,*stack           ; Push tmp2
0227                       ;------------------------------------------------------
0228                       ; Calc files per column
0229                       ;------------------------------------------------------
0230 7A82 0204  20         li    tmp0,3
     7A84 0003     
0231 7A86 04C5  14         clr   tmp1                  ; | hi-word 32 bit
0232 7A88 C1A0  34         mov   @cat.nofilespage,tmp2 ; \ Files per page
     7A8A E008     
0233 7A8C 3D44 128         div   tmp0,tmp1             ; / Get files per column
0234 7A8E C805  38         mov   tmp1,@cat.nofilescol  ; Store files per column in memory
     7A90 E00A     
0235                       ;------------------------------------------------------
0236                       ; Calc number of pages
0237                       ;------------------------------------------------------
0238 7A92 C120  34         mov   @cat.nofilespage,tmp0 ; \ Files per page
     7A94 E008     
0239 7A96 04C5  14         clr   tmp1                  ; | hi-word 32 bit
0240 7A98 C1A0  34         mov   @cat.filecount,tmp2   ; | lo-word 32 bit register (total files)
     7A9A E000     
0241 7A9C 3D44 128         div   tmp0,tmp1             ; | Get total pages
0242 7A9E C805  38         mov   tmp1,@cat.totalpages  ; / Store total pages in memory
     7AA0 E00E     
0243               
0244 7AA2 0286  22         ci    tmp2,0                ; Remainder of division > 0
     7AA4 0000     
0245 7AA6 1302  14         jeq   !                     ; No, continue
0246 7AA8 05A0  34         inc   @cat.totalpages       ; Yes, there are files on the page
     7AAA E00E     
0247                       ;------------------------------------------------------
0248                       ; Calc current page
0249                       ;------------------------------------------------------
0250 7AAC 04C5  14 !       clr   tmp1                   ; \ hi-word 32 bit
0251 7AAE C1A0  34         mov   @cat.fpicker.idx,tmp2  ; | lo-word 32 bit register (current idx)
     7AB0 E002     
0252 7AB2 3D44 128         div   tmp0,tmp1              ; | Get current page
0253 7AB4 1901  14         jno   pane.filebrowser.divok ; / Store if normal division
0254 7AB6 04C5  14         clr   tmp1                   ; We're on 1st page (base 0 offset)
0255               pane.filebrowser.divok:
0256 7AB8 0585  14         inc   tmp1                               ; Consider base 1 offset
0257 7ABA C820  54         mov   @cat.currentpage,@cat.previouspage ; Backup current page
     7ABC E00C     
     7ABE E010     
0258 7AC0 C805  38         mov   tmp1,@cat.currentpage              ; Store current page in memory
     7AC2 E00C     
0259                       ;------------------------------------------------------
0260                       ; Calculations done
0261                       ;------------------------------------------------------
0262               pane.filebrowser.calcdone:
0263 7AC4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0264 7AC6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0265 7AC8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0266                       ;------------------------------------------------------
0267                       ; Show filenames
0268                       ;------------------------------------------------------
0269               pane.filebrowser.show.fnlist:
0270 7ACA 04E0  26         clr   @waux1                ; \ Set null pointer
     7ACC 833C     
0271                                                   ; | Note: putlst only sets @waux1 if
0272                                                   ; |       tmp2 < entries in list
0273                                                   ; /
0274               
0275 7ACE 0207  20         li    tmp3,11               ; Set string padding length
     7AD0 000B     
0276               
0277 7AD2 06A0  32         bl    @putlst               ; Loop over string list and display
     7AD4 244A     
0278                                                   ; \ i  @wyx = Cursor position
0279                                                   ; | i  tmp0 = Cutover row and column offset
0280                                                   ; |           for next column, >0000 for
0281                                                   ; |           single column list
0282                                                   ; | i  tmp1 = Pointer to first length-
0283                                                   ; |           prefixed string in list
0284                                                   ; | i  tmp2 = Number of strings to display
0285                                                   ; | i  tmp3 = String padding length
0286                                                   ; |
0287                                                   ; | o  @waux1 = Pointer to next entry
0288                                                   ; |             in list after displaying
0289                                                   ; /             (tmp2) entries
0290                       ;------------------------------------------------------
0291                       ; Show filetypes list
0292                       ;------------------------------------------------------
0293               pane.filebrowser.show.typelist:
0294 7AD6 06A0  32         bl    @at                   ; Set cursor position
     7AD8 2726     
0295 7ADA 030D                   byte 3,13             ; Y=3, X=13
0296               
0297 7ADC C120  34         mov   @cat.fpicker.idx,tmp0 ; Get current index
     7ADE E002     
0298 7AE0 0205  20         li    tmp1,6                ; 6 bytes per entry
     7AE2 0006     
0299 7AE4 3944  58         mpy   tmp0,tmp1             ; Calculate offset. Result is in tmp1:tmp2
0300 7AE6 C146  18         mov   tmp2,tmp1             ; Move result to tmp1
0301 7AE8 0204  20         li    tmp0,cat.typelist     ; \
     7AEA E3C6     
0302 7AEC A144  18         a     tmp0,tmp1             ; / Add base
0303 7AEE C120  34         mov   @cat.var1,tmp0        ; Get cutover row and column offset
     7AF0 E066     
0304 7AF2 C1A0  34         mov   @cat.var2,tmp2        ; Get number of files to display
     7AF4 E068     
0305               
0306 7AF6 04C7  14         clr   tmp3                  ; No string padding
0307               
0308 7AF8 06A0  32         bl    @putlst               ; Loop over string list and display
     7AFA 244A     
0309                                                   ; \ i  @wyx = Cursor position
0310                                                   ; | i  tmp0 = Cutover row and column offset
0311                                                   ; |           for next column, >0000 for
0312                                                   ; |           single column list
0313                                                   ; | i  tmp1 = Pointer to first length-
0314                                                   ; |           prefixed string in list
0315                                                   ; | i  tmp2 = Number of strings to display
0316                                                   ; | i  tmp3 = String padding length
0317                                                   ; |
0318                                                   ; | o  @waux1 = Pointer to next entry
0319                                                   ; |             in list after displaying
0320                                                   ; /             (tmp2) entries
0321                       ;------------------------------------------------------
0322                       ; Show filesize list
0323                       ;------------------------------------------------------
0324               pane.filebrowser.show.sizelist:
0325 7AFC 06A0  32         bl    @at                   ; Set cursor position
     7AFE 2726     
0326 7B00 0315                   byte 3,21             ; Y=3, X=21
0327               
0328 7B02 C120  34         mov   @cat.fpicker.idx,tmp0  ; Get current index
     7B04 E002     
0329 7B06 0A24  20         sla   tmp0,2                 ; Calculate slot offset (1 entry=4 bytes)
0330 7B08 0205  20         li    tmp1,cat.sizelist      ; Set base
     7B0A E6C0     
0331 7B0C A144  18         a     tmp0,tmp1              ; Add offset
0332               
0333 7B0E C120  34         mov   @cat.var1,tmp0        ; Get cutover row and column offset
     7B10 E066     
0334 7B12 C1A0  34         mov   @cat.var2,tmp2        ; Get number of files to display
     7B14 E068     
0335               
0336 7B16 04C7  14         clr   tmp3                  ; No string padding
0337               
0338 7B18 06A0  32         bl    @putlst               ; Loop over string list and display
     7B1A 244A     
0339                                                   ; \ i  @wyx = Cursor position
0340                                                   ; | i  tmp0 = Cutover row and column offset
0341                                                   ; |           for next column, >0000 for
0342                                                   ; |           single column list
0343                                                   ; | i  tmp1 = Pointer to first length-
0344                                                   ; |           prefixed string in list
0345                                                   ; | i  tmp2 = Number of strings to display
0346                                                   ; | i  tmp3 = String padding length
0347                                                   ; |
0348                                                   ; | o  @waux1 = Pointer to next entry
0349                                                   ; |             in list after displaying
0350                                                   ; /             (tmp2) entries
0351                       ;------------------------------------------------------
0352                       ; Show filename marker in supported dialogs
0353                       ;------------------------------------------------------
0354               pane.filebrowser.marker:
0355 7B1C C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     7B1E A720     
0356               
0357 7B20 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     7B22 000A     
0358 7B24 110E  14         jlt   pane.filebrowser.exit ; / Not in supported dialog range. Skip
0359               
0360 7B26 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     7B28 0072     
0361 7B2A 150B  14         jgt   pane.filebrowser.exit ; / Not in supported dialog range. Skip
0362               
0363 7B2C 06A0  32         bl    @pane.filebrowser.hilight
     7B2E 7BB0     
0364                                                   ; Show filename marker
0365                                                   ; \ @i @cat.fpicker.idx = 1st file to show
0366                                                   ; /                       in file browser
0367                       ;---------------------------------------------------------------
0368                       ; Set filename in CMDB pane
0369                       ;---------------------------------------------------------------
0370 7B30 06A0  32         bl    @cpym2m
     7B32 253A     
0371 7B34 E016                   data cat.fullfname,cmdb.cmdall,80
     7B36 A732     
     7B38 0050     
0372                                                   ; Copy filename from command line to buffer
0373               
0374 7B3A 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     7B3C 7D82     
0375 7B3E 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     7B40 7D94     
0376                       ;------------------------------------------------------
0377                       ; Exit
0378                       ;------------------------------------------------------
0379               pane.filebrowser.exit:
0380 7B42 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7B44 832A     
0381 7B46 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0382 7B48 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0383 7B4A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0384 7B4C C2F9  30         mov   *stack+,r11           ; Pop R11
0385 7B4E 045B  20         b     *r11                  ; Return to caller
0386               
0387 7B50 4756     txt.volume    stri  'Volume:             Files:       Size:        Free:        Used:       '
     7B52 6F6C     
     7B54 756D     
     7B56 653A     
     7B58 2020     
     7B5A 2020     
     7B5C 2020     
     7B5E 2020     
     7B60 2020     
     7B62 2020     
     7B64 2046     
     7B66 696C     
     7B68 6573     
     7B6A 3A20     
     7B6C 2020     
     7B6E 2020     
     7B70 2020     
     7B72 5369     
     7B74 7A65     
     7B76 3A20     
     7B78 2020     
     7B7A 2020     
     7B7C 2020     
     7B7E 2046     
     7B80 7265     
     7B82 653A     
     7B84 2020     
     7B86 2020     
     7B88 2020     
     7B8A 2020     
     7B8C 5573     
     7B8E 6564     
     7B90 3A20     
     7B92 2020     
     7B94 2020     
     7B96 2020     
0388 7B98 174E     txt.header    stri  'Name        Type   Size'
     7B9A 616D     
     7B9C 6520     
     7B9E 2020     
     7BA0 2020     
     7BA2 2020     
     7BA4 2054     
     7BA6 7970     
     7BA8 6520     
     7BAA 2020     
     7BAC 5369     
     7BAE 7A65     
                   < stevie_b4.asm
0114                       copy  "pane.filebrowser.hilight.asm" ; Highlight entry in filename list
     **** ****     > pane.filebrowser.hilight.asm
0001               * FILE......: pane.filebrowser.hlight.asm
0002               * Purpose...: File browser. Highlight current File in list
0003               
0004               *---------------------------------------------------------------
0005               * File browser
0006               *---------------------------------------------------------------
0007               * bl   @pane.filebrowser.hlight
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @cat.shortcut.idx = Index in filename list
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0, tmp1, tmp2
0014               ********|*****|*********************|**************************
0015               pane.filebrowser.hilight:
0016 7BB0 0649  14         dect  stack
0017 7BB2 C64B  30         mov   r11,*stack            ; Save return address
0018 7BB4 0649  14         dect  stack
0019 7BB6 C644  30         mov   tmp0,*stack           ; Push tmp0
0020 7BB8 0649  14         dect  stack
0021 7BBA C645  30         mov   tmp1,*stack           ; Push tmp1
0022 7BBC 0649  14         dect  stack
0023 7BBE C646  30         mov   tmp2,*stack           ; Push tmp2
0024 7BC0 0649  14         dect  stack
0025 7BC2 C660  42         mov   @wyx,*stack           ; Push cursor position
     7BC4 832A     
0026                       ;------------------------------------------------------
0027                       ; Initialisation
0028                       ;------------------------------------------------------
0029 7BC6 C120  34         mov   @cat.filecount,tmp0   ; Get number of files
     7BC8 E000     
0030               
0031 7BCA 1601  14         jne   !                             ; \
0032 7BCC 1054  14         jmp   pane.filebrowser.hilight.exit ; / Exit if nothing to display
0033                       ;------------------------------------------------------
0034                       ; Determine offset on current page
0035                       ;------------------------------------------------------
0036 7BCE C120  34 !       mov   @cat.shortcut.idx,tmp0 ; Get index
     7BD0 E012     
0037 7BD2 8804  34         c     tmp0,@cat.nofilespage  ; Are we on 1st page?
     7BD4 E008     
0038 7BD6 110E  14         jlt   pane.filebrowser.hilight.rowcol
0039                                                    ; Yes, skip page calculation
0040               
0041 7BD8 C144  18         mov   tmp0,tmp1              ; \ Prepare for division.
0042 7BDA 04C4  14         clr   tmp0                   ; / MSW=0, LSW=index value
0043 7BDC 3D20 144         div   @cat.nofilespage,tmp0  ; \ Calculate offset on current page
     7BDE E008     
0044                                                    ; / tmp0 = page number, tmp1 = offset
0045 7BE0 1904  14         jno   pane.filebrowser.hilight.divok
0046                       ;------------------------------------------------------
0047                       ; Crash and burn
0048                       ;------------------------------------------------------
0049 7BE2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7BE4 FFCE     
0050 7BE6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7BE8 2026     
0051                       ;------------------------------------------------------
0052                       ; Division ok
0053                       ;------------------------------------------------------
0054               pane.filebrowser.hilight.divok:
0055 7BEA C820  54         mov   @cat.currentpage,@cat.previouspage
     7BEC E00C     
     7BEE E010     
0056 7BF0 0584  14         inc   tmp0                  ; Base 1
0057 7BF2 C105  18         mov   tmp1,tmp0             ; Get offset on current page
0058                       ;------------------------------------------------------
0059                       ; Calculate column/row offset based on offset on current page
0060                       ;------------------------------------------------------
0061               pane.filebrowser.hilight.rowcol:
0062 7BF4 C144  18         mov   tmp0,tmp1             ; Get index in filename list in LSW
0063 7BF6 04C4  14         clr   tmp0                  ; Clear MSW
0064 7BF8 3D20 144         div   @cat.norowscol,tmp0   ; \ Do division on 32 bit word.
     7BFA E014     
0065                                                   ; / tmp0 is column, tmp1 is row offset
0066 7BFC D820  42         movb  @tmp0lb,@tmp1hb       ; Combine column & row in single word
     7BFE 8309     
     7C00 830A     
0067 7C02 C820  54         mov   @cat.hilit.colrow,@cat.hilit.colrow2
     7C04 E004     
     7C06 E006     
0068                                                   ; Backup current column & row
0069 7C08 C805  38         mov   tmp1,@cat.hilit.colrow
     7C0A E004     
0070                                                   ; Save new column & row
0071                       ;------------------------------------------------------
0072                       ; Remove previous file marker
0073                       ;------------------------------------------------------
0074               pane.filebrowser.hilight.remove:
0075                       ;------------------------------------------------------
0076                       ; Remove filepicker color bar
0077                       ;------------------------------------------------------
0078 7C0C 06A0  32         bl    @pane.filebrowser.colbar.remove
     7C0E 7CE6     
0079                                                   ; Remove filepicker color bar
0080                                                   ; i \  @cat.barpos = YX position color bar
0081                                                   ;   /
0082               
0083 7C10 C120  34         mov   @cat.hilit.colrow2,tmp0
     7C12 E006     
0084                                                   ; Get column/row offsets
0085 7C14 0984  32         srl   tmp0,8                ; MSB to LSB. Column value in LSB
0086 7C16 0205  20         li    tmp1,26               ; Offset next column
     7C18 001A     
0087 7C1A 3944  58         mpy   tmp0,tmp1             ; tmp2 = col*28
0088 7C1C 0A86  32         sla   tmp2,8                ; LSB to MSB
0089               
0090 7C1E D820  46         movb  @cat.hilit.colrow2+1,@tmp2lb
     7C20 E007     
     7C22 830D     
0091                                                   ; Get row into tmp2 LSB
0092 7C24 06C6  14         swpb  tmp2                  ; Column/row to YX
0093 7C26 0226  22         ai    tmp2,>0300            ; Add offset
     7C28 0300     
0094 7C2A C806  30         mov   tmp2,@wyx             ; Set cursor position
     7C2C 832A     
0095                       ;------------------------------------------------------
0096                       ; Calculate marker "[" position
0097                       ;------------------------------------------------------
0098               pane.filebrowser.hilight.draw.marker:
0099 7C2E C120  34         mov   @cat.hilit.colrow,tmp0
     7C30 E004     
0100 7C32 0984  32         srl   tmp0,8                ; MSB to LSB. Column value in LSB
0101 7C34 C804  38         mov   tmp0,@cat.barcol      ; Save column value
     7C36 E376     
0102 7C38 0205  20         li    tmp1,26               ; Offset next column
     7C3A 001A     
0103 7C3C 3944  58         mpy   tmp0,tmp1             ; tmp2 = col*28
0104 7C3E 0A86  32         sla   tmp2,8                ; LSB to MSB
0105               
0106 7C40 D820  46         movb  @cat.hilit.colrow+1,@tmp2lb
     7C42 E005     
     7C44 830D     
0107                                                   ; Get row into tmp2 LSB
0108 7C46 06C6  14         swpb  tmp2                  ; Column/row to YX
0109 7C48 0226  22         ai    tmp2,>0300            ; Add offset
     7C4A 0300     
0110 7C4C C806  30         mov   tmp2,@wyx             ; Set cursor position
     7C4E 832A     
0111                       ;------------------------------------------------------
0112                       ; Set background color
0113                       ;------------------------------------------------------
0114 7C50 C820  50         mov   @wyx,@cat.barpos      ; Save cursor position
     7C52 832A     
     7C54 E374     
0115               
0116 7C56 C120  34         mov   @tv.color,tmp0        ; Get color combination (only LSB counts)
     7C58 A218     
0117 7C5A 06A0  32         bl    @pane.filebrowser.colbar
     7C5C 7C86     
0118                                                   ; Draw column bar
0119                                                   ; i \  tmp0 = color combination
0120                                                   ; i /  @wyx = Cursor position
0121                       ;------------------------------------------------------
0122                       ; Draw "[" marker
0123                       ;------------------------------------------------------
0124 7C5E 06A0  32         bl    @putstr
     7C60 241E     
0125 7C62 3D90                   data txt.picker.icon1 ; Draw marker
0126                                                   ; \ i @wyx   = Cursor position
0127                                                   ; / i @parm1 = String to display
0128                       ;------------------------------------------------------
0129                       ; Calculate "]" marker position
0130                       ;------------------------------------------------------
0131 7C64 C120  34         mov   @cat.barpos,tmp0      ; \
     7C66 E374     
0132 7C68 0224  22         ai    tmp0,24               ; | Calculate position
     7C6A 0018     
0133 7C6C C804  30         mov   tmp0,@wyx             ; /
     7C6E 832A     
0134                       ;------------------------------------------------------
0135                       ; Draw "]" marker
0136                       ;------------------------------------------------------
0137 7C70 06A0  32         bl    @putstr
     7C72 241E     
0138 7C74 3D92                   data txt.picker.icon2 ; Draw marker
0139                                                   ; \ i @wyx   = Cursor position
0140                                                   ; / i @parm1 = String to display
0141                       ;------------------------------------------------------
0142                       ; Exit
0143                       ;------------------------------------------------------
0144               pane.filebrowser.hilight.exit:
0145 7C76 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7C78 832A     
0146 7C7A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0147 7C7C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0148 7C7E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0149 7C80 C2F9  30         mov   *stack+,r11           ; Pop R11
0150 7C82 045B  20         b     *r11                  ; Return to caller
0151               
0152 7C84 0120     nomarker  stri  ' '
0153               
                   < stevie_b4.asm
0115                       copy  "pane.filebrowser.colbar.asm"  ; Draw color bar in file browser
     **** ****     > pane.filebrowser.colbar.asm
0001               * FILE......: pane.filebrowser.colbar.asm
0002               * Purpose...: File browser. Draw or remove color bar on selected file.
0003               
0004               *---------------------------------------------------------------
0005               * Draw color bar on selected file
0006               *---------------------------------------------------------------
0007               * bl   @pane.filebrowser.colbar
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @wyx = Current position
0011               * tmp0 = Color combination to show (in LSB)
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0, tmp1, tmp2, tmp3
0015               ********|*****|*********************|**************************
0016               pane.filebrowser.colbar:
0017 7C86 0649  14         dect  stack
0018 7C88 C64B  30         mov   r11,*stack            ; Save return address
0019 7C8A 0649  14         dect  stack
0020 7C8C C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7C8E 0649  14         dect  stack
0022 7C90 C645  30         mov   tmp1,*stack           ; Push tmp1
0023 7C92 0649  14         dect  stack
0024 7C94 C646  30         mov   tmp2,*stack           ; Push tmp2
0025 7C96 0649  14         dect  stack
0026 7C98 C647  30         mov   tmp3,*stack           ; Push tmp3
0027 7C9A 0649  14         dect  stack
0028 7C9C C660  42         mov   @wyx,*stack           ; Push cursor position
     7C9E 832A     
0029                       ;------------------------------------------------------
0030                       ; Calculate position
0031                       ;------------------------------------------------------
0032 7CA0 C1C4  18         mov   tmp0,tmp3             ; Save color combination
0033 7CA2 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     7CA4 23FA     
0034                                                   ; \ i  @wyx = Cursor position
0035                                                   ; / o  tmp0 = VDP target address
0036               
0037 7CA6 0224  22         ai    tmp0,vdp.tat.base     ; Add offset for TAT
     7CA8 0980     
0038 7CAA C804  30         mov   tmp0,@waux1           ; Backup TAT position
     7CAC 833C     
0039                       ;------------------------------------------------------
0040                       ; Set color of "[]" maker
0041                       ;------------------------------------------------------
0042 7CAE 0205  20         li    tmp1,>00b0            ; Yellow
     7CB0 00B0     
0043 7CB2 06A0  32         bl    @xvputb               ; Write single byte to VDP
     7CB4 22CC     
0044                                                   ; i \  tmp0 = Destination VFP address
0045                                                   ; i /  tmp1 = byte to write
0046                       ;------------------------------------------------------
0047                       ; Set background color of color bar
0048                       ;------------------------------------------------------
0049 7CB6 C120  30         mov   @waux1,tmp0           ; Restore TAT position
     7CB8 833C     
0050 7CBA 0584  14         inc   tmp0                  ; Skip marker
0051 7CBC C147  18         mov   tmp3,tmp1             ; Restore color combination
0052 7CBE 0206  20         li    tmp2,23               ; 23 bytes to fill
     7CC0 0017     
0053               
0054 7CC2 06A0  32         bl    @xfilv                ; Fill colors
     7CC4 2294     
0055                                                   ; i \  tmp0 = start address
0056                                                   ; i |  tmp1 = byte to fill
0057                                                   ; i /  tmp2 = number of bytes to fill
0058                       ;------------------------------------------------------
0059                       ; Set color of "]" maker
0060                       ;------------------------------------------------------
0061 7CC6 C120  30         mov   @waux1,tmp0           ; Restore TAT position
     7CC8 833C     
0062 7CCA 0224  22         ai    tmp0,24               ; End marker
     7CCC 0018     
0063 7CCE 0205  20         li    tmp1,>00b0            ; Yellow
     7CD0 00B0     
0064 7CD2 06A0  32         bl    @xvputb               ; Write single byte to VDP
     7CD4 22CC     
0065                                                   ; i \  tmp0 = Destination VFP address
0066                                                   ; i /  tmp1 = byte to write
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               pane.filebrowser.colbar.exit:
0071 7CD6 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7CD8 832A     
0072 7CDA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0073 7CDC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0074 7CDE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 7CE0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 7CE2 C2F9  30         mov   *stack+,r11           ; Pop R11
0077 7CE4 045B  20         b     *r11                  ; Return to caller
0078               
0079               
0080               *---------------------------------------------------------------
0081               * Remove filepicker color bar (if visible)
0082               *---------------------------------------------------------------
0083               * bl   @pane.filebrowser.colbar.remove
0084               *---------------------------------------------------------------
0085               * INPUT
0086               * @cat.barpos = YX position of color bar
0087               *--------------------------------------------------------------
0088               * Register usage
0089               * tmp0, tmp1, tmp2
0090               ********|*****|*********************|**************************
0091               pane.filebrowser.colbar.remove:
0092 7CE6 0649  14         dect  stack
0093 7CE8 C64B  30         mov   r11,*stack            ; Save return address
0094 7CEA 0649  14         dect  stack
0095 7CEC C644  30         mov   tmp0,*stack           ; Push tmp0
0096 7CEE 0649  14         dect  stack
0097 7CF0 C645  30         mov   tmp1,*stack           ; Push tmp1
0098 7CF2 0649  14         dect  stack
0099 7CF4 C646  30         mov   tmp2,*stack           ; Push tmp2
0100 7CF6 0649  14         dect  stack
0101 7CF8 C660  42         mov   @wyx,*stack           ; Push cursor position
     7CFA 832A     
0102                       ;-------------------------------------------------------
0103                       ; Remove filepicker color bar (if visible)
0104                       ;-------------------------------------------------------
0105 7CFC C120  34         mov   @cat.barpos,tmp0      ; Get color bar position
     7CFE E374     
0106 7D00 1315  14         jeq   pane.filebrowser.colbar.remove.exit
0107                                                   ; If not visible, exit
0108               
0109 7D02 C804  30         mov   tmp0,@wyx             ; Set cursor position
     7D04 832A     
0110 7D06 C120  34         mov   @tv.color,tmp0        ; \ Get color combination (only MSB counts)
     7D08 A218     
0111 7D0A 06C4  14         swpb  tmp0                  ; /
0112               
0113 7D0C 06A0  32         bl    @pane.filebrowser.colbar
     7D0E 7C86     
0114                                                   ; Draw column bar
0115                                                   ; i \  tmp0 = color combination
0116                                                   ; i /  @wyx = Cursor position
0117                       ;-------------------------------------------------------
0118                       ; Remove "[" marker
0119                       ;-------------------------------------------------------
0120 7D10 06A0  32         bl    @putstr               ; Put string
     7D12 241E     
0121 7D14 7C84                   data nomarker         ; Remove "[" marker
0122                       ;------------------------------------------------------
0123                       ; Calculate "]" marker position
0124                       ;------------------------------------------------------
0125 7D16 C120  34         mov   @cat.barpos,tmp0      ; \
     7D18 E374     
0126 7D1A 0224  22         ai    tmp0,24               ; | Calculate position
     7D1C 0018     
0127 7D1E C804  30         mov   tmp0,@wyx             ; /
     7D20 832A     
0128                       ;-------------------------------------------------------
0129                       ; Remove "]" marker
0130                       ;-------------------------------------------------------
0131 7D22 06A0  32         bl    @putstr               ; Put string
     7D24 241E     
0132 7D26 7C84                   data nomarker         ; Remove "[" marker
0133               
0134 7D28 04E0  34         clr   @cat.barpos           ; Clear color bar position
     7D2A E374     
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138               pane.filebrowser.colbar.remove.exit:
0139 7D2C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7D2E 832A     
0140 7D30 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0141 7D32 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0142 7D34 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0143 7D36 C2F9  30         mov   *stack+,r11           ; Pop R11
0144 7D38 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0116                       ;-----------------------------------------------------------------------
0117                       ; Stubs
0118                       ;-----------------------------------------------------------------------
0119                       copy  "rom.stubs.bank4.asm"          ; Bank specific stubs
     **** ****     > rom.stubs.bank4.asm
0001               * FILE......: rom.stubs.bank4.asm
0002               * Purpose...: Bank 4 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.pack.fb"
0007               * bank1 vec.10
0008               ********|*****|*********************|**************************
0009               edb.line.pack.fb:
0010 7D3A 0649  14         dect  stack
0011 7D3C C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 7D3E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D40 307A     
0016 7D42 6002                   data bank1.rom        ; | i  p0 = bank address
0017 7D44 7F82                   data vec.10           ; | i  p1 = Vector with target address
0018 7D46 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 7D48 C2F9  30         mov   *stack+,r11           ; Pop r11
0023 7D4A 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "edb.line.unpack.fb"
0028               * bank1 vec.11
0029               ********|*****|*********************|**************************
0030               edb.line.unpack.fb:
0031 7D4C 0649  14         dect  stack
0032 7D4E C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 7D50 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D52 307A     
0037 7D54 6002                   data bank1.rom        ; | i  p0 = bank address
0038 7D56 7F84                   data vec.11           ; | i  p1 = Vector with target address
0039 7D58 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 7D5A C2F9  30         mov   *stack+,r11           ; Pop r11
0044 7D5C 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "pane.cursor.blink"
0049               * bank1 vec.28
0050               ********|*****|*********************|**************************
0051               pane.cursor.blink:
0052 7D5E 0649  14         dect  stack
0053 7D60 C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 7D62 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D64 307A     
0058 7D66 6002                   data bank1.rom        ; | i  p0 = bank address
0059 7D68 7FA6                   data vec.28           ; | i  p1 = Vector with target address
0060 7D6A 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 7D6C C2F9  30         mov   *stack+,r11           ; Pop r11
0065 7D6E 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.cmdb.draw"
0070               * bank3 vec.22
0071               ********|*****|*********************|**************************
0072               pane.cmdb.draw:
0073 7D70 0649  14         dect  stack
0074 7D72 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 3
0077                       ;------------------------------------------------------
0078 7D74 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D76 307A     
0079 7D78 6002                   data bank1.rom        ; | i  p0 = bank address
0080 7D7A 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0081 7D7C 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 7D7E C2F9  30         mov   *stack+,r11           ; Pop r11
0086 7D80 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               ***************************************************************
0090               * Stub for "cmdb.refresh_prompt"
0091               * bank3 vec.24
0092               ********|*****|*********************|**************************
0093               cmdb.refresh_prompt:
0094 7D82 0649  14         dect  stack
0095 7D84 C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 3
0098                       ;------------------------------------------------------
0099 7D86 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D88 307A     
0100 7D8A 6006                   data bank3.rom        ; | i  p0 = bank address
0101 7D8C 7F9E                   data vec.24           ; | i  p1 = Vector with target address
0102 7D8E 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 7D90 C2F9  30         mov   *stack+,r11           ; Pop r11
0107 7D92 045B  20         b     *r11                  ; Return to caller
0108               
0109               
0110               ***************************************************************
0111               * Stub for "cmdb.cmdb.cursor_eol"
0112               * bank3 vec.29
0113               ********|*****|*********************|**************************
0114               cmdb.cmd.cursor_eol:
0115 7D94 0649  14         dect  stack
0116 7D96 C64B  30         mov   r11,*stack            ; Save return address
0117                       ;------------------------------------------------------
0118                       ; Call function in bank 3
0119                       ;------------------------------------------------------
0120 7D98 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D9A 307A     
0121 7D9C 6006                   data bank3.rom        ; | i  p0 = bank address
0122 7D9E 7FA8                   data vec.29           ; | i  p1 = Vector with target address
0123 7DA0 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0124                       ;------------------------------------------------------
0125                       ; Exit
0126                       ;------------------------------------------------------
0127 7DA2 C2F9  30         mov   *stack+,r11           ; Pop r11
0128 7DA4 045B  20         b     *r11                  ; Return to caller
0129               
0130               
0131               
0132               ***************************************************************
0133               * Stub for "vdp.colors.line"
0134               * bank6 vec.3
0135               ********|*****|*********************|**************************
0136               vdp.colors.line:
0137 7DA6 0649  14         dect  stack
0138 7DA8 C64B  30         mov   r11,*stack            ; Save return address
0139                       ;------------------------------------------------------
0140                       ; Call function in bank 6
0141                       ;------------------------------------------------------
0142 7DAA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7DAC 307A     
0143 7DAE 600C                   data bank6.rom        ; | i  p0 = bank address
0144 7DB0 7F74                   data vec.3            ; | i  p1 = Vector with target address
0145 7DB2 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149 7DB4 C2F9  30         mov   *stack+,r11           ; Pop r11
0150 7DB6 045B  20         b     *r11                  ; Return to caller
0151               
0152               
0153               ***************************************************************
0154               * Stub for "vdp.cursor.tat"
0155               * bank6 vec.5
0156               ********|*****|*********************|**************************
0157               vdp.cursor.tat:
0158 7DB8 0649  14         dect  stack
0159 7DBA C64B  30         mov   r11,*stack            ; Save return address
0160                       ;------------------------------------------------------
0161                       ; Call function in bank 6
0162                       ;------------------------------------------------------
0163 7DBC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7DBE 307A     
0164 7DC0 600C                   data bank6.rom        ; | i  p0 = bank address
0165 7DC2 7F78                   data vec.5            ; | i  p1 = Vector with target address
0166 7DC4 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0167                       ;------------------------------------------------------
0168                       ; Exit
0169                       ;------------------------------------------------------
0170 7DC6 C2F9  30         mov   *stack+,r11           ; Pop r11
0171 7DC8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b4.asm
0120                       copy  "rom.stubs.bankx.asm"          ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * Exclude: bank0, bank1
0009               * bank1 vec.1
0010               ********|*****|*********************|**************************
0011               mem.sams.setup.stevie:
0012 7DCA 0649  14         dect  stack
0013 7DCC C64B  30         mov   r11,*stack            ; Save return address
0014                       ;------------------------------------------------------
0015                       ; Call function in bank 1
0016                       ;------------------------------------------------------
0017 7DCE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7DD0 307A     
0018 7DD2 6002                   data bank1.rom        ; | i  p0 = bank address
0019 7DD4 7F70                   data vec.1            ; | i  p1 = Vector with target address
0020 7DD6 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0021                       ;------------------------------------------------------
0022                       ; Exit
0023                       ;------------------------------------------------------
0024 7DD8 C2F9  30         mov   *stack+,r11           ; Pop r11
0025 7DDA 045B  20         b     *r11                  ; Return to caller
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 7DDC 0649  14         dect  stack
0038 7DDE C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 7DE0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7DE2 307A     
0043 7DE4 600E                   data bank7.rom        ; | i  p0 = bank address
0044 7DE6 7F70                   data vec.1            ; | i  p1 = Vector with target address
0045 7DE8 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 7DEA C2F9  30         mov   *stack+,r11           ; Pop r11
0050 7DEC 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 7DEE 0649  14         dect  stack
0060 7DF0 C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 7DF2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7DF4 307A     
0065 7DF6 600E                   data bank7.rom        ; | i  p0 = bank address
0066 7DF8 7F72                   data vec.2            ; | i  p1 = Vector with target address
0067 7DFA 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 7DFC C2F9  30         mov   *stack+,r11           ; Pop r11
0072 7DFE 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7E00 0649  14         dect  stack
0081 7E02 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7E04 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7E06 307A     
0086 7E08 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7E0A 7F74                   data vec.3            ; | i  p1 = Vector with target address
0088 7E0C 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7E0E C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7E10 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 7E12 0649  14         dect  stack
0102 7E14 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 7E16 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7E18 307A     
0107 7E1A 600E                   data bank7.rom        ; | i  p0 = bank address
0108 7E1C 7F96                   data vec.20           ; | i  p1 = Vector with target address
0109 7E1E 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 7E20 C2F9  30         mov   *stack+,r11           ; Pop r11
0114 7E22 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 7E24 0649  14         dect  stack
0123 7E26 C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 7E28 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7E2A 307A     
0128 7E2C 600E                   data bank7.rom        ; | i  p0 = bank address
0129 7E2E 7F98                   data vec.21           ; | i  p1 = Vector with target address
0130 7E30 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 7E32 C2F9  30         mov   *stack+,r11           ; Pop r11
0135 7E34 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 7E36 0649  14         dect  stack
0144 7E38 C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 7E3A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7E3C 307A     
0149 7E3E 600E                   data bank7.rom        ; | i  p0 = bank address
0150 7E40 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0151 7E42 6008                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 7E44 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 7E46 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b4.asm
0121                       ;-----------------------------------------------------------------------
0122                       ; Program data
0123                       ;-----------------------------------------------------------------------
0124                       copy  "data.colorscheme.asm"         ; Colorscheme data table
     **** ****     > data.colorscheme.asm
0001               * FILE......: data.colorscheme.asm
0002               * Purpose...: Stevie Editor - Color schemes table
0003               
0004               ***************************************************************
0005               * Stevie color schemes table
0006               *--------------------------------------------------------------
0007               * ;
0008               * ; Word 0
0009               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0010               * ; B  MSB  low-nibble     Background color text line in frame buffer
0011               * ; C  LSB  high-nibble    Foreground color top line
0012               * ; D  LSB  low-nibble     Background color top line
0013               *
0014               * ; Word 1
0015               * ; E  MSB  high-nibble    Foreground color cmdb pane
0016               * ; F  MSB  low-nibble     Background color cmdb pane
0017               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0018               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0019               * ;
0020               * ; Word 2
0021               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0022               * ; J  MSB  low-nibble     Background color busy top/bottom line
0023               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0024               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0025               *
0026               * ; Word 3
0027               * ; M  MSB  high-nibble    Foreground color command buffer header line
0028               * ; N  MSB  low-nibble     Background color command buffer header line
0029               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0030               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0031               *
0032               * ; Word 4
0033               * ; Q  MSB  high-nibble    Foreground color bottom line
0034               * ; R  LSB  low-nibble     Background color bottom line
0035               * ; S  MSB  high-nibble
0036               * ; T  LSB  low-nibble
0037               *
0038               * ; Colors
0039               * ; 0  Transparant
0040               * ; 1  black
0041               * ; 2  Green
0042               * ; 3  Light Green
0043               * ; 4  Blue
0044               * ; 5  Light Blue
0045               * ; 6  Dark Red
0046               * ; 7  Cyan
0047               * ; 8  Red
0048               * ; 9  Light Red
0049               * ; A  Yellow
0050               * ; B  Light Yellow
0051               * ; C  Dark Green
0052               * ; D  Magenta
0053               * ; E  Grey
0054               * ; F  White
0055               *--------------------------------------------------------------
0056               tv.colorscheme.table:
0057                       ;      0     2     4     6     8
0058                       ;      ABCD  EFGH  IJKL  MNOP  QRST ;
0059 7E48 F41E             data  >f41e,>f1f1,>1b1f,>7111,>1700 ; 1 White on blue with cyan (1)
     7E4A F1F1     
     7E4C 1B1F     
     7E4E 7111     
     7E50 1700     
0060 7E52 21F0             data  >21f0,>21ff,>f112,>21ff,>1c00 ; 2  Dark green on black
     7E54 21FF     
     7E56 F112     
     7E58 21FF     
     7E5A 1C00     
0061 7E5C A11A             data  >a11a,>f0ff,>1f1a,>f1ff,>1a00 ; 3  Dark yellow on black
     7E5E F0FF     
     7E60 1F1A     
     7E62 F1FF     
     7E64 1A00     
0062 7E66 1E1E             data  >1e1e,>1e11,>1ee1,>1e11,>e100 ; 4  Black on grey
     7E68 1E11     
     7E6A 1EE1     
     7E6C 1E11     
     7E6E E100     
0063 7E70 F417             data  >f417,>7171,>1b1f,>7111,>1700 ; 5  White on blue with cyan (2)
     7E72 7171     
     7E74 1B1F     
     7E76 7111     
     7E78 1700     
0064 7E7A 1313             data  >1313,>1311,>1331,>1311,>1c00 ; 6  Black on light green
     7E7C 1311     
     7E7E 1331     
     7E80 1311     
     7E82 1C00     
0065 7E84 1771             data  >1771,>1011,>0171,>1711,>1f00 ; 7  Black on cyan
     7E86 1011     
     7E88 0171     
     7E8A 1711     
     7E8C 1F00     
0066 7E8E 2112             data  >2112,>f0ff,>1f12,>f1f6,>1200 ; 8  Dark green on black
     7E90 F0FF     
     7E92 1F12     
     7E94 F1F6     
     7E96 1200     
0067 7E98 1FF1             data  >1ff1,>1011,>f1f1,>1f11,>f100 ; 9  Black on white
     7E9A 1011     
     7E9C F1F1     
     7E9E 1F11     
     7EA0 F100     
0068 7EA2 1AF1             data  >1af1,>a111,>1f1f,>f11f,>1000 ; 10 Black on dark yellow
     7EA4 A111     
     7EA6 1F1F     
     7EA8 F11F     
     7EAA 1000     
0069 7EAC 1919             data  >1919,>1911,>1991,>1911,>1600 ; 11 Black on light red
     7EAE 1911     
     7EB0 1991     
     7EB2 1911     
     7EB4 1600     
0070 7EB6 F417             data  >f417,>f171,>1b1f,>7111,>1f00 ; 12 White on blue with cyan (3)
     7EB8 F171     
     7EBA 1B1F     
     7EBC 7111     
     7EBE 1F00     
0071 7EC0 1919             data  >1919,>1919,>1919,>1919,>1919 ; 13 All yellow
     7EC2 1919     
     7EC4 1919     
     7EC6 1919     
     7EC8 1919     
0072                       even
                   < stevie_b4.asm
0125                       ;-----------------------------------------------------------------------
0126                       ; Bank full check
0127                       ;-----------------------------------------------------------------------
0131                       ;-----------------------------------------------------------------------
0132                       ; Show ROM bank in CPU crash screen
0133                       ;-----------------------------------------------------------------------
0134                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7FF0 06A0  32         bl    @putat
     7FF2 2442     
0010 7FF4 0314                   byte 3,20
0011 7FF6 7F64                   data cpu.crash.showbank.bankstr
0012 7FF8 10FF  14         jmp   $
                   < stevie_b4.asm
0135                       ;-----------------------------------------------------------------------
0136                       ; Table for VDP modes
0137                       ;-----------------------------------------------------------------------
0138                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b4.asm
0139                       ;-----------------------------------------------------------------------
0140                       ; Vector table
0141                       ;-----------------------------------------------------------------------
0142                       copy  "rom.vectors.bank4.asm"
     **** ****     > rom.vectors.bank4.asm
0001               * FILE......: rom.vectors.bank4.asm
0002               * Purpose...: Bank 4 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#4'
     7F66 4F4D     
     7F68 2334     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 4: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F70 6514     vec.1   data  fb.goto.toprow        ; Refresh FB with top-row and row offset
0015 7F72 663C     vec.2   data  fb.ruler.init         ; Setup ruler with tab positions in memory
0016 7F74 66E4     vec.3   data  fb.colorlines         ; Colorize frame buffer content
0017 7F76 6772     vec.4   data  fb.vdpdump            ; Dump frame buffer to VDP SIT
0018 7F78 67C2     vec.5   data  fb.scan.fname         ; Scan current line for possible filename
0019 7F7A 687C     vec.6   data  fb.hscroll            ; Horizontal scroll frame buffer window
0020 7F7C 68AE     vec.7   data  fb.restore            ; Restore frame buffer to normal operations
0021 7F7E 68EA     vec.8   data  fb.refresh            ; Refresh frame buffer
0022 7F80 6960     vec.9   data  fb.get.nonblank       ; Get column of first non-blank character
0023 7F82 6428     vec.10  data  fb.tab.prev           ; Move cursor to previous tab position
0024 7F84 648A     vec.11  data  fb.tab.next           ; Move cursor to nexttab position
0025 7F86 6124     vec.12  data  fb.cursor.up          ; Move cursor up 1 line
0026 7F88 6182     vec.13  data  fb.cursor.down        ; Move cursor down 1 line
0027 7F8A 61FA     vec.14  data  fb.cursor.home        ; Move cursor home
0028 7F8C 6224     vec.15  data  fb.insert.line        ; Insert a new line
0029 7F8E 604A     vec.16  data  fb.cursor.top         ; Move cursor to top of file
0030 7F90 6072     vec.17  data  fb.cursor.topscr      ; Move cursor to top of screen
0031 7F92 6098     vec.18  data  fb.cursor.bot         ; Move cursor to bottom of file
0032 7F94 60D4     vec.19  data  fb.cursor.botscr      ; Move cursor to bottom of screen
0033 7F96 62BE     vec.20  data  fb.insert.char        ; Insert character
0034 7F98 6382     vec.21  data  fb.replace.char       ; Replace character
0035 7F9A 65D6     vec.22  data  fb.goto.prevmatch     ; Goto previous search match
0036 7F9C 656A     vec.23  data  fb.goto.nextmatch     ; Goto next search match
0037 7F9E 2026     vec.24  data  cpu.crash             ;
0038 7FA0 2026     vec.25  data  cpu.crash             ;
0039 7FA2 2026     vec.26  data  cpu.crash             ;
0040 7FA4 2026     vec.27  data  cpu.crash             ;
0041 7FA6 2026     vec.28  data  cpu.crash             ;
0042 7FA8 2026     vec.29  data  cpu.crash             ;
0043 7FAA 2026     vec.30  data  cpu.crash             ;
0044 7FAC 2026     vec.31  data  cpu.crash             ;
0045 7FAE 2026     vec.32  data  cpu.crash             ;
0046               *--------------------------------------------------------------
0047               * ROM 4: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7FB0 69A8     vec.33  data  pane.topline           ; Draw topline
0050 7FB2 6AEE     vec.34  data  pane.botline           ; Draw bottom line
0051 7FB4 6D86     vec.35  data  pane.errline.show      ; Show error line
0052 7FB6 6DE0     vec.36  data  pane.errline.hide      ; Hide error line
0053 7FB8 6D54     vec.37  data  pane.errline.drawcolor
0054 7FBA 6D08     vec.38  data  pane.botline.busy.on   ; Turn on busy indicator on bottom line
0055 7FBC 6D2E     vec.39  data  pane.botline.busy.off  ; Turn off busy indicator on bottom line
0056 7FBE 6E80     vec.40  data  pane.colorscheme.cycle ;
0057 7FC0 6EDE     vec.41  data  pane.colorscheme.load  ;
0058 7FC2 70FE     vec.42  data  pane.colorscheme.botline
0059 7FC4 2026     vec.43  data  cpu.crash              ;
0060 7FC6 2026     vec.44  data  cpu.crash              ;
0061 7FC8 2026     vec.45  data  cpu.crash              ;
0062 7FCA 2026     vec.46  data  cpu.crash              ;
0063 7FCC 2026     vec.47  data  cpu.crash              ;
0064 7FCE 2026     vec.48  data  cpu.crash              ;
0065 7FD0 2026     vec.49  data  cpu.crash              ;
0066 7FD2 7918     vec.50  data  pane.filebrowser       ; File browser
0067 7FD4 7BB0     vec.51  data  pane.filebrowser.hilight
0068 7FD6 7C86     vec.52  data  pane.filebrowser.colbar
0069 7FD8 7CE6     vec.53  data  pane.filebrowser.colbar.remove
0070 7FDA 2026     vec.54  data  cpu.crash              ;
0071 7FDC 2026     vec.55  data  cpu.crash              ;
0072 7FDE 2026     vec.56  data  cpu.crash              ;
0073 7FE0 2026     vec.57  data  cpu.crash              ;
0074 7FE2 2026     vec.58  data  cpu.crash              ;
0075 7FE4 2026     vec.59  data  cpu.crash              ;
0076 7FE6 2026     vec.60  data  cpu.crash              ;
0077 7FE8 2026     vec.61  data  cpu.crash              ;
0078 7FEA 2026     vec.62  data  cpu.crash              ;
0079 7FEC 2026     vec.63  data  cpu.crash              ;
0080 7FEE 7118     vec.64  data  dialog.help.content    ; Content for Help dialog
                   < stevie_b4.asm
0143                                                   ; Vector table bank 4

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6008 :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CART.FG99.RUN....... >3832 :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E37E :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLFREE......... >E37C :     
    CAT.VOLNAME......... >E3BA :     
    CAT.VOLSIZE......... >E378 :     
    CAT.VOLUSED......... >E37A :     
    CLHOOK.............. >2F72 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2F9A :     
    CMDB.ACTION.PTR..... >A730 :     
    CMDB.CMD............ >A733 :     
    CMDB.CMD.CURSOR_EOL. >7D94 :     
    CMDB.CMDALL......... >A732 :     
    CMDB.CMDLEN......... >A732 :     
    CMDB.COLUMN......... >A718 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B6 :     
    CMDB.DIALOG......... >A720 :     
    CMDB.DIALOG.VAR..... >A722 :     
    CMDB.DIRTY.......... >A71E :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.FREE1.......... >A70E :     
    CMDB.INIT........... >3342 :     
    CMDB.INIT.EXIT...... >3396 :     
    CMDB.LENGTH......... >A71A :     
    CMDB.LINES.......... >A71C :     
    CMDB.PANHEAD........ >A724 :     
    CMDB.PANHEAD.BUF.... >A784 :     
    CMDB.PANHINT........ >A728 :     
    CMDB.PANHINT2....... >A72A :     
    CMDB.PANINFO........ >A726 :     
    CMDB.PANKEYS........ >A72E :     
    CMDB.PANMARKERS..... >A72C :     
    CMDB.PREVCURSOR..... >A710 :     
    CMDB.REFRESH_PROMPT. >7D82 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A712 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A716 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A714 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3944 :     
    CONST.11............ >3946 :     
    CONST.12............ >3948 :     
    CONST.13............ >394A :     
    CONST.14............ >394C :     
    CONST.15............ >394E :     
    CONST.16............ >3950 :     
    CONST.2............. >2004 :     
    CONST.3............. >393A :     
    CONST.32............ >3952 :     
    CONST.4............. >2006 :     
    CONST.5............. >393C :     
    CONST.6............. >393E :     
    CONST.7............. >3940 :     
    CONST.8............. >2008 :     
    CONST.80............ >3954 :     
    CONST.9............. >3942 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D9B :     
    DEF.CLIP.FNAME.B.... >3DA6 :     
    DEF.DEVICES......... >3DB0 :     
    DEF.FG99.FNAME...... >3DE0 :     
    DEF.PRINTER.FNAME... >3D94 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.HELP.CONTENT. >7118 :     
    DIALOG.HELP.CONTENT.EXIT >718C :     
    DIALOG.HELP.DATA.PAGE1.LEFT >71AC :     
    DIALOG.HELP.DATA.PAGE1.RIGHT >73CF :     
    DIALOG.HELP.DATA.PAGE2.LEFT >755D :     
    DIALOG.HELP.DATA.PAGE2.RIGHT >76F8 :     
    DIALOG.HELP.DATA.PAGES >719C :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A5DC :     
    EDB.HIPAGE.ALLOC.... >37CC :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37D8 :     
    EDB.HIPAGE.ALLOC.CRASH >3802 :     
    EDB.HIPAGE.ALLOC.EXIT >380A :     
    EDB.HIPAGE.ALLOC.SETPAGE >37F4 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >32F6 :     
    EDB.INIT.EXIT....... >333C :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >3764 :     
    EDB.LINE.GETLENGTH.EXIT >37A0 :     
    EDB.LINE.GETLENGTH.NULL >379C :     
    EDB.LINE.GETLENGTH2. >37A8 :     
    EDB.LINE.GETLENGTH2.EXIT >37C6 :     
    EDB.LINE.MAPPAGE.... >371A :     
    EDB.LINE.MAPPAGE.EXIT >375C :     
    EDB.LINE.MAPPAGE.LOOKUP >3734 :     
    EDB.LINE.PACK.FB.... >7D3A :     
    EDB.LINE.UNPACK.FB.. >7D4C :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.LOCKED.......... >A5DA :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.SRCH.COL.PTR.... >A5D4 :     
    EDB.SRCH.CURMATCH... >A5D0 :     
    EDB.SRCH.ENDLN...... >A5CA :     
    EDB.SRCH.IDX.CSIZE.. >0400 :     
    EDB.SRCH.IDX.CTOP... >F900 :     
    EDB.SRCH.IDX.RSIZE.. >0800 :     
    EDB.SRCH.IDX.RTOP... >F100 :     
    EDB.SRCH.MATCHCOL... >A5D8 :     
    EDB.SRCH.MATCHES.... >A5CE :     
    EDB.SRCH.OFFSET..... >A5D6 :     
    EDB.SRCH.ROW.PTR.... >A5D2 :     
    EDB.SRCH.STARTLN.... >A5C8 :     
    EDB.SRCH.STR........ >A576 :     
    EDB.SRCH.STRLEN..... >A5C6 :     
    EDB.SRCH.WORKLEN.... >A5CC :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >33C4 :     
    ERRPANE.INIT........ >339E :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >319E :     
    FB.CALC.POINTER.EXIT >31BE :     
    FB.CALC.SCRROWS..... >31C6 :     
    FB.CALC.SCRROWS.EXIT >31F2 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31E6 :     
    FB.CALC.SCRROWS.HANDLE.MC >31DA :     
    FB.CALC.SCRROWS.HANDLE.RULER >31D0 :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >66E4 :     
    FB.COLORLINES.EXIT.. >6760 :     
    FB.COLORLINES.FILL.. >674E :     
    FB.COLORLINES.LOOP.. >6732 :     
    FB.COLORLINES.NORMAL >6748 :     
    FB.COLORLINES.NORULER >672C :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.BOT....... >6098 :     
    FB.CURSOR.BOT.EXIT.. >60D0 :     
    FB.CURSOR.BOT.REFRESH >60AC :     
    FB.CURSOR.BOTSCR.... >60D4 :     
    FB.CURSOR.BOTSCR.CURSOR >60EC :     
    FB.CURSOR.BOTSCR.EOF >60FE :     
    FB.CURSOR.BOTSCR.EXIT >611E :     
    FB.CURSOR.DOWN...... >6182 :     
    FB.CURSOR.DOWN.CURSOR >61D0 :     
    FB.CURSOR.DOWN.EXIT. >61F2 :     
    FB.CURSOR.DOWN.MOVE. >61A2 :     
    FB.CURSOR.DOWN.SET_CURSORX >61D8 :     
    FB.CURSOR.HOME...... >61FA :     
    FB.CURSOR.HOME.EXIT. >621E :     
    FB.CURSOR.TOP....... >604A :     
    FB.CURSOR.TOP.EXIT.. >606E :     
    FB.CURSOR.TOP.REFRESH >605E :     
    FB.CURSOR.TOPSCR.... >6072 :     
    FB.CURSOR.TOPSCR.EXIT >6094 :     
    FB.CURSOR.TOPSCR.REFRESH >6086 :     
    FB.CURSOR.UP........ >6124 :     
    FB.CURSOR.UP.CURSOR. >613C :     
    FB.CURSOR.UP.CURSOR_UP >6158 :     
    FB.CURSOR.UP.EXIT... >617A :     
    FB.CURSOR.UP.SET_CURSORX >6160 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A31A :     
    FB.FREE............. >A3C2 :     
    FB.GET.NONBLANK..... >6960 :     
    FB.GET.NONBLANK.EXIT >69A4 :     
    FB.GET.NONBLANK.LOOP >697C :     
    FB.GET.NONBLANK.MATCH >698C :     
    FB.GET.NONBLANK.NOMATCH >699C :     
    FB.GOTO.NEXTMATCH... >656A :     
    FB.GOTO.NEXTMATCH.EXIT >65D0 :     
    FB.GOTO.PREVMATCH... >65D6 :     
    FB.GOTO.PREVMATCH.EXIT >6636 :     
    FB.GOTO.TOPROW...... >6514 :     
    FB.GOTO.TOPROW.EXIT. >6564 :     
    FB.GOTO.TOPROW.LINE. >6546 :     
    FB.GOTO.TOPROW.OFFSET >6540 :     
    FB.HSCROLL.......... >687C :     
    FB.HSCROLL.EXIT..... >68A4 :     
    FB.INIT............. >312A :     
    FB.INIT.EXIT........ >317C :     
    FB.INSERT.CHAR...... >62BE :     
    FB.INSERT.CHAR.APPEND >6372 :     
    FB.INSERT.CHAR.CALC. >6332 :     
    FB.INSERT.CHAR.CHECK1 >62DA :     
    FB.INSERT.CHAR.CHECK2 >62E4 :     
    FB.INSERT.CHAR.CHECK3 >631E :     
    FB.INSERT.CHAR.CHECK4 >6326 :     
    FB.INSERT.CHAR.EXIT. >6376 :     
    FB.INSERT.CHAR.LOOP. >6344 :     
    FB.INSERT.LINE...... >6224 :     
    FB.INSERT.LINE.EXIT. >62B6 :     
    FB.INSERT.LINE.INSERT >624E :     
    FB.INSERT.LINE.M1... >6274 :     
    FB.INSERT.LINE.M2... >628C :     
    FB.INSERT.LINE.REFRESH >62A4 :     
    FB.NULL2CHAR........ >63D4 :     
    FB.NULL2CHAR.CRASH.. >63F2 :     
    FB.NULL2CHAR.EXIT... >641C :     
    FB.NULL2CHAR.INIT... >63FA :     
    FB.NULL2CHAR.LOOP... >640A :     
    FB.PREVCURSOR....... >A316 :     
    FB.REFRESH.......... >68EA :     
    FB.REFRESH.ERASE_EOB >6930 :     
    FB.REFRESH.EXIT..... >6952 :     
    FB.REFRESH.UNPACK_LINE >690C :     
    FB.REPLACE.CHAR..... >6382 :     
    FB.REPLACE.CHAR.EXIT >63CC :     
    FB.REPLACE.CHAR.INCX >63B6 :     
    FB.RESTORE.......... >68AE :     
    FB.RESTORE.EXIT..... >68DC :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >3184 :     
    FB.ROW2LINE.EXIT.... >3198 :     
    FB.RULER.INIT....... >663C :     
    FB.RULER.INIT.EXIT.. >668A :     
    FB.RULER.INIT.LOOP.. >666A :     
    FB.RULER.SIT........ >A322 :     
    FB.RULER.TAT........ >A372 :     
    FB.RULER.TXT........ >6694 :     
    FB.SCAN.FNAME....... >67C2 :     
    FB.SCAN.FNAME.COPY.. >67E2 :     
    FB.SCAN.FNAME.COPY.REST >6834 :     
    FB.SCAN.FNAME.COPY.REST.LOOP >6836 :     
    FB.SCAN.FNAME.CRASH. >685C :     
    FB.SCAN.FNAME.DEVICE.LOOP >6812 :     
    FB.SCAN.FNAME.DONE.. >6864 :     
    FB.SCAN.FNAME.EXIT.. >686A :     
    FB.SCAN.FNAME.NEXTDEV.LOOP >682A :     
    FB.SCRROWS.......... >A31E :     
    FB.SCRROWS.MAX...... >A320 :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31C :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >648A :     
    FB.TAB.NEXT.EOL..... >64F2 :     
    FB.TAB.NEXT.EXIT.... >650A :     
    FB.TAB.NEXT.LOOP.... >649E :     
    FB.TAB.PREV......... >6428 :     
    FB.TAB.PREV.EOL..... >646E :     
    FB.TAB.PREV.EXIT.... >6482 :     
    FB.TAB.PREV.LOOP.... >6438 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >6772 :     
    FB.VDPDUMP.CALC..... >67A2 :     
    FB.VDPDUMP.EXIT..... >67B8 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A318 :     
    FG.GOTO.NEXTMATCH.FIRST >658C :     
    FG.GOTO.NEXTMATCH.GOTO >6590 :     
    FG.GOTO.PREVMATCH.GOTO >65F2 :     
    FG.GOTO.PREVMATCH.LAST >65EC :     
    FG99................ >2E74 :     
    FG99.EXIT........... >2EAE :     
    FG99.SEND.LOOP...... >2E84 :     
    FG99.WAIT........... >2E9C :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.CIRCBREAKER...... >A46A :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BC :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46C :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >1400 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E18 :     
    FILE.IMAGE.LOAD..... >2E14 :     
    FILE.IMAGE.SAVE..... >2E16 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E12 :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E1A :     
    FILE.STATUS......... >2E1C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EB8 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CART.FG99. >0028 :     
    ID.DIALOG.CART.TYPE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FIND...... >001E :     
    ID.DIALOG.FIND.BROWSE >0078 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.OPT....... >006C :     
    ID.DIALOG.OPT.CLIP.. >0013 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >0072 :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.INTERRUPT... >FFFF :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3620 :     
    IDX.ENTRY.DELETE.EXIT >3678 :     
    IDX.ENTRY.DELETE.LASTLINE >364C :     
    IDX.ENTRY.DELETE.REORG >3654 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >365E :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3672 :     
    IDX.ENTRY.INSERT.... >36C2 :     
    IDX.ENTRY.INSERT.EXIT >370E :     
    IDX.ENTRY.INSERT.REORG >36E0 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36EA :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >36FE :     
    IDX.ENTRY.UPDATE.... >3572 :     
    IDX.ENTRY.UPDATE.CLEAR >35AC :     
    IDX.ENTRY.UPDATE.EXIT >35BC :     
    IDX.ENTRY.UPDATE.SAVE >359A :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >31F6 :     
    IDX.INIT.EXIT....... >3232 :     
    IDX.POINTER.GET..... >35C4 :     
    IDX.POINTER.GET.EXIT >3606 :     
    IDX.POINTER.GET.PARM >35F4 :     
    IDX.POINTER.GET.PARM.NULL >35FE :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.A............ >0061 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.C............ >00A3 :     
    KEY.LC.D............ >00A4 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.G............ >00A7 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.I............ >00A9 :     
    KEY.LC.J............ >00AA :     
    KEY.LC.K............ >00AB :     
    KEY.LC.L............ >00AC :     
    KEY.LC.M............ >00AD :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.T............ >0074 :     
    KEY.LC.U............ >0075 :     
    KEY.LC.V............ >0076 :     
    KEY.LC.W............ >0077 :     
    KEY.LC.X............ >0078 :     
    KEY.LC.Y............ >0079 :     
    KEY.LC.Z............ >007A :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.T............ >0054 :     
    KEY.UC.U............ >0055 :     
    KEY.UC.V............ >0056 :     
    KEY.UC.W............ >0057 :     
    KEY.UC.X............ >0058 :     
    KEY.UC.Y............ >0059 :     
    KEY.UC.Z............ >005A :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F52 :     
    KTHREAD_EXIT........ >2F64 :     
    KTHREAD_KB.......... >2F60 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >7E36 :     
    MAGIC.CLEAR......... >7E24 :     
    MAGIC.SET........... >7E12 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7DEE :     
    MEM.SAMS.SET.LEGACY. >7DDC :     
    MEM.SAMS.SET.STEVIE. >7E00 :     
    MEM.SAMS.SETUP.STEVIE >7DCA :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F70 :     
    MKHOOK.............. >2F68 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2F96 :     
    MKSLOT.............. >2F7C :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOMARKER............ >7C84 :     
    NOREP............... >0000 :     
    NOSPRITE............ >3920 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE........ >6AEE :     
    PANE.BOTLINE.BUSY.OFF >6D2E :     
    PANE.BOTLINE.BUSY.OFF.EXIT >6D4C :     
    PANE.BOTLINE.BUSY.ON >6D08 :     
    PANE.BOTLINE.BUSY.ON.EXIT >6D26 :     
    PANE.BOTLINE.EXIT... >6CFC :     
    PANE.BOTLINE.LOCKED. >6C12 :     
    PANE.BOTLINE.MC..... >6B00 :     
    PANE.BOTLINE.NOCHANGE >6C22 :     
    PANE.BOTLINE.SHORTCUTS >6B44 :     
    PANE.BOTLINE.SHORTCUTS.ALL >6B5C :     
    PANE.BOTLINE.SHOW_DIRTY >6C02 :     
    PANE.BOTLINE.SHOW_KEYS >6B66 :     
    PANE.BOTLINE.SHOW_KEYS.DEFAULT >6BAE :     
    PANE.BOTLINE.SHOW_KEYS.DEFAULTB >6B86 :     
    PANE.BOTLINE.SHOW_KEYS.DEFAULTD >6B72 :     
    PANE.BOTLINE.SHOW_KEYS.SETBASIC >6B98 :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >6CE6 :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >6CDE :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >6CD4 :     
    PANE.BOTLINE.SHOW_LINE.REST >6CEA :     
    PANE.BOTLINE.SHOW_LINECOL >6C2A :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >6CF4 :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >6C98 :     
    PANE.BOTLINE.SHOW_MODE >6BDA :     
    PANE.BOTLINE.SHOW_MODE.INSERT >6BEA :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >6BFA :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >7D70 :     
    PANE.COLORSCHEME.BOTLINE >70FE :     
    PANE.COLORSCHEME.BOTLINE.EXIT >7112 :     
    PANE.COLORSCHEME.CHECKCMDB >6FB6 :     
    PANE.COLORSCHEME.CMDBPANE >6FE8 :     
    PANE.COLORSCHEME.CURSORCOLOR >70BC :     
    PANE.COLORSCHEME.CURSORCOLOR.CMDB >70C6 :     
    PANE.COLORSCHEME.CURSORCOLOR.FB >70D2 :     
    PANE.COLORSCHEME.CYCLE >6E80 :     
    PANE.COLORSCHEME.CYCLE.EXIT >6ED8 :     
    PANE.COLORSCHEME.ERRPANE >7066 :     
    PANE.COLORSCHEME.FBDUMP >6FC2 :     
    PANE.COLORSCHEME.FBDUMP.NORULER >6FAE :     
    PANE.COLORSCHEME.LOAD >6EDE :     
    PANE.COLORSCHEME.LOAD.EXIT >70E4 :     
    PANE.COLORSCHEME.RULER >709E :     
    PANE.COLORSCHEME.SWITCH >6E9A :     
    PANE.COLORSCHEME.TOPLINE >7078 :     
    PANE.CURSOR.BLINK... >7D5E :     
    PANE.ERRLINE.DRAWCOLOR >6D54 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >6D7C :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >6D6E :     
    PANE.ERRLINE.HIDE... >6DE0 :     
    PANE.ERRLINE.HIDE.EXIT >6E0E :     
    PANE.ERRLINE.HIDE.FBCOLOR >6DF8 :     
    PANE.ERRLINE.SHOW... >6D86 :     
    PANE.ERRLINE.SHOW.EXIT >6DD8 :     
    PANE.FILEBROWSER.... >7918 :     
    PANE.FILEBROWSER.CALCDONE >7AC4 :     
    PANE.FILEBROWSER.COLBAR >7C86 :     
    PANE.FILEBROWSER.COLBAR.EXIT >7CD6 :     
    PANE.FILEBROWSER.COLBAR.REMOVE >7CE6 :     
    PANE.FILEBROWSER.COLBAR.REMOVE.EXIT >7D2C :     
    PANE.FILEBROWSER.DIVOK >7AB8 :     
    PANE.FILEBROWSER.EXIT >7B42 :     
    PANE.FILEBROWSER.HEADERS >7A0E :     
    PANE.FILEBROWSER.HILIGHT >7BB0 :     
    PANE.FILEBROWSER.HILIGHT.DIVOK >7BEA :     
    PANE.FILEBROWSER.HILIGHT.DRAW.MARKER >7C2E :     
    PANE.FILEBROWSER.HILIGHT.EXIT >7C76 :     
    PANE.FILEBROWSER.HILIGHT.REMOVE >7C0C :     
    PANE.FILEBROWSER.HILIGHT.ROWCOL >7BF4 :     
    PANE.FILEBROWSER.LINES >7A00 :     
    PANE.FILEBROWSER.MARKER >7B1C :     
    PANE.FILEBROWSER.NOFILES >7980 :     
    PANE.FILEBROWSER.NORULER >7952 :     
    PANE.FILEBROWSER.SHOW >7A48 :     
    PANE.FILEBROWSER.SHOW.FNLIST >7ACA :     
    PANE.FILEBROWSER.SHOW.SIZELIST >7AFC :     
    PANE.FILEBROWSER.SHOW.TYPELIST >7AD6 :     
    PANE.FILEBROWSER.VOLUME >796A :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >6E14 :     
    PANE.SHOW_HINTX.EXIT >6E74 :     
    PANE.TOPLINE........ >69A8 :     
    PANE.TOPLINE.EXIT... >6ADC :     
    PANE.TOPLINE.FILE... >69D8 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3812 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >382A :     
    PANE.TOPLINE.PADSTR. >69E8 :     
    PANE.TOPLINE.SEARCHHITS >6A6A :     
    PANE.TOPLINE.SHOWMARKERS >6A08 :     
    PANE.TOPLINE.TOTAL.. >6AC0 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >307A :     
    ROM.FARJUMP.ASSERT.CART >30EC :     
    ROM.FARJUMP.ASSERT.LOWMEM >30FA :     
    ROM.FARJUMP.BANKSWITCH.CALL >30DC :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30D4 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >310E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >310A :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30B8 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30BC :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30C4 :     
    ROM.FARJUMP.EXIT.... >3120 :     
    ROM.FARJUMP.RETURN.. >30DE :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6026 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3914 :     
    RSSLOT.............. >2FA8 :     
    RUNLI1.............. >2FC0 :     
    RUNLI2.............. >2FCC :     
    RUNLI3.............. >2FD0 :     
    RUNLI3A............. >2FD8 :     
    RUNLI4.............. >2FE2 :     
    RUNLI5.............. >2FEC :     
    RUNLI6.............. >2FFA :     
    RUNLI7.............. >3008 :     
    RUNLI9.............. >300C :     
    RUNLIA.............. >302E :     
    RUNLIB.............. >2FBC :     
    RUNLIC.............. >3052 :     
    RUNLID.............. >3068 :     
    RUNLIE.............. >3072 :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F34 :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3908 :     
    TASK.ONESHOT.EXIT... >3910 :     
    TASK.VDP.COPY.SAT... >3852 :     
    TASK.VDP.COPY.SAT.CMDB >387A :     
    TASK.VDP.COPY.SAT.EXIT >38E8 :     
    TASK.VDP.COPY.SAT.FB >388A :     
    TASK.VDP.COPY.SAT.FB.NORULER >389E :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38D4 :     
    TASK.VDP.COPY.SAT.WRITE >38A2 :     
    TASK.VDP.COPY.SAT.WRITE2 >38DE :     
    TASK.VDP.CURSOR..... >38F4 :     
    TASK.VDP.CURSOR.EXIT >3902 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F5A :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F50 :     
    TMGR................ >2EB4 :     
    TMGR1............... >2EB8 :     
    TMGR10.............. >2F38 :     
    TMGR11.............. >2F46 :     
    TMGR12.............. >2F4A :     
    TMGR1A.............. >2EC6 :     
    TMGR2............... >2ECC :     
    TMGR3............... >2EDC :     
    TMGR4............... >2EEE :     
    TMGR5............... >2F04 :     
    TMGR6............... >2F08 :     
    TMGR7............... >2F0C :     
    TMGR8............... >2F0E :     
    TMGR9............... >2F16 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BOTCOLOR......... >A21C :     
    TV.BUSYCOLOR........ >A220 :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.COLOR....... >A224 :     
    TV.CMDB.HCOLOR...... >A226 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >7E48 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A240 :     
    TV.ERROR.ROWS....... >A232 :     
    TV.ERROR.VISIBLE.... >A230 :     
    TV.FG99.IMG.PTR..... >A238 :     
    TV.FJ.STACKPNT...... >A22E :     
    TV.FONT.PTR......... >A228 :     
    TV.FREE............. >A2E0 :     
    TV.INIT............. >33CE :     
    TV.INIT.EXIT........ >341E :     
    TV.LINETERM......... >A23C :     
    TV.MARKCOLOR........ >A21E :     
    TV.PAD.STRING....... >34FA :     
    TV.PAD.STRING.EXIT.. >3566 :     
    TV.PAD.STRING.LOOP.. >3550 :     
    TV.PAD.STRING.PANIC. >355E :     
    TV.PANE.FOCUS....... >A22A :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3428 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A222 :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SHOW.LINELEN..... >A23E :     
    TV.SP2.CONF......... >A234 :     
    TV.SP2.STACK........ >A236 :     
    TV.SPECMSG.PTR...... >A23A :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3922 :     
    TV.TABS.TABLE.RL.... >392E :     
    TV.TASK.ONESHOT..... >A22C :     
    TV.TOPCOLOR......... >A21A :     
    TV.UINT16.MPY....... >34C4 :     
    TV.UINT16.PACK...... >3436 :     
    TV.UINT16.PACK.DONE. >34B0 :     
    TV.UINT16.PACK.ERROR >34A8 :     
    TV.UINT16.PACK.EXIT. >34B4 :     
    TV.UINT16.PACK.LOOP. >347E :     
    TV.UINT16.UNPACK.... >34CE :     
    TV.UINT16.UNPACK.EXIT >34F4 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C90 :     
    TXT.AUTOINSERT...... >396C :     
    TXT.BLOCK.CLIP...... >39F4 :     
    TXT.BLOCK.COPY...... >39BE :     
    TXT.BLOCK.DEL....... >39AA :     
    TXT.BLOCK.INSIDE.... >3D26 :     
    TXT.BLOCK.MOVE...... >39D0 :     
    TXT.BLOCK.PRINT..... >3A0E :     
    TXT.BLOCK.SAVE...... >39E2 :     
    TXT.BOTTOM.......... >395A :     
    TXT.CLEARMEM........ >3A22 :     
    TXT.CMDB.PROMPT..... >3D80 :     
    TXT.COLON........... >3958 :     
    TXT.COLORSCHEME..... >3D82 :     
    TXT.DONE.APPEND..... >3A6C :     
    TXT.DONE.CLIPBOARD.. >3AC0 :     
    TXT.DONE.CLIPDEV.... >3AD0 :     
    TXT.DONE.COPY....... >3A8E :     
    TXT.DONE.DELETE..... >3AAE :     
    TXT.DONE.INSERT..... >3A5A :     
    TXT.DONE.LOAD....... >3A4A :     
    TXT.DONE.PRINT...... >3A9E :     
    TXT.DONE.SAVE....... >3A7E :     
    TXT.FASTMODE........ >3ADE :     
    TXT.FILETYPE.DV80... >3B5C :     
    TXT.FILETYPE.NONE... >3C9E :     
    TXT.FIND............ >6AE6 :     
    TXT.HEADER.......... >7B98 :     
    TXT.INSERT.......... >3966 :     
    TXT.IO.NOFILE....... >3D02 :     
    TXT.IOERR.BREAK..... >3D54 :     
    TXT.IOERR.LOAD...... >3CBA :     
    TXT.IOERR.PRINT..... >3CE6 :     
    TXT.IOERR.SAVE...... >3CD0 :     
    TXT.KB.............. >3B1C :     
    TXT.KEYMARKER....... >3C96 :     
    TXT.KEYS.BASIC1..... >3C62 :     
    TXT.KEYS.BLOCK...... >3BFE :     
    TXT.KEYS.BLOCKLOCK.. >3C3A :     
    TXT.KEYS.DEFAULT.... >3B6A :     
    TXT.KEYS.DEFAULTB... >3B7C :     
    TXT.KEYS.DEFAULTC... >3B9A :     
    TXT.KEYS.DEFAULTD... >3BC6 :     
    TXT.LINES........... >3B20 :     
    TXT.LOADING......... >3976 :     
    TXT.LOCKICON........ >3974 :     
    TXT.M1.............. >3B62 :     
    TXT.M2.............. >3B66 :     
    TXT.MEMFULL.LOAD.... >3D1A :     
    TXT.MSG.TIBASIC..... >3CA4 :     
    TXT.NEWFILE......... >3B26 :     
    TXT.NODISK.......... >3AEA :     
    TXT.OVRWRITE........ >3960 :     
    TXT.PICKER.ICON1.... >3D90 :     
    TXT.PICKER.ICON2.... >3D92 :     
    TXT.PRINTING........ >398E :     
    TXT.READDIR......... >3A36 :     
    TXT.SAVING.......... >3982 :     
    TXT.SEARCHING....... >399C :     
    TXT.SLASH........... >3956 :     
    TXT.STAR............ >3972 :     
    TXT.TIB1............ >3B32 :     
    TXT.TIB2............ >3B40 :     
    TXT.TIB3............ >3B4E :     
    TXT.UNCRUNCHING..... >3AFE :     
    TXT.VERTLINE........ >3C94 :     
    TXT.VOLUME.......... >7B50 :     
    TXT.WS1............. >3C98 :     
    TXT.WS2............. >3C9A :     
    TXT.WS4............. >3C9E :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.COLORS.LINE..... >7DA6 :     
    VDP.CURSOR.TAT...... >7DB8 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E76 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2F9C :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >3092 :     
    XROM.FARJUMP.PUSH_RETURN >30A2 :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _FILE.RECORD.FOP.... >2E1E :     
    _FILE.RECORD.FOP.EXIT >2E70 :     
    _FILE.RECORD.FOP.OPTIMIZED >2E54 :     
    _FILE.RECORD.FOP.PAB >2E58 :     
    _IDX.ENTRY.DELETE.REORG >3610 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3618 :     
    _IDX.ENTRY.INSERT.REORG >3684 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >368A :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36B2 :     
    _IDX.SAMS.MAPCOLUMN.OFF >326C :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >329A :     
    _IDX.SAMS.MAPCOLUMN.ON >3238 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3262 :     
    _IDX.SAMSPAGE.GET... >32A6 :     
    _IDX.SAMSPAGE.GET.EXIT >32EC :     
