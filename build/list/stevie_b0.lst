XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b0.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2025 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b0.asm
0020               *
0021               * Bank 0 "Jill"
0022               * Setup resident Spectra2 modules + low-level stevie modules, start kernel.
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 250330-2038260
0003               ***************************************************************
                   < stevie_b0.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b0.asm
0026                       copy  "rom.order.asm"       ; ROM bank ordster "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b0.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0006                   copy 'equ.f18a.2480.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.2480.asm
0001               * FILE......: equ.f18a.2480.asm
0002               * Purpose...: F18a 24x80 mode
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 24x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0780     vdp.sit.size              equ  24*80   ; VDP SIT size 80 columns, 24 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0780     vdp.tat.size              equ  24*80   ; VDP TAT size 80 columns, 24 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      0017     pane.botrow               equ  23      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      1400     fh.vpab                   equ  >1400   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      000C     spfont  equ   >0c                   ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0041      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0042      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0043      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0044               
                   < equ.vdp.asm
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b0.asm
0031                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.insert          equ  11      ; "Insert file"
0033      000C     id.dialog.append          equ  12      ; "Append file"
0034      000D     id.dialog.cat             equ  13      ; "Catalog"
0035      000F     id.dialog.save            equ  15      ; "Save file"
0036      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0037      0011     id.dialog.print           equ  17      ; "Print file"
0038      0012     id.dialog.printblock      equ  18      ; "Print block"
0039      0013     id.dialog.opt.clip        equ  19      ; "Configure clipboard"
0040      0014     id.dialog.goto            equ  20      ; "Goto"
0041      001E     id.dialog.find            equ  30      ; "Find"
0042      0028     id.dialog.cart.fg99       equ  40      ; "FinalGROM 99 Cartridge"
0043               ;-----------------------------------------------------------------
0044               ;   Dialog ID's >= 100 indicate that command prompt should be
0045               ;   hidden and no characters added to CMDB keyboard buffer.
0046               ;-----------------------------------------------------------------
0047      0064     id.dialog.menu            equ  100     ; "Main Menu"
0048      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0049      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0050      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0051      0068     id.dialog.help            equ  104     ; "About"
0052      0069     id.dialog.file            equ  105     ; "File"
0053      006A     id.dialog.cart.type       equ  106     ; "Cartridge Type"
0054      006B     id.dialog.basic           equ  107     ; "TI Basic"
0055      006C     id.dialog.opt             equ  108     ; "Configure"
0056      006D     id.dialog.editor          equ  109     ; "Configure editor"
0057      006E     id.dialog.font            equ  110     ; "Configure font"
0058      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0059      0072     id.dialog.run             equ  114     ; "Run program image (EA5)"
0060      0078     id.dialog.find.browse     equ  120     ; "Find - Search results"
0061               ;-----------------------------------------------------------------
0062               ; Suffix characters for clipboards
0063               ;-----------------------------------------------------------------
0064      3100     clip1                     equ  >3100   ; '1'
0065      3200     clip2                     equ  >3200   ; '2'
0066      3300     clip3                     equ  >3300   ; '3'
0067      3400     clip4                     equ  >3400   ; '4'
0068      3500     clip5                     equ  >3500   ; '5'
0069               ;-----------------------------------------------------------------
0070               ; Keyboard flags in Stevie
0071               ;-----------------------------------------------------------------
0072      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0073               ;-----------------------------------------------------------------
0074               ; File work mode
0075               ;-----------------------------------------------------------------
0076      0001     id.file.loadfile          equ  1       ; Load file
0077      0002     id.file.insertfile        equ  2       ; Insert file
0078      0003     id.file.appendfile        equ  3       ; Append file
0079      0004     id.file.savefile          equ  4       ; Save file
0080      0005     id.file.saveblock         equ  5       ; Save block to file
0081      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0082      0007     id.file.printfile         equ  7       ; Print file
0083      0008     id.file.printblock        equ  8       ; Print block
0084               ;-----------------------------------------------------------------
0085               ; Special file indicator
0086               ;-----------------------------------------------------------------
0087      0000     id.special.normal         equ  0       ; Normal file
0088      0002     id.special.readonly       equ  2       ; Read-only file
0089      0003     id.special.basic          equ  3       ; TI Basic program
0090               ;-----------------------------------------------------------------
0091               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0092               ;-----------------------------------------------------------------
0093      A000     core1.top         equ  >a000           ; Structure begin
0094      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0095      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0096      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0097      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0098      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0099      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0100      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0101      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0102      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0103      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0104      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0105      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0106      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0107      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0108      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0109      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0110      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0111      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0112      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0113      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0114      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0115      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0116      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0117      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0118      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0119      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0120      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0121      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0122                                 ;--------------------------------------------
0123                                 ; TI Basic related
0124                                 ;--------------------------------------------
0125      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0126      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0127      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0128      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0129      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0130      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0131      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0132      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0133      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0134      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0135      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0136      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0137      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0138      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0139      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0140      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0141      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0142      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0143      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0144      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0145      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0146      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0147      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0148      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0149      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0150      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0151      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0152      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0153      A100     core1.free        equ  core1.top + 256 ; End of structure
0154               ;-----------------------------------------------------------------
0155               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0156               ;-----------------------------------------------------------------
0157      A100     core2.top         equ  >a100           ; Structure begin
0158      A100     rambuf            equ  core2.top       ; RAM workbuffer
0159      A200     core2.free        equ  core2.top + 256 ; End of structure
0160               ;-----------------------------------------------------------------
0161               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0162               ;-----------------------------------------------------------------
0163      A200     tv.struct         equ  >a200           ; Structure begin
0164      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0165      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0166      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0167      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0168      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0169      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0170      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0171      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0172      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0173      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0174      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0175      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0176      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0177      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0178      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0179      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0180      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0181      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0182      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0183      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0184      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0185      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0186      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0187      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0188      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0189      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0190      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0191      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0192      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0193      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0194               ;-----------------------------------------------------------------
0195               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0196               ;-----------------------------------------------------------------
0197      A300     fb.struct         equ  >a300           ; Structure begin
0198      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0199      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0200      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0201                                                      ; line X in editor buffer).
0202      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0203                                                      ; (offset 0 .. @fb.scrrows)
0204      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0205      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0206      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0207      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0208      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0209      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0210      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0211      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0212      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0213      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0214      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0215      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0216      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0217      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0218      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0219               ;-----------------------------------------------------------------
0220               ; File handle structure                @>a400-a4ff   (256 bytes)
0221               ;-----------------------------------------------------------------
0222      A400     fh.struct         equ  >a400           ; stevie file handling structures
0223               ;*******************************************************************************
0224               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0225               ;*******************************************************************************
0226      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0227      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0228      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0229      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0230      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0231      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0232      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0233      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0234      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0235      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0236      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0237      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0238      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0239      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0240      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0241      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0242      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0243      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0244      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0245      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0246      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0247      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0248      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0249      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0250      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0251      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0252      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0253      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0254      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0255      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0256      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0257      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0258      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0259      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0260      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0261      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0262      A46A     fh.circbreaker    equ  fh.struct +106  ; Circuit breaker. Halt file operation
0263      A46C     fh.membuffer      equ  fh.struct +108  ; 80 bytes file memory buffer
0264      A4BC     fh.free           equ  fh.struct +188  ; End of structure
0265               ;-----------------------------------------------------------------
0266               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0267               ; Overloads file handle structure
0268               ;-----------------------------------------------------------------
0269      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0270      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0271               ;-----------------------------------------------------------------
0272               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0273               ;-----------------------------------------------------------------
0274      A500     edb.struct        equ  >a500            ; Begin structure
0275      A500     edb.top.ptr       equ  edb.struct       ; Pointer to editor buffer
0276      A502     edb.index.ptr     equ  edb.struct + 2   ; Pointer to index
0277      A504     edb.lines         equ  edb.struct + 4   ; Total lines in editor buffer - 1
0278      A506     edb.dirty         equ  edb.struct + 6   ; Editor buffer dirty (Text changed!)
0279      A508     edb.next_free.ptr equ  edb.struct + 8   ; Pointer to next free line
0280      A50A     edb.insmode       equ  edb.struct + 10  ; Insert mode (>ffff=insert)
0281      A50C     edb.autoinsert    equ  edb.struct + 12  ; Auto-insert on ENTER flag (>ffff=on)
0282      A50E     edb.block.m1      equ  edb.struct + 14  ; Block start line marker (>ffff=unset)
0283      A510     edb.block.m2      equ  edb.struct + 16  ; Block end line marker (>ffff=unset)
0284      A512     edb.block.var     equ  edb.struct + 18  ; Local var used in block operation
0285      A514     edb.filename.ptr  equ  edb.struct + 20  ; Pointer to length-prefixed string
0286                                                       ; with current filename.
0287      A516     edb.filetype.ptr  equ  edb.struct + 22  ; Pointer to length-prefixed string
0288                                                       ; with current file type.
0289      A518     edb.sams.page     equ  edb.struct + 24  ; Current SAMS page
0290      A51A     edb.sams.lopage   equ  edb.struct + 26  ; Lowest SAMS page in use
0291      A51C     edb.sams.hipage   equ  edb.struct + 28  ; Highest SAMS page in use
0292      A51E     edb.bk.fb.topline equ  edb.struct + 30  ; Backup of @fb.topline before opening
0293                                                       ; other file from special file.
0294      A520     edb.bk.fb.row     equ  edb.struct + 32  ; Backup of @fb.row before opening
0295                                                       ; other file from special file.
0296      A522     edb.special.file  equ  edb.struct + 34  ; Special file in editor buffer
0297      A524     edb.lineterm      equ  edb.struct + 36  ; Line termination character
0298                                                       ; MSB: Mode on (>ff) or off (>00)
0299                                                       ; LSB: Line termination character
0300      A526     edb.filename      equ  edb.struct + 38  ; 80 characters inline buffer reserved
0301                                                       ; for filename, but not always used.
0302      A576     edb.srch.str      equ  edb.struct + 118 ; 80 characters search string buffer
0303      A5C6     edb.srch.strlen   equ  edb.struct + 198 ; Length of search string
0304      A5C8     edb.srch.startln  equ  edb.struct + 200 ; Start line in editor buffer for search
0305      A5CA     edb.srch.endln    equ  edb.struct + 202 ; End line in editor buffer for search
0306      A5CC     edb.srch.worklen  equ  edb.struct + 204 ; Length of unpacked line in work buffer
0307      A5CE     edb.srch.matches  equ  edb.struct + 206 ; Number of search matches
0308      A5D0     edb.srch.curmatch equ  edb.struct + 208 ; Current index entry in search matches
0309      A5D2     edb.srch.row.ptr  equ  edb.struct + 210 ; Pointer entry in rows search index
0310      A5D4     edb.srch.col.ptr  equ  edb.struct + 212 ; Pointer entry in cols search index
0311      A5D6     edb.srch.offset   equ  edb.struct + 214 ; Offset into current row index entry
0312      A5D8     edb.srch.matchcol equ  edb.struct + 216 ; Column of search match in current row
0313      A5DA     edb.free          equ  edb.struct + 218 ; End of structure
0314               ;-----------------------------------------------------------------
0315               ; Index structure                      @>a600-a6ff   (256 bytes)
0316               ;-----------------------------------------------------------------
0317      A600     idx.struct        equ  >a600           ; stevie index structure
0318      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0319      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0320      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0321      A606     idx.free          equ  idx.struct + 6  ; End of structure
0322               ;-----------------------------------------------------------------
0323               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0324               ;-----------------------------------------------------------------
0325      A700     cmdb.struct       equ  >a700             ; Command Buffer structure
0326      A700     cmdb.top.ptr      equ  cmdb.struct       ; Pointer to command buffer (history)
0327      A702     cmdb.visible      equ  cmdb.struct + 2   ; Command buffer visible? (>ffff=yes)
0328      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4   ; Copy of FB WYX if entering cmdb pane
0329      A706     cmdb.scrrows      equ  cmdb.struct + 6   ; Current size of CMDB pane (in rows)
0330      A708     cmdb.default      equ  cmdb.struct + 8   ; Default size of CMDB pane (in rows)
0331      A70A     cmdb.cursor       equ  cmdb.struct + 10  ; Screen YX of cursor in CMDB pane
0332      A70C     cmdb.yxsave       equ  cmdb.struct + 12  ; Copy of WYX
0333      A70E     cmdb.vdptop       equ  cmdb.struct + 14  ; VDP addr CMDB pane header line (TAT)
0334      A710     cmdb.yxtop        equ  cmdb.struct + 16  ; YX pos CMDB pane header line
0335      A712     cmdb.yxprompt     equ  cmdb.struct + 18  ; YX pos of command buffer prompt
0336      A714     cmdb.column       equ  cmdb.struct + 20  ; Current column in command buffer pane
0337      A716     cmdb.length       equ  cmdb.struct + 22  ; Length of current row in CMDB
0338      A718     cmdb.lines        equ  cmdb.struct + 24  ; Total lines in CMDB
0339      A71A     cmdb.dirty        equ  cmdb.struct + 26  ; Command buffer dirty (Text changed!)
0340      A71C     cmdb.dialog       equ  cmdb.struct + 28  ; Dialog identifier
0341      A71E     cmdb.dialog.var   equ  cmdb.struct + 30  ; Dialog private variable or pointer
0342      A720     cmdb.panhead      equ  cmdb.struct + 32  ; Pointer string pane header
0343      A722     cmdb.paninfo      equ  cmdb.struct + 34  ; Pointer string pane info (1st line)
0344      A724     cmdb.panhint      equ  cmdb.struct + 36  ; Pointer string pane hint (2nd line)
0345      A726     cmdb.panhint2     equ  cmdb.struct + 38  ; Pointer string pane hint (extra)
0346      A728     cmdb.panmarkers   equ  cmdb.struct + 40  ; Pointer key marker list  (3rd line)
0347      A72A     cmdb.pankeys      equ  cmdb.struct + 42  ; Pointer string pane keys (stat line)
0348      A72C     cmdb.action.ptr   equ  cmdb.struct + 44  ; Pointer function to execute
0349      A72E     cmdb.cmdall       equ  cmdb.struct + 46  ; Current command including length-byte
0350      A72E     cmdb.cmdlen       equ  cmdb.struct + 46  ; Length of current command (MSB byte!)
0351      A72F     cmdb.cmd          equ  cmdb.struct + 47  ; Current command (80 bytes max.)
0352      A780     cmdb.panhead.buf  equ  cmdb.struct + 128 ; String buffer for pane header
0353      A7B2     cmdb.dflt.fname   equ  cmdb.struct + 178 ; Default for filename
0354      A800     cmdb.free         equ  cmdb.struct + 256 ; End of structure
0355               ;-----------------------------------------------------------------
0356               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0357               ;-----------------------------------------------------------------
0358      A900     sp2.stktop        equ  >a900           ; \
0359                                                      ; | The stack grows from high memory
0360                                                      ; | towards low memory.
0361                                                      ; |
0362                                                      ; | Stack leaking is checked in SP2
0363                                                      ; | user hook "edkey.keyscan.hook"
0364                                                      ; /
0365               ;-----------------------------------------------------------------
0366               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0367               ;-----------------------------------------------------------------
0368      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0369                                                      ; / stored in cartridge ROM bank7.asm
0370               
0371      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0372                                                      ; | scratchpad backup/restore routines.
0373                                                      ; /
0374               
0375      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0376      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0377                                                      ; calling TI Basic/External programs
0378               ;-----------------------------------------------------------------
0379               ; Farjump return stack                 @>af00-afff     (256 bytes)
0380               ;-----------------------------------------------------------------
0381      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0382                                                      ; Grows downwards from high to low.
0383               ;-----------------------------------------------------------------
0384               ; Index                                @>b000-bfff    (4096 bytes)
0385               ;-----------------------------------------------------------------
0386      B000     idx.top           equ  >b000           ; Top of index
0387      1000     idx.size          equ  4096            ; Index size
0388               ;-----------------------------------------------------------------
0389               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0390               ;-----------------------------------------------------------------
0391      C000     edb.top           equ  >c000           ; Editor buffer high memory
0392      1000     edb.size          equ  4096            ; Editor buffer size
0393               ;-----------------------------------------------------------------
0394               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0395               ;-----------------------------------------------------------------
0396      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0397      0960     fb.size           equ  80*30           ; Frame buffer size
0398      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0399                                                      ; / >d960->dcff
0400               ;-----------------------------------------------------------------
0401               ; Defaults area                        @>de00-dfff     (512 bytes)
0402               ;-----------------------------------------------------------------
0403      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0404      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0405      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0406               ;-----------------------------------------------------------------
0407               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0408               ;-----------------------------------------------------------------
0409      E000     cat.top           equ  >e000           ; Top of file catalog
0410      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0411      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0412      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0413      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0414      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0415      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0416      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0417      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0418      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0419      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0420      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0421      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0422               ;-----------------------------------------------------------------
0423               ; Directory/File catalog pointers and numbers
0424               ;-----------------------------------------------------------------
0425      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0426      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0427      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0428      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0429      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0430      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0431      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0432      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0433      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0434      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0435      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0436      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0437      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0438      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0439      E378     cat.free1         equ  cat.top + 888   ; **free** up to 954
0440               ;-----------------------------------------------------------------
0441               ; Directory/File catalog strings (always length byte included)
0442               ;-----------------------------------------------------------------
0443      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0444      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0445      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0446      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0447      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0448      0F00     cat.size          equ  3840            ; Catalog total size
0449               ;-----------------------------------------------------------------
0450               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0451               ;-----------------------------------------------------------------
0452      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0453      0100     cmdb.size         equ  256             ; Command buffer size
0454               ;-----------------------------------------------------------------
0455               ; Heap & Strings area                  @>f000-f0ff     (256 bytes)
0456               ;-----------------------------------------------------------------
0457      F000     heap.top          equ  >f000           ; 80 Current filename
0458      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0459      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0460               ;-----------------------------------------------------------------
0461               ; Search results index for rows        @>f100-f8ff    (2048 bytes)
0462               ;-----------------------------------------------------------------
0463      F100     edb.srch.idx.rtop   equ  >f100         ; Search match index for rows
0464      0800     edb.srch.idx.rsize  equ  2048          ; Size of search match index for rows
0465               ;-----------------------------------------------------------------
0466               ; Search results index for columns     @>f900-fcff    (1024 bytes)
0467               ;-----------------------------------------------------------------
0468      F900     edb.srch.idx.ctop   equ  >f900         ; Search match index for columns
0469      0400     edb.srch.idx.csize  equ  1024          ; Size of search match index for columns
0470               ;-----------------------------------------------------------------
0471               ; Stevie specific equates
0472               ;-----------------------------------------------------------------
0473      0000     fh.fopmode.none           equ  0        ; No file operation in progress
0474      0001     fh.fopmode.readfile       equ  1        ; Read file from disk to memory
0475      0002     fh.fopmode.writefile      equ  2        ; Save file from memory to disk
0476      0006     cmdb.rows                 equ  6        ; Number of rows in CMDB pane
0477      A028     rom0_kscan_out            equ  keycode1 ; Where to store value of key pressed
0478      9900     tv.colorize.reset         equ  >9900    ; Colorization off
0479      00FE     tv.1timeonly              equ  254      ; One-time only flag indicator
0480      0100     tv.sams.maxpage           equ  256      ; Max SAMS pages supported
                   < stevie_b0.asm
0032                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b0.asm
0033                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b0.asm
0034               
0035               
0036               ***************************************************************
0037               * BANK 0
0038               ********|*****|*********************|**************************
0039      6002     bankid  equ   bank1.rom             ; Set bank identifier to bank 1!
0040                                                   ; We never want to return to bank 0, after
0041                                                   ; doing trampoline call, from low memexp.
0042               
0043                       aorg  >6000
0044                       save  >6000,>8000           ; Save bank
0045                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE x.x.x RESET MEM"
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Change to rom.program2 to skip menu option "STEVIE x.x.x RESET MEM"
0024                       ;
0025 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0026                                                   ; 7  /
0027               
0028 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0029                                                   ; 9  /
0030               
0031 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0032                                                   ; 11 /
0033               
0034                       ;-----------------------------------------------------------------------
0035                       ; Program list entry
0036                       ;-----------------------------------------------------------------------
0037               rom.program1:
0038 600C 6026             data  rom.program2          ; 12 \ Next program list entry         >600c
0039                                                   ; 13 / (no more items following)
0040               
0041 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0042                                                   ; 15 /
0043               
0044 6010 1553             stri 'STEVIE 1.7.3 MEMRESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 312E     
     601A 372E     
     601C 3320     
     601E 4D45     
     6020 4D52     
     6022 4553     
     6024 4554     
0045                       even
0046               
0047                       ;-----------------------------------------------------------------------
0048                       ; Program list entry
0049                       ;-----------------------------------------------------------------------
0050               rom.program2:
0051 6026 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0052                                                   ; 13 / (no more items following)
0053               
0054 6028 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0055                                                   ; 15 /
0056               
0060               
0064               
0066 602A 0C53                 stri 'STEVIE 1.7.3'
     602C 5445     
     602E 5649     
     6030 4520     
     6032 312E     
     6034 372E     
     6036 33       
0068               
                   < stevie_b0.asm
0046               
0047               ***************************************************************
0048               * Step 1: Switch to bank 7 (Resume Stevie session)
0049               ********|*****|*********************|**************************
0050               resume.stevie:
0051                       aorg  >6038
0052 6038 04E0  34         clr   @bank7.rom            ; Switch to bank 7 "Jill"
     603A 600E     
0053               
0054               ***************************************************************
0055               * Step 1: Switch to bank 0 (uniform code accross all banks)
0056               ********|*****|*********************|**************************
0057               new.stevie:
0058                       aorg  kickstart.code1       ; >6040
0059 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0060               ***************************************************************
0061               * Step 2: Setup SAMS banks (inline code because no SP2 yet!)
0062               ********|*****|*********************|**************************
0063 6044 020C  20         li    r12,>1e00             ; SAMS CRU address
     6046 1E00     
0064 6048 1E01  16         sbz   1                     ; Disable SAMS mapper
0065 604A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0066 604C 0200  20         li    r0,>0200              ; \ Page 2 in >2000 - >2fff
     604E 0200     
0067 6050 D800  38         movb  r0,@>4004             ; /
     6052 4004     
0068               
0069 6054 0200  20         li    r0,>0300              ; \ Page 3 in >3000 - >3fff
     6056 0300     
0070 6058 D800  38         movb  r0,@>4006             ; /
     605A 4006     
0071               
0072 605C 0200  20         li    r0,>0400              ; \ Page 4 in >a000 - >afff
     605E 0400     
0073 6060 D800  38         movb  r0,@>4014             ; /
     6062 4014     
0074               
0075 6064 0200  20         li    r0,>2000              ; \ Page 20 in >b000 - >bfff
     6066 2000     
0076 6068 D800  38         movb  r0,@>4016             ; /
     606A 4016     
0077               
0078 606C 0200  20         li    r0,>4000              ; \ Page 40 in >c000 - >bfff
     606E 4000     
0079 6070 D800  38         movb  r0,@>4018             ; /
     6072 4018     
0080               
0081 6074 0200  20         li    r0,>0500              ; \ Page 5 in >d000 - >dfff
     6076 0500     
0082 6078 D800  38         movb  r0,@>401a             ; /
     607A 401A     
0083               
0084 607C 0200  20         li    r0,>0600              ; \ Page 6 in >ec000 - >efff
     607E 0600     
0085 6080 D800  38         movb  r0,@>401c             ; /
     6082 401C     
0086               
0087 6084 0200  20         li    r0,>0700              ; \ Page 7 in >f000 - >ffff
     6086 0700     
0088 6088 D800  38         movb  r0,@>401e             ; /
     608A 401E     
0089               
0090 608C 1E00  16         sbz   0                     ; Disable access to SAMS registers
0091 608E 1D01  16         sbo   1                     ; Enable SAMS mapper
0092               
0093               ***************************************************************
0094               * Step 3: Copy resident modules from ROM to RAM >2000 - >3fff
0095               ********|*****|*********************|**************************
0096 6090 0200  20         li    r0,reloc.resident     ; Start of code to relocate
     6092 612C     
0097 6094 0201  20         li    r1,>2000
     6096 2000     
0098 6098 0202  20         li    r2,512                ; Copy 8K (320 * 16 bytes)
     609A 0200     
0099                       ;------------------------------------------------------
0100                       ; Copy memory to destination
0101                       ; r0 = Source CPU address
0102                       ; r1 = Target CPU address
0103                       ; r2 = Bytes to copy/16
0104                       ;------------------------------------------------------
0105 609C CC70  46 !       mov   *r0+,*r1+             ; Copy word 1
0106 609E CC70  46         mov   *r0+,*r1+             ; Copy word 2
0107 60A0 CC70  46         mov   *r0+,*r1+             ; Copy word 3
0108 60A2 CC70  46         mov   *r0+,*r1+             ; Copy word 4
0109 60A4 CC70  46         mov   *r0+,*r1+             ; Copy word 5
0110 60A6 CC70  46         mov   *r0+,*r1+             ; Copy word 6
0111 60A8 CC70  46         mov   *r0+,*r1+             ; Copy word 7
0112 60AA CC70  46         mov   *r0+,*r1+             ; Copy word 8
0113 60AC 0602  14         dec   r2
0114 60AE 16F6  14         jne   -!                    ; Loop until done
0115               ***************************************************************
0116               * Step 4: Start SP2 kernel (runs in low MEMEXP)
0117               ********|*****|*********************|**************************
0118 60B0 0460  28         b     @runlib               ; \ Start spectra2 library
     60B2 2FC6     
0119                                                   ; | "main" in low MEMEXP is automatically
0120                                                   ; / called by SP2 runlib.
0121                       ;------------------------------------------------------
0122                       ; Assert. Should not get here!
0123                       ;------------------------------------------------------
0124 60B4 0200  20         li    r0,$                  ; Current location
     60B6 60B4     
0125 60B8 C800  38         mov   r0,@>ffce             ; \ Save caller address
     60BA FFCE     
0126 60BC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     60BE 2026     
0127               
0128                       ;-----------------------------------------------------------------------
0129                       ; Stubs
0130                       ;-----------------------------------------------------------------------
0131                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 60C0 0649  14         dect  stack
0038 60C2 C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 60C4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     60C6 3084     
0043 60C8 600E                   data bank7.rom        ; | i  p0 = bank address
0044 60CA 7F70                   data vec.1            ; | i  p1 = Vector with target address
0045 60CC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 60CE C2F9  30         mov   *stack+,r11           ; Pop r11
0050 60D0 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 60D2 0649  14         dect  stack
0060 60D4 C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 60D6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     60D8 3084     
0065 60DA 600E                   data bank7.rom        ; | i  p0 = bank address
0066 60DC 7F72                   data vec.2            ; | i  p1 = Vector with target address
0067 60DE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 60E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0072 60E2 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 60E4 0649  14         dect  stack
0081 60E6 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 60E8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     60EA 3084     
0086 60EC 600E                   data bank7.rom        ; | i  p0 = bank address
0087 60EE 7F74                   data vec.3            ; | i  p1 = Vector with target address
0088 60F0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 60F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 60F4 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 60F6 0649  14         dect  stack
0102 60F8 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 60FA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     60FC 3084     
0107 60FE 600E                   data bank7.rom        ; | i  p0 = bank address
0108 6100 7F96                   data vec.20           ; | i  p1 = Vector with target address
0109 6102 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 6104 C2F9  30         mov   *stack+,r11           ; Pop r11
0114 6106 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 6108 0649  14         dect  stack
0123 610A C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 610C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     610E 3084     
0128 6110 600E                   data bank7.rom        ; | i  p0 = bank address
0129 6112 7F98                   data vec.21           ; | i  p1 = Vector with target address
0130 6114 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 6116 C2F9  30         mov   *stack+,r11           ; Pop r11
0135 6118 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 611A 0649  14         dect  stack
0144 611C C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 611E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6120 3084     
0149 6122 600E                   data bank7.rom        ; | i  p0 = bank address
0150 6124 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0151 6126 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 6128 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 612A 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b0.asm
0132               
0133               ***************************************************************
0134               * Code data: Relocated code
0135               ********|*****|*********************|**************************
0136               reloc.resident:
0137                       ;------------------------------------------------------
0138                       ; Resident libraries
0139                       ;------------------------------------------------------
0140                       xorg  >2000                 ; Relocate to >2000
0141                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 612C 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 612E 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 6130 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 6132 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 6134 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 6136 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 6138 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 613A 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 613C 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 613E 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 6140 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 6142 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 6144 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 6146 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 6148 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 614A 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 614C 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 614E FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 6150 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 6152 022B  22         ai    r11,-4                ; Remove opcode offset
     6154 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 6156 C800  38         mov   r0,@>ffe0
     6158 FFE0     
0043 615A C801  38         mov   r1,@>ffe2
     615C FFE2     
0044 615E C802  38         mov   r2,@>ffe4
     6160 FFE4     
0045 6162 C803  38         mov   r3,@>ffe6
     6164 FFE6     
0046 6166 C804  38         mov   r4,@>ffe8
     6168 FFE8     
0047 616A C805  38         mov   r5,@>ffea
     616C FFEA     
0048 616E C806  38         mov   r6,@>ffec
     6170 FFEC     
0049 6172 C807  38         mov   r7,@>ffee
     6174 FFEE     
0050 6176 C808  38         mov   r8,@>fff0
     6178 FFF0     
0051 617A C809  38         mov   r9,@>fff2
     617C FFF2     
0052 617E C80A  38         mov   r10,@>fff4
     6180 FFF4     
0053 6182 C80B  38         mov   r11,@>fff6
     6184 FFF6     
0054 6186 C80C  38         mov   r12,@>fff8
     6188 FFF8     
0055 618A C80D  38         mov   r13,@>fffa
     618C FFFA     
0056 618E C80E  38         mov   r14,@>fffc
     6190 FFFC     
0057 6192 C80F  38         mov   r15,@>ffff
     6194 FFFF     
0058 6196 02A0  12         stwp  r0
0059 6198 C800  38         mov   r0,@>ffdc
     619A FFDC     
0060 619C 02C0  12         stst  r0
0061 619E C800  38         mov   r0,@>ffde
     61A0 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 61A2 02E0  18         lwpi  ws1                   ; Activate workspace 1
     61A4 8300     
0067 61A6 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     61A8 8302     
0068 61AA 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     61AC 4A4A     
0069 61AE 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     61B0 2FCA     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 61B2 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     61B4 22F8     
0078 61B6 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 61B8 06A0  32         bl    @ldfnt
     61BA 2360     
0082 61BC 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     61BE 000C     
0083               
0084 61C0 06A0  32         bl    @filv
     61C2 228E     
0085 61C4 0000                   data >0000,32,32*24   ; Clear screen
     61C6 0020     
     61C8 0300     
0086               
0087 61CA 06A0  32         bl    @filv
     61CC 228E     
0088 61CE 0380                   data >0380,>f0,32*24  ; Load color table
     61D0 00F0     
     61D2 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 61D4 06A0  32         bl    @putat                ; Show crash message
     61D6 2442     
0093 61D8 0000                   data >0000,cpu.crash.msg.crashed
     61DA 2182     
0094               
0095 61DC 06A0  32         bl    @puthex               ; Put hex value on screen
     61DE 2A4C     
0096 61E0 0015                   byte 0,21             ; \ i  p0 = YX position
0097 61E2 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 61E4 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 61E6 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 61E8 06A0  32         bl    @putat                ; Show caller message
     61EA 2442     
0105 61EC 0100                   data >0100,cpu.crash.msg.caller
     61EE 2198     
0106               
0107 61F0 06A0  32         bl    @puthex               ; Put hex value on screen
     61F2 2A4C     
0108 61F4 0115                   byte 1,21             ; \ i  p0 = YX position
0109 61F6 FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 61F8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 61FA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 61FC 06A0  32         bl    @putat
     61FE 2442     
0117 6200 0300                   byte 3,0
0118 6202 21B4                   data cpu.crash.msg.wp
0119 6204 06A0  32         bl    @putat
     6206 2442     
0120 6208 0400                   byte 4,0
0121 620A 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 620C 06A0  32         bl    @at                   ; Put cursor at YX
     620E 2726     
0126 6210 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 6212 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     6214 FFDC     
0130 6216 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 6218 C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 621A 0649  14         dect  stack
0136 621C C644  30         mov   tmp0,*stack           ; Push tmp0
0137 621E 0649  14         dect  stack
0138 6220 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 6222 0649  14         dect  stack
0140 6224 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 6226 C046  18         mov   tmp2,r1               ; Save register number
0146 6228 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     622A 0001     
0147 622C 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 622E 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 6230 06A0  32         bl    @mknum
     6232 2A56     
0152 6234 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 6236 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 6238 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 623A 06A0  32         bl    @setx                 ; Set cursor X position
     623C 273C     
0158 623E 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 6240 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     6242 0400     
0162 6244 D804  38         movb  tmp0,@rambuf          ;
     6246 A100     
0163               
0164 6248 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     624A 241E     
0165 624C A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 624E 06A0  32         bl    @setx                 ; Set cursor X position
     6250 273C     
0169 6252 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 6254 0281  22         ci    r1,10
     6256 000A     
0173 6258 1102  14         jlt   !
0174 625A 0620  26         dec   @wyx                  ; x=x-1
     625C 832A     
0175               
0176 625E 06A0  32 !       bl    @putstr
     6260 241E     
0177 6262 21AE                   data cpu.crash.msg.r
0178               
0179 6264 06A0  32         bl    @mknum
     6266 2A56     
0180 6268 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 626A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 626C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 626E 06A0  32         bl    @mkhex                ; Convert hex word to string
     6270 29C8     
0189 6272 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 6274 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 6276 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 6278 06A0  32         bl    @setx                 ; Set cursor X position
     627A 273C     
0195 627C 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 627E 06A0  32         bl    @putstr               ; Put '  >'
     6280 241E     
0199 6282 21B0                   data cpu.crash.msg.marker
0200               
0201 6284 06A0  32         bl    @setx                 ; Set cursor X position
     6286 273C     
0202 6288 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 628A 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     628C 0400     
0206 628E D804  38         movb  tmp0,@rambuf          ;
     6290 A100     
0207               
0208 6292 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     6294 241E     
0209 6296 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 6298 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 629A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 629C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 629E 06A0  32         bl    @down                 ; y=y+1
     62A0 272C     
0217               
0218 62A2 0586  14         inc   tmp2
0219 62A4 0286  22         ci    tmp2,17
     62A6 0011     
0220 62A8 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 62AA 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     62AC 7FF0     
0225               
0226               
0227 62AE 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     62B0 7973     
     62B2 7465     
     62B4 6D20     
     62B6 6372     
     62B8 6173     
     62BA 6865     
     62BC 6420     
     62BE 6E65     
     62C0 6172     
     62C2 203E     
0228                                          even
0229 62C4 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     62C6 616C     
     62C8 6C65     
     62CA 7220     
     62CC 6164     
     62CE 6472     
     62D0 6573     
     62D2 7320     
     62D4 6E65     
     62D6 6172     
     62D8 203E     
0230                                          even
0231 62DA 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 62DC 0320     cpu.crash.msg.marker       stri '  >'
     62DE 203E     
0234                                          even
0235 62E0 042A     cpu.crash.msg.wp           stri '**WP'
     62E2 2A57     
     62E4 50       
0236                                          even
0237 62E6 042A     cpu.crash.msg.st           stri '**ST'
     62E8 2A53     
     62EA 54       
0238                                          even
0239 62EC 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     62EE 6F75     
     62F0 7263     
     62F2 6520     
     62F4 2020     
     62F6 2025     
     62F8 2562     
     62FA 7569     
     62FC 6C64     
     62FE 5F73     
     6300 7263     
     6302 2525     
0240                                          even
0241 6304 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     6306 7569     
     6308 6C64     
     630A 2D49     
     630C 4420     
     630E 2025     
     6310 2562     
     6312 7569     
     6314 6C64     
     6316 5F64     
     6318 6174     
     631A 6525     
     631C 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 631E 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     6320 000E     
     6322 0106     
     6324 0204     
     6326 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 6328 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     632A 000E     
     632C 0106     
     632E 00F4     
     6330 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 6332 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     6334 003F     
     6336 0240     
     6338 03F4     
     633A 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 633C 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 633E 16FD             data  >16fd                 ; |         jne   mcloop
0015 6340 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 6342 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 6344 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 6346 0201  20         li    r1,mccode             ; Machinecode to patch
     6348 2210     
0037 634A 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     634C 8322     
0038 634E CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 6350 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 6352 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 6354 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 6356 C0F9  30 popr3   mov   *stack+,r3
0057 6358 C0B9  30 popr2   mov   *stack+,r2
0058 635A C079  30 popr1   mov   *stack+,r1
0059 635C C039  30 popr0   mov   *stack+,r0
0060 635E C2F9  30 poprt   mov   *stack+,r11
0061 6360 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 6362 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 6364 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 6366 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 6368 C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 636A 1604  14         jne   filchk                ; No, continue checking
0093               
0094 636C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     636E FFCE     
0095 6370 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6372 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 6374 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     6376 830B     
     6378 830A     
0100               
0101 637A 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     637C 0001     
0102 637E 1602  14         jne   filchk2
0103 6380 DD05  32         movb  tmp1,*tmp0+
0104 6382 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 6384 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     6386 0002     
0109 6388 1603  14         jne   filchk3
0110 638A DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 638C DD05  32         movb  tmp1,*tmp0+
0112 638E 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 6390 C1C4  18 filchk3 mov   tmp0,tmp3
0117 6392 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     6394 0001     
0118 6396 1305  14         jeq   fil16b
0119 6398 DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 639A 0606  14         dec   tmp2
0121 639C 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     639E 0002     
0122 63A0 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 63A2 C1C6  18 fil16b  mov   tmp2,tmp3
0127 63A4 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     63A6 0001     
0128 63A8 1301  14         jeq   dofill
0129 63AA 0606  14         dec   tmp2                  ; Make TMP2 even
0130 63AC CD05  34 dofill  mov   tmp1,*tmp0+
0131 63AE 0646  14         dect  tmp2
0132 63B0 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 63B2 C1C7  18         mov   tmp3,tmp3
0137 63B4 1301  14         jeq   fil.exit
0138 63B6 DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 63B8 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 63BA C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 63BC C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 63BE C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 63C0 0264  22 xfilv   ori   tmp0,>4000
     63C2 4000     
0166 63C4 06C4  14         swpb  tmp0
0167 63C6 D804  30         movb  tmp0,@vdpa
     63C8 8C02     
0168 63CA 06C4  14         swpb  tmp0
0169 63CC D804  30         movb  tmp0,@vdpa
     63CE 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 63D0 020F  20         li    r15,vdpw              ; Set VDP write address
     63D2 8C00     
0174 63D4 06C5  14         swpb  tmp1
0175 63D6 C820  46         mov   @filzz,@mcloop        ; Setup move command
     63D8 22B4     
     63DA 8320     
0176 63DC 0460  24         b     @mcloop               ; Write data to VDP
     63DE 8320     
0177               *--------------------------------------------------------------
0181 63E0 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 63E2 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     63E4 4000     
0202 63E6 06C4  14 vdra    swpb  tmp0
0203 63E8 D804  30         movb  tmp0,@vdpa
     63EA 8C02     
0204 63EC 06C4  14         swpb  tmp0
0205 63EE D804  30         movb  tmp0,@vdpa            ; Set VDP address
     63F0 8C02     
0206 63F2 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 63F4 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 63F6 C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 63F8 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     63FA 4000     
0223 63FC 06C4  14         swpb  tmp0                  ; \
0224 63FE D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     6400 8C02     
0225 6402 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 6404 D804  30         movb  tmp0,@vdpa            ; /
     6406 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 6408 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 640A D7C5  30         movb  tmp1,*r15             ; Write byte
0232 640C 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 640E C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 6410 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 6412 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     6414 8C02     
0257 6416 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 6418 D804  30         movb  tmp0,@vdpa            ; /
     641A 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 641C D120  30         movb  @vdpr,tmp0            ; Read byte
     641E 8800     
0263 6420 0984  32         srl   tmp0,8                ; Right align
0264 6422 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 6424 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 6426 C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 6428 C144  18         mov   tmp0,tmp1
0289 642A 05C5  14         inct  tmp1
0290 642C D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 642E 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     6430 FF00     
0292 6432 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 6434 C805  30         mov   tmp1,@wbase           ; Store calculated base
     6436 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 6438 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     643A 8000     
0298 643C 0206  20         li    tmp2,8
     643E 0008     
0299 6440 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     6442 830B     
0300 6444 06C5  14         swpb  tmp1
0301 6446 D805  30         movb  tmp1,@vdpa
     6448 8C02     
0302 644A 06C5  14         swpb  tmp1
0303 644C D805  30         movb  tmp1,@vdpa
     644E 8C02     
0304 6450 0225  22         ai    tmp1,>0100
     6452 0100     
0305 6454 0606  14         dec   tmp2
0306 6456 16F4  14         jne   vidta1                ; Next register
0307 6458 C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     645A 833A     
0308 645C 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 645E C13B  30 putvr   mov   *r11+,tmp0
0326 6460 0264  22 putvrx  ori   tmp0,>8000
     6462 8000     
0327 6464 06C4  14         swpb  tmp0
0328 6466 D804  30         movb  tmp0,@vdpa
     6468 8C02     
0329 646A 06C4  14         swpb  tmp0
0330 646C D804  30         movb  tmp0,@vdpa
     646E 8C02     
0331 6470 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 6472 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 6474 C10E  18         mov   r14,tmp0
0341 6476 0984  32         srl   tmp0,8
0342 6478 06A0  32         bl    @putvrx               ; Write VR#0
     647A 2334     
0343 647C 0204  20         li    tmp0,>0100
     647E 0100     
0344 6480 D820  42         movb  @r14lb,@tmp0lb
     6482 831D     
     6484 8309     
0345 6486 06A0  32         bl    @putvrx               ; Write VR#1
     6488 2334     
0346 648A 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 648C C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 648E 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 6490 C11B  26         mov   *r11,tmp0             ; Get P0
0363 6492 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     6494 7FFF     
0364 6496 2120  32         coc   @wbit0,tmp0
     6498 2020     
0365 649A 1604  14         jne   ldfnt1
0366 649C 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     649E 8000     
0367 64A0 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     64A2 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 64A4 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     64A6 23E2     
0372 64A8 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     64AA 9C02     
0373 64AC 06C4  14         swpb  tmp0
0374 64AE D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     64B0 9C02     
0375 64B2 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     64B4 9800     
0376 64B6 06C5  14         swpb  tmp1
0377 64B8 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     64BA 9800     
0378 64BC 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 64BE D805  38         movb  tmp1,@grmwa
     64C0 9C02     
0383 64C2 06C5  14         swpb  tmp1
0384 64C4 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     64C6 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 64C8 C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 64CA 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     64CC 22B6     
0390 64CE 05C8  14         inct  tmp4                  ; R11=R11+2
0391 64D0 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 64D2 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     64D4 7FFF     
0393 64D6 C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     64D8 23E4     
0394 64DA C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     64DC 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 64DE 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 64E0 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 64E2 D120  34         movb  @grmrd,tmp0
     64E4 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 64E6 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     64E8 2020     
0405 64EA 1603  14         jne   ldfnt3                ; No, so skip
0406 64EC D1C4  18         movb  tmp0,tmp3
0407 64EE 0917  18         srl   tmp3,1
0408 64F0 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 64F2 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     64F4 8C00     
0413 64F6 0606  14         dec   tmp2
0414 64F8 16F2  14         jne   ldfnt2
0415 64FA 05C8  14         inct  tmp4                  ; R11=R11+2
0416 64FC 020F  20         li    r15,vdpw              ; Set VDP write address
     64FE 8C00     
0417 6500 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     6502 7FFF     
0418 6504 0458  20         b     *tmp4                 ; Exit
0419 6506 D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     6508 2000     
     650A 8C00     
0420 650C 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 650E 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     6510 0200     
     6512 0000     
0425 6514 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     6516 01C0     
     6518 0101     
0426 651A 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     651C 02A0     
     651E 0101     
0427 6520 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     6522 00E0     
     6524 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 6526 C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 6528 C3A0  30         mov   @wyx,r14              ; Get YX
     652A 832A     
0447 652C 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 652E 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     6530 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 6532 C3A0  30         mov   @wyx,r14              ; Get YX
     6534 832A     
0454 6536 024E  22         andi  r14,>00ff             ; Remove Y
     6538 00FF     
0455 653A A3CE  18         a     r14,r15               ; pos = pos + X
0456 653C A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     653E 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 6540 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 6542 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 6544 020F  20         li    r15,vdpw              ; VDP write address
     6546 8C00     
0463 6548 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 654A C17B  30 putstr  mov   *r11+,tmp1
0482 654C D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 654E C1CB  18 xutstr  mov   r11,tmp3
0484 6550 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     6552 23FA     
0485 6554 C2C7  18         mov   tmp3,r11
0486 6556 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 6558 C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 655A 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 655C 0286  22         ci    tmp2,255              ; Length > 255 ?
     655E 00FF     
0494 6560 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 6562 0460  28         b     @xpym2v               ; Display string
     6564 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 6566 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6568 FFCE     
0501 656A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     656C 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 656E C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     6570 832A     
0518 6572 0460  28         b     @putstr
     6574 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 6576 0649  14         dect  stack
0548 6578 C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 657A C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     657C 833C     
0553 657E C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     6580 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 6582 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 6584 0987  32         srl   tmp3,8                ; Right align
0560 6586 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 6588 0649  14         dect  stack
0565 658A C644  30         mov   tmp0,*stack           ; Push tmp0
0566 658C 0649  14         dect  stack
0567 658E C645  30         mov   tmp1,*stack           ; Push tmp1
0568 6590 0649  14         dect  stack
0569 6592 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 6594 0649  14         dect  stack
0571 6596 C647  30         mov   tmp3,*stack           ; Push tmp3
0572 6598 0649  14         dect  stack
0573 659A C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 659C 06A0  32         bl    @xutst0               ; Display string
     659E 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 65A0 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 65A2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 65A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 65A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 65A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 65AA 0760  30         abs   @waux1                ; Padding length set?
     65AC 833C     
0588 65AE 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 65B0 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     65B2 833C     
0591 65B4 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 65B6 C060  30         mov   @wyx,r1               ; Backup YX
     65B8 832A     
0596 65BA A807  30         a     tmp3,@wyx             ; Add string length
     65BC 832A     
0597 65BE C020  30         mov   @waux1,r0             ; Set counter
     65C0 833C     
0598               
0599               putlst.loop.pad:
0600 65C2 0649  14         dect  stack
0601 65C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 65C6 0649  14         dect  stack
0603 65C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 65CA 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     65CC 23FA     
0606               
0607 65CE 0205  20         li    tmp1,32
     65D0 0020     
0608 65D2 06A0  32         bl    @xvputb               ; Write byte to VDP
     65D4 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 65D6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 65D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 65DA 05A0  26         inc   @wyx                  ; X=X+1
     65DC 832A     
0616 65DE 0600  14         dec   r0
0617 65E0 81C0  18         c     r0,tmp3
0618 65E2 15EF  14         jgt   putlst.loop.pad
0619               
0620 65E4 C801  30         mov   r1,@wyx               ; Restore YX
     65E6 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 65E8 C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 65EA 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 65EC 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     65EE 832A     
0629 65F0 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 65F2 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     65F4 832A     
0632 65F6 B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     65F8 8309     
     65FA 832B     
0633               
0634 65FC 1002  14         jmp   putlst.next           ; Next iteration
0635 65FE 06A0  32 !       bl    @down                 ; Move cursor down
     6600 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 6602 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 6604 0585  14         inc   tmp1                  ; Consider length byte
0642 6606 0606  14         dec   tmp2
0643 6608 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 660A C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     660C 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 660E C2F9  30         mov   *stack+,r11           ; Pop r11
0650 6610 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 6612 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 6614 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 6616 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 6618 C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 661A 1604  14         jne   !                     ; No, continue
0028               
0029 661C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     661E FFCE     
0030 6620 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6622 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 6624 0264  22 !       ori   tmp0,>4000
     6626 4000     
0035 6628 06C4  14         swpb  tmp0
0036 662A D804  30         movb  tmp0,@vdpa
     662C 8C02     
0037 662E 06C4  14         swpb  tmp0
0038 6630 D804  30         movb  tmp0,@vdpa
     6632 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 6634 020F  20         li    r15,vdpw              ; Set VDP write address
     6636 8C00     
0043 6638 C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     663A 2516     
     663C 8320     
0044 663E 0460  24         b     @mcloop               ; Write data to VDP and return
     6640 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 6642 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 6644 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 6646 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 6648 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 664A 06C4  14 xpyv2m  swpb  tmp0
0027 664C D804  30         movb  tmp0,@vdpa
     664E 8C02     
0028 6650 06C4  14         swpb  tmp0
0029 6652 D804  30         movb  tmp0,@vdpa
     6654 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 6656 020F  20         li    r15,vdpr              ; Set VDP read address
     6658 8800     
0034 665A C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     665C 2538     
     665E 8320     
0035 6660 0460  24         b     @mcloop               ; Read data from VDP
     6662 8320     
0036 6664 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 6666 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 6668 C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 666A C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 666C C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 666E 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 6670 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6672 FFCE     
0034 6674 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6676 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 6678 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     667A 0001     
0039 667C 1603  14         jne   cpym0                 ; No, continue checking
0040 667E DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 6680 04C6  14         clr   tmp2                  ; Reset counter
0042 6682 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 6684 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     6686 7FFF     
0047 6688 C1C4  18         mov   tmp0,tmp3
0048 668A 0247  22         andi  tmp3,1
     668C 0001     
0049 668E 1618  14         jne   cpyodd                ; Odd source address handling
0050 6690 C1C5  18 cpym1   mov   tmp1,tmp3
0051 6692 0247  22         andi  tmp3,1
     6694 0001     
0052 6696 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 6698 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     669A 2020     
0057 669C 1605  14         jne   cpym3
0058 669E C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     66A0 259A     
     66A2 8320     
0059 66A4 0460  24         b     @mcloop               ; Copy memory and exit
     66A6 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 66A8 C1C6  18 cpym3   mov   tmp2,tmp3
0064 66AA 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     66AC 0001     
0065 66AE 1301  14         jeq   cpym4
0066 66B0 0606  14         dec   tmp2                  ; Make TMP2 even
0067 66B2 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 66B4 0646  14         dect  tmp2
0069 66B6 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 66B8 C1C7  18         mov   tmp3,tmp3
0074 66BA 1301  14         jeq   cpymz
0075 66BC D554  38         movb  *tmp0,*tmp1
0076 66BE 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 66C0 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     66C2 8000     
0081 66C4 10E9  14         jmp   cpym2
0082 66C6 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 66C8 C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 66CA 0649  14         dect  stack
0065 66CC C64B  30         mov   r11,*stack            ; Push return address
0066 66CE 0649  14         dect  stack
0067 66D0 C640  30         mov   r0,*stack             ; Push r0
0068 66D2 0649  14         dect  stack
0069 66D4 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 66D6 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 66D8 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 66DA 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     66DC 4000     
0077 66DE C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     66E0 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 66E2 020C  20         li    r12,>1e00             ; SAMS CRU address
     66E4 1E00     
0082 66E6 04C0  14         clr   r0
0083 66E8 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 66EA D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 66EC D100  18         movb  r0,tmp0
0086 66EE 0984  32         srl   tmp0,8                ; Right align
0087 66F0 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     66F2 833C     
0088 66F4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 66F6 C339  30         mov   *stack+,r12           ; Pop r12
0094 66F8 C039  30         mov   *stack+,r0            ; Pop r0
0095 66FA C2F9  30         mov   *stack+,r11           ; Pop return address
0096 66FC 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 66FE C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 6700 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 6702 0649  14         dect  stack
0135 6704 C64B  30         mov   r11,*stack            ; Push return address
0136 6706 0649  14         dect  stack
0137 6708 C640  30         mov   r0,*stack             ; Push r0
0138 670A 0649  14         dect  stack
0139 670C C64C  30         mov   r12,*stack            ; Push r12
0140 670E 0649  14         dect  stack
0141 6710 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 6712 0649  14         dect  stack
0143 6714 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 6716 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 6718 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 671A 0284  22         ci    tmp0,255              ; Crash if page > 255
     671C 00FF     
0153 671E 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 6720 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     6722 001E     
0158 6724 150A  14         jgt   !
0159 6726 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     6728 0004     
0160 672A 1107  14         jlt   !
0161 672C 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     672E 0012     
0162 6730 1508  14         jgt   sams.page.set.switch_page
0163 6732 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     6734 0006     
0164 6736 1501  14         jgt   !
0165 6738 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 673A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     673C FFCE     
0170 673E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6740 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 6742 020C  20         li    r12,>1e00             ; SAMS CRU address
     6744 1E00     
0176 6746 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 6748 06C0  14         swpb  r0                    ; LSB to MSB
0178 674A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 674C D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     674E 4000     
0180 6750 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 6752 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 6754 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 6756 C339  30         mov   *stack+,r12           ; Pop r12
0188 6758 C039  30         mov   *stack+,r0            ; Pop r0
0189 675A C2F9  30         mov   *stack+,r11           ; Pop return address
0190 675C 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 675E 0649  14         dect  stack
0205 6760 C64C  30         mov   r12,*stack            ; Push r12
0206 6762 020C  20         li    r12,>1e00             ; SAMS CRU address
     6764 1E00     
0207 6766 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 6768 C339  30         mov   *stack+,r12           ; Pop r12
0213 676A 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 676C 0649  14         dect  stack
0231 676E C64C  30         mov   r12,*stack            ; Push r12
0232 6770 020C  20         li    r12,>1e00             ; SAMS CRU address
     6772 1E00     
0233 6774 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 6776 C339  30         mov   *stack+,r12           ; Pop r12
0239 6778 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 677A C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 677C 0649  14         dect  stack
0269 677E C64B  30         mov   r11,*stack            ; Save return address
0270 6780 0649  14         dect  stack
0271 6782 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 6784 0649  14         dect  stack
0273 6786 C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 6788 020C  20         li    r12,>1e00             ; SAMS CRU address
     678A 1E00     
0278 678C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 678E C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     6790 4004     
0281 6792 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     6794 4006     
0282 6796 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     6798 4014     
0283 679A C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     679C 4016     
0284 679E C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     67A0 4018     
0285 67A2 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     67A4 401A     
0286 67A6 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     67A8 401C     
0287 67AA C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     67AC 401E     
0288               
0289 67AE 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 67B0 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 67B2 C339  30         mov   *stack+,r12           ; Pop r12
0296 67B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 67B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0298 67B8 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 67BA 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 67BC 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 67BE 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 67C0 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 67C2 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 67C4 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 67C6 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 67C8 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 67CA C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 67CC 0649  14         dect  stack
0333 67CE C64B  30         mov   r11,*stack            ; Push return address
0334 67D0 0649  14         dect  stack
0335 67D2 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 67D4 0649  14         dect  stack
0337 67D6 C645  30         mov   tmp1,*stack           ; Push tmp1
0338 67D8 0649  14         dect  stack
0339 67DA C646  30         mov   tmp2,*stack           ; Push tmp2
0340 67DC 0649  14         dect  stack
0341 67DE C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 67E0 0205  20         li    tmp1,sams.layout.copy.data
     67E2 26D6     
0346 67E4 0206  20         li    tmp2,8                ; Set loop counter
     67E6 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 67E8 C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 67EA 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     67EC 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 67EE CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     67F0 833C     
0357               
0358 67F2 0606  14         dec   tmp2                  ; Next iteration
0359 67F4 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 67F6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 67F8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 67FA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 67FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 67FE C2F9  30         mov   *stack+,r11           ; Pop r11
0369 6800 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 6802 2000             data  >2000                 ; >2000-2fff
0375 6804 3000             data  >3000                 ; >3000-3fff
0376 6806 A000             data  >a000                 ; >a000-afff
0377 6808 B000             data  >b000                 ; >b000-bfff
0378 680A C000             data  >c000                 ; >c000-cfff
0379 680C D000             data  >d000                 ; >d000-dfff
0380 680E E000             data  >e000                 ; >e000-efff
0381 6810 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 6812 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     6814 FFBF     
0010 6816 0460  28         b     @putv01
     6818 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 681A 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     681C 0040     
0018 681E 0460  28         b     @putv01
     6820 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 6822 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     6824 FFDF     
0026 6826 0460  28         b     @putv01
     6828 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 682A 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     682C 0020     
0034 682E 0460  28         b     @putv01
     6830 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 6832 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     6834 FFFE     
0011 6836 0460  28         b     @putv01
     6838 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 683A 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     683C 0001     
0019 683E 0460  28         b     @putv01
     6840 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 6842 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     6844 FFFD     
0027 6846 0460  28         b     @putv01
     6848 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 684A 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     684C 0002     
0035 684E 0460  28         b     @putv01
     6850 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 6852 C83B  42 at      mov   *r11+,@wyx
     6854 832A     
0019 6856 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 6858 B820  46 down    ab    @hb$01,@wyx
     685A 2012     
     685C 832A     
0028 685E 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 6860 7820  46 up      sb    @hb$01,@wyx
     6862 2012     
     6864 832A     
0037 6866 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 6868 C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 686A D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     686C 832A     
0051 686E C804  30         mov   tmp0,@wyx             ; Save as new YX position
     6870 832A     
0052 6872 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 6874 C120  30 yx2px   mov   @wyx,tmp0
     6876 832A     
0022 6878 C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 687A 06C4  14         swpb  tmp0                  ; Y<->X
0024 687C 04C5  14         clr   tmp1                  ; Clear before copy
0025 687E D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 6880 20A0  32         coc   @wbit1,config         ; f18a present ?
     6882 201E     
0030 6884 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 6886 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     6888 833A     
     688A 2788     
0032 688C 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 688E 0A15  18         sla   tmp1,1                ; X = X * 2
0035 6890 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 6892 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     6894 0500     
0037 6896 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 6898 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 689A 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 689C 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 689E D105  18         movb  tmp1,tmp0
0051 68A0 06C4  14         swpb  tmp0                  ; X<->Y
0052 68A2 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     68A4 2020     
0053 68A6 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 68A8 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     68AA 2012     
0059 68AC 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     68AE 2024     
0060 68B0 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 68B2 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 68B4 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 68B6 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 68B8 06A0  32         bl    @putvr                ; Write once
     68BA 2332     
0015 68BC 391C             data  >391c                 ; VR1/57, value 00011100
0016 68BE 06A0  32         bl    @putvr                ; Write twice
     68C0 2332     
0017 68C2 391C             data  >391c                 ; VR1/57, value 00011100
0018 68C4 06A0  32         bl    @putvr
     68C6 2332     
0019 68C8 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 68CA 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 68CC C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 68CE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     68D0 2332     
0030 68D2 3900             data  >3900
0031 68D4 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 68D6 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 68D8 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     68DA 2332     
0044 68DC 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 68DE 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 68E0 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 68E2 06A0  32         bl    @cpym2v
     68E4 24E6     
0060 68E6 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     68E8 27FE     
     68EA 0008     
0061 68EC 06A0  32         bl    @putvr
     68EE 2332     
0062 68F0 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 68F2 06A0  32         bl    @putvr
     68F4 2332     
0064 68F6 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 68F8 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     68FA 2332     
0068 68FC 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 68FE 0204  20         li    tmp0,>3f00
     6900 3F00     
0073 6902 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     6904 22BA     
0074 6906 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     6908 8800     
0075 690A 0984  32         srl   tmp0,8
0076 690C D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     690E 8800     
0077 6910 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 6912 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 6914 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     6916 BFFF     
0081 6918 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 691A 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     691C 4000     
0084               
0085               f18chk_exit:
0086 691E 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     6920 228E     
0087 6922 3F00             data  >3f00,>00,6
     6924 0000     
     6926 0006     
0088 6928 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 692A 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 692C 3F00             data  >3f00                 ; 3f02 / 3f00
0095 692E 0340             data  >0340                 ; 3f04   0340  idle
0096 6930 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 6932 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 6934 06A0  32         bl    @putvr
     6936 2332     
0124 6938 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 693A 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     693C 2332     
0127 693E 3900             data  >3900                 ; Lock the F18a
0128 6940 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 6942 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 6944 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     6946 201E     
0149 6948 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 694A C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     694C 8802     
0154 694E 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     6950 2332     
0155 6952 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 6954 04C4  14         clr   tmp0
0157 6956 D120  30         movb  @vdps,tmp0
     6958 8802     
0158 695A 0984  32         srl   tmp0,8
0159 695C 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 695E C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     6960 832A     
0018 6962 D17B  28         movb  *r11+,tmp1
0019 6964 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 6966 D1BB  28         movb  *r11+,tmp2
0021 6968 0986  32         srl   tmp2,8                ; Repeat count
0022 696A C1CB  18         mov   r11,tmp3
0023 696C 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     696E 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 6970 020B  20         li    r11,hchar1
     6972 284C     
0028 6974 0460  28         b     @xfilv                ; Draw
     6976 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 6978 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     697A 2022     
0033 697C 1302  14         jeq   hchar2                ; Yes, exit
0034 697E C2C7  18         mov   tmp3,r11
0035 6980 10EE  14         jmp   hchar                 ; Next one
0036 6982 05C7  14 hchar2  inct  tmp3
0037 6984 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 6986 C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     6988 832A     
0018 698A C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 698C C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     698E 833A     
0020 6990 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     6992 23FA     
0021 6994 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 6996 D1B7  28         movb  *tmp3+,tmp2
0023 6998 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 699A 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     699C 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 699E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 69A0 A108  18         a     tmp4,tmp0             ; Next row
0033 69A2 0606  14         dec   tmp2
0034 69A4 16FA  14         jne   vchar2
0035 69A6 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     69A8 2022     
0036 69AA 1303  14         jeq   vchar3                ; Yes, exit
0037 69AC C837  42         mov   *tmp3+,@wyx           ; Save YX position
     69AE 832A     
0038 69B0 10ED  14         jmp   vchar1                ; Next one
0039 69B2 05C7  14 vchar3  inct  tmp3
0040 69B4 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 69B6 C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 69B8 C804  30         mov   tmp0,@wyx             ; Set cursor position
     69BA 832A     
0051 69BC 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 69BE C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     69C0 833A     
0053 69C2 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     69C4 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 69C6 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     69C8 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 69CA D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 69CC A120  30         a     @wcolmn,tmp0          ; Next row
     69CE 833A     
0063 69D0 0606  14         dec   tmp2
0064 69D2 16F9  14         jne   xvcha1
0065 69D4 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 69D6 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     69D8 8334     
0015 69DA 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     69DC 2006     
0016 69DE 0204  20         li    tmp0,muttab
     69E0 28C4     
0017 69E2 0205  20         li    tmp1,sound            ; Sound generator port >8400
     69E4 8400     
0018 69E6 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 69E8 D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 69EA D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 69EC D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 69EE 045B  20         b     *r11
0023 69F0 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     69F2 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 69F4 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     69F6 8334     
0044 69F8 C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     69FA 8336     
0045 69FC 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     69FE FFF8     
0046 6A00 E0BB  30         soc   *r11+,config          ; Set options
0047 6A02 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     6A04 2012     
     6A06 831B     
0048 6A08 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 6A0A 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     6A0C 2006     
0060 6A0E 1301  14         jeq   sdpla1                ; Yes, play
0061 6A10 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 6A12 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 6A14 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     6A16 831B     
     6A18 2000     
0067 6A1A 1301  14         jeq   sdpla3                ; Play next note
0068 6A1C 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 6A1E 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     6A20 2002     
0070 6A22 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 6A24 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     6A26 8336     
0075 6A28 06C4  14         swpb  tmp0
0076 6A2A D804  30         movb  tmp0,@vdpa
     6A2C 8C02     
0077 6A2E 06C4  14         swpb  tmp0
0078 6A30 D804  30         movb  tmp0,@vdpa
     6A32 8C02     
0079 6A34 04C4  14         clr   tmp0
0080 6A36 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     6A38 8800     
0081 6A3A 131E  14         jeq   sdexit                ; Yes. exit
0082 6A3C 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 6A3E A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     6A40 8336     
0084 6A42 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     6A44 8800     
     6A46 8400     
0085 6A48 0604  14         dec   tmp0
0086 6A4A 16FB  14         jne   vdpla2
0087 6A4C D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     6A4E 8800     
     6A50 831B     
0088 6A52 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     6A54 8336     
0089 6A56 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 6A58 C120  30 mmplay  mov   @wsdtmp,tmp0
     6A5A 8336     
0094 6A5C D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 6A5E 130C  14         jeq   sdexit                ; Yes, exit
0096 6A60 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 6A62 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     6A64 8336     
0098 6A66 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     6A68 8400     
0099 6A6A 0605  14         dec   tmp1
0100 6A6C 16FC  14         jne   mmpla2
0101 6A6E D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     6A70 831B     
0102 6A72 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     6A74 8336     
0103 6A76 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 6A78 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     6A7A 2004     
0108 6A7C 1607  14         jne   sdexi2                ; No, exit
0109 6A7E C820  42         mov   @wsdlst,@wsdtmp
     6A80 8334     
     6A82 8336     
0110 6A84 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     6A86 2012     
     6A88 831B     
0111 6A8A 045B  20 sdexi1  b     *r11                  ; Exit
0112 6A8C 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     6A8E FFF8     
0113 6A90 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 6A92 0649  14         dect  stack
0038 6A94 C64B  30         mov   r11,*stack            ; Push return address
0039 6A96 0649  14         dect  stack
0040 6A98 C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 6A9A 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     6A9C 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 6A9E 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 6AA0 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 6AA2 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 6AA4 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 6AA6 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 6AA8 E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     6AAA 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 6AAC 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 6AAE C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     6AB0 29C2     
     6AB2 83C6     
0074 6AB4 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     6AB6 29C4     
     6AB8 83FA     
0075 6ABA C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     6ABC 29C6     
     6ABE 83FE     
0076               
0077 6AC0 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 6AC2 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     6AC4 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 6AC6 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     6AC8 83E0     
0084               
0085 6ACA 06A0  28         bl    @kscan                ; Call KSCAN
     6ACC 000E     
0086 6ACE 02E0  18         lwpi  ws1                   ; Activate user workspace
     6AD0 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 6AD2 D120  30         movb  @>837c,tmp0           ; Get flag
     6AD4 837C     
0091 6AD6 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 6AD8 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 6ADA D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     6ADC 8375     
0097 6ADE 0984  32         srl   tmp0,8                ; / Move to LSB
0099 6AE0 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     6AE2 A028     
0103 6AE4 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     6AE6 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 6AE8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 6AEA C2F9  30         mov   *stack+,r11           ; Pop r11
0110 6AEC 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 6AEE 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 6AF0 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 6AF2 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 6AF4 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 6AF6 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     6AF8 8340     
0025 6AFA 04E0  26         clr   @waux1
     6AFC 833C     
0026 6AFE 04E0  26         clr   @waux2
     6B00 833E     
0027 6B02 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     6B04 833C     
0028 6B06 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 6B08 0205  20         li    tmp1,4                ; 4 nibbles
     6B0A 0004     
0033 6B0C C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 6B0E 0246  22         andi  tmp2,>000f            ; Only keep LSN
     6B10 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 6B12 0286  22         ci    tmp2,>000a
     6B14 000A     
0039 6B16 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 6B18 C21B  26         mov   *r11,tmp4
0045 6B1A 0988  32         srl   tmp4,8                ; Right justify
0046 6B1C 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     6B1E FFF6     
0047 6B20 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 6B22 C21B  26         mov   *r11,tmp4
0054 6B24 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     6B26 00FF     
0055               
0056 6B28 A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 6B2A 06C6  14         swpb  tmp2
0058 6B2C DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 6B2E 0944  24         srl   tmp0,4                ; Next nibble
0060 6B30 0605  14         dec   tmp1
0061 6B32 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 6B34 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     6B36 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 6B38 C160  30         mov   @waux3,tmp1           ; Get pointer
     6B3A 8340     
0067 6B3C 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 6B3E 0585  14         inc   tmp1                  ; Next byte, not word!
0069 6B40 C120  30         mov   @waux2,tmp0
     6B42 833E     
0070 6B44 06C4  14         swpb  tmp0
0071 6B46 DD44  32         movb  tmp0,*tmp1+
0072 6B48 06C4  14         swpb  tmp0
0073 6B4A DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 6B4C C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     6B4E 8340     
0078 6B50 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     6B52 2016     
0079 6B54 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 6B56 C120  30         mov   @waux1,tmp0
     6B58 833C     
0084 6B5A 06C4  14         swpb  tmp0
0085 6B5C DD44  32         movb  tmp0,*tmp1+
0086 6B5E 06C4  14         swpb  tmp0
0087 6B60 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 6B62 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     6B64 2020     
0092 6B66 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 6B68 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 6B6A 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     6B6C 7FFF     
0098 6B6E C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     6B70 8340     
0099 6B72 0460  28         b     @xutst0               ; Display string
     6B74 2420     
0100 6B76 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 6B78 C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     6B7A 832A     
0122 6B7C 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     6B7E 8000     
0123 6B80 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 6B82 0207  20 mknum   li    tmp3,5                ; Digit counter
     6B84 0005     
0020 6B86 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 6B88 C155  26         mov   *tmp1,tmp1            ; /
0022 6B8A C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 6B8C 0228  22         ai    tmp4,4                ; Get end of buffer
     6B8E 0004     
0024 6B90 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     6B92 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 6B94 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 6B96 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 6B98 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 6B9A B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 6B9C D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 6B9E C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 6BA0 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 6BA2 0607  14         dec   tmp3                  ; Decrease counter
0036 6BA4 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 6BA6 0207  20         li    tmp3,4                ; Check first 4 digits
     6BA8 0004     
0041 6BAA 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 6BAC C11B  26         mov   *r11,tmp0
0043 6BAE 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 6BB0 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 6BB2 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 6BB4 05CB  14 mknum3  inct  r11
0047 6BB6 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     6BB8 2020     
0048 6BBA 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 6BBC 045B  20         b     *r11                  ; Exit
0050 6BBE DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 6BC0 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 6BC2 13F8  14         jeq   mknum3                ; Yes, exit
0053 6BC4 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 6BC6 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     6BC8 7FFF     
0058 6BCA C10B  18         mov   r11,tmp0
0059 6BCC 0224  22         ai    tmp0,-4
     6BCE FFFC     
0060 6BD0 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 6BD2 0206  20         li    tmp2,>0500            ; String length = 5
     6BD4 0500     
0062 6BD6 0460  28         b     @xutstr               ; Display string
     6BD8 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 6BDA C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 6BDC C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 6BDE C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 6BE0 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 6BE2 0207  20         li    tmp3,5                ; Set counter
     6BE4 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 6BE6 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 6BE8 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 6BEA 0584  14         inc   tmp0                  ; Next character
0106 6BEC 0607  14         dec   tmp3                  ; Last digit reached ?
0107 6BEE 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 6BF0 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 6BF2 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 6BF4 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 6BF6 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 6BF8 DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 6BFA 0607  14         dec   tmp3                  ; Last character ?
0122 6BFC 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 6BFE 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 6C00 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     6C02 832A     
0141 6C04 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     6C06 8000     
0142 6C08 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 6C0A 0649  14         dect  stack
0023 6C0C C64B  30         mov   r11,*stack            ; Save return address
0024 6C0E 0649  14         dect  stack
0025 6C10 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6C12 0649  14         dect  stack
0027 6C14 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6C16 0649  14         dect  stack
0029 6C18 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6C1A 0649  14         dect  stack
0031 6C1C C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 6C1E C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 6C20 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 6C22 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 6C24 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 6C26 0649  14         dect  stack
0044 6C28 C64B  30         mov   r11,*stack            ; Save return address
0045 6C2A 0649  14         dect  stack
0046 6C2C C644  30         mov   tmp0,*stack           ; Push tmp0
0047 6C2E 0649  14         dect  stack
0048 6C30 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 6C32 0649  14         dect  stack
0050 6C34 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 6C36 0649  14         dect  stack
0052 6C38 C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 6C3A C1D4  26 !       mov   *tmp0,tmp3
0057 6C3C 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 6C3E 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     6C40 00FF     
0059 6C42 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 6C44 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 6C46 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 6C48 0584  14         inc   tmp0                  ; Next byte
0067 6C4A 0607  14         dec   tmp3                  ; Shorten string length
0068 6C4C 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 6C4E 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 6C50 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 6C52 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 6C54 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 6C56 C187  18         mov   tmp3,tmp2
0078 6C58 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 6C5A DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 6C5C 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     6C5E 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 6C60 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 6C62 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6C64 FFCE     
0090 6C66 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6C68 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 6C6A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 6C6C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 6C6E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 6C70 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 6C72 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 6C74 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 6C76 0649  14         dect  stack
0124 6C78 C64B  30         mov   r11,*stack            ; Save return address
0125 6C7A 05D9  26         inct  *stack                ; Skip "data P0"
0126 6C7C 05D9  26         inct  *stack                ; Skip "data P1"
0127 6C7E 0649  14         dect  stack
0128 6C80 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 6C82 0649  14         dect  stack
0130 6C84 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 6C86 0649  14         dect  stack
0132 6C88 C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 6C8A C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 6C8C C17B  30         mov   *r11+,tmp1            ; String termination character
0138 6C8E 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 6C90 0649  14         dect  stack
0144 6C92 C64B  30         mov   r11,*stack            ; Save return address
0145 6C94 0649  14         dect  stack
0146 6C96 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 6C98 0649  14         dect  stack
0148 6C9A C645  30         mov   tmp1,*stack           ; Push tmp1
0149 6C9C 0649  14         dect  stack
0150 6C9E C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 6CA0 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 6CA2 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 6CA4 0586  14         inc   tmp2
0161 6CA6 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 6CA8 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 6CAA 0286  22         ci    tmp2,255
     6CAC 00FF     
0167 6CAE 1505  14         jgt   string.getlenc.panic
0168 6CB0 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 6CB2 0606  14         dec   tmp2                  ; One time adjustment
0174 6CB4 C806  30         mov   tmp2,@waux1           ; Store length
     6CB6 833C     
0175 6CB8 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 6CBA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6CBC FFCE     
0181 6CBE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6CC0 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 6CC2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 6CC4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 6CC6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 6CC8 C2F9  30         mov   *stack+,r11           ; Pop r11
0190 6CCA 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 6CCC C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     6CCE F000     
0024 6CD0 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     6CD2 F002     
0025 6CD4 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     6CD6 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 6CD8 0200  20         li    r0,>8306              ; Scratchpad source address
     6CDA 8306     
0030 6CDC 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     6CDE F006     
0031 6CE0 0202  20         li    r2,62                 ; Loop counter
     6CE2 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 6CE4 CC70  46         mov   *r0+,*r1+
0037 6CE6 CC70  46         mov   *r0+,*r1+
0038 6CE8 0642  14         dect  r2
0039 6CEA 16FC  14         jne   cpu.scrpad.backup.copy
0040 6CEC C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     6CEE 83FE     
     6CF0 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 6CF2 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     6CF4 F000     
0046 6CF6 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     6CF8 F002     
0047 6CFA C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     6CFC F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 6CFE 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 6D00 0200  20         li    r0,cpu.scrpad.tgt
     6D02 F000     
0075 6D04 0201  20         li    r1,>8300
     6D06 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 6D08 CC70  46         mov   *r0+,*r1+
0081 6D0A CC70  46         mov   *r0+,*r1+
0082 6D0C 0281  22         ci    r1,>8400
     6D0E 8400     
0083 6D10 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 6D12 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 6D14 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 6D16 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 6D18 CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 6D1A CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 6D1C CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 6D1E CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 6D20 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 6D22 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 6D24 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 6D26 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     6D28 8310     
0055                                                   ;        as of register r8
0056 6D2A 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     6D2C 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 6D2E CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 6D30 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 6D32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 6D34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 6D36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 6D38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 6D3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 6D3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 6D3E 0606  14         dec   tmp2
0069 6D40 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 6D42 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 6D44 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     6D46 2C20     
0075                                                   ; R14=PC
0076 6D48 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 6D4A 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 6D4C 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     6D4E 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 6D50 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 6D52 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 6D54 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     6D56 8300     
0126 6D58 0206  20         li    tmp2,16               ; tmp2 = 256/16
     6D5A 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 6D5C CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 6D5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 6D60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 6D62 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 6D64 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 6D66 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 6D68 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 6D6A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 6D6C 0606  14         dec   tmp2
0139 6D6E 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 6D70 02E0  18         lwpi  >8300                 ; Activate copied workspace
     6D72 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 6D74 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 6D76 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 6D78 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 6D7A C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 6D7C C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     6D7E A428     
0064 6D80 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     6D82 201C     
0065 6D84 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     6D86 8356     
0066 6D88 C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 6D8A 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     6D8C FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 6D8E C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     6D90 A434     
0073                       ;---------------------------; Inline VSBR start
0074 6D92 06C0  14         swpb  r0                    ;
0075 6D94 D800  30         movb  r0,@vdpa              ; Send low byte
     6D96 8C02     
0076 6D98 06C0  14         swpb  r0                    ;
0077 6D9A D800  30         movb  r0,@vdpa              ; Send high byte
     6D9C 8C02     
0078 6D9E D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     6DA0 8800     
0079                       ;---------------------------; Inline VSBR end
0080 6DA2 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 6DA4 0704  14         seto  r4                    ; Init counter
0086 6DA6 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     6DA8 A420     
0087 6DAA 0580  14 !       inc   r0                    ; Point to next char of name
0088 6DAC 0584  14         inc   r4                    ; Increment char counter
0089 6DAE 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     6DB0 0007     
0090 6DB2 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 6DB4 80C4  18         c     r4,r3                 ; End of name?
0093 6DB6 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 6DB8 06C0  14         swpb  r0                    ;
0098 6DBA D800  30         movb  r0,@vdpa              ; Send low byte
     6DBC 8C02     
0099 6DBE 06C0  14         swpb  r0                    ;
0100 6DC0 D800  30         movb  r0,@vdpa              ; Send high byte
     6DC2 8C02     
0101 6DC4 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     6DC6 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 6DC8 DC81  32         movb  r1,*r2+               ; Move into buffer
0108 6DCA 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     6DCC 2DBA     
0109 6DCE 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 6DD0 C104  18         mov   r4,r4                 ; Check if length = 0
0115 6DD2 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 6DD4 04E0  26         clr   @>83d0
     6DD6 83D0     
0118 6DD8 C804  30         mov   r4,@>8354             ; Save name length for search (length
     6DDA 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 6DDC C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     6DDE A432     
0121               
0122 6DE0 0584  14         inc   r4                    ; Adjust for dot
0123 6DE2 A804  30         a     r4,@>8356             ; Point to position after name
     6DE4 8356     
0124 6DE6 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     6DE8 8356     
     6DEA A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 6DEC 02E0  18         lwpi  >83e0                 ; Use GPL WS
     6DEE 83E0     
0130 6DF0 04C1  14         clr   r1                    ; Version found of dsr
0131 6DF2 020C  20         li    r12,>0f00             ; Init cru address
     6DF4 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 6DF6 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 6DF8 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 6DFA 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 6DFC 022C  22         ai    r12,>0100             ; Next ROM to turn on
     6DFE 0100     
0145 6E00 04E0  26         clr   @>83d0                ; Clear in case we are done
     6E02 83D0     
0146 6E04 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     6E06 2000     
0147 6E08 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 6E0A C80C  30         mov   r12,@>83d0            ; Save address of next cru
     6E0C 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 6E0E 1D00  16         sbo   0                     ; Turn on ROM
0154 6E10 0202  20         li    r2,>4000              ; Start at beginning of ROM
     6E12 4000     
0155 6E14 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     6E16 2DB6     
0156 6E18 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 6E1A A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     6E1C A40A     
0166 6E1E 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 6E20 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     6E22 83D2     
0172                                                   ; subprogram
0173               
0174 6E24 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 6E26 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 6E28 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 6E2A C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     6E2C 83D2     
0183                                                   ; subprogram
0184               
0185 6E2E 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 6E30 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 6E32 04C5  14         clr   r5                    ; Remove any old stuff
0194 6E34 D160  30         movb  @>8355,r5             ; Get length as counter
     6E36 8355     
0195 6E38 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 6E3A 9C85  28         cb    r5,*r2+               ; See if length matches
0200 6E3C 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 6E3E 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 6E40 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     6E42 A420     
0206 6E44 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 6E46 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 6E48 0605  14         dec   r5                    ; Update loop counter
0211 6E4A 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 6E4C 0581  14         inc   r1                    ; Next version found
0217 6E4E C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     6E50 A42A     
0218 6E52 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     6E54 A42C     
0219 6E56 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     6E58 A430     
0220               
0221 6E5A 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     6E5C 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 6E5E 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     6E60 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 6E62 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 6E64 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 6E66 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 6E68 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     6E6A A400     
0236 6E6C C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 6E6E C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     6E70 A428     
0242                                                   ; (8 or >a)
0243 6E72 0281  26         ci    r1,8                  ; was it 8?
     6E74 0008     
0244 6E76 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 6E78 D060  38         movb  @>8350,r1             ; no, we have a data >a.
     6E7A 8350     
0246                                                   ; Get error byte from @>8350
0247 6E7C 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 6E7E 06C0  22         swpb  r0                    ;
0255 6E80 D800  34         movb  r0,@vdpa              ; send low byte
     6E82 8C02     
0256 6E84 06C0  22         swpb  r0                    ;
0257 6E86 D800  34         movb  r0,@vdpa              ; send high byte
     6E88 8C02     
0258 6E8A D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     6E8C 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 6E8E 09D1  50         srl   r1,13                 ; just keep error bits
0266 6E90 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 6E92 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 6E94 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 6E96 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     6E98 A400     
0278               dsrlnk.error.devicename_invalid:
0279 6E9A 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 6E9C 06C1  22         swpb  r1                    ; put error in hi byte
0282 6E9E D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 6EA0 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     6EA2 201C     
0284                                                   ; / to indicate error
0285 6EA4 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 6EA6 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 6EA8 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 6EAA 02E0  18         lwpi  >83e0                 ; Use GPL WS
     6EAC 83E0     
0319               
0320 6EAE 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     6EB0 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 6EB2 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     6EB4 A42A     
0325 6EB6 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 6EB8 C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 6EBA C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     6EBC 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 6EBE C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 6EC0 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     6EC2 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 6EC4 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     6EC6 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 6EC8 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 6ECA 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     6ECC 4000     
     6ECE 2DB6     
0340 6ED0 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 6ED2 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 6ED4 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 6ED6 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 6ED8 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     6EDA A400     
0358 6EDC C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     6EDE A434     
0359               
0360 6EE0 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 6EE2 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 6EE4 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 6EE6 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 6EE8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 6EEA C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 6EEC 0649  22         dect  stack
0053 6EEE C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 6EF0 0204  24         li    tmp0,dsrlnk.savcru
     6EF2 A42A     
0058 6EF4 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 6EF6 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 6EF8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 6EFA 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 6EFC 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     6EFE 37D7     
0066 6F00 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     6F02 8370     
0067                                                   ; / location
0068 6F04 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     6F06 A44C     
0069 6F08 04C5  22         clr   tmp1                  ; io.op.open
0070 6F0A 1024  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 6F0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 6F0E 0649  22         dect  stack
0098 6F10 C64B  38         mov   r11,*stack            ; Save return address
0099 6F12 0205  24         li    tmp1,io.op.close      ; io.op.close
     6F14 0001     
0100 6F16 101E  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 6F18 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 6F1A 0649  22         dect  stack
0126 6F1C C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 6F1E 0205  24         li    tmp1,io.op.read       ; io.op.read
     6F20 0002     
0129 6F22 1018  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 6F24 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 6F26 0649  22         dect  stack
0156 6F28 C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 6F2A C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 6F2C 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     6F2E 0005     
0160               
0161 6F30 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     6F32 A43E     
0162               
0163 6F34 06A0  36         bl    @xvputb               ; Write character count to PAB
     6F36 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 6F38 0205  24         li    tmp1,io.op.write      ; io.op.write
     6F3A 0003     
0168 6F3C 100B  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               ***************************************************************
0172               * file.load - RLoad binary file into VDP memory
0173               ***************************************************************
0174               *  bl   @file.load
0175               *       data P0
0176               *--------------------------------------------------------------
0177               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0178               *--------------------------------------------------------------
0179               *  bl   @xfile.load
0180               *
0181               *  R0 = Address of PAB in VDP RAM
0182               *--------------------------------------------------------------
0183               *  Output:
0184               *  tmp0     = Copy of VDP PAB byte 1 after operation
0185               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0186               *  tmp2 LSB = Copy of status register after operation
0187               ********|*****|*********************|**************************
0188               file.load:
0189 6F3E C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0190               *--------------------------------------------------------------
0191               * Initialisation
0192               *--------------------------------------------------------------
0193               xfile.load:
0194 6F40 0649  22         dect  stack
0195 6F42 C64B  38         mov   r11,*stack            ; Save return address
0196               
0197 6F44 0205  24         li    tmp1,io.op.load       ; io.op.load
     6F46 0005     
0198 6F48 1005  14         jmp   _file.record.fop      ; Do file operation
0199               
0200               
0201               file.record.seek:
0202 6F4A 1000  14         nop                         ; Not yet supported
0203               
0204               file.image.save:
0205 6F4C 1000  14         nop                         ; Not yet supported
0206               
0207               file.delete:
0208 6F4E 1000  14         nop                         ; Not yet supported
0209               
0210               file.rename:
0211 6F50 1000  14         nop                         ; Not yet supported
0212               
0213               file.status:
0214 6F52 1000  14         nop
0215               
0216               
0217               
0218               ***************************************************************
0219               * _file.record.fop - File operation
0220               ***************************************************************
0221               * Called internally via JMP/B by file operations
0222               *--------------------------------------------------------------
0223               *  Input:
0224               *  r0   = Address of PAB in VDP RAM
0225               *  r1   = File type/mode
0226               *  tmp1 = File operation opcode
0227               *
0228               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0229               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0230               *--------------------------------------------------------------
0231               *  Output:
0232               *  tmp0     = Copy of VDP PAB byte 1 after operation
0233               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0234               *  tmp2 LSB = Copy of status register after operation
0235               *--------------------------------------------------------------
0236               *  Register usage:
0237               *  r0, r1, tmp0, tmp1, tmp2
0238               *--------------------------------------------------------------
0239               *  Remarks
0240               *  Private, only to be called from inside fio_level3 module
0241               *  via jump or branch instruction.
0242               *
0243               *  Uses @waux1 for backup/restore of memory word @>8322
0244               ********|*****|*********************|**************************
0245               _file.record.fop:
0246                       ;------------------------------------------------------
0247                       ; Write to PAB required?
0248                       ;------------------------------------------------------
0249 6F54 C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     6F56 A436     
0250                       ;------------------------------------------------------
0251                       ; Set file opcode in VDP PAB
0252                       ;------------------------------------------------------
0253 6F58 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0254               
0255 6F5A A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     6F5C A44E     
0256                                                   ; >00 = Data buffer in VDP RAM
0257                                                   ; >40 = Data buffer in CPU RAM
0258               
0259 6F5E 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     6F60 22CC     
0260                                                   ; \ i  tmp0 = VDP target address
0261                                                   ; / i  tmp1 = Byte to write
0262                       ;------------------------------------------------------
0263                       ; Set file type/mode in VDP PAB
0264                       ;------------------------------------------------------
0265 6F62 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0266 6F64 0584  22         inc   tmp0                  ; Next byte in PAB
0267 6F66 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     6F68 A44C     
0268               
0269 6F6A 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     6F6C 22CC     
0270                                                   ; \ i  tmp0 = VDP target address
0271                                                   ; / i  tmp1 = Byte to write
0272                       ;------------------------------------------------------
0273                       ; Prepare for DSRLNK
0274                       ;------------------------------------------------------
0275 6F6E 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     6F70 0009     
0276 6F72 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     6F74 8356     
0277               *--------------------------------------------------------------
0278               * Call DSRLINK for doing file operation
0279               *--------------------------------------------------------------
0280 6F76 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     6F78 8322     
     6F7A 833C     
0281               
0282 6F7C C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     6F7E A42A     
0283 6F80 1504  14         jgt   _file.record.fop.optimized
0284                                                   ; Optimized version
0285               
0286                       ;------------------------------------------------------
0287                       ; First IO call. Call standard DSRLNK
0288                       ;------------------------------------------------------
0289 6F82 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     6F84 2C4A     
0290 6F86 0008                   data >8               ; \ i  p0 = >8 (DSR)
0291                                                   ; / o  r0 = Copy of VDP PAB byte 1
0292 6F88 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0293               
0294                       ;------------------------------------------------------
0295                       ; Recurring IO call. Call optimized DSRLNK
0296                       ;------------------------------------------------------
0297               _file.record.fop.optimized:
0298 6F8A 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     6F8C 2D7A     
0299               
0300               *--------------------------------------------------------------
0301               * Return PAB details to caller
0302               *--------------------------------------------------------------
0303               _file.record.fop.pab:
0304 6F8E 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0305                                                   ; Upon DSRLNK return status register EQ bit
0306                                                   ; 1 = No file error
0307                                                   ; 0 = File error occured
0308               
0309 6F90 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     6F92 833C     
     6F94 8322     
0310               *--------------------------------------------------------------
0311               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0312               *--------------------------------------------------------------
0313 6F96 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     6F98 A436     
0314 6F9A 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     6F9C 0005     
0315 6F9E 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     6FA0 22E4     
0316 6FA2 C144  30         mov   tmp0,tmp1             ; Move to destination
0317               *--------------------------------------------------------------
0318               * Get PAB byte 1 from VDP ram into tmp0 (status)
0319               *--------------------------------------------------------------
0320 6FA4 C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0321                                                   ; as returned by DSRLNK
0322               *--------------------------------------------------------------
0323               * Exit
0324               *--------------------------------------------------------------
0325               ; If an error occured during the IO operation, then the
0326               ; equal bit in the saved status register (=tmp2) is set to 1.
0327               ;
0328               ; Upon return from this IO call you should basically test with:
0329               ;       coc   @wbit2,tmp2           ; Equal bit set?
0330               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0331               ;
0332               ; Then look for further details in the copy of VDP PAB byte 1
0333               ; in register tmp0, bits 13-15
0334               ;
0335               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0336               ;                                   ; calls, skip for type >A subprograms!)
0337               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0338               ;       jeq   my_error_handler
0339               *--------------------------------------------------------------
0340               _file.record.fop.exit:
0341 6FA6 C2F9  46         mov   *stack+,r11           ; Pop R11
0342 6FA8 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 6FAA C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 6FAC 0649  22         dect  stack
0038 6FAE C64B  38         mov   r11,*stack            ; Save return address
0039 6FB0 0649  22         dect  stack
0040 6FB2 C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 6FB4 C004  30         mov   tmp0,r0               ; Get Pointer
0045 6FB6 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     6FB8 0014     
0046               fg99.send.loop:
0047 6FBA 04E0  34         clr   @>6000                ; Signal new byte
     6FBC 6000     
0048 6FBE 0201  24         li    r1,>0038              ; >7000 >> 9
     6FC0 0038     
0049 6FC2 D070  44         movb  *r0+,r1
0050 6FC4 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 6FC6 04D1  30         clr   *r1                   ; Send byte
0053 6FC8 0602  22         dec   r2                    ; Prepare for next iteration
0054 6FCA 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 6FCC 04E0  34         clr   @>6000                ; Done sending filename
     6FCE 6000     
0057 6FD0 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 6FD2 0200  24         li    r0,>6000              ; check >6000->6200
     6FD4 6000     
0063 6FD6 0202  24         li    r2,>100
     6FD8 0100     
0064 6FDA C070  46 !       mov   *r0+, r1
0065 6FDC 1603  14         jne   fg99.exit             ; Done loading, exit
0066 6FDE 0602  22         dec   r2
0067 6FE0 16FC  14         jne   -!
0068 6FE2 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 6FE4 C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 6FE6 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 6FE8 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 6FEA 0300  22 tmgr    limi  0                     ; No interrupt processing
     6FEC 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 6FEE D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     6FF0 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 6FF2 2360  32         coc   @wbit2,r13            ; C flag on ?
     6FF4 201C     
0029 6FF6 1602  14         jne   tmgr1a                ; No, so move on
0030 6FF8 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     6FFA 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 6FFC 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     6FFE 2020     
0035 7000 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 7002 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     7004 2010     
0048 7006 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 7008 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     700A 200E     
0050 700C 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 700E 0460  28         b     @kthread              ; Run kernel thread
     7010 2F5C     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 7012 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     7014 2014     
0056 7016 13EB  14         jeq   tmgr1
0057 7018 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     701A 2012     
0058 701C 16E8  14         jne   tmgr1
0059 701E C120  38         mov   @wtiusr,tmp0
     7020 832E     
0060 7022 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 7024 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     7026 2F5A     
0065 7028 C10A  30         mov   r10,tmp0
0066 702A 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     702C 00FF     
0067 702E 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     7030 201C     
0068 7032 1303  14         jeq   tmgr5
0069 7034 0284  26         ci    tmp0,60               ; 1 second reached ?
     7036 003C     
0070 7038 1002  14         jmp   tmgr6
0071 703A 0284  26 tmgr5   ci    tmp0,50
     703C 0032     
0072 703E 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 7040 1001  14         jmp   tmgr8
0074 7042 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 7044 C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     7046 832C     
0079 7048 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     704A FF00     
0080 704C C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 704E 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 7050 05C4  22         inct  tmp0                  ; Second word of slot data
0086 7052 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 7054 C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 7056 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     7058 830C     
     705A 830D     
0089 705C 1608  14         jne   tmgr10                ; No, get next slot
0090 705E 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     7060 FF00     
0091 7062 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 7064 C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     7066 8330     
0096 7068 0697  32         bl    *tmp3                 ; Call routine in slot
0097 706A C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     706C 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 706E 058A  22 tmgr10  inc   r10                   ; Next slot
0102 7070 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     7072 8315     
     7074 8314     
0103 7076 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 7078 05C4  22         inct  tmp0                  ; Offset for next slot
0105 707A 10E8  14         jmp   tmgr9                 ; Process next slot
0106 707C 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 707E 10F7  14         jmp   tmgr10                ; Process next slot
0108 7080 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     7082 FF00     
0109 7084 10B4  14         jmp   tmgr1
0110 7086 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 7088 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     708A 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 708C 20A0  32         coc   @wbit13,config        ; Sound player on ?
     708E 2006     
0023 7090 1602  14         jne   kthread_kb
0024 7092 06A0  36         bl    @sdpla1               ; Run sound player
     7094 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 7096 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     7098 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 709A 0460  28         b     @tmgr3                ; Exit
     709C 2EE6     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 709E C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     70A0 832E     
0018 70A2 E0A0  42         soc   @wbit7,config         ; Enable user hook
     70A4 2012     
0019 70A6 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EC2     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 70A8 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     70AA 832E     
0029 70AC 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     70AE FEFF     
0030 70B0 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 70B2 C13B  46 mkslot  mov   *r11+,tmp0
0018 70B4 C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 70B6 C184  30         mov   tmp0,tmp2
0023 70B8 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 70BA A1A0  38         a     @wtitab,tmp2          ; Add table base
     70BC 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 70BE CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 70C0 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 70C2 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 70C4 881B  46         c     *r11,@w$ffff          ; End of list ?
     70C6 2022     
0035 70C8 1301  14         jeq   mkslo1                ; Yes, exit
0036 70CA 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 70CC 05CB  22 mkslo1  inct  r11
0041 70CE 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 70D0 C13B  46 clslot  mov   *r11+,tmp0
0053 70D2 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 70D4 A120  38         a     @wtitab,tmp0          ; Add table base
     70D6 832C     
0055 70D8 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 70DA 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 70DC 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 70DE C13B  46 rsslot  mov   *r11+,tmp0
0069 70E0 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 70E2 A120  38         a     @wtitab,tmp0          ; Add table base
     70E4 832C     
0071 70E6 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 70E8 C154  38         mov   *tmp0,tmp1
0073 70EA 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     70EC FF00     
0074 70EE C505  38         mov   tmp1,*tmp0
0075 70F0 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 70F2 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     70F4 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 70F6 0300  22 runli1  limi  0                     ; Turn off interrupts
     70F8 0000     
0288 70FA 02E0  18         lwpi  ws1                   ; Activate workspace 1
     70FC 8300     
0289 70FE C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     7100 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 7102 0202  20 runli2  li    r2,>8308
     7104 8308     
0294 7106 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 7108 0282  22         ci    r2,>8400
     710A 8400     
0296 710C 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 710E 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     7110 FFFF     
0301 7112 1602  14         jne   runli4                ; No, continue
0302 7114 0420  42         blwp  @0                    ; Yes, bye bye
     7116 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 7118 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     711A 833C     
0307 711C 04C1  14         clr   r1                    ; Reset counter
0308 711E 0202  20         li    r2,10                 ; We test 10 times
     7120 000A     
0309 7122 C0E0  30 runli5  mov   @vdps,r3
     7124 8802     
0310 7126 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     7128 2020     
0311 712A 1302  14         jeq   runli6
0312 712C 0581  14         inc   r1                    ; Increase counter
0313 712E 10F9  14         jmp   runli5
0314 7130 0602  14 runli6  dec   r2                    ; Next test
0315 7132 16F7  14         jne   runli5
0316 7134 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     7136 1250     
0317 7138 1202  14         jle   runli7                ; No, so it must be NTSC
0318 713A 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     713C 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 713E 06A0  32 runli7  bl    @loadmc
     7140 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 7142 04C1  14 runli9  clr   r1
0327 7144 04C2  14         clr   r2
0328 7146 04C3  14         clr   r3
0329 7148 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     714A A900     
0330 714C 020F  20         li    r15,vdpw              ; Set VDP write address
     714E 8C00     
0332 7150 06A0  32         bl    @mute                 ; Mute sound generators
     7152 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 7154 0280  22         ci    r0,>4a4a              ; Crash flag set?
     7156 4A4A     
0339 7158 1605  14         jne   runlia
0340 715A 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     715C 228E     
0341 715E 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     7160 0000     
     7162 3000     
0346 7164 06A0  32 runlia  bl    @filv
     7166 228E     
0347 7168 0FC0             data  pctadr,spfclr,16      ; Load color table
     716A 00F4     
     716C 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 716E 06A0  32         bl    @f18unl               ; Unlock the F18A
     7170 278A     
0355 7172 06A0  32         bl    @f18chk               ; Check if F18A is there \
     7174 27B4     
0356 7176 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     7178 27B4     
0357 717A 06A0  32         bl    @f18chk               ; Check if F18A is there /
     717C 27B4     
0358 717E 06A0  32         bl    @f18lck               ; Lock the F18A again
     7180 27A0     
0359               
0360 7182 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     7184 2332     
0361 7186 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 7188 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     718A 22F8     
0375 718C 7F50             data  spvmod                ; Equate selected video mode table
0376 718E 0204  20         li    tmp0,spfont           ; Get font option
     7190 000C     
0377 7192 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 7194 1304  14         jeq   runlid                ; Yes, skip it
0379 7196 06A0  32         bl    @ldfnt
     7198 2360     
0380 719A 1900             data  fntadr,spfont         ; Load specified font
     719C 000C     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 719E 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     71A0 4A4A     
0385 71A2 1602  14         jne   runlie                ; No, continue
0386 71A4 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     71A6 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 71A8 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     71AA 0040     
0391 71AC 0460  28         b     @main                 ; Give control to main program
     71AE 3E14     
                   < stevie_b0.asm
0142                       copy  "ram.resident.asm"    ; Resident modules relocated to RAM
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 71B0 0649  14         dect  stack
0029 71B2 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 71B4 0649  14         dect  stack
0031 71B6 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 71B8 0649  14         dect  stack
0033 71BA C646  30         mov   tmp2,*stack           ; Push tmp2
0034 71BC 0649  14         dect  stack
0035 71BE C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 71C0 C13B  30         mov   *r11+,tmp0            ; P0
0040 71C2 C17B  30         mov   *r11+,tmp1            ; P1
0041 71C4 C1BB  30         mov   *r11+,tmp2            ; P2
0042 71C6 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 71C8 0649  14         dect  stack
0048 71CA C644  30         mov   tmp0,*stack           ; Push tmp0
0049 71CC 0649  14         dect  stack
0050 71CE C645  30         mov   tmp1,*stack           ; Push tmp1
0051 71D0 0649  14         dect  stack
0052 71D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0053 71D4 0649  14         dect  stack
0054 71D6 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 71D8 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     71DA 6000     
0060 71DC 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 71DE C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     71E0 A228     
0064 71E2 0647  14         dect  tmp3
0065 71E4 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 71E6 0647  14         dect  tmp3
0067 71E8 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 71EA C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     71EC A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 71EE 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 71F0 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 71F2 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 71F4 0224  22         ai    tmp0,>0800
     71F6 0800     
0086 71F8 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 71FA 0285  22         ci    tmp1,>ffff
     71FC FFFF     
0095 71FE 1602  14         jne   !
0096 7200 C160  34         mov   @trmpvector,tmp1
     7202 A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 7204 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 7206 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 7208 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 720A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     720C FFCE     
0111 720E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7210 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 7212 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 7214 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     7216 A228     
0122 7218 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 721A 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 721C 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 721E C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 7220 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 7222 028B  22         ci    r11,>6000
     7224 6000     
0139 7226 1104  14         jlt   rom.farjump.assert.lowmem
0140 7228 028B  22         ci    r11,>7fff
     722A 7FFF     
0141 722C 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 722E 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 7230 028B  22         ci    r11,>2000
     7232 2000     
0148 7234 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 7236 028B  22         ci    r11,>3fff
     7238 3FFF     
0150 723A 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 723C C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     723E A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 7240 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 7242 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 7244 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 7246 0225  22         ai    tmp1,>0800
     7248 0800     
0171 724A 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 724C 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 724E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7250 FFCE     
0178 7252 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7254 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 7256 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 7258 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 725A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 725C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 725E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 7260 0649  14         dect  stack
0021 7262 C64B  30         mov   r11,*stack            ; Save return address
0022 7264 0649  14         dect  stack
0023 7266 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 7268 0649  14         dect  stack
0025 726A C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 726C 0204  20         li    tmp0,fb.top
     726E D000     
0030 7270 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     7272 A300     
0031 7274 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     7276 A304     
0032 7278 04E0  34         clr   @fb.row               ; Current row=0
     727A A306     
0033 727C 04E0  34         clr   @fb.column            ; Current column=0
     727E A30C     
0034               
0035 7280 0204  20         li    tmp0,colrow
     7282 0050     
0036 7284 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     7286 A30E     
0037 7288 04E0  34         clr   @fb.vwco              ; Set view window column offset
     728A A310     
0038               
0039 728C 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     728E 0016     
0040 7290 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     7292 A31E     
0041               
0042 7294 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     7296 31D0     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 7298 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     729A A224     
0048 729C 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     729E A312     
0049 72A0 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     72A2 A318     
0050 72A4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     72A6 A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 72A8 06A0  32         bl    @film
     72AA 2236     
0055 72AC D000             data  fb.top,>00,fb.size    ; Clear it all the way
     72AE 0000     
     72B0 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 72B2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 72B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 72B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 72B8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 72BA 0649  14         dect  stack
0025 72BC C64B  30         mov   r11,*stack            ; Save return address
0026 72BE 0649  14         dect  stack
0027 72C0 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 72C2 C120  34         mov   @parm1,tmp0
     72C4 A006     
0032 72C6 A120  34         a     @fb.topline,tmp0
     72C8 A304     
0033 72CA C804  38         mov   tmp0,@outparm1
     72CC A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 72CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 72D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 72D2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 72D4 0649  14         dect  stack
0028 72D6 C64B  30         mov   r11,*stack            ; Save return address
0029 72D8 0649  14         dect  stack
0030 72DA C644  30         mov   tmp0,*stack           ; Push tmp0
0031 72DC 0649  14         dect  stack
0032 72DE C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 72E0 C120  34         mov   @fb.row,tmp0
     72E2 A306     
0037 72E4 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     72E6 A30E     
0038 72E8 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     72EA A30C     
0039 72EC A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     72EE A300     
0040 72F0 C805  38         mov   tmp1,@fb.current
     72F2 A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 72F4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 72F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 72F8 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 72FA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 72FC 0649  14         dect  stack
0026 72FE C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 7300 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     7302 A31E     
     7304 A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 7306 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     7308 A210     
0037 730A 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 730C 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     730E A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 7310 8820  50         c     @edb.special.file,@const.0
     7312 A522     
     7314 2000     
0044 7316 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 7318 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     731A A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 731C 0760  38         abs   @tv.error.visible     ; Error area visible?
     731E A22A     
0051 7320 1303  14         jeq   fb.calc.scrrows.exit
0052 7322 6820  54         s     @tv.error.rows,@fb.scrrows
     7324 A22C     
     7326 A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 7328 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 732A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 732C 0649  14         dect  stack
0052 732E C64B  30         mov   r11,*stack            ; Save return address
0053 7330 0649  14         dect  stack
0054 7332 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 7334 0204  20         li    tmp0,idx.top
     7336 B000     
0059 7338 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     733A A502     
0060               
0061 733C C120  34         mov   @tv.sams.b000,tmp0
     733E A206     
0062 7340 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     7342 A600     
0063 7344 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     7346 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 7348 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     734A 0004     
0068 734C C804  38         mov   tmp0,@idx.sams.hipage ; /
     734E A604     
0069               
0070 7350 06A0  32         bl    @_idx.sams.mapcolumn.on
     7352 3242     
0071                                                   ; Index in continuous memory region
0072               
0073 7354 06A0  32         bl    @film
     7356 2236     
0074 7358 B000                   data idx.top,>00,idx.size * 5
     735A 0000     
     735C 5000     
0075                                                   ; Clear index
0076               
0077 735E 06A0  32         bl    @_idx.sams.mapcolumn.off
     7360 3276     
0078                                                   ; Restore memory window layout
0079               
0080 7362 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     7364 A602     
     7366 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 7368 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 736A C2F9  30         mov   *stack+,r11           ; Pop r11
0088 736C 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 736E 0649  14         dect  stack
0102 7370 C64B  30         mov   r11,*stack            ; Push return address
0103 7372 0649  14         dect  stack
0104 7374 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 7376 0649  14         dect  stack
0106 7378 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 737A 0649  14         dect  stack
0108 737C C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 737E C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     7380 A602     
0113 7382 0205  20         li    tmp1,idx.top
     7384 B000     
0114 7386 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     7388 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 738A 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     738C 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 738E 0584  14         inc   tmp0                  ; Next SAMS index page
0123 7390 0225  22         ai    tmp1,>1000            ; Next memory region
     7392 1000     
0124 7394 0606  14         dec   tmp2                  ; Update loop counter
0125 7396 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 7398 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 739A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 739C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 739E C2F9  30         mov   *stack+,r11           ; Pop return address
0134 73A0 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 73A2 0649  14         dect  stack
0151 73A4 C64B  30         mov   r11,*stack            ; Push return address
0152 73A6 0649  14         dect  stack
0153 73A8 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 73AA 0649  14         dect  stack
0155 73AC C645  30         mov   tmp1,*stack           ; Push tmp1
0156 73AE 0649  14         dect  stack
0157 73B0 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 73B2 0649  14         dect  stack
0159 73B4 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 73B6 0205  20         li    tmp1,idx.top
     73B8 B000     
0164 73BA 0206  20         li    tmp2,5                ; Always 5 pages
     73BC 0005     
0165 73BE 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     73C0 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 73C2 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 73C4 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     73C6 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 73C8 0225  22         ai    tmp1,>1000            ; Next memory region
     73CA 1000     
0176 73CC 0606  14         dec   tmp2                  ; Update loop counter
0177 73CE 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 73D0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 73D2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 73D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 73D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 73D8 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 73DA 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 73DC 0649  14         dect  stack
0212 73DE C64B  30         mov   r11,*stack            ; Save return address
0213 73E0 0649  14         dect  stack
0214 73E2 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 73E4 0649  14         dect  stack
0216 73E6 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 73E8 0649  14         dect  stack
0218 73EA C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 73EC C184  18         mov   tmp0,tmp2             ; Line number
0223 73EE 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 73F0 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     73F2 0800     
0225               
0226 73F4 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 73F6 0A16  18         sla   tmp2,1                ; line number * 2
0231 73F8 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     73FA A018     
0232               
0233 73FC A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     73FE A602     
0234 7400 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     7402 A600     
0235               
0236 7404 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 7406 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     7408 A600     
0242 740A C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     740C A206     
0243 740E C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 7410 0205  20         li    tmp1,>b000            ; Memory window for index page
     7412 B000     
0246               
0247 7414 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     7416 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 7418 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     741A A604     
0254 741C 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 741E C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     7420 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 7422 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 7424 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 7426 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 7428 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 742A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 742C 0649  14         dect  stack
0023 742E C64B  30         mov   r11,*stack            ; Save return address
0024 7430 0649  14         dect  stack
0025 7432 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 7434 0204  20         li    tmp0,edb.top          ; \
     7436 C000     
0030 7438 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     743A A500     
0031 743C C804  38         mov   tmp0,@edb.next_free.ptr
     743E A508     
0032                                                   ; Set pointer to next free line
0033               
0034 7440 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     7442 A50A     
0035               
0036 7444 0204  20         li    tmp0,1
     7446 0001     
0037 7448 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     744A A504     
0038               
0039 744C 0720  34         seto  @edb.block.m1         ; Reset block start line
     744E A50E     
0040 7450 0720  34         seto  @edb.block.m2         ; Reset block end line
     7452 A510     
0041               
0042 7454 C820  54         mov   @tv.lineterm,@edb.lineterm
     7456 A236     
     7458 A524     
0043                                                   ; Set line termination char from default
0044               
0045 745A 0204  20         li    tmp0,txt.newfile      ; "New file"
     745C 3BA8     
0046 745E C804  38         mov   tmp0,@edb.filename.ptr
     7460 A514     
0047               
0048 7462 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     7464 A440     
0049 7466 04E0  34         clr   @fh.kilobytes.prev    ; /
     7468 A45C     
0050               
0051 746A 0204  20         li    tmp0,txt.filetype.none
     746C 3CF8     
0052 746E C804  38         mov   tmp0,@edb.filetype.ptr
     7470 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 7472 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 7474 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 7476 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 7478 0649  14         dect  stack
0023 747A C64B  30         mov   r11,*stack            ; Save return address
0024 747C 0649  14         dect  stack
0025 747E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 7480 0649  14         dect  stack
0027 7482 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 7484 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     7486 EF00     
0032 7488 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     748A A700     
0033               
0034 748C 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     748E A702     
0035 7490 0204  20         li    tmp0,6
     7492 0006     
0036 7494 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     7496 A706     
0037 7498 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     749A A708     
0038               
0039 749C 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     749E A718     
0040 74A0 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     74A2 A71A     
0041 74A4 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     74A6 A72C     
0042 74A8 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     74AA A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 74AC 0204  20         li    tmp0,pane.botrow      ; \
     74AE 0017     
0047 74B0 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     74B2 A706     
0048 74B4 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     74B6 833A     
0049 74B8 C105  18         mov   tmp1,tmp0             ; | Get result
0050 74BA 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     74BC 0980     
0051 74BE C804  38         mov   tmp0,@cmdb.vdptop     ; /
     74C0 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 74C2 06A0  32         bl    @film
     74C4 2236     
0056 74C6 EF00                   data  cmdb.top,>00,cmdb.size
     74C8 0000     
     74CA 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 74CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 74CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 74D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 74D2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 74D4 0649  14         dect  stack
0023 74D6 C64B  30         mov   r11,*stack            ; Save return address
0024 74D8 0649  14         dect  stack
0025 74DA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 74DC 0649  14         dect  stack
0027 74DE C645  30         mov   tmp1,*stack           ; Push tmp1
0028 74E0 0649  14         dect  stack
0029 74E2 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 74E4 04E0  34         clr   @tv.error.visible     ; Set to hidden
     74E6 A22A     
0034 74E8 0204  20         li    tmp0,3
     74EA 0003     
0035 74EC C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     74EE A22C     
0036               
0037 74F0 06A0  32         bl    @film
     74F2 2236     
0038 74F4 A238                   data tv.error.msg,0,160
     74F6 0000     
     74F8 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 74FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 74FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 74FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 7500 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 7502 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 7504 0649  14         dect  stack
0023 7506 C64B  30         mov   r11,*stack            ; Save return address
0024 7508 0649  14         dect  stack
0025 750A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 750C 0649  14         dect  stack
0027 750E C645  30         mov   tmp1,*stack           ; Push tmp1
0028 7510 0649  14         dect  stack
0029 7512 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 7514 0204  20         li    tmp0,1                ; \ Set default color scheme
     7516 0001     
0034 7518 C804  38         mov   tmp0,@tv.colorscheme  ; /
     751A A212     
0035               
0036 751C 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     751E A226     
0037 7520 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     7522 200C     
0038               
0039 7524 0204  20         li    tmp0,fj.bottom
     7526 B000     
0040 7528 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     752A A228     
0041               
0042 752C 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     752E A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 7530 06A0  32         bl    @cpym2m
     7532 253A     
0047 7534 3DC2                   data def.printer.fname,tv.printer.fname,7
     7536 DE00     
     7538 0007     
0048               
0049 753A 06A0  32         bl    @cpym2m
     753C 253A     
0050 753E 3DC9                   data def.clip.fname.a,tv.clip.fname,10
     7540 DE50     
     7542 000A     
0051               
0052 7544 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     7546 A50C     
0053               
0054 7548 0204  20         li    tmp0,13               ; \
     754A 000D     
0055 754C C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     754E A236     
0056                                                   ; / LSB = 13 Carriage return
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               tv.init.exit:
0061 7550 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 7552 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 7554 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 7556 C2F9  30         mov   *stack+,r11           ; Pop R11
0065 7558 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 755A 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     755C 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 755E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7560 3084     
0028 7562 600E                   data bank7.rom        ; | i  p0 = bank address
0029 7564 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 7566 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 7568 0649  14         dect  stack
0025 756A C64B  30         mov   r11,*stack            ; Push return address
0026 756C 0649  14         dect  stack
0027 756E C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7570 0649  14         dect  stack
0029 7572 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 7574 0649  14         dect  stack
0031 7576 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 7578 0649  14         dect  stack
0033 757A C647  30         mov   tmp3,*stack           ; Push tmp3
0034 757C 0649  14         dect  stack
0035 757E C640  30         mov   r0,*stack             ; Push r0
0036 7580 0649  14         dect  stack
0037 7582 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 7584 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     7586 A006     
0042 7588 04C5  14         clr   tmp1                  ; Termination character >00
0043 758A 04E0  34         clr   @outparm1             ; Reset output parameters
     758C A018     
0044 758E 04E0  34         clr   @outparm2             ; Reset output parameters
     7590 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 7592 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     7594 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 7596 C1A0  30         mov   @waux1,tmp2           ; Get string length
     7598 833C     
0056 759A 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 759C 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     759E 0005     
0058 75A0 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 75A2 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     75A4 A006     
0063               
0064 75A6 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 75A8 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     75AA FFF6     
0066 75AC 0746  18         abs   tmp2                  ; /
0067               
0068 75AE 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 75B0 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 75B2 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 75B4 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 75B6 0285  22         ci    tmp1,32               ; Blank ?
     75B8 0020     
0080 75BA 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 75BC 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     75BE FFD0     
0085 75C0 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 75C2 0285  22         ci    tmp1,9
     75C4 0009     
0087 75C6 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 75C8 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     75CA 34CA     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 75CC 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 75CE A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 75D0 05C6  14         inct  tmp2                  ; Update loop counter
0102 75D2 0286  22         ci    tmp2,8                ; Last digit done?
     75D4 0008     
0103 75D6 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 75D8 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 75DA 04E0  34         clr   @outparm1             ; Empty uint16
     75DC A018     
0110 75DE 0720  34         seto  @outparm2             ; Invalid input string
     75E0 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 75E2 C807  38         mov   tmp3,@outparm1
     75E4 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 75E6 C079  30         mov   *stack+,r1            ; Pop r1
0121 75E8 C039  30         mov   *stack+,r0            ; Pop r0
0122 75EA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 75EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 75EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 75F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 75F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 75F4 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 75F6 2710             data  10000,1000,100,10,1
     75F8 03E8     
     75FA 0064     
     75FC 000A     
     75FE 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 7600 0649  14         dect  stack
0022 7602 C64B  30         mov   r11,*stack            ; Save return address
0023 7604 0649  14         dect  stack
0024 7606 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 7608 06A0  32         bl    @mknum                ; Convert unsigned number to string
     760A 2A56     
0029 760C A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 760E A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 7610 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 7611   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 7612 0204  20         li    tmp0,uint16.unpacked
     7614 A02C     
0035 7616 04F4  30         clr   *tmp0+                ; Clear string 01
0036 7618 04F4  30         clr   *tmp0+                ; Clear string 23
0037 761A 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 761C 06A0  32         bl    @trimnum              ; Trim unsigned number string
     761E 2AAE     
0040 7620 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 7622 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 7624 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 7626 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 7628 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 762A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 762C 0649  14         dect  stack
0031 762E C64B  30         mov   r11,*stack            ; Push return address
0032 7630 0649  14         dect  stack
0033 7632 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 7634 0649  14         dect  stack
0035 7636 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 7638 0649  14         dect  stack
0037 763A C646  30         mov   tmp2,*stack           ; Push tmp2
0038 763C 0649  14         dect  stack
0039 763E C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 7640 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     7642 A006     
0044 7644 D194  26         movb  *tmp0,tmp2            ; /
0045 7646 0986  32         srl   tmp2,8                ; Right align
0046 7648 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 764A 8806  34         c     tmp2,@parm2           ; String length > requested length?
     764C A008     
0049 764E 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 7650 C120  34         mov   @parm1,tmp0           ; Get source address
     7652 A006     
0054 7654 C160  34         mov   @parm4,tmp1           ; Get destination address
     7656 A00C     
0055 7658 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 765A 0649  14         dect  stack
0058 765C C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 765E 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     7660 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 7662 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 7664 C120  34         mov   @parm2,tmp0           ; Get requested length
     7666 A008     
0070 7668 0A84  32         sla   tmp0,8                ; Left align
0071 766A C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     766C A00C     
0072 766E D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 7670 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 7672 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 7674 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     7676 A008     
0079 7678 6187  18         s     tmp3,tmp2             ; |
0080 767A 0586  14         inc   tmp2                  ; /
0081               
0082 767C C120  34         mov   @parm3,tmp0           ; Get byte to padd
     767E A00A     
0083 7680 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 7682 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 7684 0606  14         dec   tmp2                  ; Update loop counter
0090 7686 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 7688 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     768A A00C     
     768C A018     
0093 768E 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 7690 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7692 FFCE     
0099 7694 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7696 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 7698 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 769A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 769C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 769E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 76A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0109 76A2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 76A4 0649  14         dect  stack
0023 76A6 C64B  30         mov   r11,*stack            ; Save return address
0024 76A8 0649  14         dect  stack
0025 76AA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 76AC 0649  14         dect  stack
0027 76AE C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 76B0 C120  34         mov   @parm1,tmp0           ; Get line number
     76B2 A006     
0032 76B4 C160  34         mov   @parm2,tmp1           ; Get pointer
     76B6 A008     
0033 76B8 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 76BA 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     76BC 0FFF     
0039 76BE 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 76C0 06E0  34         swpb  @parm3
     76C2 A00A     
0044 76C4 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     76C6 A00A     
0045 76C8 06E0  34         swpb  @parm3                ; \ Restore original order again,
     76CA A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 76CC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     76CE 32B0     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 76D0 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     76D2 A018     
0056 76D4 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     76D6 B000     
0057 76D8 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     76DA A018     
0058 76DC 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 76DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     76E0 32B0     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 76E2 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     76E4 A018     
0068 76E6 04E4  34         clr   @idx.top(tmp0)        ; /
     76E8 B000     
0069 76EA C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     76EC A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 76EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 76F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 76F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 76F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 76F6 0649  14         dect  stack
0022 76F8 C64B  30         mov   r11,*stack            ; Save return address
0023 76FA 0649  14         dect  stack
0024 76FC C644  30         mov   tmp0,*stack           ; Push tmp0
0025 76FE 0649  14         dect  stack
0026 7700 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 7702 0649  14         dect  stack
0028 7704 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 7706 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     7708 A006     
0033               
0034 770A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     770C 32B0     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 770E C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     7710 A018     
0039 7712 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     7714 B000     
0040               
0041 7716 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 7718 C185  18         mov   tmp1,tmp2             ; \
0047 771A 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 771C 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     771E 00FF     
0052 7720 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 7722 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     7724 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 7726 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     7728 A018     
0059 772A C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     772C A01A     
0060 772E 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 7730 04E0  34         clr   @outparm1
     7732 A018     
0066 7734 04E0  34         clr   @outparm2
     7736 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 7738 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 773A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 773C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 773E C2F9  30         mov   *stack+,r11           ; Pop r11
0075 7740 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 7742 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     7744 B000     
0018 7746 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 7748 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 774A CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 774C 0606  14         dec   tmp2                  ; tmp2--
0026 774E 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 7750 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 7752 0649  14         dect  stack
0047 7754 C64B  30         mov   r11,*stack            ; Save return address
0048 7756 0649  14         dect  stack
0049 7758 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 775A 0649  14         dect  stack
0051 775C C645  30         mov   tmp1,*stack           ; Push tmp1
0052 775E 0649  14         dect  stack
0053 7760 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 7762 0649  14         dect  stack
0055 7764 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 7766 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     7768 A006     
0060               
0061 776A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     776C 32B0     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 776E C120  34         mov   @outparm1,tmp0        ; Index offset
     7770 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 7772 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     7774 A008     
0070 7776 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 7778 61A0  34         s     @parm1,tmp2           ; Calculate loop
     777A A006     
0074 777C 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 777E 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     7780 B000     
0081 7782 04D4  26         clr   *tmp0                 ; Clear index entry
0082 7784 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 7786 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     7788 A008     
0088 778A 0287  22         ci    tmp3,2048
     778C 0800     
0089 778E 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 7790 06A0  32         bl    @_idx.sams.mapcolumn.on
     7792 3242     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 7794 C120  34         mov   @parm1,tmp0           ; Restore line number
     7796 A006     
0103 7798 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 779A 06A0  32         bl    @_idx.entry.delete.reorg
     779C 3616     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 779E 06A0  32         bl    @_idx.sams.mapcolumn.off
     77A0 3276     
0111                                                   ; Restore memory window layout
0112               
0113 77A2 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 77A4 06A0  32         bl    @_idx.entry.delete.reorg
     77A6 3616     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 77A8 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 77AA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 77AC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 77AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 77B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 77B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 77B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 77B6 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     77B8 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 77BA 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 77BC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     77BE FFCE     
0027 77C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     77C2 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 77C4 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     77C6 B000     
0032 77C8 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 77CA 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 77CC 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 77CE C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 77D0 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 77D2 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 77D4 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 77D6 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     77D8 AFFC     
0043 77DA 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 77DC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     77DE FFCE     
0049 77E0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     77E2 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 77E4 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 77E6 0644  14         dect  tmp0                  ; Move pointer up
0056 77E8 0645  14         dect  tmp1                  ; Move pointer up
0057 77EA 0606  14         dec   tmp2                  ; Next index entry
0058 77EC 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 77EE 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 77F0 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 77F2 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 77F4 0649  14         dect  stack
0089 77F6 C64B  30         mov   r11,*stack            ; Save return address
0090 77F8 0649  14         dect  stack
0091 77FA C644  30         mov   tmp0,*stack           ; Push tmp0
0092 77FC 0649  14         dect  stack
0093 77FE C645  30         mov   tmp1,*stack           ; Push tmp1
0094 7800 0649  14         dect  stack
0095 7802 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 7804 0649  14         dect  stack
0097 7806 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 7808 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     780A A008     
0102 780C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     780E A006     
0103 7810 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 7812 C1E0  34         mov   @parm2,tmp3
     7814 A008     
0110 7816 0287  22         ci    tmp3,2048
     7818 0800     
0111 781A 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 781C 06A0  32         bl    @_idx.sams.mapcolumn.on
     781E 3242     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 7820 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     7822 A008     
0123 7824 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 7826 06A0  32         bl    @_idx.entry.insert.reorg
     7828 368A     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 782A 06A0  32         bl    @_idx.sams.mapcolumn.off
     782C 3276     
0131                                                   ; Restore memory window layout
0132               
0133 782E 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 7830 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     7832 A008     
0139               
0140 7834 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     7836 32B0     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 7838 C120  34         mov   @outparm1,tmp0        ; Index offset
     783A A018     
0145               
0146 783C 06A0  32         bl    @_idx.entry.insert.reorg
     783E 368A     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 7840 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 7842 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 7844 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 7846 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 7848 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 784A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 784C 0649  14         dect  stack
0022 784E C64B  30         mov   r11,*stack            ; Push return address
0023 7850 0649  14         dect  stack
0024 7852 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 7854 0649  14         dect  stack
0026 7856 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 7858 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     785A A504     
0031 785C 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 785E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7860 FFCE     
0037 7862 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7864 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 7866 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     7868 A006     
0043               
0044 786A 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     786C 35CA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 786E C120  34         mov   @outparm2,tmp0        ; SAMS page
     7870 A01A     
0050 7872 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     7874 A018     
0051 7876 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 7878 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     787A A208     
0057 787C 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 787E 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     7880 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 7882 C820  54         mov   @outparm2,@tv.sams.c000
     7884 A01A     
     7886 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 7888 C820  54         mov   @outparm2,@edb.sams.page
     788A A01A     
     788C A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 788E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 7890 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 7892 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 7894 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 7896 0649  14         dect  stack
0022 7898 C64B  30         mov   r11,*stack            ; Push return address
0023 789A 0649  14         dect  stack
0024 789C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 789E 0649  14         dect  stack
0026 78A0 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 78A2 04E0  34         clr   @outparm1             ; Reset length
     78A4 A018     
0031 78A6 04E0  34         clr   @outparm2             ; Reset SAMS bank
     78A8 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 78AA C120  34         mov   @parm1,tmp0           ; \
     78AC A006     
0036 78AE 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 78B0 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     78B2 A504     
0039 78B4 1201  14         jle   !                     ; No, continue processing
0040 78B6 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 78B8 C120  34 !       mov   @parm1,tmp0           ; Get line
     78BA A006     
0046               
0047 78BC 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     78BE 3720     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 78C0 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     78C2 A018     
0053 78C4 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 78C6 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 78C8 C805  38         mov   tmp1,@outparm1        ; Save length
     78CA A018     
0060 78CC 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 78CE 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     78D0 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 78D2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 78D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 78D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 78D8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 78DA 0649  14         dect  stack
0021 78DC C64B  30         mov   r11,*stack            ; Save return address
0022 78DE 0649  14         dect  stack
0023 78E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 78E2 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     78E4 A304     
0028 78E6 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     78E8 A306     
0029 78EA C804  38         mov   tmp0,@parm1
     78EC A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 78EE 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     78F0 376A     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 78F2 C820  54         mov   @outparm1,@fb.row.length
     78F4 A018     
     78F6 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 78F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 78FA C2F9  30         mov   *stack+,r11           ; Pop R11
0046 78FC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 78FE 0649  14         dect  stack
0021 7900 C64B  30         mov   r11,*stack            ; Save return address
0022 7902 0649  14         dect  stack
0023 7904 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 7906 0649  14         dect  stack
0025 7908 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 790A C120  34         mov   @edb.next_free.ptr,tmp0
     790C A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 790E 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     7910 0FFF     
0035 7912 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     7914 0052     
0036 7916 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     7918 0FF0     
0037 791A 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 791C 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     791E A51C     
0043 7920 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     7922 A500     
     7924 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 7926 C120  34         mov   @edb.sams.hipage,tmp0
     7928 A51C     
0050 792A C160  34         mov   @edb.top.ptr,tmp1
     792C A500     
0051 792E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     7930 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 7932 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 7934 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7936 FFCE     
0061 7938 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     793A 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 793C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 793E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 7940 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 7942 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 7944 0649  14         dect  stack
0022 7946 C64B  30         mov   r11,*stack            ; Push return address
0023 7948 0649  14         dect  stack
0024 794A C660  42         mov   @wyx,*stack           ; Push cursor position
     794C 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 794E 06A0  32         bl    @hchar
     7950 2832     
0029 7952 0032                   byte 0,50,32,22
     7954 2016     
0030 7956 FFFF                   data EOL              ; Clear message
0031               
0032 7958 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     795A A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 795C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     795E 832A     
0038 7960 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 7962 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "cart.fg99.run.asm"         ; Run FinalGROM cartridge image
     **** ****     > cart.fg99.run.asm
0001               * FILE......: cart.fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * cart.fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @cart.fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               * Is expected to run from RAM and not from cartridge space.
0023               ********|*****|*********************|**************************
0024               cart.fg99.run:
0025                       ;-------------------------------------------------------
0026                       ; Put VDP in TI Basic compatible mode (32x24)
0027                       ;-------------------------------------------------------
0028 7964 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     7966 2806     
0029               
0030 7968 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     796A 22F8     
0031 796C 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0032               
0033 796E 06A0  32         bl    @scroff               ; Turn off screen
     7970 26E6     
0034                       ;------------------------------------------------------
0035                       ; Clear magic string
0036                       ;------------------------------------------------------
0037                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0038                       ; Indicate it's unsafe to resume Stevie and initialization
0039                       ; is necessary.
0040                       ; clr   @magic.str.w1
0041                       ; clr   @magic.str.w2
0042                       ; clr   @magic.str.w3
0043                       ;-------------------------------------------------------
0044                       ; Load FG99 cartridge, but do not start cartridge yet
0045                       ;-------------------------------------------------------
0046 7972 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     7974 A232     
0047 7976 06A0  32         bl    @xfg99                ; Load FinalGROM cartridge image
     7978 2E80     
0048                                                   ; \ i tmp0 = Pointer to cartridge image
0049                                                   ; /
0050                       ;-------------------------------------------------------
0051                       ; Turn SAMS mapper off and exit to monitor
0052                       ;-------------------------------------------------------
0053 797A 020C  20         li    r12,>1e00             ; SAMS CRU address
     797C 1E00     
0054 797E 1E01  16         sbz   1                     ; Disable SAMS mapper
0055                                                   ; \ We keep the mapper off while
0056                                                   ; | running TI Basic or other external
0057                                                   ; / programs.
0058               
0059 7980 0420  42         blwp @0                     ; Return to monitor
     7982 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 7984 0649  14         dect  stack
0009 7986 C64B  30         mov   r11,*stack            ; Save return address
0010 7988 0649  14         dect  stack
0011 798A C644  30         mov   tmp0,*stack           ; Push tmp0
0012 798C 0649  14         dect  stack
0013 798E C645  30         mov   tmp1,*stack           ; Push tmp1
0014 7990 0649  14         dect  stack
0015 7992 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 7994 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     7996 A224     
0020               
0021 7998 0284  22         ci    tmp0,pane.focus.fb
     799A 0000     
0022 799C 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 799E 0284  22         ci    tmp0,pane.focus.cmdb
     79A0 0001     
0025 79A2 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 79A4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     79A6 FFCE     
0031 79A8 06A0  32         bl    @cpu.crash            ; / Halt system.
     79AA 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 79AC C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     79AE A70A     
     79B0 832A     
0037 79B2 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     79B4 2020     
0038 79B6 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     79B8 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 79BA 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 79BC E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     79BE 2020     
0048 79C0 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     79C2 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 79C4 C160  34         mov   @tv.ruler.visible,tmp1
     79C6 A210     
0056 79C8 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 79CA 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     79CC 1000     
0058 79CE 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 79D0 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     79D2 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 79D4 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     79D6 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 79D8 C160  34         mov   @tv.ruler.visible,tmp1
     79DA A210     
0071                                                   ; Ruler visible?
0072 79DC 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 79DE C160  34         mov   @cmdb.visible,tmp1
     79E0 A702     
0076 79E2 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     79E4 FFFF     
0077 79E6 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 79E8 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     79EA FF00     
0081 79EC 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     79EE 00F0     
0082 79F0 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     79F2 A05A     
0083               
0084 79F4 C120  34         mov   @ramsat,tmp0
     79F6 A056     
0085 79F8 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     79FA 00FF     
0086 79FC 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     79FE 0800     
0087 7A00 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     7A02 A05E     
0088               
0089 7A04 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 7A06 04C5  14         clr   tmp1
0095 7A08 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     7A0A A05D     
0096                                                   ; / by transparant color
0097 7A0C D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     7A0E A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 7A10 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     7A12 24E6     
0104 7A14 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     7A16 A056     
     7A18 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 7A1A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 7A1C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 7A1E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 7A20 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 7A22 0460  28         b     @slotok               ; Exit task
     7A24 2F3E     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 7A26 0649  14         dect  stack
0009 7A28 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 7A2A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A2C 3084     
0014 7A2E 600C                   data bank6.rom        ; | i  p0 = bank address
0015 7A30 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 7A32 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 7A34 C2F9  30         mov   *stack+,r11           ; Pop r11
0022 7A36 0460  28         b     @slotok               ; Exit task
     7A38 2F3E     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 7A3A C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     7A3C A226     
0010 7A3E 1301  14         jeq   task.oneshot.exit
0011               
0012 7A40 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 7A42 0460  28         b     @slotok                ; Exit task
     7A44 2F3E     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 7A46 0000             data  >0000,>8201           ; Cursor
     7A48 8201     
0014 7A4A 0000             data  >0000,>8301           ; Current line indicator     <
     7A4C 8301     
0015 7A4E 0820             data  >0820,>8401           ; Current column indicator   v
     7A50 8401     
0016               nosprite:
0017 7A52 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               ***************************************************************
0021               * Stevie color schemes table
0022               *--------------------------------------------------------------
0023               * ;
0024               * ; Word 1
0025               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0026               * ; B  MSB  low-nibble     Background color text line in frame buffer
0027               * ; C  LSB  high-nibble    Foreground color top/bottom line
0028               * ; D  LSB  low-nibble     Background color top/bottom line
0029               * ;
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ;
0036               * ; Word 3
0037               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0038               * ; J  MSB  low-nibble     Background color busy top/bottom line
0039               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0040               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0041               * ;
0042               * ; Word 4
0043               * ; M  MSB  high-nibble    Foreground color command buffer header line
0044               * ; N  MSB  low-nibble     Background color command buffer header line
0045               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0046               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0047               *
0048               * ; Colors
0049               * ; 0  Transparant
0050               * ; 1  black
0051               * ; 2  Green
0052               * ; 3  Light Green
0053               * ; 4  Blue
0054               * ; 5  Light Blue
0055               * ; 6  Dark Red
0056               * ; 7  Cyan
0057               * ; 8  Red
0058               * ; 9  Light Red
0059               * ; A  Yellow
0060               * ; B  Light Yellow
0061               * ; C  Dark Green
0062               * ; D  Magenta
0063               * ; E  Grey
0064               * ; F  White
0065               *--------------------------------------------------------------
0066      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0067               
0068               tv.colorscheme.table:
0069                       ;                             ;
0070                       ;      ABCD  EFGH  IJKL  MNOP ;
0071 7A54 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     7A56 F171     
     7A58 1B1F     
     7A5A 7111     
0072 7A5C 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     7A5E 21FF     
     7A60 F112     
     7A62 21FF     
0073 7A64 A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     7A66 F0FF     
     7A68 1F1A     
     7A6A F1FF     
0074 7A6C 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     7A6E 1E11     
     7A70 1EE1     
     7A72 1E11     
0075 7A74 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     7A76 1511     
     7A78 1F1F     
     7A7A 1511     
0076 7A7C 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     7A7E 1311     
     7A80 1331     
     7A82 1311     
0077 7A84 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     7A86 1011     
     7A88 0171     
     7A8A 1711     
0078 7A8C 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     7A8E F0FF     
     7A90 1F12     
     7A92 F1F6     
0079 7A94 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     7A96 1011     
     7A98 F1F1     
     7A9A 1F11     
0080 7A9C 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     7A9E A111     
     7AA0 1F1F     
     7AA2 F11F     
0081 7AA4 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     7AA6 1911     
     7AA8 1991     
     7AAA 1911     
0082 7AAC FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     7AAE 1D11     
     7AB0 FDDF     
     7AB2 1D11     
0083                       even
0084               
0085               ***************************************************************
0086               * Tab positions
0087               ********|*****|*********************|**************************
0088               tv.tabs.table.lr:
0089 7AB4 0007             byte  0,7,12,25             ; \   Default tab positions as used
     7AB6 0C19     
0090 7AB8 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     7ABA 3B4F     
0091 7ABC FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     7ABE 0000     
0092                                                   ; /   >ff means end-of-list.
0093               
0094               tv.tabs.table.rl:
0095 7AC0 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     7AC2 2D1E     
0096 7AC4 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     7AC6 0700     
0097 7AC8 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     7ACA 0000     
0098                                                   ; /   >ff means end-of-list.
0099               
0100               ***************************************************************
0101               * Constants for numbers 0-10
0102               ********|*****|*********************|**************************
0103      2000     const.0       equ   w$0000          ; 0
0104      2002     const.1       equ   w$0001          ; 1
0105      2004     const.2       equ   w$0002          ; 2
0106 7ACC 0003     const.3       data  3               ; 3
0107      2006     const.4       equ   w$0004          ; 4
0108 7ACE 0005     const.5       data  5               ; 5
0109 7AD0 0006     const.6       data  6               ; 6
0110 7AD2 0007     const.7       data  7               ; 7
0111      2008     const.8       equ   w$0008          ; 8
0112 7AD4 0009     const.9       data  9               ; 9
0113 7AD6 000A     const.10      data  10              ; 10 ; A
0114 7AD8 000B     const.11      data  11              ; 11 ; B
0115 7ADA 000C     const.12      data  12              ; 12 ; C
0116 7ADC 000D     const.13      data  13              ; 13 ; D
0117 7ADE 000E     const.14      data  14              ; 14 ; E
0118 7AE0 000F     const.15      data  15              ; 15 ; F
0119 7AE2 0020     const.32      data  32              ; 32
0120 7AE4 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 7AE6 012F     txt.slash          stri '/'
0008                                  even
0009 7AE8 013A     txt.colon          stri ':'
0010                                  even
0011 7AEA 0520     txt.bottom         stri '  BOT'
     7AEC 2042     
     7AEE 4F54     
0012                                  even
0013 7AF0 044F     txt.ovrwrite       stri 'OVR '
     7AF2 5652     
     7AF4 20       
0014                                  even
0015 7AF6 0449     txt.insert         stri 'INS '
     7AF8 4E53     
     7AFA 20       
0016                                  even
0017 7AFC 0449     txt.autoinsert     stri 'INS+'
     7AFE 4E53     
     7B00 2B       
0018                                  even
0019 7B02 012A     txt.star           stri '*'
0020                                  even
0021 7B04 0A4C     txt.loading        stri 'Loading...'
     7B06 6F61     
     7B08 6469     
     7B0A 6E67     
     7B0C 2E2E     
     7B0E 2E       
0022                                  even
0023 7B10 0A53     txt.saving         stri 'Saving....'
     7B12 6176     
     7B14 696E     
     7B16 672E     
     7B18 2E2E     
     7B1A 2E       
0024                                  even
0025 7B1C 0C50     txt.printing       stri 'Printing....'
     7B1E 7269     
     7B20 6E74     
     7B22 696E     
     7B24 672E     
     7B26 2E2E     
     7B28 2E       
0026                                  even
0027 7B2A 0C53     txt.searching      stri 'Searching...'
     7B2C 6561     
     7B2E 7263     
     7B30 6869     
     7B32 6E67     
     7B34 2E2E     
     7B36 2E       
0028                                  even
0029 7B38 1244     txt.block.del      stri 'Deleting block....'
     7B3A 656C     
     7B3C 6574     
     7B3E 696E     
     7B40 6720     
     7B42 626C     
     7B44 6F63     
     7B46 6B2E     
     7B48 2E2E     
     7B4A 2E       
0030                                  even
0031 7B4C 1143     txt.block.copy     stri 'Copying block....'
     7B4E 6F70     
     7B50 7969     
     7B52 6E67     
     7B54 2062     
     7B56 6C6F     
     7B58 636B     
     7B5A 2E2E     
     7B5C 2E2E     
0032                                  even
0033 7B5E 104D     txt.block.move     stri 'Moving block....'
     7B60 6F76     
     7B62 696E     
     7B64 6720     
     7B66 626C     
     7B68 6F63     
     7B6A 6B2E     
     7B6C 2E2E     
     7B6E 2E       
0034                                  even
0035 7B70 1053     txt.block.save     stri 'Saving block....'
     7B72 6176     
     7B74 696E     
     7B76 6720     
     7B78 626C     
     7B7A 6F63     
     7B7C 6B2E     
     7B7E 2E2E     
     7B80 2E       
0036                                  even
0037 7B82 1843     txt.block.clip     stri 'Copying to clipboard....'
     7B84 6F70     
     7B86 7969     
     7B88 6E67     
     7B8A 2074     
     7B8C 6F20     
     7B8E 636C     
     7B90 6970     
     7B92 626F     
     7B94 6172     
     7B96 642E     
     7B98 2E2E     
     7B9A 2E       
0038                                  even
0039 7B9C 1250     txt.block.print    stri 'Printing block....'
     7B9E 7269     
     7BA0 6E74     
     7BA2 696E     
     7BA4 6720     
     7BA6 626C     
     7BA8 6F63     
     7BAA 6B2E     
     7BAC 2E2E     
     7BAE 2E       
0040                                  even
0041 7BB0 1343     txt.clearmem       stri 'Clearing memory....'
     7BB2 6C65     
     7BB4 6172     
     7BB6 696E     
     7BB8 6720     
     7BBA 6D65     
     7BBC 6D6F     
     7BBE 7279     
     7BC0 2E2E     
     7BC2 2E2E     
0042                                  even
0043 7BC4 1352     txt.readdir        stri 'Reading catalog....'
     7BC6 6561     
     7BC8 6469     
     7BCA 6E67     
     7BCC 2063     
     7BCE 6174     
     7BD0 616C     
     7BD2 6F67     
     7BD4 2E2E     
     7BD6 2E2E     
0044                                  even
0045 7BD8 0E4C     txt.done.load      stri 'Load completed'
     7BDA 6F61     
     7BDC 6420     
     7BDE 636F     
     7BE0 6D70     
     7BE2 6C65     
     7BE4 7465     
     7BE6 64       
0046                                  even
0047 7BE8 1049     txt.done.insert    stri 'Insert completed'
     7BEA 6E73     
     7BEC 6572     
     7BEE 7420     
     7BF0 636F     
     7BF2 6D70     
     7BF4 6C65     
     7BF6 7465     
     7BF8 64       
0048                                  even
0049 7BFA 1041     txt.done.append    stri 'Append completed'
     7BFC 7070     
     7BFE 656E     
     7C00 6420     
     7C02 636F     
     7C04 6D70     
     7C06 6C65     
     7C08 7465     
     7C0A 64       
0050                                  even
0051 7C0C 0E53     txt.done.save      stri 'Save completed'
     7C0E 6176     
     7C10 6520     
     7C12 636F     
     7C14 6D70     
     7C16 6C65     
     7C18 7465     
     7C1A 64       
0052                                  even
0053 7C1C 0E43     txt.done.copy      stri 'Copy completed'
     7C1E 6F70     
     7C20 7920     
     7C22 636F     
     7C24 6D70     
     7C26 6C65     
     7C28 7465     
     7C2A 64       
0054                                  even
0055 7C2C 0F50     txt.done.print     stri 'Print completed'
     7C2E 7269     
     7C30 6E74     
     7C32 2063     
     7C34 6F6D     
     7C36 706C     
     7C38 6574     
     7C3A 6564     
0056                                  even
0057 7C3C 1044     txt.done.delete    stri 'Delete completed'
     7C3E 656C     
     7C40 6574     
     7C42 6520     
     7C44 636F     
     7C46 6D70     
     7C48 6C65     
     7C4A 7465     
     7C4C 64       
0058                                  even
0059 7C4E 0F43     txt.done.clipboard stri 'Clipboard saved'
     7C50 6C69     
     7C52 7062     
     7C54 6F61     
     7C56 7264     
     7C58 2073     
     7C5A 6176     
     7C5C 6564     
0060                                  even
0061 7C5E 0D43     txt.done.clipdev   stri 'Clipboard set'
     7C60 6C69     
     7C62 7062     
     7C64 6F61     
     7C66 7264     
     7C68 2073     
     7C6A 6574     
0062                                  even
0063 7C6C 0E41     txt.autoins.on     stri 'Autoinsert: on'
     7C6E 7574     
     7C70 6F69     
     7C72 6E73     
     7C74 6572     
     7C76 743A     
     7C78 206F     
     7C7A 6E       
0064                                  even
0065 7C7C 0F41     txt.autoins.off    stri 'Autoinsert: off'
     7C7E 7574     
     7C80 6F69     
     7C82 6E73     
     7C84 6572     
     7C86 743A     
     7C88 206F     
     7C8A 6666     
0066                                  even
0067 7C8C 0B46     txt.fastmode       stri 'Fastmode IO'
     7C8E 6173     
     7C90 746D     
     7C92 6F64     
     7C94 6520     
     7C96 494F     
0068                                  even
0069 7C98 134E     txt.nodisk         stri 'No Device/Disk/Path'
     7C9A 6F20     
     7C9C 4465     
     7C9E 7669     
     7CA0 6365     
     7CA2 2F44     
     7CA4 6973     
     7CA6 6B2F     
     7CA8 5061     
     7CAA 7468     
0070                                  even
0071 7CAC 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     7CAE 6E63     
     7CB0 7275     
     7CB2 6E63     
     7CB4 6869     
     7CB6 6E67     
     7CB8 2054     
     7CBA 4920     
     7CBC 4261     
     7CBE 7369     
     7CC0 6320     
     7CC2 6C69     
     7CC4 6E65     
     7CC6 2E2E     
     7CC8 2E2E     
0072                                  even
0073 7CCA 026B     txt.kb             stri 'kb'
     7CCC 62       
0074                                  even
0075 7CCE 054C     txt.lines          stri 'Lines'
     7CD0 696E     
     7CD2 6573     
0076                                  even
0077 7CD4 0A5B     txt.newfile        stri '[New file]'
     7CD6 4E65     
     7CD8 7720     
     7CDA 6669     
     7CDC 6C65     
     7CDE 5D       
0078                                  even
0079 7CE0 0D5B     txt.tib1           stri '[TI Basic #1]'
     7CE2 5449     
     7CE4 2042     
     7CE6 6173     
     7CE8 6963     
     7CEA 2023     
     7CEC 315D     
0080                                  even
0081 7CEE 0D5B     txt.tib2           stri '[TI Basic #2]'
     7CF0 5449     
     7CF2 2042     
     7CF4 6173     
     7CF6 6963     
     7CF8 2023     
     7CFA 325D     
0082                                  even
0083 7CFC 0D5B     txt.tib3           stri '[TI Basic #3]'
     7CFE 5449     
     7D00 2042     
     7D02 6173     
     7D04 6963     
     7D06 2023     
     7D08 335D     
0084                                  even
0085 7D0A 0444     txt.filetype.dv80  stri 'DV80'
     7D0C 5638     
     7D0E 30       
0086                                  even
0087 7D10 034D     txt.m1             stri 'M1='
     7D12 313D     
0088                                  even
0089 7D14 034D     txt.m2             stri 'M2='
     7D16 323D     
0090                                  even
0091 7D18 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     7D1A 392D     
     7D1C 4D65     
     7D1E 6E75     
     7D20 2020     
     7D22 5E48     
     7D24 2D48     
     7D26 656C     
     7D28 70       
0092                                  even
0093 7D2A 1C46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic# '
     7D2C 392D     
     7D2E 4D65     
     7D30 6E75     
     7D32 2020     
     7D34 5E48     
     7D36 2D48     
     7D38 656C     
     7D3A 7020     
     7D3C 2046     
     7D3E 302D     
     7D40 4261     
     7D42 7369     
     7D44 6323     
     7D46 20       
0094                                  even
0095 7D48 2B46     txt.keys.defaultc  stri 'F9-Menu  ^H-Help  ^,=Prev  ^.=Next  ^/=Done'
     7D4A 392D     
     7D4C 4D65     
     7D4E 6E75     
     7D50 2020     
     7D52 5E48     
     7D54 2D48     
     7D56 656C     
     7D58 7020     
     7D5A 205E     
     7D5C 2C3D     
     7D5E 5072     
     7D60 6576     
     7D62 2020     
     7D64 5E2E     
     7D66 3D4E     
     7D68 6578     
     7D6A 7420     
     7D6C 205E     
     7D6E 2F3D     
     7D70 446F     
     7D72 6E65     
0096                                  even
0097 7D74 3746     txt.keys.defaultd  stri 'F9-Menu  ^H-Help  F0-Basic#   ^,=Prev  ^.=Next  ^/=Done'
     7D76 392D     
     7D78 4D65     
     7D7A 6E75     
     7D7C 2020     
     7D7E 5E48     
     7D80 2D48     
     7D82 656C     
     7D84 7020     
     7D86 2046     
     7D88 302D     
     7D8A 4261     
     7D8C 7369     
     7D8E 6323     
     7D90 2020     
     7D92 205E     
     7D94 2C3D     
     7D96 5072     
     7D98 6576     
     7D9A 2020     
     7D9C 5E2E     
     7D9E 3D4E     
     7DA0 6578     
     7DA2 7420     
     7DA4 205E     
     7DA6 2F3D     
     7DA8 446F     
     7DAA 6E65     
0098                                  even
0099               
0100 7DAC 3A46     txt.keys.block     stri 'F9-Exit  ^Copy  ^Move  ^Del  ^Save  ^Print  ^1-3=Clipboard'
     7DAE 392D     
     7DB0 4578     
     7DB2 6974     
     7DB4 2020     
     7DB6 5E43     
     7DB8 6F70     
     7DBA 7920     
     7DBC 205E     
     7DBE 4D6F     
     7DC0 7665     
     7DC2 2020     
     7DC4 5E44     
     7DC6 656C     
     7DC8 2020     
     7DCA 5E53     
     7DCC 6176     
     7DCE 6520     
     7DD0 205E     
     7DD2 5072     
     7DD4 696E     
     7DD6 7420     
     7DD8 205E     
     7DDA 312D     
     7DDC 333D     
     7DDE 436C     
     7DE0 6970     
     7DE2 626F     
     7DE4 6172     
     7DE6 64       
0101                                  even
0102 7DE8 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     7DEA 392D     
     7DEC 4261     
     7DEE 636B     
     7DF0 2020     
     7DF2 4635     
     7DF4 2D41     
     7DF6 7574     
     7DF8 6F55     
     7DFA 6E70     
     7DFC 6163     
     7DFE 6B20     
     7E00 2053     
     7E02 5041     
     7E04 4345     
     7E06 2D55     
     7E08 6E70     
     7E0A 6163     
     7E0C 6B20     
     7E0E 7072     
     7E10 6F67     
     7E12 7261     
     7E14 6D       
0103                                  even
0104 7E16 020E     txt.alpha.down     data >020e,>0f00
     7E18 0F00     
0105 7E1A 0110     txt.vertline       data >0110
0106 7E1C 011C     txt.keymarker      byte 1,28
0107                                  even
0108 7E1E 0120     txt.ws1            stri ' '
0109                                  even
0110 7E20 0220     txt.ws2            stri '  '
     7E22 20       
0111                                  even
0112 7E24 0420     txt.ws4            stri '    '
     7E26 2020     
     7E28 20       
0113                                  even
0114      3CF8     txt.filetype.none  equ txt.ws4
0115               
0116 7E2A 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     7E2C 4920     
     7E2E 4261     
     7E30 7369     
     7E32 6320     
     7E34 6D6F     
     7E36 6465     
     7E38 2061     
     7E3A 6374     
     7E3C 6976     
     7E3E 652E     
0117                                  even
0118               ;--------------------------------------------------------------
0119               ; Strings for error line pane
0120               ;--------------------------------------------------------------
0121 7E40 1546     txt.ioerr.load     stri 'Failed loading file: '
     7E42 6169     
     7E44 6C65     
     7E46 6420     
     7E48 6C6F     
     7E4A 6164     
     7E4C 696E     
     7E4E 6720     
     7E50 6669     
     7E52 6C65     
     7E54 3A20     
0122                                  even
0123 7E56 1446     txt.ioerr.save     stri 'Failed saving file: '
     7E58 6169     
     7E5A 6C65     
     7E5C 6420     
     7E5E 7361     
     7E60 7669     
     7E62 6E67     
     7E64 2066     
     7E66 696C     
     7E68 653A     
     7E6A 20       
0124                                  even
0125 7E6C 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     7E6E 6169     
     7E70 6C65     
     7E72 6420     
     7E74 7072     
     7E76 696E     
     7E78 7469     
     7E7A 6E67     
     7E7C 2074     
     7E7E 6F20     
     7E80 6465     
     7E82 7669     
     7E84 6365     
     7E86 3A20     
0126                                  even
0127 7E88 164E     txt.io.nofile      stri 'No filename specified.'
     7E8A 6F20     
     7E8C 6669     
     7E8E 6C65     
     7E90 6E61     
     7E92 6D65     
     7E94 2073     
     7E96 7065     
     7E98 6369     
     7E9A 6669     
     7E9C 6564     
     7E9E 2E       
0128                                  even
0129 7EA0 0B49     txt.memfull.load   stri 'Index full.'
     7EA2 6E64     
     7EA4 6578     
     7EA6 2066     
     7EA8 756C     
     7EAA 6C2E     
0130                                  even
0131 7EAC 2C43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range'
     7EAE 6F70     
     7EB0 792F     
     7EB2 4D6F     
     7EB4 7665     
     7EB6 2074     
     7EB8 6172     
     7EBA 6765     
     7EBC 7420     
     7EBE 6D75     
     7EC0 7374     
     7EC2 2062     
     7EC4 6520     
     7EC6 6F75     
     7EC8 7473     
     7ECA 6964     
     7ECC 6520     
     7ECE 4D31     
     7ED0 2D4D     
     7ED2 3220     
     7ED4 7261     
     7ED6 6E67     
     7ED8 65       
0132                                  even
0133               ;--------------------------------------------------------------
0134               ; Strings for command buffer
0135               ;--------------------------------------------------------------
0136 7EDA 013E     txt.cmdb.prompt    stri '>'
0137                                  even
0138 7EDC 0D43     txt.colorscheme    stri 'Color scheme:'
     7EDE 6F6C     
     7EE0 6F72     
     7EE2 2073     
     7EE4 6368     
     7EE6 656D     
     7EE8 653A     
0139                                  even
0140               ;--------------------------------------------------------------
0141               ; Strings for command buffer
0142               ;--------------------------------------------------------------
0143 7EEA 0102     txt.picker.icon1   byte 1,2
0144                                  even
0145 7EEC 0103     txt.picker.icon2   byte 1,3
0146                                  even
0147               
0148               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 7EEE 0650     def.printer.fname   stri 'PI.PIO'
     7EF0 492E     
     7EF2 5049     
     7EF4 4F       
0008 7EF5   09     def.clip.fname.a    stri 'DSK1.CLIP'
     7EF6 4453     
     7EF8 4B31     
     7EFA 2E43     
     7EFC 4C49     
     7EFE 50       
0009                                   even
0010 7F00 0954     def.clip.fname.b    stri 'TIPI.CLIP'
     7F02 4950     
     7F04 492E     
     7F06 434C     
     7F08 4950     
0011                                   even
0012 7F0A 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     7F0C 4453     
     7F0E 4B2C     
     7F10 4844     
     7F12 582C     
     7F14 4944     
     7F16 452C     
     7F18 5049     
     7F1A 2E2C     
     7F1C 5049     
     7F1E 4F2C     
     7F20 5449     
     7F22 5049     
     7F24 2E2C     
     7F26 5244     
     7F28 2C53     
     7F2A 4353     
     7F2C 2C53     
     7F2E 4444     
     7F30 2C57     
     7F32 4453     
     7F34 2C52     
     7F36 5332     
     7F38 3332     
0013                                   even
0014 7F3A 0546     def.fg99.fname      stri 'FCMDC'
     7F3C 434D     
     7F3E 4443     
0015                                   even
                   < ram.resident.asm
                   < stevie_b0.asm
0143                       ;------------------------------------------------------
0144                       ; Stevie main entry point
0145                       ;------------------------------------------------------
0146               main:
0147 7F40 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     7F42 6002     
0148               
0152               
0153 7F44 0460  28         b     @kickstart.code2      ; Jump to entry routine >6046
     7F46 6046     
0154                       ;------------------------------------------------------
0155                       ; Memory full check
0156                       ;------------------------------------------------------
0160 7F48 3E1C                   data $                ; Bank 0 ROM size OK.
0162                       ;-----------------------------------------------------------------------
0163                       ; Show ROM bank in CPU crash screen
0164                       ;-----------------------------------------------------------------------
0165      7FF0     cpu.crash.showbank  equ  bankx.crash.showbank
0166                       ;-----------------------------------------------------------------------
0167                       ; Table for VDP modes
0168                       ;-----------------------------------------------------------------------
0169                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b0.asm
0170                       ;-----------------------------------------------------------------------
0171                       ; Vector table
0172                       ;-----------------------------------------------------------------------
0173                       copy  "rom.vectors.bank0.asm"
     **** ****     > rom.vectors.bank0.asm
0001               * FILE......: rom.vectors.bank0.asm
0002               * Purpose...: Bank 0 "dummy" vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#0'
     7F66 4F4D     
     7F68 2330     
0009               *--------------------------------------------------------------
0010               * ROM 0: Vectors 1-32
0011               *--------------------------------------------------------------
0012                       aorg  bankx.vectab
0013      7F70     vec.1   equ   bankx.vectab          ;
0014      7F72     vec.2   equ   bankx.vectab + 2      ;
0015      7F74     vec.3   equ   bankx.vectab + 4      ;
0016      7F76     vec.4   equ   bankx.vectab + 6      ;
0017      7F78     vec.5   equ   bankx.vectab + 8      ;
0018      7F7A     vec.6   equ   bankx.vectab + 10     ;
0019      7F7C     vec.7   equ   bankx.vectab + 12     ;
0020      7F7E     vec.8   equ   bankx.vectab + 14     ;
0021      7F80     vec.9   equ   bankx.vectab + 16     ;
0022      7F82     vec.10  equ   bankx.vectab + 18     ;
0023      7F84     vec.11  equ   bankx.vectab + 20     ;
0024      7F86     vec.12  equ   bankx.vectab + 22     ;
0025      7F88     vec.13  equ   bankx.vectab + 24     ;
0026      7F8A     vec.14  equ   bankx.vectab + 26     ;
0027      7F8C     vec.15  equ   bankx.vectab + 28     ;
0028      7F8E     vec.16  equ   bankx.vectab + 30     ;
0029      7F90     vec.17  equ   bankx.vectab + 32     ;
0030      7F92     vec.18  equ   bankx.vectab + 34     ;
0031      7F94     vec.19  equ   bankx.vectab + 36     ;
0032      7F96     vec.20  equ   bankx.vectab + 38     ;
0033      7F98     vec.21  equ   bankx.vectab + 40     ;
0034      7F9A     vec.22  equ   bankx.vectab + 42     ;
0035      7F9C     vec.23  equ   bankx.vectab + 44     ;
0036      7F9E     vec.24  equ   bankx.vectab + 46     ;
0037      7FA0     vec.25  equ   bankx.vectab + 48     ;
0038      7FA2     vec.26  equ   bankx.vectab + 50     ;
0039      7FA4     vec.27  equ   bankx.vectab + 52     ;
0040      7FA6     vec.28  equ   bankx.vectab + 54     ;
0041      7FA8     vec.29  equ   bankx.vectab + 56     ;
0042      7FAA     vec.30  equ   bankx.vectab + 58     ;
0043      7FAC     vec.31  equ   bankx.vectab + 60     ;
0044      7FAE     vec.32  equ   bankx.vectab + 62     ;
0045               *--------------------------------------------------------------
0046               * ROM 0: Vectors 33-64
0047               *--------------------------------------------------------------
0048      7FB0     vec.33  equ   bankx.vectab + 64     ;
0049      7FB2     vec.34  equ   bankx.vectab + 66     ;
0050      7FB4     vec.35  equ   bankx.vectab + 68     ;
0051      7FB6     vec.36  equ   bankx.vectab + 70     ;
0052      7FB8     vec.37  equ   bankx.vectab + 72     ;
0053      7FBA     vec.38  equ   bankx.vectab + 74     ;
0054      7FBC     vec.39  equ   bankx.vectab + 76     ;
0055      7FBE     vec.40  equ   bankx.vectab + 78     ;
0056      7FC0     vec.41  equ   bankx.vectab + 80     ;
0057      7FC2     vec.42  equ   bankx.vectab + 82     ;
0058      7FC4     vec.43  equ   bankx.vectab + 84     ;
0059      7FC6     vec.44  equ   bankx.vectab + 86     ;
0060      7FC8     vec.45  equ   bankx.vectab + 88     ;
0061      7FCA     vec.46  equ   bankx.vectab + 90     ;
0062      7FCC     vec.47  equ   bankx.vectab + 92     ;
0063      7FCE     vec.48  equ   bankx.vectab + 94     ;
0064      7FD0     vec.49  equ   bankx.vectab + 96     ;
0065      7FD2     vec.50  equ   bankx.vectab + 98     ;
0066      7FD4     vec.51  equ   bankx.vectab + 100    ;
0067      7FD6     vec.52  equ   bankx.vectab + 102    ;
0068      7FD8     vec.53  equ   bankx.vectab + 104    ;
0069      7FDA     vec.54  equ   bankx.vectab + 106    ;
0070      7FDC     vec.55  equ   bankx.vectab + 108    ;
0071      7FDE     vec.56  equ   bankx.vectab + 110    ;
0072      7FE0     vec.57  equ   bankx.vectab + 112    ;
0073      7FE2     vec.58  equ   bankx.vectab + 114    ;
0074      7FE4     vec.59  equ   bankx.vectab + 116    ;
0075      7FE6     vec.60  equ   bankx.vectab + 118    ;
0076      7FE8     vec.61  equ   bankx.vectab + 120    ;
0077      7FEA     vec.62  equ   bankx.vectab + 122    ;
0078      7FEC     vec.63  equ   bankx.vectab + 124    ;
0079      7FEE     vec.64  equ   bankx.vectab + 126    ;
                   < stevie_b0.asm
0174                                                   ; Vector table bank 0

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CART.FG99.RUN....... >3838 :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E378 :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLNAME......... >E3BA :     
    CLHOOK.............. >2F7C :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2FA4 :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >334C :     
    CMDB.INIT.EXIT...... >33A0 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >39AA :     
    CONST.11............ >39AC :     
    CONST.12............ >39AE :     
    CONST.13............ >39B0 :     
    CONST.14............ >39B2 :     
    CONST.15............ >39B4 :     
    CONST.2............. >2004 :     
    CONST.3............. >39A0 :     
    CONST.32............ >39B6 :     
    CONST.4............. >2006 :     
    CONST.5............. >39A2 :     
    CONST.6............. >39A4 :     
    CONST.7............. >39A6 :     
    CONST.8............. >2008 :     
    CONST.80............ >39B8 :     
    CONST.9............. >39A8 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3DC9 :     
    DEF.CLIP.FNAME.B.... >3DD4 :     
    DEF.DEVICES......... >3DDE :     
    DEF.FG99.FNAME...... >3E0E :     
    DEF.PRINTER.FNAME... >3DC2 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A5DA :     
    EDB.HIPAGE.ALLOC.... >37D2 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37DE :     
    EDB.HIPAGE.ALLOC.CRASH >3808 :     
    EDB.HIPAGE.ALLOC.EXIT >3810 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37FA :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3300 :     
    EDB.INIT.EXIT....... >3346 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >376A :     
    EDB.LINE.GETLENGTH.EXIT >37A6 :     
    EDB.LINE.GETLENGTH.NULL >37A2 :     
    EDB.LINE.GETLENGTH2. >37AE :     
    EDB.LINE.GETLENGTH2.EXIT >37CC :     
    EDB.LINE.MAPPAGE.... >3720 :     
    EDB.LINE.MAPPAGE.EXIT >3762 :     
    EDB.LINE.MAPPAGE.LOOKUP >373A :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.SRCH.COL.PTR.... >A5D4 :     
    EDB.SRCH.CURMATCH... >A5D0 :     
    EDB.SRCH.ENDLN...... >A5CA :     
    EDB.SRCH.IDX.CSIZE.. >0400 :     
    EDB.SRCH.IDX.CTOP... >F900 :     
    EDB.SRCH.IDX.RSIZE.. >0800 :     
    EDB.SRCH.IDX.RTOP... >F100 :     
    EDB.SRCH.MATCHCOL... >A5D8 :     
    EDB.SRCH.MATCHES.... >A5CE :     
    EDB.SRCH.OFFSET..... >A5D6 :     
    EDB.SRCH.ROW.PTR.... >A5D2 :     
    EDB.SRCH.STARTLN.... >A5C8 :     
    EDB.SRCH.STR........ >A576 :     
    EDB.SRCH.STRLEN..... >A5C6 :     
    EDB.SRCH.WORKLEN.... >A5CC :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >33CE :     
    ERRPANE.INIT........ >33A8 :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >31A8 :     
    FB.CALC.POINTER.EXIT >31C8 :     
    FB.CALC.SCRROWS..... >31D0 :     
    FB.CALC.SCRROWS.EXIT >31FC :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31F0 :     
    FB.CALC.SCRROWS.HANDLE.MC >31E4 :     
    FB.CALC.SCRROWS.HANDLE.RULER >31DA :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >3134 :     
    FB.INIT.EXIT........ >3186 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >318E :     
    FB.ROW2LINE.EXIT.... >31A2 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2E7E :     
    FG99.EXIT........... >2EB8 :     
    FG99.SEND.LOOP...... >2E8E :     
    FG99.WAIT........... >2EA6 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.CIRCBREAKER...... >A46A :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BC :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46C :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >1400 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E22 :     
    FILE.IMAGE.SAVE..... >2E20 :     
    FILE.LOAD........... >2E12 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E1E :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E24 :     
    FILE.STATUS......... >2E26 :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EC2 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CART.FG99. >0028 :     
    ID.DIALOG.CART.TYPE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FIND...... >001E :     
    ID.DIALOG.FIND.BROWSE >0078 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.OPT....... >006C :     
    ID.DIALOG.OPT.CLIP.. >0013 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >0072 :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3626 :     
    IDX.ENTRY.DELETE.EXIT >367E :     
    IDX.ENTRY.DELETE.LASTLINE >3652 :     
    IDX.ENTRY.DELETE.REORG >365A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3664 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3678 :     
    IDX.ENTRY.INSERT.... >36C8 :     
    IDX.ENTRY.INSERT.EXIT >3714 :     
    IDX.ENTRY.INSERT.REORG >36E6 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36F0 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3704 :     
    IDX.ENTRY.UPDATE.... >3578 :     
    IDX.ENTRY.UPDATE.CLEAR >35B2 :     
    IDX.ENTRY.UPDATE.EXIT >35C2 :     
    IDX.ENTRY.UPDATE.SAVE >35A0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3200 :     
    IDX.INIT.EXIT....... >323C :     
    IDX.POINTER.GET..... >35CA :     
    IDX.POINTER.GET.EXIT >360C :     
    IDX.POINTER.GET.PARM >35FA :     
    IDX.POINTER.GET.PARM.NULL >3604 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F5C :     
    KTHREAD_EXIT........ >2F6E :     
    KTHREAD_KB.......... >2F6A :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >611A :     
    MAGIC.CLEAR......... >6108 :     
    MAGIC.SET........... >60F6 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >3E14 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >60D2 :     
    MEM.SAMS.SET.LEGACY. >60C0 :     
    MEM.SAMS.SET.STEVIE. >60E4 :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F7A :     
    MKHOOK.............. >2F72 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2FA0 :     
    MKSLOT.............. >2F86 :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NEW.STEVIE.......... >6040 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3926 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTROW......... >0017 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3818 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3830 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RELOC.RESIDENT...... >612C :     
    RESUME.STEVIE....... >6038 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >3084 :     
    ROM.FARJUMP.ASSERT.CART >30F6 :     
    ROM.FARJUMP.ASSERT.LOWMEM >3104 :     
    ROM.FARJUMP.BANKSWITCH.CALL >30E6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30DE :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3122 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3114 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30C2 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30C6 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30CE :     
    ROM.FARJUMP.EXIT.... >312A :     
    ROM.FARJUMP.RETURN.. >30E8 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6026 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >391A :     
    RSSLOT.............. >2FB2 :     
    RUNLI1.............. >2FCA :     
    RUNLI2.............. >2FD6 :     
    RUNLI3.............. >2FDA :     
    RUNLI3A............. >2FE2 :     
    RUNLI4.............. >2FEC :     
    RUNLI5.............. >2FF6 :     
    RUNLI6.............. >3004 :     
    RUNLI7.............. >3012 :     
    RUNLI9.............. >3016 :     
    RUNLIA.............. >3038 :     
    RUNLIB.............. >2FC6 :     
    RUNLIC.............. >305C :     
    RUNLID.............. >3072 :     
    RUNLIE.............. >307C :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F3E :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >390E :     
    TASK.ONESHOT.EXIT... >3916 :     
    TASK.VDP.COPY.SAT... >3858 :     
    TASK.VDP.COPY.SAT.CMDB >3880 :     
    TASK.VDP.COPY.SAT.EXIT >38EE :     
    TASK.VDP.COPY.SAT.FB >3890 :     
    TASK.VDP.COPY.SAT.FB.NORULER >38A4 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38DA :     
    TASK.VDP.COPY.SAT.WRITE >38A8 :     
    TASK.VDP.COPY.SAT.WRITE2 >38E4 :     
    TASK.VDP.CURSOR..... >38FA :     
    TASK.VDP.CURSOR.EXIT >3908 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F5A :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F5A :     
    TMGR................ >2EBE :     
    TMGR1............... >2EC2 :     
    TMGR10.............. >2F42 :     
    TMGR11.............. >2F50 :     
    TMGR12.............. >2F54 :     
    TMGR1A.............. >2ED0 :     
    TMGR2............... >2ED6 :     
    TMGR3............... >2EE6 :     
    TMGR4............... >2EF8 :     
    TMGR5............... >2F0E :     
    TMGR6............... >2F12 :     
    TMGR7............... >2F16 :     
    TMGR8............... >2F18 :     
    TMGR9............... >2F20 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >3928 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >33D8 :     
    TV.INIT.EXIT........ >3424 :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3500 :     
    TV.PAD.STRING.EXIT.. >356C :     
    TV.PAD.STRING.LOOP.. >3556 :     
    TV.PAD.STRING.PANIC. >3564 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >342E :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3988 :     
    TV.TABS.TABLE.RL.... >3994 :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >34CA :     
    TV.UINT16.PACK...... >343C :     
    TV.UINT16.PACK.DONE. >34B6 :     
    TV.UINT16.PACK.ERROR >34AE :     
    TV.UINT16.PACK.EXIT. >34BA :     
    TV.UINT16.PACK.LOOP. >3484 :     
    TV.UINT16.UNPACK.... >34D4 :     
    TV.UINT16.UNPACK.EXIT >34FA :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3CEA :     
    TXT.AUTOINS.OFF..... >3B50 :     
    TXT.AUTOINS.ON...... >3B40 :     
    TXT.AUTOINSERT...... >39D0 :     
    TXT.BLOCK.CLIP...... >3A56 :     
    TXT.BLOCK.COPY...... >3A20 :     
    TXT.BLOCK.DEL....... >3A0C :     
    TXT.BLOCK.INSIDE.... >3D80 :     
    TXT.BLOCK.MOVE...... >3A32 :     
    TXT.BLOCK.PRINT..... >3A70 :     
    TXT.BLOCK.SAVE...... >3A44 :     
    TXT.BOTTOM.......... >39BE :     
    TXT.CLEARMEM........ >3A84 :     
    TXT.CMDB.PROMPT..... >3DAE :     
    TXT.COLON........... >39BC :     
    TXT.COLORSCHEME..... >3DB0 :     
    TXT.DONE.APPEND..... >3ACE :     
    TXT.DONE.CLIPBOARD.. >3B22 :     
    TXT.DONE.CLIPDEV.... >3B32 :     
    TXT.DONE.COPY....... >3AF0 :     
    TXT.DONE.DELETE..... >3B10 :     
    TXT.DONE.INSERT..... >3ABC :     
    TXT.DONE.LOAD....... >3AAC :     
    TXT.DONE.PRINT...... >3B00 :     
    TXT.DONE.SAVE....... >3AE0 :     
    TXT.FASTMODE........ >3B60 :     
    TXT.FILETYPE.DV80... >3BDE :     
    TXT.FILETYPE.NONE... >3CF8 :     
    TXT.INSERT.......... >39CA :     
    TXT.IO.NOFILE....... >3D5C :     
    TXT.IOERR.LOAD...... >3D14 :     
    TXT.IOERR.PRINT..... >3D40 :     
    TXT.IOERR.SAVE...... >3D2A :     
    TXT.KB.............. >3B9E :     
    TXT.KEYMARKER....... >3CF0 :     
    TXT.KEYS.BASIC1..... >3CBC :     
    TXT.KEYS.BLOCK...... >3C80 :     
    TXT.KEYS.DEFAULT.... >3BEC :     
    TXT.KEYS.DEFAULTB... >3BFE :     
    TXT.KEYS.DEFAULTC... >3C1C :     
    TXT.KEYS.DEFAULTD... >3C48 :     
    TXT.LINES........... >3BA2 :     
    TXT.LOADING......... >39D8 :     
    TXT.M1.............. >3BE4 :     
    TXT.M2.............. >3BE8 :     
    TXT.MEMFULL.LOAD.... >3D74 :     
    TXT.MSG.TIBASIC..... >3CFE :     
    TXT.NEWFILE......... >3BA8 :     
    TXT.NODISK.......... >3B6C :     
    TXT.OVRWRITE........ >39C4 :     
    TXT.PICKER.ICON1.... >3DBE :     
    TXT.PICKER.ICON2.... >3DC0 :     
    TXT.PRINTING........ >39F0 :     
    TXT.READDIR......... >3A98 :     
    TXT.SAVING.......... >39E4 :     
    TXT.SEARCHING....... >39FE :     
    TXT.SLASH........... >39BA :     
    TXT.STAR............ >39D6 :     
    TXT.TIB1............ >3BB4 :     
    TXT.TIB2............ >3BC2 :     
    TXT.TIB3............ >3BD0 :     
    TXT.UNCRUNCHING..... >3B80 :     
    TXT.VERTLINE........ >3CEE :     
    TXT.WS1............. >3CF2 :     
    TXT.WS2............. >3CF4 :     
    TXT.WS4............. >3CF8 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0780 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0780 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E80 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.LOAD.......... >2E14 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2FA6 :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >309C :     
    XROM.FARJUMP.PUSH_RETURN >30AC :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _FILE.RECORD.FOP.... >2E28 :     
    _FILE.RECORD.FOP.EXIT >2E7A :     
    _FILE.RECORD.FOP.OPTIMIZED >2E5E :     
    _FILE.RECORD.FOP.PAB >2E62 :     
    _IDX.ENTRY.DELETE.REORG >3616 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >361E :     
    _IDX.ENTRY.INSERT.REORG >368A :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3690 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36B8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3276 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >32A4 :     
    _IDX.SAMS.MAPCOLUMN.ON >3242 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >326C :     
    _IDX.SAMSPAGE.GET... >32B0 :     
    _IDX.SAMSPAGE.GET.EXIT >32F6 :     
