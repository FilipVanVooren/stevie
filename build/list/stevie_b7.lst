XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b7.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2025 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b7.asm
0020               *
0021               * Bank 7 "Jonas"
0022               * SAMS, Cartridge and TI Basic support routines
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 250818-1516440
0003               ***************************************************************
                   < stevie_b7.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b7.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b7.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 30x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 30 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      001D     pane.botrow               equ  29      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      1400     fh.vpab                   equ  >1400   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      000C     spfont  equ   >0c                   ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; \ VDP color table base.
0041                                                   ; / Not used in F18a 80 columns mode
0042      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0043      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0044      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0045               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b7.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028      000C     tv.colorscheme.entries    equ 12       ; Entries in colorscheme table
0029               ;-----------------------------------------------------------------
0030               ;   Dialog ID's
0031               ;-----------------------------------------------------------------
0032      000A     id.dialog.load            equ  10      ; "Load file"
0033      000B     id.dialog.insert          equ  11      ; "Insert file"
0034      000C     id.dialog.append          equ  12      ; "Append file"
0035      000D     id.dialog.cat             equ  13      ; "Catalog"
0036      000F     id.dialog.save            equ  15      ; "Save file"
0037      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0038      0011     id.dialog.print           equ  17      ; "Print file"
0039      0012     id.dialog.printblock      equ  18      ; "Print block"
0040      0013     id.dialog.opt.clip        equ  19      ; "Configure clipboard"
0041      0014     id.dialog.goto            equ  20      ; "Goto"
0042      001E     id.dialog.find            equ  30      ; "Find"
0043      0028     id.dialog.cart.fg99       equ  40      ; "FinalGROM 99 Cartridge"
0044               ;-----------------------------------------------------------------
0045               ;   Dialog ID's >= 100 indicate that command prompt should be
0046               ;   hidden and no characters added to CMDB keyboard buffer.
0047               ;-----------------------------------------------------------------
0048      0064     id.dialog.menu            equ  100     ; "Main Menu"
0049      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0050      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0051      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0052      0068     id.dialog.help            equ  104     ; "About"
0053      0069     id.dialog.file            equ  105     ; "File"
0054      006A     id.dialog.cart.type       equ  106     ; "Cartridge Type"
0055      006B     id.dialog.basic           equ  107     ; "TI Basic"
0056      006C     id.dialog.opt             equ  108     ; "Configure"
0057      006D     id.dialog.editor          equ  109     ; "Configure editor"
0058      006E     id.dialog.font            equ  110     ; "Configure font"
0059      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0060      0072     id.dialog.run             equ  114     ; "Run program image (EA5)"
0061      0078     id.dialog.find.browse     equ  120     ; "Find - Search results"
0062               ;-----------------------------------------------------------------
0063               ; Suffix characters for clipboards
0064               ;-----------------------------------------------------------------
0065      3100     clip1                     equ  >3100   ; '1'
0066      3200     clip2                     equ  >3200   ; '2'
0067      3300     clip3                     equ  >3300   ; '3'
0068      3400     clip4                     equ  >3400   ; '4'
0069      3500     clip5                     equ  >3500   ; '5'
0070               ;-----------------------------------------------------------------
0071               ; Keyboard flags in Stevie
0072               ;-----------------------------------------------------------------
0073      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0074               ;-----------------------------------------------------------------
0075               ; File work mode
0076               ;-----------------------------------------------------------------
0077      0001     id.file.loadfile          equ  1       ; Load file
0078      0002     id.file.insertfile        equ  2       ; Insert file
0079      0003     id.file.appendfile        equ  3       ; Append file
0080      0004     id.file.savefile          equ  4       ; Save file
0081      0005     id.file.saveblock         equ  5       ; Save block to file
0082      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0083      0007     id.file.printfile         equ  7       ; Print file
0084      0008     id.file.printblock        equ  8       ; Print block
0085               ;-----------------------------------------------------------------
0086               ; Special file indicator
0087               ;-----------------------------------------------------------------
0088      0000     id.special.normal         equ  0       ; Normal file
0089      0002     id.special.readonly       equ  2       ; Read-only file
0090      0003     id.special.basic          equ  3       ; TI Basic program
0091               ;-----------------------------------------------------------------
0092               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0093               ;-----------------------------------------------------------------
0094      A000     core1.top         equ  >a000           ; Structure begin
0095      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0096      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0097      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0098      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0099      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0100      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0101      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0102      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0103      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0104      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0105      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0106      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0107      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0108      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0109      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0110      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0111      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0112      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0113      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0114      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0115      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0116      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0117      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0118      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0119      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0120      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0121      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0122      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0123                                 ;--------------------------------------------
0124                                 ; TI Basic related
0125                                 ;--------------------------------------------
0126      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0127      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0128      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0129      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0130      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0131      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0132      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0133      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0134      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0135      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0136      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0137      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0138      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0139      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0140      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0141      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0142      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0143      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0144      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0145      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0146      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0147      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0148      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0149      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0150      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0151      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0152      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0153      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0154      A100     core1.free        equ  core1.top + 256 ; End of structure
0155               ;-----------------------------------------------------------------
0156               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0157               ;-----------------------------------------------------------------
0158      A100     core2.top         equ  >a100           ; Structure begin
0159      A100     rambuf            equ  core2.top       ; RAM workbuffer
0160      A200     core2.free        equ  core2.top + 256 ; End of structure
0161               ;-----------------------------------------------------------------
0162               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0163               ;-----------------------------------------------------------------
0164      A200     tv.struct         equ  >a200           ; Structure begin
0165      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0166      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0167      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0168      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0169      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0170      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0171      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0172      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0173      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0174      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0175      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0176      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0177      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer
0178      A21A     tv.topcolor       equ  tv.struct + 26  ; FG/BG-color top status line
0179      A21C     tv.botcolor       equ  tv.struct + 28  ; FG/BG-color bottom status line
0180      A21E     tv.markcolor      equ  tv.struct + 30  ; FG/BG-color marked lines in framebuffer
0181      A220     tv.busycolor      equ  tv.struct + 32  ; FG/BG-color bottom line when busy
0182      A222     tv.rulercolor     equ  tv.struct + 34  ; FG/BG-color ruler line
0183      A224     tv.cmdb.color     equ  tv.struct + 36  ; FG/BG-color cmdb lines
0184      A226     tv.cmdb.hcolor    equ  tv.struct + 38  ; FG/BG-color cmdb header line
0185      A228     tv.font.ptr       equ  tv.struct + 40  ; Pointer to font (in ROM bank 6 or RAM)
0186      A22A     tv.pane.focus     equ  tv.struct + 42  ; Identify pane that has focus
0187      A22C     tv.task.oneshot   equ  tv.struct + 44  ; Pointer to one-shot routine
0188      A22E     tv.fj.stackpnt    equ  tv.struct + 46  ; Pointer to farjump return stack
0189      A230     tv.error.visible  equ  tv.struct + 48  ; Error pane visible
0190      A232     tv.error.rows     equ  tv.struct + 50  ; Number of rows in error pane
0191      A234     tv.sp2.conf       equ  tv.struct + 52  ; Backup of SP2 config register
0192      A236     tv.sp2.stack      equ  tv.struct + 54  ; Backup of SP2 stack register
0193      A238     tv.fg99.img.ptr   equ  tv.struct + 56  ; Pointer to Final GROM cartridge to load
0194      A23A     tv.specmsg.ptr    equ  tv.struct + 58  ; Pointer to special message above botrow
0195      A23C     tv.lineterm       equ  tv.struct + 60  ; Default line termination character(s)
0196      A23E     tv.error.msg      equ  tv.struct + 62  ; Error message (max. 160 characters)
0197      A2DE     tv.free           equ  tv.struct + 222 ; End of structure
0198               ;-----------------------------------------------------------------
0199               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0200               ;-----------------------------------------------------------------
0201      A300     fb.struct         equ  >a300           ; Structure begin
0202      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0203      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0204      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0205                                                      ; line X in editor buffer).
0206      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0207                                                      ; (offset 0 .. @fb.scrrows)
0208      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0209      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0210      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0211      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0212      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0213      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0214      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0215      A316     fb.prevcursor     equ  fb.struct + 22  ; Previous cursor position
0216      A318     fb.yxsave         equ  fb.struct + 24  ; Copy of cursor YX for toggling fb/cmdb
0217      A31A     fb.dirty          equ  fb.struct + 26  ; Frame buffer dirty flag
0218      A31C     fb.status.dirty   equ  fb.struct + 28  ; Status line(s) dirty flag
0219      A31E     fb.scrrows        equ  fb.struct + 30  ; Rows on physical screen for framebuffer
0220      A320     fb.scrrows.max    equ  fb.struct + 32  ; Max # of rows on physical screen for fb
0221      A322     fb.ruler.sit      equ  fb.struct + 34  ; 80 char ruler  (no length-prefix!)
0222      A372     fb.ruler.tat      equ  fb.struct + 114 ; 80 char colors (no length-prefix!)
0223      A3C2     fb.free           equ  fb.struct + 194 ; End of structure
0224               ;-----------------------------------------------------------------
0225               ; File handle structure                @>a400-a4ff   (256 bytes)
0226               ;-----------------------------------------------------------------
0227      A400     fh.struct         equ  >a400           ; stevie file handling structures
0228               ;*******************************************************************************
0229               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0230               ;*******************************************************************************
0231      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0232      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0233      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0234      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0235      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0236      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0237      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0238      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0239      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0240      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0241      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0242      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0243      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0244      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0245      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0246      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0247      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0248      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0249      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0250      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0251      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0252      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0253      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0254      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0255      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0256      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0257      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0258      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0259      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0260      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0261      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0262      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0263      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0264      A464     fh.temp3          equ  fh.struct + 100 ; Temporary variable 3
0265      A466     fh.pabtpl.ptr     equ  fh.struct + 102 ; Pointer to PAB template in ROM/RAM
0266      A468     fh.dir.rec.ptr    equ  fh.struct + 104 ; Pointer to directory record
0267      A46A     fh.circbreaker    equ  fh.struct + 106 ; Circuit breaker. Halt file operation
0268      A46C     fh.membuffer      equ  fh.struct + 108 ; 80 bytes file memory buffer
0269      A4BC     fh.free           equ  fh.struct + 188 ; End of structure
0270               ;-----------------------------------------------------------------
0271               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0272               ; Overloads file handle structure
0273               ;-----------------------------------------------------------------
0274      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0275      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0276               ;-----------------------------------------------------------------
0277               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0278               ;-----------------------------------------------------------------
0279      A500     edb.struct        equ  >a500            ; Begin structure
0280      A500     edb.top.ptr       equ  edb.struct       ; Pointer to editor buffer
0281      A502     edb.index.ptr     equ  edb.struct + 2   ; Pointer to index
0282      A504     edb.lines         equ  edb.struct + 4   ; Total lines in editor buffer - 1
0283      A506     edb.dirty         equ  edb.struct + 6   ; Editor buffer dirty (Text changed!)
0284      A508     edb.next_free.ptr equ  edb.struct + 8   ; Pointer to next free line
0285      A50A     edb.insmode       equ  edb.struct + 10  ; Insert mode (>ffff=insert)
0286      A50C     edb.autoinsert    equ  edb.struct + 12  ; Auto-insert on ENTER flag (>ffff=on)
0287      A50E     edb.block.m1      equ  edb.struct + 14  ; Block start line marker (>ffff=unset)
0288      A510     edb.block.m2      equ  edb.struct + 16  ; Block end line marker (>ffff=unset)
0289      A512     edb.block.var     equ  edb.struct + 18  ; Local var used in block operation
0290      A514     edb.filename.ptr  equ  edb.struct + 20  ; Pointer to length-prefixed string
0291                                                       ; with current filename.
0292      A516     edb.filetype.ptr  equ  edb.struct + 22  ; Pointer to length-prefixed string
0293                                                       ; with current file type.
0294      A518     edb.sams.page     equ  edb.struct + 24  ; Current SAMS page
0295      A51A     edb.sams.lopage   equ  edb.struct + 26  ; Lowest SAMS page in use
0296      A51C     edb.sams.hipage   equ  edb.struct + 28  ; Highest SAMS page in use
0297      A51E     edb.bk.fb.topline equ  edb.struct + 30  ; Backup of @fb.topline before opening
0298                                                       ; other file from special file.
0299      A520     edb.bk.fb.row     equ  edb.struct + 32  ; Backup of @fb.row before opening
0300                                                       ; other file from special file.
0301      A522     edb.special.file  equ  edb.struct + 34  ; Special file in editor buffer
0302      A524     edb.lineterm      equ  edb.struct + 36  ; Line termination character
0303                                                       ; MSB: Mode on (>ff) or off (>00)
0304                                                       ; LSB: Line termination character
0305      A526     edb.filename      equ  edb.struct + 38  ; 80 characters inline buffer reserved
0306                                                       ; for filename, but not always used.
0307      A576     edb.srch.str      equ  edb.struct + 118 ; 80 characters search string buffer
0308      A5C6     edb.srch.strlen   equ  edb.struct + 198 ; Length of search string
0309      A5C8     edb.srch.startln  equ  edb.struct + 200 ; Start line in editor buffer for search
0310      A5CA     edb.srch.endln    equ  edb.struct + 202 ; End line in editor buffer for search
0311      A5CC     edb.srch.worklen  equ  edb.struct + 204 ; Length of unpacked line in work buffer
0312      A5CE     edb.srch.matches  equ  edb.struct + 206 ; Number of search matches
0313      A5D0     edb.srch.curmatch equ  edb.struct + 208 ; Current index entry in search matches
0314      A5D2     edb.srch.row.ptr  equ  edb.struct + 210 ; Pointer entry in rows search index
0315      A5D4     edb.srch.col.ptr  equ  edb.struct + 212 ; Pointer entry in cols search index
0316      A5D6     edb.srch.offset   equ  edb.struct + 214 ; Offset into current row index entry
0317      A5D8     edb.srch.matchcol equ  edb.struct + 216 ; Column of search match in current row
0318      A5DA     edb.locked        equ  edb.struct + 218 ; Editor locked flag (>ffff=locked)
0319      A5DC     edb.free          equ  edb.struct + 220 ; End of structure
0320               ;-----------------------------------------------------------------
0321               ; Index structure                      @>a600-a6ff   (256 bytes)
0322               ;-----------------------------------------------------------------
0323      A600     idx.struct        equ  >a600           ; stevie index structure
0324      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0325      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0326      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0327      A606     idx.free          equ  idx.struct + 6  ; End of structure
0328               ;-----------------------------------------------------------------
0329               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0330               ;-----------------------------------------------------------------
0331      A700     cmdb.struct       equ  >a700             ; Command Buffer structure
0332      A700     cmdb.top.ptr      equ  cmdb.struct       ; Pointer to command buffer (history)
0333      A702     cmdb.visible      equ  cmdb.struct + 2   ; Command buffer visible? (>ffff=yes)
0334      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4   ; Copy of FB WYX if entering cmdb pane
0335      A706     cmdb.scrrows      equ  cmdb.struct + 6   ; Current size of CMDB pane (in rows)
0336      A708     cmdb.default      equ  cmdb.struct + 8   ; Default size of CMDB pane (in rows)
0337      A70A     cmdb.cursor       equ  cmdb.struct + 10  ; Screen YX of cursor in CMDB pane
0338      A70C     cmdb.yxsave       equ  cmdb.struct + 12  ; Copy of WYX
0339      A70E     cmdb.free1        equ  cmdb.struct + 14  ; **free**
0340      A710     cmdb.prevcursor   equ  cmdb.struct + 16  ; Previous cursor position
0341      A712     cmdb.vdptop       equ  cmdb.struct + 18  ; VDP addr CMDB pane header line (TAT)
0342      A714     cmdb.yxtop        equ  cmdb.struct + 20  ; YX pos CMDB pane header line
0343      A716     cmdb.yxprompt     equ  cmdb.struct + 22  ; YX pos of command buffer prompt
0344      A718     cmdb.column       equ  cmdb.struct + 24  ; Current column in command buffer pane
0345      A71A     cmdb.length       equ  cmdb.struct + 26  ; Length of current row in CMDB
0346      A71C     cmdb.lines        equ  cmdb.struct + 28  ; Total lines in CMDB
0347      A71E     cmdb.dirty        equ  cmdb.struct + 30  ; Command buffer dirty (Text changed!)
0348      A720     cmdb.dialog       equ  cmdb.struct + 32  ; Dialog identifier
0349      A722     cmdb.dialog.var   equ  cmdb.struct + 34  ; Dialog private variable or pointer
0350      A724     cmdb.panhead      equ  cmdb.struct + 36  ; Pointer string pane header
0351      A726     cmdb.paninfo      equ  cmdb.struct + 38  ; Pointer string pane info (1st line)
0352      A728     cmdb.panhint      equ  cmdb.struct + 40  ; Pointer string pane hint (2nd line)
0353      A72A     cmdb.panhint2     equ  cmdb.struct + 42  ; Pointer string pane hint (extra)
0354      A72C     cmdb.panmarkers   equ  cmdb.struct + 44  ; Pointer key marker list  (3rd line)
0355      A72E     cmdb.pankeys      equ  cmdb.struct + 46  ; Pointer string pane keys (stat line)
0356      A730     cmdb.action.ptr   equ  cmdb.struct + 48  ; Pointer function to execute
0357      A732     cmdb.cmdall       equ  cmdb.struct + 50  ; Current command including length-byte
0358      A732     cmdb.cmdlen       equ  cmdb.struct + 50  ; Length of current command (MSB byte!)
0359      A733     cmdb.cmd          equ  cmdb.struct + 51  ; Current command (80 bytes max.)
0360      A784     cmdb.panhead.buf  equ  cmdb.struct + 132 ; String buffer for pane header
0361      A7B6     cmdb.dflt.fname   equ  cmdb.struct + 182 ; Default for filename
0362      A800     cmdb.free         equ  cmdb.struct + 256 ; End of structure
0363               ;-----------------------------------------------------------------
0364               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0365               ;-----------------------------------------------------------------
0366      A900     sp2.stktop        equ  >a900           ; \
0367                                                      ; | The stack grows from high memory
0368                                                      ; | towards low memory.
0369                                                      ; |
0370                                                      ; | Stack leaking is checked in SP2
0371                                                      ; | user hook "edkey.keyscan.hook"
0372                                                      ; /
0373               ;-----------------------------------------------------------------
0374               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0375               ;-----------------------------------------------------------------
0376      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0377                                                      ; / stored in cartridge ROM bank7.asm
0378               
0379      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0380                                                      ; | scratchpad backup/restore routines.
0381                                                      ; /
0382               
0383      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0384      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0385                                                      ; calling TI Basic/External programs
0386               ;-----------------------------------------------------------------
0387               ; Farjump return stack                 @>af00-afff     (256 bytes)
0388               ;-----------------------------------------------------------------
0389      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0390                                                      ; Grows downwards from high to low.
0391               ;-----------------------------------------------------------------
0392               ; Index                                @>b000-bfff    (4096 bytes)
0393               ;-----------------------------------------------------------------
0394      B000     idx.top           equ  >b000           ; Top of index
0395      1000     idx.size          equ  4096            ; Index size
0396               ;-----------------------------------------------------------------
0397               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0398               ;-----------------------------------------------------------------
0399      C000     edb.top           equ  >c000           ; Editor buffer high memory
0400      1000     edb.size          equ  4096            ; Editor buffer size
0401               ;-----------------------------------------------------------------
0402               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0403               ;-----------------------------------------------------------------
0404      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0405      0960     fb.size           equ  80*30           ; Frame buffer size
0406      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0407                                                      ; / >d960->dcff
0408               ;-----------------------------------------------------------------
0409               ; Defaults area                        @>de00-dfff     (512 bytes)
0410               ;-----------------------------------------------------------------
0411      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0412      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0413      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0414               ;-----------------------------------------------------------------
0415               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0416               ;-----------------------------------------------------------------
0417      E000     cat.top           equ  >e000           ; Top of file catalog
0418      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0419      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0420      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0421      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0422      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0423      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0424      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0425      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0426      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0427      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0428      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0429      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0430               ;-----------------------------------------------------------------
0431               ; Directory/File catalog pointers and numbers
0432               ;-----------------------------------------------------------------
0433      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0434      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0435      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0436      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0437      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0438      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0439      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0440      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0441      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0442      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0443      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0444      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0445      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0446      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0447      E378     cat.volsize       equ  cat.top + 888   ; Volume size
0448      E37A     cat.volused       equ  cat.top + 890   ; Volume used
0449      E37C     cat.volfree       equ  cat.top + 892   ; Volume free
0450      E37E     cat.free1         equ  cat.top + 894   ; **free** up to 954
0451               ;-----------------------------------------------------------------
0452               ; Directory/File catalog strings (always length byte included)
0453               ;-----------------------------------------------------------------
0454      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0455      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0456      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0457      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0458      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0459      0F00     cat.size          equ  3840            ; Catalog total size
0460               ;-----------------------------------------------------------------
0461               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0462               ;-----------------------------------------------------------------
0463      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0464      0100     cmdb.size         equ  256             ; Command buffer size
0465               ;-----------------------------------------------------------------
0466               ; Heap & Strings area                  @>f000-f0ff     (256 bytes)
0467               ;-----------------------------------------------------------------
0468      F000     heap.top          equ  >f000           ; 80 Current filename
0469      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0470      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0471               ;-----------------------------------------------------------------
0472               ; Search results index for rows        @>f100-f8ff    (2048 bytes)
0473               ;-----------------------------------------------------------------
0474      F100     edb.srch.idx.rtop   equ  >f100         ; Search match index for rows
0475      0800     edb.srch.idx.rsize  equ  2048          ; Size of search match index for rows
0476               ;-----------------------------------------------------------------
0477               ; Search results index for columns     @>f900-fcff    (1024 bytes)
0478               ;-----------------------------------------------------------------
0479      F900     edb.srch.idx.ctop   equ  >f900         ; Search match index for columns
0480      0400     edb.srch.idx.csize  equ  1024          ; Size of search match index for columns
0481               ;-----------------------------------------------------------------
0482               ; Stevie specific equates
0483               ;-----------------------------------------------------------------
0484      0000     fh.fopmode.none      equ  0            ; No file operation in progress
0485      0001     fh.fopmode.readfile  equ  1            ; Read file from disk to memory
0486      0002     fh.fopmode.writefile equ  2            ; Save file from memory to disk
0487      0006     cmdb.rows            equ  6            ; Number of rows in CMDB pane
0488      A028     rom0_kscan_out       equ  keycode1     ; W here to store value of key pressed
0489      9900     tv.colorize.reset    equ  >9900        ; Colorization off
0490      00FE     tv.1timeonly         equ  254          ; One-time only flag indicator
0491      0100     tv.sams.maxpage      equ  256          ; Max SAMS pages supported
                   < stevie_b7.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b7.asm
0030                       copy  "equ.tib.asm"         ; Equates related to TI Basic session
     **** ****     > equ.tib.asm
0001               * FILE......: equ.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b7.asm
0031                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      004F     key.uc.o      equ >4f               ; O
0036      0050     key.uc.p      equ >50               ; P
0037      0051     key.uc.q      equ >51               ; Q
0038      0052     key.uc.r      equ >52               ; R
0039      0053     key.uc.s      equ >53               ; S
0040      0054     key.uc.t      equ >54               ; T
0041      0055     key.uc.u      equ >55               ; U
0042      0056     key.uc.v      equ >56               ; V
0043      0057     key.uc.w      equ >57               ; W
0044      0058     key.uc.x      equ >58               ; X
0045      0059     key.uc.y      equ >59               ; Y
0046      005A     key.uc.z      equ >5a               ; Z
0047      0061     key.lc.a      equ >61               ; a
0048      00A2     key.lc.b      equ >a2               ; b
0049      00A3     key.lc.c      equ >a3               ; c
0050      00A4     key.lc.d      equ >a4               ; d
0051      00A5     key.lc.e      equ >a5               ; e
0052      00A6     key.lc.f      equ >a6               ; f
0053      00A7     key.lc.g      equ >a7               ; g
0054      00A8     key.lc.h      equ >a8               ; h
0055      00A9     key.lc.i      equ >a9               ; i
0056      00AA     key.lc.j      equ >aa               ; j
0057      00AB     key.lc.k      equ >ab               ; k
0058      00AC     key.lc.l      equ >ac               ; l
0059      00AD     key.lc.m      equ >ad               ; m
0060      006E     key.lc.n      equ >6e               ; n
0061      006F     key.lc.o      equ >6f               ; o
0062      0070     key.lc.p      equ >70               ; p
0063      0071     key.lc.q      equ >71               ; q
0064      0072     key.lc.r      equ >72               ; r
0065      0073     key.lc.s      equ >73               ; s
0066      0074     key.lc.t      equ >74               ; t
0067      0075     key.lc.u      equ >75               ; u
0068      0076     key.lc.v      equ >76               ; v
0069      0077     key.lc.w      equ >77               ; w
0070      0078     key.lc.x      equ >78               ; x
0071      0079     key.lc.y      equ >79               ; y
0072      007A     key.lc.z      equ >7a               ; z
0073               *---------------------------------------------------------------
0074               * Keyboard scancodes - Function keys
0075               *-------------|---------------------|---------------------------
0076      00BC     key.fctn.0    equ >bc               ; fctn + 0
0077      0003     key.fctn.1    equ >03               ; fctn + 1
0078      0004     key.fctn.2    equ >04               ; fctn + 2
0079      0007     key.fctn.3    equ >07               ; fctn + 3
0080      0002     key.fctn.4    equ >02               ; fctn + 4
0081      000E     key.fctn.5    equ >0e               ; fctn + 5
0082      000C     key.fctn.6    equ >0c               ; fctn + 6
0083      0001     key.fctn.7    equ >01               ; fctn + 7
0084      0006     key.fctn.8    equ >06               ; fctn + 8
0085      000F     key.fctn.9    equ >0f               ; fctn + 9
0086      0000     key.fctn.a    equ >00               ; fctn + a
0087      00BE     key.fctn.b    equ >be               ; fctn + b
0088      0000     key.fctn.c    equ >00               ; fctn + c
0089      0009     key.fctn.d    equ >09               ; fctn + d
0090      000B     key.fctn.e    equ >0b               ; fctn + e
0091      0000     key.fctn.f    equ >00               ; fctn + f
0092      0000     key.fctn.g    equ >00               ; fctn + g
0093      00BF     key.fctn.h    equ >bf               ; fctn + h
0094      0000     key.fctn.i    equ >00               ; fctn + i
0095      00C0     key.fctn.j    equ >c0               ; fctn + j
0096      00C1     key.fctn.k    equ >c1               ; fctn + k
0097      00C2     key.fctn.l    equ >c2               ; fctn + l
0098      00C3     key.fctn.m    equ >c3               ; fctn + m
0099      00C4     key.fctn.n    equ >c4               ; fctn + n
0100      0000     key.fctn.o    equ >00               ; fctn + o
0101      0000     key.fctn.p    equ >00               ; fctn + p
0102      00C5     key.fctn.q    equ >c5               ; fctn + q
0103      0000     key.fctn.r    equ >00               ; fctn + r
0104      0008     key.fctn.s    equ >08               ; fctn + s
0105      0000     key.fctn.t    equ >00               ; fctn + t
0106      0000     key.fctn.u    equ >00               ; fctn + u
0107      007F     key.fctn.v    equ >7f               ; fctn + v
0108      007E     key.fctn.w    equ >7e               ; fctn + w
0109      000A     key.fctn.x    equ >0a               ; fctn + x
0110      00C6     key.fctn.y    equ >c6               ; fctn + y
0111      0000     key.fctn.z    equ >00               ; fctn + z
0112               *---------------------------------------------------------------
0113               * Keyboard scancodes - Function keys extra
0114               *---------------------------------------------------------------
0115      00B9     key.fctn.dot    equ >b9             ; fctn + .
0116      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0117      0005     key.fctn.plus   equ >05             ; fctn + +
0118               *---------------------------------------------------------------
0119               * Keyboard scancodes - control keys
0120               *-------------|---------------------|---------------------------
0121      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0122      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0123      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0124      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0125      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0126      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0127      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0128      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0129      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0130      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0131      0081     key.ctrl.a    equ >81               ; ctrl + a
0132      0082     key.ctrl.b    equ >82               ; ctrl + b
0133      0083     key.ctrl.c    equ >83               ; ctrl + c
0134      0084     key.ctrl.d    equ >84               ; ctrl + d
0135      0085     key.ctrl.e    equ >85               ; ctrl + e
0136      0086     key.ctrl.f    equ >86               ; ctrl + f
0137      0087     key.ctrl.g    equ >87               ; ctrl + g
0138      0088     key.ctrl.h    equ >88               ; ctrl + h
0139      0089     key.ctrl.i    equ >89               ; ctrl + i
0140      008A     key.ctrl.j    equ >8a               ; ctrl + j
0141      008B     key.ctrl.k    equ >8b               ; ctrl + k
0142      008C     key.ctrl.l    equ >8c               ; ctrl + l
0143      008D     key.ctrl.m    equ >8d               ; ctrl + m
0144      008E     key.ctrl.n    equ >8e               ; ctrl + n
0145      008F     key.ctrl.o    equ >8f               ; ctrl + o
0146      0090     key.ctrl.p    equ >90               ; ctrl + p
0147      0091     key.ctrl.q    equ >91               ; ctrl + q
0148      0092     key.ctrl.r    equ >92               ; ctrl + r
0149      0093     key.ctrl.s    equ >93               ; ctrl + s
0150      0094     key.ctrl.t    equ >94               ; ctrl + t
0151      0095     key.ctrl.u    equ >95               ; ctrl + u
0152      0096     key.ctrl.v    equ >96               ; ctrl + v
0153      0097     key.ctrl.w    equ >97               ; ctrl + w
0154      0098     key.ctrl.x    equ >98               ; ctrl + x
0155      0099     key.ctrl.y    equ >99               ; ctrl + y
0156      009A     key.ctrl.z    equ >9a               ; ctrl + z
0157               *---------------------------------------------------------------
0158               * Keyboard scancodes - control keys extra
0159               *---------------------------------------------------------------
0160      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0161      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0162      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0163      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0164      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0165               *---------------------------------------------------------------
0166               * Special keys
0167               *---------------------------------------------------------------
0168      000D     key.enter     equ >0d               ; enter
0169      0020     key.space     equ >20               ; space
                   < stevie_b7.asm
0032               ***************************************************************
0033               * BANK 7
0034               ********|*****|*********************|**************************
0035      600E     bankid  equ   bank7.rom             ; Set bank identifier to current bank
0036                       aorg  >6000
0037                       save  >6000,>8000           ; Save bank
0038                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE x.x.x RESET MEM"
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Change to rom.program2 to skip menu option "STEVIE x.x.x RESET MEM"
0024                       ;
0025 6006 6026             data  rom.program2          ; 6  \ Pointer to program list         >6006
0026                                                   ; 7  /
0027               
0028 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0029                                                   ; 9  /
0030               
0031 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0032                                                   ; 11 /
0033               
0034                       ;-----------------------------------------------------------------------
0035                       ; Program list entry
0036                       ;-----------------------------------------------------------------------
0037               rom.program1:
0038 600C 6026             data  rom.program2          ; 12 \ Next program list entry         >600c
0039                                                   ; 13 / (no more items following)
0040               
0041 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0042                                                   ; 15 /
0043               
0044 6010 1553             stri 'STEVIE 1.8.0 MEMRESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 312E     
     601A 382E     
     601C 3020     
     601E 4D45     
     6020 4D52     
     6022 4553     
     6024 4554     
0045                       even
0046               
0047                       ;-----------------------------------------------------------------------
0048                       ; Program list entry
0049                       ;-----------------------------------------------------------------------
0050               rom.program2:
0051 6026 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0052                                                   ; 13 / (no more items following)
0053               
0054 6028 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0055                                                   ; 15 /
0056               
0058 602A 0C53                 stri 'STEVIE 1.8.0'
     602C 5445     
     602E 5649     
     6030 4520     
     6032 312E     
     6034 382E     
     6036 30       
0060               
0064               
0068               
                   < stevie_b7.asm
0039               
0040               ***************************************************************
0041               * Step 1: Switch to bank 0 (uniform code accross all banks)
0042               ********|*****|*********************|**************************
0043                       aorg  >6038
0044 6038 04E0  34         clr   @bank7.rom            ; Switch to bank 7 "Jonas"
     603A 600E     
0045 603C 0460  28         b     @tib.run.return.mon   ; Resume Stevie session?
     603E 6482     
0046               
0047                       aorg  kickstart.code1       ; >6040
0048 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0049               ***************************************************************
0050               * Step 2: Satisfy assembler, must know relocated code
0051               ********|*****|*********************|**************************
0052                       aorg  >2000                 ; Relocate to >2000
0053                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FC0     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7FF0     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2E12 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2E14 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2E16 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2E18 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2E1A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2E1C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2E1E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E20 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2E22 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2E24 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E26 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2E28 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E2A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2E2E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2E30 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E32 A44C     
0246               
0247 2E34 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E36 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2E38 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E3A 0009     
0254 2E3C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E3E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2E40 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E42 8322     
     2E44 833C     
0259               
0260 2E46 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E48 A42A     
0261 2E4A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2E4C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E4E 2C4A     
0268 2E50 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2E52 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2E54 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E56 2D7A     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2E58 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2E5A C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E5C 833C     
     2E5E 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2E60 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E62 A436     
0292 2E64 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E66 0005     
0293 2E68 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E6A 22E4     
0294 2E6C C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2E6E C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2E70 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2E72 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E74 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E76 0649  22         dect  stack
0038 2E78 C64B  38         mov   r11,*stack            ; Save return address
0039 2E7A 0649  22         dect  stack
0040 2E7C C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E7E C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E80 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E82 0014     
0046               fg99.send.loop:
0047 2E84 04E0  34         clr   @>6000                ; Signal new byte
     2E86 6000     
0048 2E88 0201  24         li    r1,>0038              ; >7000 >> 9
     2E8A 0038     
0049 2E8C D070  44         movb  *r0+,r1
0050 2E8E 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E90 04D1  30         clr   *r1                   ; Send byte
0053 2E92 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E94 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2E96 04E0  34         clr   @>6000                ; Done sending filename
     2E98 6000     
0057 2E9A 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2E9C 0200  24         li    r0,>6000              ; check >6000->6200
     2E9E 6000     
0063 2EA0 0202  24         li    r2,>100
     2EA2 0100     
0064 2EA4 C070  46 !       mov   *r0+, r1
0065 2EA6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2EA8 0602  22         dec   r2
0067 2EAA 16FC  14         jne   -!
0068 2EAC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EAE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EB0 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EB2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EB4 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EB6 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EB8 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EBA 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EBC 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EBE 201C     
0029 2EC0 1602  14         jne   tmgr1a                ; No, so move on
0030 2EC2 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2EC4 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2EC6 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2EC8 2020     
0035 2ECA 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ECC 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ECE 2010     
0048 2ED0 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2ED2 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2ED4 200E     
0050 2ED6 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2ED8 0460  28         b     @kthread              ; Run kernel thread
     2EDA 2F52     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EDC 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EDE 2014     
0056 2EE0 13EB  14         jeq   tmgr1
0057 2EE2 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EE4 2012     
0058 2EE6 16E8  14         jne   tmgr1
0059 2EE8 C120  38         mov   @wtiusr,tmp0
     2EEA 832E     
0060 2EEC 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EEE 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EF0 2F50     
0065 2EF2 C10A  30         mov   r10,tmp0
0066 2EF4 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2EF6 00FF     
0067 2EF8 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2EFA 201C     
0068 2EFC 1303  14         jeq   tmgr5
0069 2EFE 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F00 003C     
0070 2F02 1002  14         jmp   tmgr6
0071 2F04 0284  26 tmgr5   ci    tmp0,50
     2F06 0032     
0072 2F08 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F0A 1001  14         jmp   tmgr8
0074 2F0C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F0E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F10 832C     
0079 2F12 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F14 FF00     
0080 2F16 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F18 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F1A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F1C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F1E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F20 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F22 830C     
     2F24 830D     
0089 2F26 1608  14         jne   tmgr10                ; No, get next slot
0090 2F28 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F2A FF00     
0091 2F2C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F2E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F30 8330     
0096 2F32 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F34 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F36 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F38 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F3A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F3C 8315     
     2F3E 8314     
0103 2F40 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F42 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F44 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F46 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F48 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F4A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F4C FF00     
0109 2F4E 10B4  14         jmp   tmgr1
0110 2F50 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F52 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F54 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F56 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F58 2006     
0023 2F5A 1602  14         jne   kthread_kb
0024 2F5C 06A0  36         bl    @sdpla1               ; Run sound player
     2F5E 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F60 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F62 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F64 0460  28         b     @tmgr3                ; Exit
     2F66 2EDC     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F68 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F6A 832E     
0018 2F6C E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F6E 2012     
0019 2F70 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EB8     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F72 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F74 832E     
0029 2F76 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F78 FEFF     
0030 2F7A 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F7C C13B  46 mkslot  mov   *r11+,tmp0
0018 2F7E C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F80 C184  30         mov   tmp0,tmp2
0023 2F82 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F84 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F86 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F88 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F8A 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F8C C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F8E 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F90 2022     
0035 2F92 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F94 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2F96 05CB  22 mkslo1  inct  r11
0041 2F98 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2F9A C13B  46 clslot  mov   *r11+,tmp0
0053 2F9C 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2F9E A120  38         a     @wtitab,tmp0          ; Add table base
     2FA0 832C     
0055 2FA2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FA4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FA6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FA8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FAA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FAC A120  38         a     @wtitab,tmp0          ; Add table base
     2FAE 832C     
0071 2FB0 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FB2 C154  38         mov   *tmp0,tmp1
0073 2FB4 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FB6 FF00     
0074 2FB8 C505  38         mov   tmp1,*tmp0
0075 2FBA 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FBC 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FBE 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FC0 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FC2 0000     
0288 2FC4 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FC6 8300     
0289 2FC8 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FCA 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FCC 0202  20 runli2  li    r2,>8308
     2FCE 8308     
0294 2FD0 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FD2 0282  22         ci    r2,>8400
     2FD4 8400     
0296 2FD6 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FD8 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FDA FFFF     
0301 2FDC 1602  14         jne   runli4                ; No, continue
0302 2FDE 0420  42         blwp  @0                    ; Yes, bye bye
     2FE0 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FE2 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FE4 833C     
0307 2FE6 04C1  14         clr   r1                    ; Reset counter
0308 2FE8 0202  20         li    r2,10                 ; We test 10 times
     2FEA 000A     
0309 2FEC C0E0  30 runli5  mov   @vdps,r3
     2FEE 8802     
0310 2FF0 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FF2 2020     
0311 2FF4 1302  14         jeq   runli6
0312 2FF6 0581  14         inc   r1                    ; Increase counter
0313 2FF8 10F9  14         jmp   runli5
0314 2FFA 0602  14 runli6  dec   r2                    ; Next test
0315 2FFC 16F7  14         jne   runli5
0316 2FFE 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     3000 1250     
0317 3002 1202  14         jle   runli7                ; No, so it must be NTSC
0318 3004 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3006 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3008 06A0  32 runli7  bl    @loadmc
     300A 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 300C 04C1  14 runli9  clr   r1
0327 300E 04C2  14         clr   r2
0328 3010 04C3  14         clr   r3
0329 3012 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     3014 A900     
0330 3016 020F  20         li    r15,vdpw              ; Set VDP write address
     3018 8C00     
0332 301A 06A0  32         bl    @mute                 ; Mute sound generators
     301C 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 301E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     3020 4A4A     
0339 3022 1605  14         jne   runlia
0340 3024 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3026 228E     
0341 3028 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     302A 0000     
     302C 3000     
0346 302E 06A0  32 runlia  bl    @filv
     3030 228E     
0347 3032 0FC0             data  pctadr,spfclr,16      ; Load color table
     3034 00F4     
     3036 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3038 06A0  32         bl    @f18unl               ; Unlock the F18A
     303A 278A     
0355 303C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     303E 27B4     
0356 3040 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     3042 27B4     
0357 3044 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3046 27B4     
0358 3048 06A0  32         bl    @f18lck               ; Lock the F18A again
     304A 27A0     
0359               
0360 304C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     304E 2332     
0361 3050 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 3052 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     3054 22F8     
0375 3056 7F50             data  spvmod                ; Equate selected video mode table
0376 3058 0204  20         li    tmp0,spfont           ; Get font option
     305A 000C     
0377 305C 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 305E 1304  14         jeq   runlid                ; Yes, skip it
0379 3060 06A0  32         bl    @ldfnt
     3062 2360     
0380 3064 1900             data  fntadr,spfont         ; Load specified font
     3066 000C     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3068 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     306A 4A4A     
0385 306C 1602  14         jne   runlie                ; No, continue
0386 306E 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     3070 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 3072 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     3074 0040     
0391 3076 0460  28         b     @main                 ; Give control to main program
     3078 6046     
                   < stevie_b7.asm
0054                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 307A 0649  14         dect  stack
0029 307C C644  30         mov   tmp0,*stack           ; Push tmp0
0030 307E 0649  14         dect  stack
0031 3080 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 3082 0649  14         dect  stack
0033 3084 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3086 0649  14         dect  stack
0035 3088 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 308A C13B  30         mov   *r11+,tmp0            ; P0
0040 308C C17B  30         mov   *r11+,tmp1            ; P1
0041 308E C1BB  30         mov   *r11+,tmp2            ; P2
0042 3090 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 3092 0649  14         dect  stack
0048 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 3096 0649  14         dect  stack
0050 3098 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 309A 0649  14         dect  stack
0052 309C C646  30         mov   tmp2,*stack           ; Push tmp2
0053 309E 0649  14         dect  stack
0054 30A0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30A2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30A4 6000     
0060 30A6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30A8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30AA A22E     
0064 30AC 0647  14         dect  tmp3
0065 30AE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30B0 0647  14         dect  tmp3
0067 30B2 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30B4 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30B6 A22E     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30B8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30BA 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30BC 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30BE 0224  22         ai    tmp0,>0800
     30C0 0800     
0086 30C2 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30C4 0285  22         ci    tmp1,>ffff
     30C6 FFFF     
0095 30C8 1602  14         jne   !
0096 30CA C160  34         mov   @trmpvector,tmp1
     30CC A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30CE C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30D0 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30D2 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30D4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30D6 FFCE     
0111 30D8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30DA 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30DC 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30DE C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30E0 A22E     
0122 30E2 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30E4 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30E6 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30E8 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30EA 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30EC 028B  22         ci    r11,>6000
     30EE 6000     
0139 30F0 1104  14         jlt   rom.farjump.assert.lowmem
0140 30F2 028B  22         ci    r11,>7fff
     30F4 7FFF     
0141 30F6 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 30F8 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 30FA 028B  22         ci    r11,>2000
     30FC 2000     
0148 30FE 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 3100 028B  22         ci    r11,>3fff
     3102 3FFF     
0150 3104 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3106 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3108 A22E     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 310A 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 310C 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 310E 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 3110 0225  22         ai    tmp1,>0800
     3112 0800     
0171 3114 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3116 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3118 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     311A FFCE     
0178 311C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     311E 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 3120 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 3122 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 3124 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3126 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3128 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 312A 0649  14         dect  stack
0021 312C C64B  30         mov   r11,*stack            ; Save return address
0022 312E 0649  14         dect  stack
0023 3130 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3132 0649  14         dect  stack
0025 3134 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3136 0204  20         li    tmp0,fb.top
     3138 D000     
0030 313A C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     313C A300     
0031 313E 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3140 A304     
0032 3142 04E0  34         clr   @fb.row               ; Current row=0
     3144 A306     
0033 3146 04E0  34         clr   @fb.column            ; Current column=0
     3148 A30C     
0034               
0035 314A 0204  20         li    tmp0,colrow
     314C 0050     
0036 314E C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3150 A30E     
0037 3152 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3154 A310     
0038               
0039 3156 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3158 001C     
0040 315A C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     315C A320     
0041               
0042 315E 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     3160 31C6     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 3162 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3164 A22A     
0048 3166 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3168 A312     
0049 316A 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     316C A31A     
0050 316E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3170 A31C     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 3172 06A0  32         bl    @film
     3174 2236     
0055 3176 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3178 0000     
     317A 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 317C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 317E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 3180 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 3182 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 3184 0649  14         dect  stack
0025 3186 C64B  30         mov   r11,*stack            ; Save return address
0026 3188 0649  14         dect  stack
0027 318A C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 318C C120  34         mov   @parm1,tmp0
     318E A006     
0032 3190 A120  34         a     @fb.topline,tmp0
     3192 A304     
0033 3194 C804  38         mov   tmp0,@outparm1
     3196 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3198 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 319A C2F9  30         mov   *stack+,r11           ; Pop r11
0040 319C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 319E 0649  14         dect  stack
0028 31A0 C64B  30         mov   r11,*stack            ; Save return address
0029 31A2 0649  14         dect  stack
0030 31A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31A6 0649  14         dect  stack
0032 31A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31AA C120  34         mov   @fb.row,tmp0
     31AC A306     
0037 31AE 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31B0 A30E     
0038 31B2 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31B4 A30C     
0039 31B6 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31B8 A300     
0040 31BA C805  38         mov   tmp1,@fb.current
     31BC A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31BE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31C0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31C2 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31C4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31C6 0649  14         dect  stack
0026 31C8 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31CA C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31CC A320     
     31CE A31E     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31D0 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31D2 A210     
0037 31D4 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31D6 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31D8 A31E     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31DA 8820  50         c     @edb.special.file,@const.0
     31DC A522     
     31DE 2000     
0044 31E0 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31E2 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E4 A31E     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31E6 0760  38         abs   @tv.error.visible     ; Error area visible?
     31E8 A230     
0051 31EA 1303  14         jeq   fb.calc.scrrows.exit
0052 31EC 6820  54         s     @tv.error.rows,@fb.scrrows
     31EE A232     
     31F0 A31E     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 31F6 0649  14         dect  stack
0052 31F8 C64B  30         mov   r11,*stack            ; Save return address
0053 31FA 0649  14         dect  stack
0054 31FC C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 31FE 0204  20         li    tmp0,idx.top
     3200 B000     
0059 3202 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3204 A502     
0060               
0061 3206 C120  34         mov   @tv.sams.b000,tmp0
     3208 A206     
0062 320A C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     320C A600     
0063 320E C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     3210 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3212 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3214 0004     
0068 3216 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3218 A604     
0069               
0070 321A 06A0  32         bl    @_idx.sams.mapcolumn.on
     321C 3238     
0071                                                   ; Index in continuous memory region
0072               
0073 321E 06A0  32         bl    @film
     3220 2236     
0074 3222 B000                   data idx.top,>00,idx.size * 5
     3224 0000     
     3226 5000     
0075                                                   ; Clear index
0076               
0077 3228 06A0  32         bl    @_idx.sams.mapcolumn.off
     322A 326C     
0078                                                   ; Restore memory window layout
0079               
0080 322C C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     322E A602     
     3230 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3232 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3234 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3236 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3238 0649  14         dect  stack
0102 323A C64B  30         mov   r11,*stack            ; Push return address
0103 323C 0649  14         dect  stack
0104 323E C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3240 0649  14         dect  stack
0106 3242 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3244 0649  14         dect  stack
0108 3246 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3248 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     324A A602     
0113 324C 0205  20         li    tmp1,idx.top
     324E B000     
0114 3250 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3252 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3254 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3256 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3258 0584  14         inc   tmp0                  ; Next SAMS index page
0123 325A 0225  22         ai    tmp1,>1000            ; Next memory region
     325C 1000     
0124 325E 0606  14         dec   tmp2                  ; Update loop counter
0125 3260 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3262 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3264 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3266 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3268 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 326A 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 326C 0649  14         dect  stack
0151 326E C64B  30         mov   r11,*stack            ; Push return address
0152 3270 0649  14         dect  stack
0153 3272 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3274 0649  14         dect  stack
0155 3276 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3278 0649  14         dect  stack
0157 327A C646  30         mov   tmp2,*stack           ; Push tmp2
0158 327C 0649  14         dect  stack
0159 327E C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3280 0205  20         li    tmp1,idx.top
     3282 B000     
0164 3284 0206  20         li    tmp2,5                ; Always 5 pages
     3286 0005     
0165 3288 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     328A A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 328C C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 328E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3290 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3292 0225  22         ai    tmp1,>1000            ; Next memory region
     3294 1000     
0176 3296 0606  14         dec   tmp2                  ; Update loop counter
0177 3298 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 329A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 329C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 329E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32A0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32A2 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32A4 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32A6 0649  14         dect  stack
0212 32A8 C64B  30         mov   r11,*stack            ; Save return address
0213 32AA 0649  14         dect  stack
0214 32AC C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32AE 0649  14         dect  stack
0216 32B0 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32B2 0649  14         dect  stack
0218 32B4 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32B6 C184  18         mov   tmp0,tmp2             ; Line number
0223 32B8 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32BA 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32BC 0800     
0225               
0226 32BE 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32C0 0A16  18         sla   tmp2,1                ; line number * 2
0231 32C2 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32C4 A018     
0232               
0233 32C6 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32C8 A602     
0234 32CA 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32CC A600     
0235               
0236 32CE 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32D0 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32D2 A600     
0242 32D4 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32D6 A206     
0243 32D8 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32DA 0205  20         li    tmp1,>b000            ; Memory window for index page
     32DC B000     
0246               
0247 32DE 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32E0 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32E2 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32E4 A604     
0254 32E6 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32E8 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32EA A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 32F6 0649  14         dect  stack
0023 32F8 C64B  30         mov   r11,*stack            ; Save return address
0024 32FA 0649  14         dect  stack
0025 32FC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 32FE 0204  20         li    tmp0,edb.top          ; \
     3300 C000     
0030 3302 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3304 A500     
0031 3306 C804  38         mov   tmp0,@edb.next_free.ptr
     3308 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 330A 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     330C A50A     
0035               
0036 330E 0204  20         li    tmp0,1
     3310 0001     
0037 3312 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3314 A504     
0038               
0039 3316 0720  34         seto  @edb.block.m1         ; Reset block start line
     3318 A50E     
0040 331A 0720  34         seto  @edb.block.m2         ; Reset block end line
     331C A510     
0041               
0042 331E C820  54         mov   @tv.lineterm,@edb.lineterm
     3320 A23C     
     3322 A524     
0043                                                   ; Set line termination char from default
0044               
0045 3324 0204  20         li    tmp0,txt.newfile      ; "New file"
     3326 3B22     
0046 3328 C804  38         mov   tmp0,@edb.filename.ptr
     332A A514     
0047               
0048 332C 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     332E A440     
0049 3330 04E0  34         clr   @fh.kilobytes.prev    ; /
     3332 A45C     
0050               
0051 3334 0204  20         li    tmp0,txt.filetype.none
     3336 3C9A     
0052 3338 C804  38         mov   tmp0,@edb.filetype.ptr
     333A A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 333C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 333E C2F9  30         mov   *stack+,r11           ; Pop r11
0060 3340 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 3342 0649  14         dect  stack
0023 3344 C64B  30         mov   r11,*stack            ; Save return address
0024 3346 0649  14         dect  stack
0025 3348 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 334A 0649  14         dect  stack
0027 334C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 334E 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3350 EF00     
0032 3352 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3354 A700     
0033               
0034 3356 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3358 A702     
0035 335A 0204  20         li    tmp0,6
     335C 0006     
0036 335E C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3360 A706     
0037 3362 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3364 A708     
0038               
0039 3366 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3368 A71C     
0040 336A 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     336C A71E     
0041 336E 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3370 A730     
0042 3372 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     3374 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3376 0204  20         li    tmp0,pane.botrow      ; \
     3378 001D     
0047 337A 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     337C A706     
0048 337E 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3380 833A     
0049 3382 C105  18         mov   tmp1,tmp0             ; | Get result
0050 3384 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3386 0980     
0051 3388 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     338A A712     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 338C 06A0  32         bl    @film
     338E 2236     
0056 3390 EF00                   data  cmdb.top,>00,cmdb.size
     3392 0000     
     3394 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3396 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3398 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 339A C2F9  30         mov   *stack+,r11           ; Pop r11
0065 339C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 339E 0649  14         dect  stack
0023 33A0 C64B  30         mov   r11,*stack            ; Save return address
0024 33A2 0649  14         dect  stack
0025 33A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33A6 0649  14         dect  stack
0027 33A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33AA 0649  14         dect  stack
0029 33AC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33AE 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33B0 A230     
0034 33B2 0204  20         li    tmp0,3
     33B4 0003     
0035 33B6 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33B8 A232     
0036               
0037 33BA 06A0  32         bl    @film
     33BC 2236     
0038 33BE A23E                   data tv.error.msg,0,160
     33C0 0000     
     33C2 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33C4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33CA C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33CC 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33CE 0649  14         dect  stack
0023 33D0 C64B  30         mov   r11,*stack            ; Save return address
0024 33D2 0649  14         dect  stack
0025 33D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33D6 0649  14         dect  stack
0027 33D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33DA 0649  14         dect  stack
0029 33DC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33DE 0204  20         li    tmp0,1                ; \ Set default color scheme
     33E0 0001     
0034 33E2 C804  38         mov   tmp0,@tv.colorscheme  ; /
     33E4 A212     
0035               
0036 33E6 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33E8 A22C     
0037 33EA E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33EC 200C     
0038               
0039 33EE 0204  20         li    tmp0,fj.bottom
     33F0 B000     
0040 33F2 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33F4 A22E     
0041               
0042 33F6 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     33F8 A23A     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 33FA 06A0  32         bl    @cpym2m
     33FC 253A     
0047 33FE 3D64                   data def.printer.fname,tv.printer.fname,7
     3400 DE00     
     3402 0007     
0048               
0049 3404 06A0  32         bl    @cpym2m
     3406 253A     
0050 3408 3D6B                   data def.clip.fname.a,tv.clip.fname,10
     340A DE50     
     340C 000A     
0051               
0052 340E 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3410 A50C     
0053               
0054 3412 0204  20         li    tmp0,13               ; \
     3414 000D     
0055 3416 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3418 A23C     
0056                                                   ; / LSB = 13 Carriage return
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               tv.init.exit:
0061 341A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 341C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 341E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 3420 C2F9  30         mov   *stack+,r11           ; Pop R11
0065 3422 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3424 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3426 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3428 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     342A 307A     
0028 342C 600E                   data bank7.rom        ; | i  p0 = bank address
0029 342E 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3430 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3432 0649  14         dect  stack
0025 3434 C64B  30         mov   r11,*stack            ; Push return address
0026 3436 0649  14         dect  stack
0027 3438 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 343A 0649  14         dect  stack
0029 343C C645  30         mov   tmp1,*stack           ; Push tmp1
0030 343E 0649  14         dect  stack
0031 3440 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3442 0649  14         dect  stack
0033 3444 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3446 0649  14         dect  stack
0035 3448 C640  30         mov   r0,*stack             ; Push r0
0036 344A 0649  14         dect  stack
0037 344C C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 344E C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3450 A006     
0042 3452 04C5  14         clr   tmp1                  ; Termination character >00
0043 3454 04E0  34         clr   @outparm1             ; Reset output parameters
     3456 A018     
0044 3458 04E0  34         clr   @outparm2             ; Reset output parameters
     345A A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 345C 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     345E 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 3460 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3462 833C     
0056 3464 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3466 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3468 0005     
0058 346A 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 346C C120  34         mov   @parm1,tmp0           ; Pointer to input string
     346E A006     
0063               
0064 3470 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 3472 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     3474 FFF6     
0066 3476 0746  18         abs   tmp2                  ; /
0067               
0068 3478 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 347A D174  28         movb  *tmp0+,tmp1           ; Get character
0074 347C 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 347E 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 3480 0285  22         ci    tmp1,32               ; Blank ?
     3482 0020     
0080 3484 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3486 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3488 FFD0     
0085 348A 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 348C 0285  22         ci    tmp1,9
     348E 0009     
0087 3490 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 3492 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     3494 34C0     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 3496 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 3498 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 349A 05C6  14         inct  tmp2                  ; Update loop counter
0102 349C 0286  22         ci    tmp2,8                ; Last digit done?
     349E 0008     
0103 34A0 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34A2 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34A4 04E0  34         clr   @outparm1             ; Empty uint16
     34A6 A018     
0110 34A8 0720  34         seto  @outparm2             ; Invalid input string
     34AA A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34AC C807  38         mov   tmp3,@outparm1
     34AE A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34B0 C079  30         mov   *stack+,r1            ; Pop r1
0121 34B2 C039  30         mov   *stack+,r0            ; Pop r0
0122 34B4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34B6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34BC C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34BE 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34C0 2710             data  10000,1000,100,10,1
     34C2 03E8     
     34C4 0064     
     34C6 000A     
     34C8 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34CA 0649  14         dect  stack
0022 34CC C64B  30         mov   r11,*stack            ; Save return address
0023 34CE 0649  14         dect  stack
0024 34D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34D2 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34D4 2A56     
0029 34D6 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34D8 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34DA 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34DB   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34DC 0204  20         li    tmp0,uint16.unpacked
     34DE A02C     
0035 34E0 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34E2 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34E4 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34E6 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34E8 2AAE     
0040 34EA A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34EC A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34EE 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34F4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 34F6 0649  14         dect  stack
0031 34F8 C64B  30         mov   r11,*stack            ; Push return address
0032 34FA 0649  14         dect  stack
0033 34FC C644  30         mov   tmp0,*stack           ; Push tmp0
0034 34FE 0649  14         dect  stack
0035 3500 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 3502 0649  14         dect  stack
0037 3504 C646  30         mov   tmp2,*stack           ; Push tmp2
0038 3506 0649  14         dect  stack
0039 3508 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 350A C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     350C A006     
0044 350E D194  26         movb  *tmp0,tmp2            ; /
0045 3510 0986  32         srl   tmp2,8                ; Right align
0046 3512 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 3514 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3516 A008     
0049 3518 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 351A C120  34         mov   @parm1,tmp0           ; Get source address
     351C A006     
0054 351E C160  34         mov   @parm4,tmp1           ; Get destination address
     3520 A00C     
0055 3522 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 3524 0649  14         dect  stack
0058 3526 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 3528 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     352A 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 352C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 352E C120  34         mov   @parm2,tmp0           ; Get requested length
     3530 A008     
0070 3532 0A84  32         sla   tmp0,8                ; Left align
0071 3534 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3536 A00C     
0072 3538 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 353A A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 353C 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 353E C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3540 A008     
0079 3542 6187  18         s     tmp3,tmp2             ; |
0080 3544 0586  14         inc   tmp2                  ; /
0081               
0082 3546 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3548 A00A     
0083 354A 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 354C DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 354E 0606  14         dec   tmp2                  ; Update loop counter
0090 3550 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 3552 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3554 A00C     
     3556 A018     
0093 3558 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 355A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     355C FFCE     
0099 355E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3560 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 3562 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 3564 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 3566 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3568 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 356A C2F9  30         mov   *stack+,r11           ; Pop r11
0109 356C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 356E 0649  14         dect  stack
0023 3570 C64B  30         mov   r11,*stack            ; Save return address
0024 3572 0649  14         dect  stack
0025 3574 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3576 0649  14         dect  stack
0027 3578 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 357A C120  34         mov   @parm1,tmp0           ; Get line number
     357C A006     
0032 357E C160  34         mov   @parm2,tmp1           ; Get pointer
     3580 A008     
0033 3582 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 3584 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3586 0FFF     
0039 3588 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 358A 06E0  34         swpb  @parm3
     358C A00A     
0044 358E D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3590 A00A     
0045 3592 06E0  34         swpb  @parm3                ; \ Restore original order again,
     3594 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 3596 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3598 32A6     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 359A C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     359C A018     
0056 359E C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35A0 B000     
0057 35A2 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35A4 A018     
0058 35A6 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35A8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35AA 32A6     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35AC C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35AE A018     
0068 35B0 04E4  34         clr   @idx.top(tmp0)        ; /
     35B2 B000     
0069 35B4 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35B6 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35BC C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35BE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35C0 0649  14         dect  stack
0022 35C2 C64B  30         mov   r11,*stack            ; Save return address
0023 35C4 0649  14         dect  stack
0024 35C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35C8 0649  14         dect  stack
0026 35CA C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35CC 0649  14         dect  stack
0028 35CE C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35D0 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35D2 A006     
0033               
0034 35D4 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35D6 32A6     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35D8 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35DA A018     
0039 35DC C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35DE B000     
0040               
0041 35E0 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35E2 C185  18         mov   tmp1,tmp2             ; \
0047 35E4 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35E6 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35E8 00FF     
0052 35EA 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35EC 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35EE C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35F0 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35F2 A018     
0059 35F4 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     35F6 A01A     
0060 35F8 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 35FA 04E0  34         clr   @outparm1
     35FC A018     
0066 35FE 04E0  34         clr   @outparm2
     3600 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3602 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3604 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3606 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3608 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 360A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 360C 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     360E B000     
0018 3610 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3612 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3614 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3616 0606  14         dec   tmp2                  ; tmp2--
0026 3618 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 361A 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 361C 0649  14         dect  stack
0047 361E C64B  30         mov   r11,*stack            ; Save return address
0048 3620 0649  14         dect  stack
0049 3622 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3624 0649  14         dect  stack
0051 3626 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3628 0649  14         dect  stack
0053 362A C646  30         mov   tmp2,*stack           ; Push tmp2
0054 362C 0649  14         dect  stack
0055 362E C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3630 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3632 A006     
0060               
0061 3634 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3636 32A6     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3638 C120  34         mov   @outparm1,tmp0        ; Index offset
     363A A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 363C C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     363E A008     
0070 3640 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3642 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3644 A006     
0074 3646 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3648 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     364A B000     
0081 364C 04D4  26         clr   *tmp0                 ; Clear index entry
0082 364E 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3650 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3652 A008     
0088 3654 0287  22         ci    tmp3,2048
     3656 0800     
0089 3658 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 365A 06A0  32         bl    @_idx.sams.mapcolumn.on
     365C 3238     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 365E C120  34         mov   @parm1,tmp0           ; Restore line number
     3660 A006     
0103 3662 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3664 06A0  32         bl    @_idx.entry.delete.reorg
     3666 360C     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3668 06A0  32         bl    @_idx.sams.mapcolumn.off
     366A 326C     
0111                                                   ; Restore memory window layout
0112               
0113 366C 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 366E 06A0  32         bl    @_idx.entry.delete.reorg
     3670 360C     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 3672 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 3674 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3676 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3678 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 367A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 367C C2F9  30         mov   *stack+,r11           ; Pop r11
0132 367E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3680 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     3682 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 3684 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3686 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3688 FFCE     
0027 368A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     368C 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 368E 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3690 B000     
0032 3692 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 3694 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 3696 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 3698 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 369A 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 369C 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 369E A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36A0 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36A2 AFFC     
0043 36A4 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36A6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36A8 FFCE     
0049 36AA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36AC 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36AE C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36B0 0644  14         dect  tmp0                  ; Move pointer up
0056 36B2 0645  14         dect  tmp1                  ; Move pointer up
0057 36B4 0606  14         dec   tmp2                  ; Next index entry
0058 36B6 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36B8 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36BA 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36BC 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36BE 0649  14         dect  stack
0089 36C0 C64B  30         mov   r11,*stack            ; Save return address
0090 36C2 0649  14         dect  stack
0091 36C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36C6 0649  14         dect  stack
0093 36C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36CA 0649  14         dect  stack
0095 36CC C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36CE 0649  14         dect  stack
0097 36D0 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36D2 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36D4 A008     
0102 36D6 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36D8 A006     
0103 36DA 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36DC C1E0  34         mov   @parm2,tmp3
     36DE A008     
0110 36E0 0287  22         ci    tmp3,2048
     36E2 0800     
0111 36E4 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36E6 06A0  32         bl    @_idx.sams.mapcolumn.on
     36E8 3238     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36EA C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36EC A008     
0123 36EE 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36F0 06A0  32         bl    @_idx.entry.insert.reorg
     36F2 3680     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36F4 06A0  32         bl    @_idx.sams.mapcolumn.off
     36F6 326C     
0131                                                   ; Restore memory window layout
0132               
0133 36F8 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 36FA C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36FC A008     
0139               
0140 36FE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3700 32A6     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3702 C120  34         mov   @outparm1,tmp0        ; Index offset
     3704 A018     
0145               
0146 3706 06A0  32         bl    @_idx.entry.insert.reorg
     3708 3680     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 370A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 370C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 370E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3710 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3712 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3714 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3716 0649  14         dect  stack
0022 3718 C64B  30         mov   r11,*stack            ; Push return address
0023 371A 0649  14         dect  stack
0024 371C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 371E 0649  14         dect  stack
0026 3720 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3722 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3724 A504     
0031 3726 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3728 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     372A FFCE     
0037 372C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     372E 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3730 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3732 A006     
0043               
0044 3734 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3736 35C0     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3738 C120  34         mov   @outparm2,tmp0        ; SAMS page
     373A A01A     
0050 373C C160  34         mov   @outparm1,tmp1        ; Pointer to line
     373E A018     
0051 3740 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3742 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3744 A208     
0057 3746 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3748 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     374A 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 374C C820  54         mov   @outparm2,@tv.sams.c000
     374E A01A     
     3750 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3752 C820  54         mov   @outparm2,@edb.sams.page
     3754 A01A     
     3756 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3758 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 375A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 375C C2F9  30         mov   *stack+,r11           ; Pop r11
0077 375E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3760 0649  14         dect  stack
0022 3762 C64B  30         mov   r11,*stack            ; Push return address
0023 3764 0649  14         dect  stack
0024 3766 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3768 0649  14         dect  stack
0026 376A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 376C 04E0  34         clr   @outparm1             ; Reset length
     376E A018     
0031 3770 04E0  34         clr   @outparm2             ; Reset SAMS bank
     3772 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3774 C120  34         mov   @parm1,tmp0           ; \
     3776 A006     
0036 3778 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 377A 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     377C A504     
0039 377E 1201  14         jle   !                     ; No, continue processing
0040 3780 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 3782 C120  34 !       mov   @parm1,tmp0           ; Get line
     3784 A006     
0046               
0047 3786 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3788 3716     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 378A C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     378C A018     
0053 378E 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3790 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 3792 C805  38         mov   tmp1,@outparm1        ; Save length
     3794 A018     
0060 3796 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 3798 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     379A A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 379C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 379E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37A2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37A4 0649  14         dect  stack
0021 37A6 C64B  30         mov   r11,*stack            ; Save return address
0022 37A8 0649  14         dect  stack
0023 37AA C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37AC C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37AE A304     
0028 37B0 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37B2 A306     
0029 37B4 C804  38         mov   tmp0,@parm1
     37B6 A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37B8 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37BA 3760     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37BC C820  54         mov   @outparm1,@fb.row.length
     37BE A018     
     37C0 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37C4 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37C6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37C8 0649  14         dect  stack
0021 37CA C64B  30         mov   r11,*stack            ; Save return address
0022 37CC 0649  14         dect  stack
0023 37CE C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37D0 0649  14         dect  stack
0025 37D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37D4 C120  34         mov   @edb.next_free.ptr,tmp0
     37D6 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37D8 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37DA 0FFF     
0035 37DC 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37DE 0052     
0036 37E0 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37E2 0FF0     
0037 37E4 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37E6 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37E8 A51C     
0043 37EA C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37EC A500     
     37EE A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37F0 C120  34         mov   @edb.sams.hipage,tmp0
     37F2 A51C     
0050 37F4 C160  34         mov   @edb.top.ptr,tmp1
     37F6 A500     
0051 37F8 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     37FA 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 37FC 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 37FE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3800 FFCE     
0061 3802 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3804 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3806 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3808 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 380A C2F9  30         mov   *stack+,r11           ; Pop R11
0069 380C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 380E 0649  14         dect  stack
0022 3810 C64B  30         mov   r11,*stack            ; Push return address
0023 3812 0649  14         dect  stack
0024 3814 C660  42         mov   @wyx,*stack           ; Push cursor position
     3816 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3818 06A0  32         bl    @hchar
     381A 2832     
0029 381C 0032                   byte 0,50,32,22
     381E 2016     
0030 3820 FFFF                   data EOL              ; Clear message
0031               
0032 3822 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3824 A22C     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3826 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3828 832A     
0038 382A C2F9  30         mov   *stack+,r11           ; Pop R11
0039 382C 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "cart.fg99.run.asm"         ; Run FinalGROM cartridge image
     **** ****     > cart.fg99.run.asm
0001               * FILE......: cart.fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * cart.fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @cart.fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               * Is expected to run from RAM and not from cartridge space.
0023               ********|*****|*********************|**************************
0024               cart.fg99.run:
0025                       ;-------------------------------------------------------
0026                       ; Put VDP in TI Basic compatible mode (32x24)
0027                       ;-------------------------------------------------------
0028 382E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3830 2806     
0029               
0030 3832 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3834 22F8     
0031 3836 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0032               
0033 3838 06A0  32         bl    @scroff               ; Turn off screen
     383A 26E6     
0034                       ;------------------------------------------------------
0035                       ; Clear magic string
0036                       ;------------------------------------------------------
0037                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0038                       ; Indicate it's unsafe to resume Stevie and initialization
0039                       ; is necessary.
0040                       ; clr   @magic.str.w1
0041                       ; clr   @magic.str.w2
0042                       ; clr   @magic.str.w3
0043                       ;-------------------------------------------------------
0044                       ; Load FG99 cartridge, but do not start cartridge yet
0045                       ;-------------------------------------------------------
0046 383C C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     383E A238     
0047 3840 06A0  32         bl    @xfg99                ; Load FinalGROM cartridge image
     3842 2E76     
0048                                                   ; \ i tmp0 = Pointer to cartridge image
0049                                                   ; /
0050                       ;-------------------------------------------------------
0051                       ; Turn SAMS mapper off and exit to monitor
0052                       ;-------------------------------------------------------
0053 3844 020C  20         li    r12,>1e00             ; SAMS CRU address
     3846 1E00     
0054 3848 1E01  16         sbz   1                     ; Disable SAMS mapper
0055                                                   ; \ We keep the mapper off while
0056                                                   ; | running TI Basic or other external
0057                                                   ; / programs.
0058               
0059 384A 0420  42         blwp @0                     ; Return to monitor
     384C 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 384E 0649  14         dect  stack
0009 3850 C64B  30         mov   r11,*stack            ; Save return address
0010 3852 0649  14         dect  stack
0011 3854 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3856 0649  14         dect  stack
0013 3858 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 385A 0649  14         dect  stack
0015 385C C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 385E C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     3860 A22A     
0020               
0021 3862 0284  22         ci    tmp0,pane.focus.fb
     3864 0000     
0022 3866 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 3868 0284  22         ci    tmp0,pane.focus.cmdb
     386A 0001     
0025 386C 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 386E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3870 FFCE     
0031 3872 06A0  32         bl    @cpu.crash            ; / Halt system.
     3874 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 3876 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3878 A70A     
     387A 832A     
0037 387C E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     387E 2020     
0038 3880 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3882 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3884 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3886 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3888 2020     
0048 388A 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     388C 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 388E C160  34         mov   @tv.ruler.visible,tmp1
     3890 A210     
0056 3892 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 3894 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     3896 1000     
0058 3898 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 389A 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     389C 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 389E C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38A0 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38A2 C160  34         mov   @tv.ruler.visible,tmp1
     38A4 A210     
0071                                                   ; Ruler visible?
0072 38A6 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38A8 C160  34         mov   @cmdb.visible,tmp1
     38AA A702     
0076 38AC 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38AE FFFF     
0077 38B0 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38B2 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38B4 FF00     
0081 38B6 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38B8 00F0     
0082 38BA C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38BC A05A     
0083               
0084 38BE C120  34         mov   @ramsat,tmp0
     38C0 A056     
0085 38C2 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38C4 00FF     
0086 38C6 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38C8 0800     
0087 38CA C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38CC A05E     
0088               
0089 38CE 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38D0 04C5  14         clr   tmp1
0095 38D2 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38D4 A05D     
0096                                                   ; / by transparant color
0097 38D6 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38D8 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38DA 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38DC 24E6     
0104 38DE 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38E0 A056     
     38E2 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38E4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38EA C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38EC 0460  28         b     @slotok               ; Exit task
     38EE 2F34     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38F0 0649  14         dect  stack
0009 38F2 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 38F4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     38F6 307A     
0014 38F8 600C                   data bank6.rom        ; | i  p0 = bank address
0015 38FA 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 38FC 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 38FE C2F9  30         mov   *stack+,r11           ; Pop r11
0022 3900 0460  28         b     @slotok               ; Exit task
     3902 2F34     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3904 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3906 A22C     
0010 3908 1301  14         jeq   task.oneshot.exit
0011               
0012 390A 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 390C 0460  28         b     @slotok                ; Exit task
     390E 2F34     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3910 0000             data  >0000,>8201           ; Cursor
     3912 8201     
0014 3914 0000             data  >0000,>8301           ; Current line indicator     <
     3916 8301     
0015 3918 0820             data  >0820,>8401           ; Current column indicator   v
     391A 8401     
0016               nosprite:
0017 391C D000             data  >d000                 ; End-of-Sprites list
0018               
0019               ***************************************************************
0020               * Tab positions
0021               ********|*****|*********************|**************************
0022               tv.tabs.table.lr:
0023 391E 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3920 0C19     
0024 3922 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3924 3B4F     
0025 3926 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3928 0000     
0026                                                   ; /   >ff means end-of-list.
0027               
0028               tv.tabs.table.rl:
0029 392A 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     392C 2D1E     
0030 392E 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3930 0700     
0031 3932 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3934 0000     
0032                                                   ; /   >ff means end-of-list.
0033               
0034               ***************************************************************
0035               * Constants for numbers 0-10
0036               ********|*****|*********************|**************************
0037      2000     const.0       equ   w$0000          ; 0
0038      2002     const.1       equ   w$0001          ; 1
0039      2004     const.2       equ   w$0002          ; 2
0040 3936 0003     const.3       data  3               ; 3
0041      2006     const.4       equ   w$0004          ; 4
0042 3938 0005     const.5       data  5               ; 5
0043 393A 0006     const.6       data  6               ; 6
0044 393C 0007     const.7       data  7               ; 7
0045      2008     const.8       equ   w$0008          ; 8
0046 393E 0009     const.9       data  9               ; 9
0047 3940 000A     const.10      data  10              ; 10 ; A
0048 3942 000B     const.11      data  11              ; 11 ; B
0049 3944 000C     const.12      data  12              ; 12 ; C
0050 3946 000D     const.13      data  13              ; 13 ; D
0051 3948 000E     const.14      data  14              ; 14 ; E
0052 394A 000F     const.15      data  15              ; 15 ; F
0053 394C 0010     const.16      data  16              ; 16
0054 394E 0020     const.32      data  32              ; 32
0055 3950 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 3952 012F     txt.slash          stri '/'
0008                                  even
0009 3954 013A     txt.colon          stri ':'
0010                                  even
0011 3956 0520     txt.bottom         stri '  BOT'
     3958 2042     
     395A 4F54     
0012                                  even
0013 395C 044F     txt.ovrwrite       stri 'OVR '
     395E 5652     
     3960 20       
0014                                  even
0015 3962 0449     txt.insert         stri 'INS '
     3964 4E53     
     3966 20       
0016                                  even
0017 3968 0449     txt.autoinsert     stri 'INS+'
     396A 4E53     
     396C 2B       
0018                                  even
0019 396E 012A     txt.star           stri '*'
0020                                  even
0021 3970 011D     txt.lockicon       byte 1,29
0022                                  even
0023 3972 0A4C     txt.loading        stri 'Loading...'
     3974 6F61     
     3976 6469     
     3978 6E67     
     397A 2E2E     
     397C 2E       
0024                                  even
0025 397E 0A53     txt.saving         stri 'Saving....'
     3980 6176     
     3982 696E     
     3984 672E     
     3986 2E2E     
     3988 2E       
0026                                  even
0027 398A 0C50     txt.printing       stri 'Printing....'
     398C 7269     
     398E 6E74     
     3990 696E     
     3992 672E     
     3994 2E2E     
     3996 2E       
0028                                  even
0029 3998 0C53     txt.searching      stri 'Searching...'
     399A 6561     
     399C 7263     
     399E 6869     
     39A0 6E67     
     39A2 2E2E     
     39A4 2E       
0030                                  even
0031 39A6 1244     txt.block.del      stri 'Deleting block....'
     39A8 656C     
     39AA 6574     
     39AC 696E     
     39AE 6720     
     39B0 626C     
     39B2 6F63     
     39B4 6B2E     
     39B6 2E2E     
     39B8 2E       
0032                                  even
0033 39BA 1143     txt.block.copy     stri 'Copying block....'
     39BC 6F70     
     39BE 7969     
     39C0 6E67     
     39C2 2062     
     39C4 6C6F     
     39C6 636B     
     39C8 2E2E     
     39CA 2E2E     
0034                                  even
0035 39CC 104D     txt.block.move     stri 'Moving block....'
     39CE 6F76     
     39D0 696E     
     39D2 6720     
     39D4 626C     
     39D6 6F63     
     39D8 6B2E     
     39DA 2E2E     
     39DC 2E       
0036                                  even
0037 39DE 1053     txt.block.save     stri 'Saving block....'
     39E0 6176     
     39E2 696E     
     39E4 6720     
     39E6 626C     
     39E8 6F63     
     39EA 6B2E     
     39EC 2E2E     
     39EE 2E       
0038                                  even
0039 39F0 1843     txt.block.clip     stri 'Copying to clipboard....'
     39F2 6F70     
     39F4 7969     
     39F6 6E67     
     39F8 2074     
     39FA 6F20     
     39FC 636C     
     39FE 6970     
     3A00 626F     
     3A02 6172     
     3A04 642E     
     3A06 2E2E     
     3A08 2E       
0040                                  even
0041 3A0A 1250     txt.block.print    stri 'Printing block....'
     3A0C 7269     
     3A0E 6E74     
     3A10 696E     
     3A12 6720     
     3A14 626C     
     3A16 6F63     
     3A18 6B2E     
     3A1A 2E2E     
     3A1C 2E       
0042                                  even
0043 3A1E 1343     txt.clearmem       stri 'Clearing memory....'
     3A20 6C65     
     3A22 6172     
     3A24 696E     
     3A26 6720     
     3A28 6D65     
     3A2A 6D6F     
     3A2C 7279     
     3A2E 2E2E     
     3A30 2E2E     
0044                                  even
0045 3A32 1352     txt.readdir        stri 'Reading catalog....'
     3A34 6561     
     3A36 6469     
     3A38 6E67     
     3A3A 2063     
     3A3C 6174     
     3A3E 616C     
     3A40 6F67     
     3A42 2E2E     
     3A44 2E2E     
0046                                  even
0047 3A46 0E4C     txt.done.load      stri 'Load completed'
     3A48 6F61     
     3A4A 6420     
     3A4C 636F     
     3A4E 6D70     
     3A50 6C65     
     3A52 7465     
     3A54 64       
0048                                  even
0049 3A56 1049     txt.done.insert    stri 'Insert completed'
     3A58 6E73     
     3A5A 6572     
     3A5C 7420     
     3A5E 636F     
     3A60 6D70     
     3A62 6C65     
     3A64 7465     
     3A66 64       
0050                                  even
0051 3A68 1041     txt.done.append    stri 'Append completed'
     3A6A 7070     
     3A6C 656E     
     3A6E 6420     
     3A70 636F     
     3A72 6D70     
     3A74 6C65     
     3A76 7465     
     3A78 64       
0052                                  even
0053 3A7A 0E53     txt.done.save      stri 'Save completed'
     3A7C 6176     
     3A7E 6520     
     3A80 636F     
     3A82 6D70     
     3A84 6C65     
     3A86 7465     
     3A88 64       
0054                                  even
0055 3A8A 0E43     txt.done.copy      stri 'Copy completed'
     3A8C 6F70     
     3A8E 7920     
     3A90 636F     
     3A92 6D70     
     3A94 6C65     
     3A96 7465     
     3A98 64       
0056                                  even
0057 3A9A 0F50     txt.done.print     stri 'Print completed'
     3A9C 7269     
     3A9E 6E74     
     3AA0 2063     
     3AA2 6F6D     
     3AA4 706C     
     3AA6 6574     
     3AA8 6564     
0058                                  even
0059 3AAA 1044     txt.done.delete    stri 'Delete completed'
     3AAC 656C     
     3AAE 6574     
     3AB0 6520     
     3AB2 636F     
     3AB4 6D70     
     3AB6 6C65     
     3AB8 7465     
     3ABA 64       
0060                                  even
0061 3ABC 0F43     txt.done.clipboard stri 'Clipboard saved'
     3ABE 6C69     
     3AC0 7062     
     3AC2 6F61     
     3AC4 7264     
     3AC6 2073     
     3AC8 6176     
     3ACA 6564     
0062                                  even
0063 3ACC 0D43     txt.done.clipdev   stri 'Clipboard set'
     3ACE 6C69     
     3AD0 7062     
     3AD2 6F61     
     3AD4 7264     
     3AD6 2073     
     3AD8 6574     
0064                                  even
0065 3ADA 0B46     txt.fastmode       stri 'Fastmode IO'
     3ADC 6173     
     3ADE 746D     
     3AE0 6F64     
     3AE2 6520     
     3AE4 494F     
0066                                  even
0067 3AE6 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3AE8 6F20     
     3AEA 4465     
     3AEC 7669     
     3AEE 6365     
     3AF0 2F44     
     3AF2 6973     
     3AF4 6B2F     
     3AF6 5061     
     3AF8 7468     
0068                                  even
0069 3AFA 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3AFC 6E63     
     3AFE 7275     
     3B00 6E63     
     3B02 6869     
     3B04 6E67     
     3B06 2054     
     3B08 4920     
     3B0A 4261     
     3B0C 7369     
     3B0E 6320     
     3B10 6C69     
     3B12 6E65     
     3B14 2E2E     
     3B16 2E2E     
0070                                  even
0071 3B18 026B     txt.kb             stri 'kb'
     3B1A 62       
0072                                  even
0073 3B1C 054C     txt.lines          stri 'Lines'
     3B1E 696E     
     3B20 6573     
0074                                  even
0075 3B22 0A5B     txt.newfile        stri '[New file]'
     3B24 4E65     
     3B26 7720     
     3B28 6669     
     3B2A 6C65     
     3B2C 5D       
0076                                  even
0077 3B2E 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B30 5449     
     3B32 2042     
     3B34 6173     
     3B36 6963     
     3B38 2023     
     3B3A 315D     
0078                                  even
0079 3B3C 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B3E 5449     
     3B40 2042     
     3B42 6173     
     3B44 6963     
     3B46 2023     
     3B48 325D     
0080                                  even
0081 3B4A 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B4C 5449     
     3B4E 2042     
     3B50 6173     
     3B52 6963     
     3B54 2023     
     3B56 335D     
0082                                  even
0083 3B58 0444     txt.filetype.dv80  stri 'DV80'
     3B5A 5638     
     3B5C 30       
0084                                  even
0085 3B5E 034D     txt.m1             stri 'M1='
     3B60 313D     
0086                                  even
0087 3B62 034D     txt.m2             stri 'M2='
     3B64 323D     
0088                                  even
0089 3B66 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3B68 392D     
     3B6A 4D65     
     3B6C 6E75     
     3B6E 2020     
     3B70 5E48     
     3B72 2D48     
     3B74 656C     
     3B76 70       
0090                                  even
0091 3B78 1C46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic# '
     3B7A 392D     
     3B7C 4D65     
     3B7E 6E75     
     3B80 2020     
     3B82 5E48     
     3B84 2D48     
     3B86 656C     
     3B88 7020     
     3B8A 2046     
     3B8C 302D     
     3B8E 4261     
     3B90 7369     
     3B92 6323     
     3B94 20       
0092                                  even
0093 3B96 2B46     txt.keys.defaultc  stri 'F9-Menu  ^H-Help  ^,=Prev  ^.=Next  ^/=Done'
     3B98 392D     
     3B9A 4D65     
     3B9C 6E75     
     3B9E 2020     
     3BA0 5E48     
     3BA2 2D48     
     3BA4 656C     
     3BA6 7020     
     3BA8 205E     
     3BAA 2C3D     
     3BAC 5072     
     3BAE 6576     
     3BB0 2020     
     3BB2 5E2E     
     3BB4 3D4E     
     3BB6 6578     
     3BB8 7420     
     3BBA 205E     
     3BBC 2F3D     
     3BBE 446F     
     3BC0 6E65     
0094                                  even
0095 3BC2 3746     txt.keys.defaultd  stri 'F9-Menu  ^H-Help  F0-Basic#   ^,=Prev  ^.=Next  ^/=Done'
     3BC4 392D     
     3BC6 4D65     
     3BC8 6E75     
     3BCA 2020     
     3BCC 5E48     
     3BCE 2D48     
     3BD0 656C     
     3BD2 7020     
     3BD4 2046     
     3BD6 302D     
     3BD8 4261     
     3BDA 7369     
     3BDC 6323     
     3BDE 2020     
     3BE0 205E     
     3BE2 2C3D     
     3BE4 5072     
     3BE6 6576     
     3BE8 2020     
     3BEA 5E2E     
     3BEC 3D4E     
     3BEE 6578     
     3BF0 7420     
     3BF2 205E     
     3BF4 2F3D     
     3BF6 446F     
     3BF8 6E65     
0096                                  even
0097               
0098 3BFA 3A46     txt.keys.block     stri 'F9-Exit  ^Copy  ^Move  ^Del  ^Save  ^Print  ^1-3=Clipboard'
     3BFC 392D     
     3BFE 4578     
     3C00 6974     
     3C02 2020     
     3C04 5E43     
     3C06 6F70     
     3C08 7920     
     3C0A 205E     
     3C0C 4D6F     
     3C0E 7665     
     3C10 2020     
     3C12 5E44     
     3C14 656C     
     3C16 2020     
     3C18 5E53     
     3C1A 6176     
     3C1C 6520     
     3C1E 205E     
     3C20 5072     
     3C22 696E     
     3C24 7420     
     3C26 205E     
     3C28 312D     
     3C2A 333D     
     3C2C 436C     
     3C2E 6970     
     3C30 626F     
     3C32 6172     
     3C34 64       
0099                                  even
0100 3C36 2646     txt.keys.blocklock stri 'F9-Exit  ^Save  ^Print  ^1-3=Clipboard'
     3C38 392D     
     3C3A 4578     
     3C3C 6974     
     3C3E 2020     
     3C40 5E53     
     3C42 6176     
     3C44 6520     
     3C46 205E     
     3C48 5072     
     3C4A 696E     
     3C4C 7420     
     3C4E 205E     
     3C50 312D     
     3C52 333D     
     3C54 436C     
     3C56 6970     
     3C58 626F     
     3C5A 6172     
     3C5C 64       
0101                                  even
0102               
0103 3C5E 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C60 392D     
     3C62 4261     
     3C64 636B     
     3C66 2020     
     3C68 4635     
     3C6A 2D41     
     3C6C 7574     
     3C6E 6F55     
     3C70 6E70     
     3C72 6163     
     3C74 6B20     
     3C76 2053     
     3C78 5041     
     3C7A 4345     
     3C7C 2D55     
     3C7E 6E70     
     3C80 6163     
     3C82 6B20     
     3C84 7072     
     3C86 6F67     
     3C88 7261     
     3C8A 6D       
0104                                  even
0105 3C8C 020E     txt.alpha.down     data >020e,>0f00
     3C8E 0F00     
0106 3C90 0110     txt.vertline       data >0110
0107 3C92 011C     txt.keymarker      byte 1,28
0108                                  even
0109 3C94 0120     txt.ws1            stri ' '
0110                                  even
0111 3C96 0220     txt.ws2            stri '  '
     3C98 20       
0112                                  even
0113 3C9A 0420     txt.ws4            stri '    '
     3C9C 2020     
     3C9E 20       
0114                                  even
0115      3C9A     txt.filetype.none  equ txt.ws4
0116               
0117 3CA0 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CA2 4920     
     3CA4 4261     
     3CA6 7369     
     3CA8 6320     
     3CAA 6D6F     
     3CAC 6465     
     3CAE 2061     
     3CB0 6374     
     3CB2 6976     
     3CB4 652E     
0118                                  even
0119               ;--------------------------------------------------------------
0120               ; Strings for error line pane
0121               ;--------------------------------------------------------------
0122 3CB6 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CB8 6169     
     3CBA 6C65     
     3CBC 6420     
     3CBE 6C6F     
     3CC0 6164     
     3CC2 696E     
     3CC4 6720     
     3CC6 6669     
     3CC8 6C65     
     3CCA 3A20     
0123                                  even
0124 3CCC 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CCE 6169     
     3CD0 6C65     
     3CD2 6420     
     3CD4 7361     
     3CD6 7669     
     3CD8 6E67     
     3CDA 2066     
     3CDC 696C     
     3CDE 653A     
     3CE0 20       
0125                                  even
0126 3CE2 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CE4 6169     
     3CE6 6C65     
     3CE8 6420     
     3CEA 7072     
     3CEC 696E     
     3CEE 7469     
     3CF0 6E67     
     3CF2 2074     
     3CF4 6F20     
     3CF6 6465     
     3CF8 7669     
     3CFA 6365     
     3CFC 3A20     
0127                                  even
0128 3CFE 164E     txt.io.nofile      stri 'No filename specified.'
     3D00 6F20     
     3D02 6669     
     3D04 6C65     
     3D06 6E61     
     3D08 6D65     
     3D0A 2073     
     3D0C 7065     
     3D0E 6369     
     3D10 6669     
     3D12 6564     
     3D14 2E       
0129                                  even
0130 3D16 0B49     txt.memfull.load   stri 'Index full.'
     3D18 6E64     
     3D1A 6578     
     3D1C 2066     
     3D1E 756C     
     3D20 6C2E     
0131                                  even
0132 3D22 2C43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range'
     3D24 6F70     
     3D26 792F     
     3D28 4D6F     
     3D2A 7665     
     3D2C 2074     
     3D2E 6172     
     3D30 6765     
     3D32 7420     
     3D34 6D75     
     3D36 7374     
     3D38 2062     
     3D3A 6520     
     3D3C 6F75     
     3D3E 7473     
     3D40 6964     
     3D42 6520     
     3D44 4D31     
     3D46 2D4D     
     3D48 3220     
     3D4A 7261     
     3D4C 6E67     
     3D4E 65       
0133                                  even
0134               ;--------------------------------------------------------------
0135               ; Strings for command buffer
0136               ;--------------------------------------------------------------
0137 3D50 013E     txt.cmdb.prompt    stri '>'
0138                                  even
0139 3D52 0D43     txt.colorscheme    stri 'Color scheme:'
     3D54 6F6C     
     3D56 6F72     
     3D58 2073     
     3D5A 6368     
     3D5C 656D     
     3D5E 653A     
0140                                  even
0141               ;--------------------------------------------------------------
0142               ; Strings for command buffer
0143               ;--------------------------------------------------------------
0144 3D60 0102     txt.picker.icon1   byte 1,2
0145                                  even
0146 3D62 0103     txt.picker.icon2   byte 1,3
0147                                  even
0148               
0149               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D64 0650     def.printer.fname   stri 'PI.PIO'
     3D66 492E     
     3D68 5049     
     3D6A 4F       
0008 3D6B   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D6C 4453     
     3D6E 4B31     
     3D70 2E43     
     3D72 4C49     
     3D74 50       
0009                                   even
0010 3D76 0954     def.clip.fname.b    stri 'TIPI.CLIP'
     3D78 4950     
     3D7A 492E     
     3D7C 434C     
     3D7E 4950     
0011                                   even
0012 3D80 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3D82 4453     
     3D84 4B2C     
     3D86 4844     
     3D88 582C     
     3D8A 4944     
     3D8C 452C     
     3D8E 5049     
     3D90 2E2C     
     3D92 5049     
     3D94 4F2C     
     3D96 5449     
     3D98 5049     
     3D9A 2E2C     
     3D9C 5244     
     3D9E 2C53     
     3DA0 4353     
     3DA2 2C53     
     3DA4 4444     
     3DA6 2C57     
     3DA8 4453     
     3DAA 2C52     
     3DAC 5332     
     3DAE 3332     
0013                                   even
0014 3DB0 0546     def.fg99.fname      stri 'FCMDC'
     3DB2 434D     
     3DB4 4443     
0015                                   even
                   < ram.resident.asm
                   < stevie_b7.asm
0055                       ;------------------------------------------------------
0056                       ; Activate bank 1 and branch to  >6036
0057                       ;------------------------------------------------------
0058 3DB6 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3DB8 6002     
0059               
0063               
0064 3DBA 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3DBC 6046     
0065               ***************************************************************
0066               * Step 3: Include main editor modules
0067               ********|*****|*********************|**************************
0068               main:
0069                       aorg  kickstart.code2       ; >6046
0070 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0071                       ;-----------------------------------------------------------------------
0072                       ; SAMS support routines and utilities
0073                       ;-----------------------------------------------------------------------
0074                       copy  "magic.asm"                  ; Magic string handling
     **** ****     > magic.asm
0001               * FILE......: magic.asm
0002               * Purpose...: Handle magic strings
0003               
0004               ***************************************************************
0005               * magic.set
0006               * Set magic string in core memory
0007               ***************************************************************
0008               * bl @magic.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Set the bytes 'DEAD994ABEEF' in core memory.
0020               * If the sequence is set then Stevie knows its safe to resume
0021               * without initializing.
0022               ********|*****|*********************|**************************
0023               magic.set:
0024 604A 0649  14         dect  stack
0025 604C C64B  30         mov   r11,*stack            ; Save return address
0026                       ;------------------------------------------------------
0027                       ; Set magic string
0028                       ;------------------------------------------------------
0029 604E C820  54         mov   @magic.string+0,@magic.str.w1
     6050 609C     
     6052 A000     
0030 6054 C820  54         mov   @magic.string+2,@magic.str.w2
     6056 609E     
     6058 A002     
0031 605A C820  54         mov   @magic.string+4,@magic.str.w3
     605C 60A0     
     605E A004     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               magic.set.exit:
0036 6060 C2F9  30         mov   *stack+,r11           ; Pop r11
0037 6062 045B  20         b     *r11                  ; Return to caller
0038               
0039               
0040               
0041               ***************************************************************
0042               * magic.clear
0043               * Clear magic string in core memory
0044               ***************************************************************
0045               * bl @magic.set
0046               *--------------------------------------------------------------
0047               * INPUT
0048               * none
0049               *--------------------------------------------------------------
0050               * OUTPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * Register usage
0054               * none
0055               *--------------------------------------------------------------
0056               * Clear the bytes 'DEAD994ABEEF' in core memory.
0057               * Indicate it's unsafe to resume Stevie and initialization
0058               * is necessary.
0059               ********|*****|*********************|**************************
0060               magic.clear:
0061 6064 0649  14         dect  stack
0062 6066 C64B  30         mov   r11,*stack            ; Save return address
0063                       ;------------------------------------------------------
0064                       ; Clear magic string
0065                       ;------------------------------------------------------
0066 6068 04E0  34         clr   @magic.str.w1
     606A A000     
0067 606C 04E0  34         clr   @magic.str.w2
     606E A002     
0068 6070 04E0  34         clr   @magic.str.w3
     6072 A004     
0069                       ;------------------------------------------------------
0070                       ; Exit
0071                       ;------------------------------------------------------
0072               magic.clear.exit:
0073 6074 C2F9  30         mov   *stack+,r11           ; Pop r11
0074 6076 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * magic.check
0080               * Check if magic string is set
0081               ***************************************************************
0082               * bl @magic.set
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * none
0086               *--------------------------------------------------------------
0087               * OUTPUT
0088               * r0 = >ffff Magic string set
0089               * r0 = >0000 Magic string not set
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * r0
0093               *--------------------------------------------------------------
0094               * Clear the bytes 'DEAD994ABEEF' in core memory.
0095               * Indicate it's unsafe to resume Stevie and initialization
0096               * is necessary.
0097               ********|*****|*********************|**************************
0098               magic.check:
0099 6078 0649  14         dect  stack
0100 607A C64B  30         mov   r11,*stack            ; Save return address
0101                       ;------------------------------------------------------
0102                       ; Check magic string
0103                       ;------------------------------------------------------
0104 607C 04C0  14         clr   r0                    ; Reset flag
0105               
0106 607E 8820  50         c     @magic.str.w1,@magic.string
     6080 A000     
     6082 609C     
0107 6084 1609  14         jne   magic.check.exit
0108 6086 8820  50         c     @magic.str.w2,@magic.string+2
     6088 A002     
     608A 609E     
0109 608C 1605  14         jne   magic.check.exit
0110 608E 8820  50         c     @magic.str.w3,@magic.string+4
     6090 A004     
     6092 60A0     
0111 6094 1601  14         jne   magic.check.exit
0112               
0113 6096 0700  14         seto  r0                    ; Yes, magic string is set
0114                       ;------------------------------------------------------
0115                       ; Exit
0116                       ;------------------------------------------------------
0117               magic.check.exit:
0118 6098 C2F9  30         mov   *stack+,r11           ; Pop r11
0119 609A 045B  20         b     *r11                  ; Return to caller
0120               
0121               
0122               
0123 609C DEAD     magic.string  byte >de,>ad,>99,>4a,>be,>ef
     609E 994A     
     60A0 BEEF     
0124                                                   ; DEAD 994A BEEF
                   < stevie_b7.asm
0075                       copy  "mem.sams.layout.asm"        ; Setup SAMS banks from cart space
     **** ****     > mem.sams.layout.asm
0001               
0002               ***************************************************************
0003               * _mem.sams.set.banks
0004               * Setup SAMS memory banks
0005               ***************************************************************
0006               * INPUT
0007               * r0
0008               *--------------------------------------------------------------
0009               * OUTPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * r0, r12
0014               *--------------------------------------------------------------
0015               * Remarks
0016               * Setup SAMS standard layout without using any library calls
0017               * or stack. Must run without dependencies.
0018               * This is the same order as when using SAMS transparent mode.
0019               ********|*****|*********************|**************************
0020               _mem.sams.set.banks:
0021                       ;-------------------------------------------------------
0022                       ; Setup SAMS banks using inline code
0023                       ;-------------------------------------------------------
0024 60A2 020C  20         li    r12,>1e00             ; SAMS CRU address
     60A4 1E00     
0025 60A6 1D00  16         sbo   0                     ; Enable access to SAMS registers
0026               
0027 60A8 C830  50         mov   *r0+,@>4004           ; Set page for >2000 - >2fff
     60AA 4004     
0028 60AC C830  50         mov   *r0+,@>4006           ; Set page for >3000 - >3fff
     60AE 4006     
0029 60B0 C830  50         mov   *r0+,@>4014           ; Set page for >a000 - >afff
     60B2 4014     
0030 60B4 C830  50         mov   *r0+,@>4016           ; Set page for >b000 - >bfff
     60B6 4016     
0031 60B8 C830  50         mov   *r0+,@>4018           ; Set page for >c000 - >cfff
     60BA 4018     
0032 60BC C830  50         mov   *r0+,@>401a           ; Set page for >d000 - >dfff
     60BE 401A     
0033 60C0 C830  50         mov   *r0+,@>401c           ; Set page for >e000 - >efff
     60C2 401C     
0034 60C4 C830  50         mov   *r0+,@>401e           ; Set page for >f000 - >ffff
     60C6 401E     
0035               
0036 60C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0037                       ;------------------------------------------------------
0038                       ; Exit
0039                       ;------------------------------------------------------
0040               mem.sams.set.banks.exit:
0041 60CA 045B  20         b     *r11                  ; Return
0042               
0043               
0044               
0045               
0046               ***************************************************************
0047               * mem.sams.set.legacy
0048               * Setup SAMS memory banks to legacy layout and exit to monitor
0049               ***************************************************************
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * r12
0058               *--------------------------------------------------------------
0059               * Remarks
0060               * Setup SAMS standard layout without using any library calls
0061               * or stack. Must run without dependencies.
0062               * This is the same order as when using SAMS transparent mode.
0063               *
0064               * We never do a normal return from this routine, instead we
0065               * activate bank 0 in the cartridge space and return to monitor.
0066               ********|*****|*********************|**************************
0067               mem.sams.set.legacy:
0068 60CC 020C  20         li    r12,>1e00             ; SAMS CRU address
     60CE 1E00     
0069 60D0 1E01  16         sbz   1                     ; Disable SAMS mapper
0070                                                   ; \ We keep the mapper off while
0071                                                   ; | running TI Basic or other external
0072                                                   ; / programs.
0073                       ;-------------------------------------------------------
0074                       ; Setup SAMS banks using inline code
0075                       ;-------------------------------------------------------
0076 60D2 0200  20         li    r0,mem.sams.layout.legacy
     60D4 6C8E     
0077 60D6 06A0  32         bl    @_mem.sams.set.banks  ; Set SAMS banks
     60D8 60A2     
0078                       ;-------------------------------------------------------
0079                       ; Poke exit routine into scratchpad memory
0080                       ;-------------------------------------------------------
0081 60DA C820  46         mov   @mem.sams.set.legacy.code,@>8300
     60DC 60FC     
     60DE 8300     
0082 60E0 C820  46         mov   @mem.sams.set.legacy.code+2,@>8302
     60E2 60FE     
     60E4 8302     
0083 60E6 C820  46         mov   @mem.sams.set.legacy.code+4,@>8304
     60E8 6100     
     60EA 8304     
0084 60EC C820  46         mov   @mem.sams.set.legacy.code+6,@>8306
     60EE 6102     
     60F0 8306     
0085 60F2 C820  46         mov   @mem.sams.set.legacy.code+8,@>8308
     60F4 6104     
     60F6 8308     
0086 60F8 0460  24         b     @>8300                ; Run code. Bye bye.
     60FA 8300     
0087                       ;-------------------------------------------------------
0088                       ; Assembly language code for returning to monitor
0089                       ;-------------------------------------------------------
0090               mem.sams.set.legacy.code:
0091 60FC 04E0             data  >04e0,bank0.rom       ; Activate bank 0
     60FE 6000     
0092 6100 0420             data  >0420,>0000           ; blwp @0
     6102 0000     
0093               
0094               
0095               
0096               ***************************************************************
0097               * mem.sams.set.boot
0098               * Setup SAMS memory banks for stevie startup
0099               ***************************************************************
0100               * INPUT
0101               * none
0102               *--------------------------------------------------------------
0103               * OUTPUT
0104               * none
0105               *--------------------------------------------------------------
0106               * Register usage
0107               * r0, r12
0108               *--------------------------------------------------------------
0109               * Remarks
0110               * Setup SAMS layout for stevie without using any library calls
0111               * or stack. Must run without dependencies.
0112               ********|*****|*********************|**************************
0113               mem.sams.set.boot:
0114                       ;-------------------------------------------------------
0115                       ; Setup SAMS banks using inline code
0116                       ;-------------------------------------------------------
0117 6104 0200  20         li    r0,mem.sams.layout.boot
     6106 6C6E     
0118 6108 10CC  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0119               
0120               
0121               
0122               ***************************************************************
0123               * mem.sams.set.external
0124               * Setup SAMS memory banks for calling external program
0125               ***************************************************************
0126               * INPUT
0127               * none
0128               *--------------------------------------------------------------
0129               * OUTPUT
0130               * none
0131               *--------------------------------------------------------------
0132               * Register usage
0133               * r0, r12
0134               *--------------------------------------------------------------
0135               * Remarks
0136               * Main purpose is for doing a VDP dump of the Stevie screen
0137               * before an external program is called.
0138               *
0139               * It's expected that for the external program itself a separate
0140               * SAMS layout is used, for example TI basic session 1, ...
0141               ********|*****|*********************|**************************
0142               mem.sams.set.external:
0143                       ;-------------------------------------------------------
0144                       ; Setup SAMS banks using inline code
0145                       ;-------------------------------------------------------
0146 610A 0200  20         li    r0,mem.sams.layout.external
     610C 6C7E     
0147 610E 10C9  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0148               
0149               
0150               
0151               
0152               ***************************************************************
0153               * mem.sams.set.basic1
0154               * Setup SAMS memory banks for TI Basic session 1
0155               ***************************************************************
0156               * INPUT
0157               * none
0158               *--------------------------------------------------------------
0159               * OUTPUT
0160               * none
0161               *--------------------------------------------------------------
0162               * Register usage
0163               * tmp0, r12
0164               *--------------------------------------------------------------
0165               * Remarks
0166               * Purpose is to handle backup/restore all the VDP memory
0167               * used by this TI Basic session.
0168               ********|*****|*********************|**************************
0169               mem.sams.set.basic1:
0170                       ;-------------------------------------------------------
0171                       ; Setup SAMS banks using inline code
0172                       ;-------------------------------------------------------
0173 6110 0200  20         li    r0,mem.sams.layout.basic1
     6112 6C9E     
0174 6114 C800  38         mov   r0,@tib.samstab.ptr
     6116 A0EA     
0175 6118 10C4  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0176               
0177               
0178               
0179               ***************************************************************
0180               * mem.sams.set.basic2
0181               * Setup SAMS memory banks for TI Basic session 2
0182               ***************************************************************
0183               * INPUT
0184               * none
0185               *--------------------------------------------------------------
0186               * OUTPUT
0187               * none
0188               *--------------------------------------------------------------
0189               * Register usage
0190               * tmp0, r12
0191               *--------------------------------------------------------------
0192               * Remarks
0193               * Purpose is to handle backup/restore all the VDP memory
0194               * used by this TI Basic session.
0195               ********|*****|*********************|**************************
0196               mem.sams.set.basic2:
0197                       ;-------------------------------------------------------
0198                       ; Setup SAMS banks using inline code
0199                       ;-------------------------------------------------------
0200 611A 0200  20         li    r0,mem.sams.layout.basic2
     611C 6CAE     
0201 611E C800  38         mov   r0,@tib.samstab.ptr
     6120 A0EA     
0202 6122 10BF  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0203               
0204               
0205               
0206               ***************************************************************
0207               * mem.sams.set.basic3
0208               * Setup SAMS memory banks for TI Basic session 3
0209               ***************************************************************
0210               * INPUT
0211               * none
0212               *--------------------------------------------------------------
0213               * OUTPUT
0214               * none
0215               *--------------------------------------------------------------
0216               * Register usage
0217               * tmp0, r12
0218               *--------------------------------------------------------------
0219               * Remarks
0220               * Purpose is to handle backup/restore all the VDP memory
0221               * used by this TI Basic session.
0222               ********|*****|*********************|**************************
0223               mem.sams.set.basic3:
0224                       ;-------------------------------------------------------
0225                       ; Setup SAMS banks using inline code
0226                       ;-------------------------------------------------------
0227 6124 0200  20         li    r0,mem.sams.layout.basic3
     6126 6CBE     
0228 6128 C800  38         mov   r0,@tib.samstab.ptr
     612A A0EA     
0229 612C 10BA  14         jmp   _mem.sams.set.banks   ; Set SAMS banks
0230               
0231               
0232               ***************************************************************
0233               * mem.sams.set.stevie
0234               * Setup SAMS memory banks for stevie
0235               ***************************************************************
0236               * INPUT
0237               * none
0238               *--------------------------------------------------------------
0239               * OUTPUT
0240               * none
0241               *--------------------------------------------------------------
0242               * Register usage
0243               * r0, r12
0244               *--------------------------------------------------------------
0245               * Remarks
0246               * Setup SAMS layout for stevie without using any library calls
0247               * or stack. Must run without dependencies.
0248               *
0249               * Expects @tv.sams.xxxx variables to be set in advance with
0250               * routine "sams.layout.copy".
0251               *
0252               * Also the SAMS bank with the @tv.sams.xxxx variable must already
0253               * be active and may not switch to another bank.
0254               *
0255               * Is used for settings SAMS banks as they were before an
0256               * external program environment was called (e.g. TI Basic).
0257               ********|*****|*********************|**************************
0258               mem.sams.set.stevie:
0259                       ;-------------------------------------------------------
0260                       ; Setup SAMS banks using inline code
0261                       ;-------------------------------------------------------
0262 612E 020C  20         li    r12,>1e00             ; SAMS CRU address
     6130 1E00     
0263 6132 1D00  16         sbo   0                     ; Enable access to SAMS registers
0264               
0265 6134 1D01  16         sbo   1                     ; Enable SAMS mapper
0266                                                   ; \ Mapper must be on while setting SAMS
0267                                                   ; | registers with values in @tv.sams.xxxx
0268                                                   ; | Obviously, this requires the SAMS banks
0269                                                   ; | with the @tv.sams.xxxx variables not
0270                                                   ; / to change.
0271               
0272 6136 C020  34         mov   @tv.sams.2000,r0      ; \
     6138 A200     
0273 613A 06C0  14         swpb  r0                    ; | Set page for >2000 - >2fff
0274 613C C800  38         mov   r0,@>4004             ; /
     613E 4004     
0275               
0276 6140 C020  34         mov   @tv.sams.3000,r0      ; \
     6142 A202     
0277 6144 06C0  14         swpb  r0                    ; | Set page for >3000 - >3fff
0278 6146 C800  38         mov   r0,@>4006             ; /
     6148 4006     
0279               
0280 614A C020  34         mov   @tv.sams.a000,r0      ; \
     614C A204     
0281 614E 06C0  14         swpb  r0                    ; | Set page for >a000 - >afff
0282 6150 C800  38         mov   r0,@>4014             ; /
     6152 4014     
0283               
0284 6154 C020  34         mov   @tv.sams.b000,r0      ; \
     6156 A206     
0285 6158 06C0  14         swpb  r0                    ; | Set page for >b000 - >bfff
0286 615A C800  38         mov   r0,@>4016             ; /
     615C 4016     
0287               
0288 615E C020  34         mov   @tv.sams.c000,r0      ; \
     6160 A208     
0289 6162 06C0  14         swpb  r0                    ; | Set page for >c000 - >cfff
0290 6164 C800  38         mov   r0,@>4018             ; /
     6166 4018     
0291               
0292 6168 C020  34         mov   @tv.sams.d000,r0      ; \
     616A A20A     
0293 616C 06C0  14         swpb  r0                    ; | Set page for >d000 - >dfff
0294 616E C800  38         mov   r0,@>401a             ; /
     6170 401A     
0295               
0296 6172 C020  34         mov   @tv.sams.e000,r0      ; \
     6174 A20C     
0297 6176 06C0  14         swpb  r0                    ; | Set page for >e000 - >efff
0298 6178 C800  38         mov   r0,@>401c             ; /
     617A 401C     
0299               
0300 617C C020  34         mov   @tv.sams.f000,r0      ; \
     617E A20E     
0301 6180 06C0  14         swpb  r0                    ; | Set page for >f000 - >ffff
0302 6182 C800  38         mov   r0,@>401e             ; /
     6184 401E     
0303               
0304 6186 1E00  16         sbz   0                     ; Disable access to SAMS registers
0305 6188 1D01  16         sbo   1                     ; Enable SAMS mapper
0306                       ;------------------------------------------------------
0307                       ; Exit
0308                       ;------------------------------------------------------
0309               mem.sams.set.stevie.exit:
0310 618A 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0076                       copy  "tv.reset.asm"               ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 618C 0649  14         dect  stack
0024 618E C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 6190 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     6192 3342     
0029 6194 06A0  32         bl    @edb.init             ; Initialize editor buffer
     6196 32F6     
0030 6198 06A0  32         bl    @edb.find.init        ; Intitialize search buffer
     619A 6C26     
0031 619C 06A0  32         bl    @idx.init             ; Initialize index
     619E 31F6     
0032 61A0 06A0  32         bl    @fb.init              ; Initialize framebuffer
     61A2 312A     
0033 61A4 06A0  32         bl    @errpane.init         ; Initialize error pane
     61A6 339E     
0034 61A8 04E0  34         clr   @edb.locked           ; Clear editor locked flag
     61AA A5DA     
0035                       ;------------------------------------------------------
0036                       ; Remove markers and shortcuts
0037                       ;------------------------------------------------------
0038 61AC 06A0  32         bl    @hchar
     61AE 2832     
0039 61B0 0032                   byte 0,50,32,20       ; Remove markers
     61B2 2014     
0040 61B4 1D00                   byte pane.botrow,0,32,51
     61B6 2033     
0041 61B8 FFFF                   data eol              ; Remove block shortcuts
0042                       ;-------------------------------------------------------
0043                       ; Exit
0044                       ;-------------------------------------------------------
0045               tv.reset.exit:
0046 61BA C2F9  30         mov   *stack+,r11           ; Pop R11
0047 61BC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0077                       ;-----------------------------------------------------------------------
0078                       ; TI Basic sessions
0079                       ;-----------------------------------------------------------------------
0080                       copy  "tib.session.run.asm"        ; Run TI Basic session
     **** ****     > tib.session.run.asm
0001               * FILE......: tib.session.run.asm
0002               * Purpose...: Run TI Basic session
0003               
0004               
0005               ***************************************************************
0006               * tib.run
0007               * Run TI Basic session
0008               ***************************************************************
0009               * bl   @tib.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tib.session = TI Basic session to start/resume
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * tib.run >> b @0070 (GPL interpreter/TI Basic)
0022               *         >> isr
0023               *         >> tibasic.return
0024               *
0025               * Memory
0026               * >83b4       ISR counter for triggering periodic actions
0027               * >83b6       TI Basic Session ID
0028               * >f000-ffff  Mailbox Stevie integration
0029               ********|*****|*********************|**************************
0030               tib.run:
0031 61BE 0649  14         dect  stack
0032 61C0 C64B  30         mov   r11,*stack            ; Save return address
0033 61C2 0649  14         dect  stack
0034 61C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 61C6 0649  14         dect  stack
0036 61C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0037 61CA 0649  14         dect  stack
0038 61CC C646  30         mov   tmp2,*stack           ; Push tmp2
0039 61CE 0649  14         dect  stack
0040 61D0 C64C  30         mov   r12,*stack            ; Push r12
0041                       ;-------------------------------------------------------
0042                       ; Setup SAMS memory
0043                       ;-------------------------------------------------------
0044 61D2 C802  38         mov   config,@tv.sp2.conf   ; Backup the SP2 config register
     61D4 A234     
0045               
0046 61D6 06A0  32         bl    @sams.layout.copy     ; Backup Stevie SAMS page layout
     61D8 269E     
0047 61DA A200                   data tv.sams.2000     ; \ @i = target address of 8 words table
0048                                                   ; /      that contains SAMS layout
0049               
0050 61DC 06A0  32         bl    @scroff               ; Turn off screen
     61DE 26E6     
0051               
0052 61E0 06A0  32         bl    @mem.sams.set.external
     61E2 610A     
0053                                                   ; Load SAMS page layout (from cart space)
0054                                                   ; before running external program.
0055               
0056 61E4 06A0  32         bl    @cpyv2m
     61E6 2518     
0057 61E8 0000                   data >0000,>b000,16384
     61EA B000     
     61EC 4000     
0058                                                   ; Copy Stevie 16K VDP memory to RAM buffer
0059                                                   ; >b000->efff
0060                       ;-------------------------------------------------------
0061                       ; Put VDP in TI Basic compatible mode (32x24)
0062                       ;-------------------------------------------------------
0063 61EE 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     61F0 2806     
0064               
0065 61F2 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     61F4 22F8     
0066 61F6 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0067                       ;-------------------------------------------------------
0068                       ; Keep TI Basic session ID for later use
0069                       ;-------------------------------------------------------
0070 61F8 C120  34         mov   @tib.session,tmp0     ; \
     61FA A0B4     
0071                                                   ; | Store TI Basic session ID in tmp0.
0072                                                   ; | Througout the subroutine tmp0 will
0073                                                   ; | keep this value, even when SAMS
0074                                                   ; | banks are switched.
0075                                                   ; |
0076 61FC C804  30         mov   tmp0,@>83fe           ; | Also store a copy in the Stevie
     61FE 83FE     
0077                                                   ; | scratchpad >83fe for later use in
0078                                                   ; / TI Basic scratchpad.
0079                       ;-------------------------------------------------------
0080                       ; Switch for TI Basic session
0081                       ;-------------------------------------------------------
0082 6200 0284  22         ci    tmp0,1
     6202 0001     
0083 6204 130A  14         jeq   tib.run.init.basic1
0084 6206 0284  22         ci    tmp0,2
     6208 0002     
0085 620A 131D  14         jeq   tib.run.init.basic2
0086 620C 0284  22         ci    tmp0,3
     620E 0003     
0087 6210 132B  14         jeq   tib.run.init.basic3
0088                       ;-------------------------------------------------------
0089                       ; Assert, should never get here
0090                       ;-------------------------------------------------------
0091 6212 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6214 FFCE     
0092 6216 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6218 2026     
0093                       ;-------------------------------------------------------
0094                       ; New TI Basic session 1
0095                       ;-------------------------------------------------------
0096               tib.run.init.basic1:
0097 621A C160  34         mov   @tib.status1,tmp1     ; Resume TI Basic session?
     621C A0B6     
0098 621E 1302  14         jeq   !                     ; No, new session
0099 6220 0460  28         b     @tib.run.resume.basic1
     6222 6308     
0100               
0101 6224 0265  22 !       ori   tmp1,1                ; \
     6226 0001     
0102 6228 C805  38         mov   tmp1,@tib.status1     ; / Set resume flag for next run
     622A A0B6     
0103               
0104 622C 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     622E 6110     
0105                                                   ; / for TI Basic session 1
0106               
0107 6230 06A0  32         bl    @cpym2v
     6232 24E6     
0108 6234 06F8                   data >06f8,tibasic.patterns,8
     6236 6384     
     6238 0008     
0109                                                   ; Copy pattern TI-Basic session ID 1
0110               
0111 623A 06A0  32         bl    @cpym2v
     623C 24E6     
0112 623E 0320                   data >0320,old.basic.prg,16
     6240 63AC     
     6242 0010     
0113               
0114 6244 1020  14         jmp   tib.run.init.rest     ; Continue initialisation
0115               
0116                       ;-------------------------------------------------------
0117                       ; New TI Basic session 2
0118                       ;-------------------------------------------------------
0119               tib.run.init.basic2:
0120 6246 C160  34         mov   @tib.status2,tmp1     ; Resume TI Basic session?
     6248 A0B8     
0121 624A 1302  14         jeq   !                     ; No, new session
0122 624C 0460  28         b     @tib.run.resume.basic2
     624E 6318     
0123               
0124 6250 0265  22 !       ori   tmp1,1                ; \
     6252 0001     
0125 6254 C805  38         mov   tmp1,@tib.status2     ; / Set resume flag for next run
     6256 A0B8     
0126               
0127 6258 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     625A 611A     
0128                                                   ; / for TI Basic session 2
0129               
0130 625C 06A0  32         bl    @cpym2v
     625E 24E6     
0131 6260 06F8                   data >06f8,tibasic.patterns+8,8
     6262 638C     
     6264 0008     
0132                                                   ; Copy pattern TI-Basic session ID 2
0133               
0134 6266 100F  14         jmp   tib.run.init.rest     ; Continue initialisation
0135                       ;-------------------------------------------------------
0136                       ; New TI Basic session 3
0137                       ;-------------------------------------------------------
0138               tib.run.init.basic3:
0139 6268 C160  34         mov   @tib.status3,tmp1     ; Resume TI Basic session?
     626A A0BA     
0140 626C 155D  14         jgt   tib.run.resume.basic3 ; yes, do resume
0141               
0142 626E 0265  22         ori   tmp1,1                ; \
     6270 0001     
0143 6272 C805  38         mov   tmp1,@tib.status3     ; / Set resume flag for next run
     6274 A0BA     
0144               
0145 6276 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     6278 6124     
0146                                                   ; / for TI Basic session 3
0147               
0148 627A 06A0  32         bl    @cpym2v
     627C 24E6     
0149 627E 06F8                   data >06f8,tibasic.patterns+16,8
     6280 6394     
     6282 0008     
0150                                                   ; Copy pattern TI-Basic session ID 3
0151               
0152 6284 1000  14         jmp   tib.run.init.rest     ; Continue initialisation
0153                       ;-------------------------------------------------------
0154                       ; New TI Basic session (part 2)
0155                       ;-------------------------------------------------------
0156               tib.run.init.rest:
0157 6286 06A0  32         bl    @ldfnt
     6288 2360     
0158 628A 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     628C 000C     
0159               
0160 628E 06A0  32         bl    @filv
     6290 228E     
0161 6292 0300                   data >0300,>D0,2      ; No sprites
     6294 00D0     
     6296 0002     
0162               
0163 6298 06A0  32         bl    @cpu.scrpad.backup    ; (1) Backup stevie primary scratchpad to
     629A 2BA0     
0164                                                   ;     fixed memory address @cpu.scrpad.tgt
0165               
0166 629C 06A0  32         bl    @cpym2m
     629E 253A     
0167 62A0 F000                   data >f000,cpu.scrpad2,256
     62A2 AD00     
     62A4 0100     
0168                                                   ; (2) Stevie scratchpad dump cannot stay
0169                                                   ;     there, move to final destination.
0170               
0171 62A6 06A0  32         bl    @cpym2m
     62A8 253A     
0172 62AA 7E00                   data cpu.scrpad.src,cpu.scrpad.tgt,256
     62AC F000     
     62AE 0100     
0173                                                   ; (3) Copy OS monitor scratchpad dump from
0174                                                   ;     cartridge rom to @cpu.scrpad.tgt
0175               
0176 62B0 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     62B2 AD00     
0177 62B4 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     62B6 2BD4     
0178 62B8 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     62BA 8300     
0179               
0180                       ; ATTENTION
0181                       ; From here on no more access to any of the SP2 or stevie routines.
0182                       ; We're on unknown territory.
0183               
0184 62BC C820  46         mov   @cpu.scrpad2+254,@>83b6
     62BE ADFE     
     62C0 83B6     
0185                                                   ; \ Store TI Basic session ID in TI Basic
0186                                                   ; | scratchpad address >83b6.
0187                                                   ; | Note that >83fe in Stevie scratchpad has
0188                                                   ; / a copy of the TI basic session ID.
0189                       ;-------------------------------------------------------
0190                       ; Poke some values
0191                       ;-------------------------------------------------------
0192 62C2 C820  46         mov   @tibasic.scrpad.83d4,@>83d4  ; VDPR1
     62C4 637C     
     62C6 83D4     
0193 62C8 C820  46         mov   @tibasic.scrpad.83fa,@>83fa  ; GBASE
     62CA 637E     
     62CC 83FA     
0194 62CE C820  46         mov   @tibasic.scrpad.83fc,@>83fc  ; FLAGS
     62D0 6380     
     62D2 83FC     
0195 62D4 C820  46         mov   @tibasic.scrpad.83fe,@>83fe  ; VDP write port
     62D6 6382     
     62D8 83FE     
0196                       ;-------------------------------------------------------
0197                       ; Register ISR hook in scratch pad
0198                       ;-------------------------------------------------------
0199 62DA 02E0  18         lwpi  cpu.scrpad1           ; Scratchpad in >8300 again
     62DC 8300     
0200 62DE 0201  20         li    r1,isr                ; \
     62E0 63BC     
0201 62E2 C801  30         mov   r1,@>83c4             ; | >83c4 = Pointer to start address of ISR
     62E4 83C4     
0202                                                   ; /
0203               
0204 62E6 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     62E8 1E00     
0205 62EA 1E01  16         sbz   1                     ; /
0206                       ;-------------------------------------------------------
0207                       ; Run TI Basic session in GPL Interpreter
0208                       ;-------------------------------------------------------
0209 62EC 02E0  18         lwpi  >83e0
     62EE 83E0     
0210 62F0 0201  20         li    r1,>2014
     62F2 2014     
0211 62F4 0201  20         li    r1,>216f              ; Entrypoint for GPL TI Basic interpreter
     62F6 216F     
0212 62F8 D801  38         movb  r1,@grmwa             ; \
     62FA 9C02     
0213 62FC 06C1  14         swpb  r1                    ; | Set GPL address
0214 62FE D801  38         movb  r1,@grmwa             ; /
     6300 9C02     
0215 6302 1000  14         nop
0216 6304 0460  24         b     @>0070                ; Start GPL interpreter
     6306 0070     
0217                       ;-------------------------------------------------------
0218                       ; Resume TI-Basic session 1
0219                       ;-------------------------------------------------------
0220               tib.run.resume.basic1:
0221 6308 06A0  32         bl    @mem.sams.set.basic1  ; \ Load SAMS page layout (from cart space)
     630A 6110     
0222                                                   ; / for TI Basic session 1
0223               
0224 630C 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     630E 253A     
0225 6310 F100                   data >f100,>f000,256  ; / address @cpu.scrpad.target
     6312 F000     
     6314 0100     
0226               
0227 6316 1010  14         jmp   tib.run.resume.part2  ; Continue resume
0228                       ;-------------------------------------------------------
0229                       ; Resume TI-Basic session 2
0230                       ;-------------------------------------------------------
0231               tib.run.resume.basic2:
0232 6318 06A0  32         bl    @mem.sams.set.basic2  ; \ Load SAMS page layout (from cart space)
     631A 611A     
0233                                                   ; / for TI Basic session 2
0234               
0235 631C 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     631E 253A     
0236 6320 F200                   data >f200,>f000,256  ; / address @cpu.scrpad.target
     6322 F000     
     6324 0100     
0237               
0238 6326 1008  14         jmp   tib.run.resume.part2  ; Continue resume
0239                       ;-------------------------------------------------------
0240                       ; Resume TI-Basic session 3
0241                       ;-------------------------------------------------------
0242               tib.run.resume.basic3:
0243 6328 06A0  32         bl    @mem.sams.set.basic3  ; \ Load SAMS page layout (from cart space)
     632A 6124     
0244                                                   ; / for TI Basic session 3
0245               
0246 632C 06A0  32         bl    @cpym2m               ; \ Copy TI Basic scratchpad to fixed memory
     632E 253A     
0247 6330 F300                   data >f300,>f000,256  ; / address @cpu.scrpad.target
     6332 F000     
     6334 0100     
0248               
0249 6336 1000  14         jmp   tib.run.resume.part2  ; Continue resume
0250                       ;-------------------------------------------------------
0251                       ; Resume TI-Basic session (part 2)
0252                       ;-------------------------------------------------------
0253               tib.run.resume.part2:
0254 6338 C1E0  30         mov   @>83fc,r7             ; Get 'Hide SID' flag
     633A 83FC     
0255 633C 1304  14         jeq   tib.run.resume.vdp    ; Flag is reset, skip clearing SID
0256               
0257 633E 0207  20         li    r7,>8080              ; Whitespace (with TI-Basic offset >60)
     6340 8080     
0258 6342 C807  38         mov   r7,@>b01e             ; Clear SID in VDP screen backup
     6344 B01E     
0259                       ;-------------------------------------------------------
0260                       ; Restore VDP memory
0261                       ;-------------------------------------------------------
0262               tib.run.resume.vdp:
0263 6346 06A0  32         bl    @cpym2v
     6348 24E6     
0264 634A 0000                   data >0000,>b000,16384
     634C B000     
     634E 4000     
0265                                                   ; Restore TI Basic 16K VDP memory from
0266                                                   ; RAM buffer >b000->efff
0267                       ;-------------------------------------------------------
0268                       ; Clear crunch buffer (crunched statement from before)
0269                       ;-------------------------------------------------------
0270 6350 06A0  32         bl    @filv
     6352 228E     
0271 6354 0320                   data >0320,0,80       ; \ Clear crunch buffer to remove statement
     6356 0000     
     6358 0050     
0272                                                   ; / used for returning to Stevie before.
0273                       ;-------------------------------------------------------
0274                       ; Restore scratchpad memory
0275                       ;-------------------------------------------------------
0276               tib.run.resume.scrpad:
0277 635A 02E0  18         lwpi  cpu.scrpad2           ; Flip workspace before starting restore
     635C AD00     
0278 635E 06A0  36         bl    @cpu.scrpad.restore   ; Restore scratchpad from @cpu.scrpad.tgt
     6360 2BD4     
0279 6362 02E0  18         lwpi  cpu.scrpad1           ; Flip workspace to scratchpad again
     6364 8300     
0280               
0281 6366 C820  46         mov   @cpu.scrpad2+252,@>83b4
     6368 ADFC     
     636A 83B4     
0282                                                   ; \ Store 'Hide SID' flag in TI Basic
0283                                                   ; | scratchpad address >83b4.
0284                                                   ; | Note that >83fc in Stevie scratchpad
0285                                                   ; / has copy of the flag.
0286                       ;-------------------------------------------------------
0287                       ; Load legacy SAMS bank layout
0288                       ;-------------------------------------------------------
0289               tibasic.resume.load:
0290 636C 02E0  18         lwpi  cpu.scrpad1           ; Workspace must be in scratchpad again!
     636E 8300     
0291 6370 04CB  14         clr   r11
0292               
0293 6372 020C  20         li    r12,>1e00             ; \ Disable SAMS mapper (transparent mode)
     6374 1E00     
0294 6376 1E01  16         sbz   1                     ; / >02 >03 >0a >0b >0c >0d >0e >0f
0295               
0296                       ; ATTENTION
0297                       ; From here on no more access to any of the SP2 or stevie routines.
0298                       ; We're on unknown territory.
0299               
0300                       ;-------------------------------------------------------
0301                       ; Resume TI Basic interpreter
0302                       ;-------------------------------------------------------
0303 6378 0460  24         b     @>0ab8                ; Return from interrupt routine.
     637A 0AB8     
0304                                                   ; See TI Intern page 32 (german)
0305                       ;-------------------------------------------------------
0306                       ; Required values for TI Basic scratchpad
0307                       ;-------------------------------------------------------
0308               tibasic.scrpad.83d4:
0309 637C E000             data  >e000                 ; \ 1 byte (>83d4) VDPR1
0310                                                   ; | VDP R1 contents, used by the key scan
0311                                                   ; | routine to restore screen after it has
0312                                                   ; / blanked.
0313               
0314               tibasic.scrpad.83fa:
0315 637E 9800             data  >9800                 ; \ 2 bytes (>83fa) GBASE
0316                                                   ; | GROM port currently used (>9800)
0317                                                   ; /
0318               
0319               tibasic.scrpad.83fc:
0320 6380 0100             data  >0100                 ; \ 1 byte (>83fd) FLAGS
0321                                                   ; | System flags
0322                                                   ; | bit 6=1, screen is in multi-color mode
0323                                                   ; / bit 7=1, sound list in VDP else GRAM
0324               
0325               tibasic.scrpad.83fe:
0326 6382 8C02             data  >8c02                 ; \ 2 bytes (83fe)
0327                                                   ; | VDP Write Address port (>8c02)
0328                                                   ; /
0329               
0330               
0331               ***************************************************************
0332               * Patterns for session indicator digits 1-5
0333               ********|*****|*********************|**************************
0334               tibasic.patterns:
0335 6384 007E             byte  >00,>7E,>E7,>C7,>E7,>E7,>C3,>7E ; 1
     6386 E7C7     
     6388 E7E7     
     638A C37E     
0336 638C 007E             byte  >00,>7E,>C3,>F3,>C3,>CF,>C3,>7E ; 2
     638E C3F3     
     6390 C3CF     
     6392 C37E     
0337 6394 007E             byte  >00,>7E,>C3,>F3,>C3,>F3,>C3,>7E ; 3
     6396 C3F3     
     6398 C3F3     
     639A C37E     
0338 639C 007E             byte  >00,>7E,>D3,>D3,>C3,>F3,>F3,>7E ; 4
     639E D3D3     
     63A0 C3F3     
     63A2 F37E     
0339 63A4 007E             byte  >00,>7E,>C3,>CF,>C3,>F3,>C3,>7E ; 5
     63A6 C3CF     
     63A8 C3F3     
     63AA C37E     
0340               
0341               old.basic.prg:
0342 63AC 06C8             byte  >06,>C8,>0B,>44,>53,>4B,>31,>2E
     63AE 0B44     
     63B0 534B     
     63B2 312E     
0343 63B4 4857             byte  >48,>57,>3B,>42,>41,>53,>00,>0F
     63B6 3B42     
     63B8 4153     
     63BA 000F     
                   < stevie_b7.asm
0081                       copy  "tib.session.isr.asm"        ; TI Basic integration hook
     **** ****     > tib.session.isr.asm
0001               * FILE......: tib.session.isr.asm
0002               * Purpose...: TI Basic integration hook
0003               
0004               
0005               ***************************************************************
0006               * isr
0007               * TI Basic integration hook
0008               ***************************************************************
0009               * Called from console rom at >0ab6
0010               * See TI Intern page 32 (german) for details
0011               *--------------------------------------------------------------
0012               * OUTPUT
0013               * none
0014               *--------------------------------------------------------------
0015               * Register usage
0016               * r7, 12
0017               ********|*****|*********************|**************************
0018               isr:
0019 63BC 0300  22         limi  0                     ; \ Turn off interrupts
     63BE 0000     
0020                                                   ; / Prevent ISR reentry
0021               
0022 63C0 C807  38         mov   r7,@rambuf            ; Backup R7
     63C2 A100     
0023 63C4 C80C  38         mov   r12,@rambuf+2         ; Backup R12
     63C6 A102     
0024                       ;--------------------------------------------------------------
0025                       ; Exit ISR if TI-Basic is busy running a program
0026                       ;--------------------------------------------------------------
0027 63C8 C1E0  30         mov   @>8344,r7             ; Busy running program?
     63CA 8344     
0028 63CC 0287  22         ci    r7,>0100
     63CE 0100     
0029 63D0 1601  14         jne   isr.showid            ; No, TI-Basic is in command line mode.
0030                       ;--------------------------------------------------------------
0031                       ; TI-Basic program running
0032                       ;--------------------------------------------------------------
0033 63D2 1022  14         jmp   isr.exit              ; Exit
0034                       ;--------------------------------------------------------------
0035                       ; Show TI-Basic session ID and scan crunch buffer
0036                       ;--------------------------------------------------------------
0037               isr.showid:
0038 63D4 C1E0  30         mov   @>83b4,r7             ; Get counter
     63D6 83B4     
0039 63D8 0287  22         ci    r7,>003c              ; Counter limit reached ?
     63DA 003C     
0040 63DC 1112  14         jlt   isr.counter           ; Not yet, skip showing Session ID
0041 63DE 04E0  26         clr   @>83b4                ; Reset counter
     63E0 83B4     
0042                       ;--------------------------------------------------------------
0043                       ; Setup VDP write address for column 30
0044                       ;--------------------------------------------------------------
0045 63E2 0207  20         li    r7,>401e              ; \
     63E4 401E     
0046 63E6 06C7  14         swpb  r7                    ; | >1c is the VDP column position
0047 63E8 D807  30         movb  r7,@vdpa              ; | where bytes should be written
     63EA 8C02     
0048 63EC 06C7  14         swpb  r7                    ; |
0049 63EE D807  30         movb  r7,@vdpa              ; /
     63F0 8C02     
0050                       ;-------------------------------------------------------
0051                       ; Write session ID
0052                       ;-------------------------------------------------------
0053 63F2 0207  20         li    r7,>83df              ; Char '#' and char >df
     63F4 83DF     
0054 63F6 D807  30         movb  r7,@vdpw              ; Write byte
     63F8 8C00     
0055 63FA 06C7  14         swpb  r7
0056 63FC D807  30         movb  r7,@vdpw              ; Write byte
     63FE 8C00     
0057 6400 1010  14         jmp   isr.scan.crunchbuf    ; Go scan crunch buffer
0058                       ;-------------------------------------------------------
0059                       ; Increase counter
0060                       ;-------------------------------------------------------
0061               isr.counter:
0062 6402 05A0  26         inc   @>83b4                ; Increase counter
     6404 83B4     
0063                       ;-------------------------------------------------------
0064                       ; Hotkey pressed?
0065                       ;-------------------------------------------------------
0066               isr.hotkey:
0067 6406 C1E0  30         mov   @>8374,r7             ; \ Get keyboard scancode from @>8375
     6408 8374     
0068 640A 0247  22         andi  r7,>00ff              ; / LSB only
     640C 00FF     
0069 640E 0287  22         ci    r7,>0f                ; Hotkey fctn + '9' pressed?
     6410 000F     
0070 6412 1602  14         jne   isr.exit              ; No, normal exit
0071 6414 0460  28         b     @tib.run.return       ; Yes, return to Stevie
     6416 64EE     
0072                       ;-------------------------------------------------------
0073                       ; Return from ISR
0074                       ;-------------------------------------------------------
0075               isr.exit:
0076 6418 C320  34         mov   @rambuf+2,r12         ; Restore R12
     641A A102     
0077 641C C1E0  34         mov   @rambuf,r7            ; Restore R7
     641E A100     
0078 6420 045B  20         b     *r11                  ; Return from ISR
0079               
0080               
0081               ***************************************************************
0082               * isr.scan.crunbuf
0083               * Scan the VDP crunch buffer for file commands NEW/OLD/SAVE
0084               ***************************************************************
0085               * Called from isr
0086               *--------------------------------------------------------------
0087               * OUTPUT
0088               * none
0089               *--------------------------------------------------------------
0090               * Register usage
0091               * r7, r10
0092               *
0093               * Memory usage
0094               * >ffd0 - >ffff  TI Basic program filename
0095               ********|*****|*********************|**************************
0096               isr.scan.crunchbuf:
0097                       ;-------------------------------------------------------
0098                       ; Read token at VDP >0320
0099                       ;-------------------------------------------------------
0100 6422 0207  20         li    r7,>0320              ; \
     6424 0320     
0101 6426 06C7  14         swpb  r7                    ; |  Setup VDP read address
0102 6428 D807  30         movb  r7,@vdpa              ; |
     642A 8C02     
0103 642C 06C7  14         swpb  r7                    ; |
0104 642E D807  30         movb  r7,@vdpa              ; /
     6430 8C02     
0105               
0106 6432 D1E0  30         movb  @vdpr,r7              ; Read MSB
     6434 8800     
0107 6436 06C7  14         swpb  r7
0108 6438 D1E0  30         movb  @vdpr,r7              ; Read LSB
     643A 8800     
0109 643C 06C7  14         swpb  r7                    ; Restore order
0110                       ;-------------------------------------------------------
0111                       ; Scan for END
0112                       ;-------------------------------------------------------
0113               isr.scan.end:
0114 643E 9807  34         cb    r7,@data.tk.end       ; END?
     6440 647F     
0115 6442 1602  14         jne   isr.scan.old          ; No, check if other token
0116 6444 0460  28         b     @tib.run.return       ; Yes, return to Stevie
     6446 64EE     
0117                       ;-------------------------------------------------------
0118                       ; Scan for OLD
0119                       ;-------------------------------------------------------
0120               isr.scan.old:
0121 6448 9807  34         cb    r7,@data.tk.old       ; OLD?
     644A 647D     
0122 644C 1601  14         jne   isr.scan.save         ; No, check if other token
0123 644E 100E  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0124                       ;-------------------------------------------------------
0125                       ; Scan for SAVE
0126                       ;-------------------------------------------------------
0127               isr.scan.save:
0128 6450 9807  34         cb    r7,@data.tk.save      ; SAVE?
     6452 647E     
0129 6454 1601  14         jne   isr.scan.new          ; No, check if other token
0130 6456 100A  14         jmp   isr.scan.copy         ; Copy parameter to high-memory
0131                       ;-------------------------------------------------------
0132                       ; Scan for NEW
0133                       ;-------------------------------------------------------
0134               isr.scan.new:
0135 6458 9807  34         cb    r7,@data.tk.new       ; NEW?
     645A 647C     
0136 645C 160E  14         jne   isr.scan.exit         ; Exit crunch buffer scan
0137                       ;-------------------------------------------------------
0138                       ; Clear TI Basic auxiliary memory buffer
0139                       ;-------------------------------------------------------
0140 645E 0207  20         li    r7,tib.aux
     6460 FF00     
0141 6462 04F7  30 !       clr   *r7+                  ; \
0142 6464 0287  22         ci    r7,tib.aux.end        ; | Clear memory
     6466 FFFA     
0143 6468 12FC  14         jle   -!                    ; /
0144 646A 1007  14         jmp   isr.scan.exit         ; Exit
0145                       ;-------------------------------------------------------
0146                       ; Copy TI Basic program filename to high memory
0147                       ;-------------------------------------------------------
0148               isr.scan.copy:
0149 646C 04C7  14         clr   r7                    ;
0150 646E 020A  20         li    r10,tib.aux.fname     ; Target address in high memory
     6470 FF00     
0151               isr.scan.copy.loop:
0152 6472 D1E0  30         movb  @vdpr,r7              ; Read LSB
     6474 8800     
0153 6476 DE87  32         movb  r7,*r10+              ; Copy byte to RAM
0154 6478 16FC  14         jne   isr.scan.copy.loop    ; Copy until termination token found
0155                       ;-------------------------------------------------------
0156                       ; TI Basic program filename copied
0157                       ;-------------------------------------------------------
0158               isr.scan.exit:
0159 647A 10C5  14         jmp   isr.hotkey            ; Continue processing isr
0160               
0161               
0162               
0163               ***************************************************************
0164               * Tokens TI Basic commands
0165               ********|*****|*********************|**************************
0166 647C 01       data.tk.new   byte >01              ; NEW
0167 647D   06     data.tk.old   byte >06              ; OLD
0168 647E 08       data.tk.save  byte >08              ; SAVE
0169 647F   8B     data.tk.end   byte >8b              ; END
0170 6480 8E       data.tk.break byte >8e              ; BREAK
                   < stevie_b7.asm
0082                       copy  "tib.session.return.asm"     ; Return to Stevie
     **** ****     > tib.session.return.asm
0001               * FILE......: tib.session.return.asm
0002               * Purpose...: Return from TI Basic session to Stevie
0003               
0004               
0005               ***************************************************************
0006               * tib.run.return.mon
0007               * Return from OS Monitor to Stevie
0008               ***************************************************************
0009               * bl   @tib.run.return.mon
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * r1 in GPL WS, tmp0, tmp1
0016               *--------------------------------------------------------------
0017               * REMARKS
0018               * Only called from program selection screen after exit out of
0019               * TI Basic with FCTN-QUIT, BYE or by running an assembly
0020               * program that did "BLWP @0".
0021               ********|*****|*********************|**************************
0022               tib.run.return.mon:
0023 6482 020C  20         li    r12,>1e00             ; \ Enable SAMS mapper again
     6484 1E00     
0024 6486 1D01  16         sbo   1                     ; | We stil have the SAMS banks layout
0025                                                   ; / mem.sams.layout.external
0026                       ;------------------------------------------------------
0027                       ; Check magic string (inline version, no SP2 present!)
0028                       ;------------------------------------------------------
0029 6488 8820  50         c     @magic.str.w1,@magic.string
     648A A000     
     648C 609C     
0030 648E 1611  14         jne   !
0031 6490 8820  50         c     @magic.str.w2,@magic.string+2
     6492 A002     
     6494 609E     
0032 6496 160D  14         jne   !
0033 6498 8820  50         c     @magic.str.w3,@magic.string+4
     649A A004     
     649C 60A0     
0034 649E 1609  14         jne   !
0035                       ;-------------------------------------------------------
0036                       ; Initialize
0037                       ;-------------------------------------------------------
0038 64A0 C120  34         mov   @tib.session,tmp0
     64A2 A0B4     
0039 64A4 0284  22         ci    tmp0,1
     64A6 0001     
0040 64A8 1104  14         jlt   !
0041 64AA 0284  22         ci    tmp0,5
     64AC 0005     
0042 64AE 1501  14         jgt   !
0043 64B0 1002  14         jmp   tib.run.return.mon.cont
0044                       ;-------------------------------------------------------
0045                       ; Initialize Stevie
0046                       ;-------------------------------------------------------
0047 64B2 0460  28 !       b     @kickstart.code1      ; Initialize Stevie
     64B4 6040     
0048                       ;-------------------------------------------------------
0049                       ; Resume Stevie
0050                       ;-------------------------------------------------------
0051               tib.run.return.mon.cont:
0052 64B6 02E0  18         lwpi  cpu.scrpad2           ; Activate workspace at >ad00 that was
     64B8 AD00     
0053                                                   ; paged out in tibasic.init
0054               
0055 64BA 06A0  36         bl    @cpu.scrpad.pgin      ; \ Page-in scratchpad memory previously
     64BC 2C26     
0056 64BE AD00                   data cpu.scrpad2      ; | stored at >ad00 and set wp at >8300
0057                                                   ; / Destroys registers tmp0-tmp2
0058               
0059 64C0 D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     64C2 2022     
     64C4 8375     
0060               
0061 64C6 C0A0  42         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     64C8 A234     
0062               
0063 64CA 06A0  36         bl    @mute                 ; Mute sound generators
     64CC 28AA     
0064 64CE 06A0  36         bl    @scroff               ; Turn screen off
     64D0 26E6     
0065               
0066                       ; Prevent resuming the TI Basic session that lead us here.
0067                       ; Easiest thing to do is to reinitalize the session upon next start.
0068               
0069                       ;-------------------------------------------------------
0070                       ; Assert TI basic sesion ID
0071                       ;-------------------------------------------------------
0072 64D2 C120  42         mov   @tib.session,tmp0     ; Get session ID
     64D4 A0B4     
0073 64D6 1307  14         jeq   !
0074 64D8 0284  26         ci    tmp0,3
     64DA 0003     
0075 64DC 1504  14         jgt   !
0076                       ;-------------------------------------------------------
0077                       ; Reset session resume flag (tibasicX.status)
0078                       ;-------------------------------------------------------
0079 64DE 0A14  26         sla   tmp0,1                ; Word align
0080 64E0 04E4  38         clr   @tib.session(tmp0)
     64E2 A0B4     
0081 64E4 107A  14         jmp   tib.run.return.stevie
0082                       ;-------------------------------------------------------
0083                       ; Assert failed
0084                       ;-------------------------------------------------------
0085 64E6 C80B  42 !       mov   r11,@>ffce            ; \ Save caller address
     64E8 FFCE     
0086 64EA 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     64EC 2026     
0087               
0088               
0089               
0090               ***************************************************************
0091               * tib.run.return
0092               * Return from TI Basic to Stevie
0093               ***************************************************************
0094               * bl   @tib.run.return
0095               *--------------------------------------------------------------
0096               * OUTPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * r1 in GPL WS, tmp0, tmp1
0101               *--------------------------------------------------------------
0102               * REMARKS
0103               * Called from ISR code
0104               ********|*****|*********************|**************************
0105               tib.run.return:
0106 64EE 020C  24         li    r12,>1e00             ; \ Enable SAMS mapper again with
     64F0 1E00     
0107 64F2 1D01  20         sbo   1                     ; | sams layout table
0108                                                   ; / mem.sams.layout.basic[1-5]
0109               
0110 64F4 02E0  18         lwpi  cpu.scrpad2           ; Activate Stevie workspace that got
     64F6 AD00     
0111                                                   ; paged-out in tibasic.init
0112               
0113 64F8 D820  46         movb  @w$ffff,@>8375        ; Reset keycode
     64FA 2022     
     64FC 8375     
0114               
0115               
0116 64FE 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0117 6500 C820  54         mov   @tib.run.return.data.samspage,@>401c
     6502 6630     
     6504 401C     
0118                                                   ; \ Temporarily map SAMS page >0f to
0119                                                   ; | memory window >0e00 - >0eff
0120                                                   ; |
0121                                                   ; | Needed for copying BASIC program
0122                                                   ; | filename at >ef00 to destination >f?00
0123                                                   ; | in SAMS page >ff
0124                                                   ; /
0125 6506 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0126               
0127                       ;-------------------------------------------------------
0128                       ; Backup scratchpad of TI-Basic session 1
0129                       ;-------------------------------------------------------
0130               tib.run.return.1:
0131 6508 8820  50         c     @tib.session,@const.1
     650A A0B4     
     650C 2002     
0132 650E 160B  14         jne   tib.run.return.2      ; Not the current session, check next one.
0133               
0134 6510 06A0  36         bl    @cpym2m
     6512 253A     
0135 6514 8300                   data >8300,>f100,256  ; Backup TI Basic scratchpad to >f100
     6516 F100     
     6518 0100     
0136               
0137 651A 06A0  36         bl    @cpym2m
     651C 253A     
0138 651E EF00                   data >ef00,>f600,256  ; Backup auxiliary memory to >f600
     6520 F600     
     6522 0100     
0139               
0140 6524 1040  14         jmp   tib.return.page_in    ; Skip to page-in
0141                       ;-------------------------------------------------------
0142                       ; Backup scratchpad of TI-Basic session 2
0143                       ;-------------------------------------------------------
0144               tib.run.return.2:
0145 6526 8820  50         c     @tib.session,@const.2
     6528 A0B4     
     652A 2004     
0146 652C 160B  14         jne   tib.run.return.3      ; Not the current session, check next one.
0147               
0148 652E 06A0  36         bl    @cpym2m
     6530 253A     
0149 6532 8300                   data >8300,>f200,256  ; Backup TI Basic scratchpad to >f200
     6534 F200     
     6536 0100     
0150               
0151 6538 06A0  36         bl    @cpym2m
     653A 253A     
0152 653C EF00                   data >ef00,>f700,256  ; Backup auxiliary memory to >f700
     653E F700     
     6540 0100     
0153               
0154 6542 1031  14         jmp   tib.return.page_in    ; Skip to page-in
0155                       ;-------------------------------------------------------
0156                       ; Backup scratchpad of TI-Basic session 3
0157                       ;-------------------------------------------------------
0158               tib.run.return.3:
0159 6544 8820  50         c     @tib.session,@const.3
     6546 A0B4     
     6548 3936     
0160 654A 160B  14         jne   tib.run.return.4      ; Not the current session, check next one.
0161               
0162 654C 06A0  36         bl    @cpym2m
     654E 253A     
0163 6550 8300                   data >8300,>f300,256  ; Backup TI Basic scratchpad to >f300
     6552 F300     
     6554 0100     
0164               
0165 6556 06A0  36         bl    @cpym2m
     6558 253A     
0166 655A EF00                   data >ef00,>f800,256  ; Backup auxiliary memory to >f800
     655C F800     
     655E 0100     
0167               
0168 6560 1022  14         jmp   tib.return.page_in    ; Skip to page-in
0169                       ;-------------------------------------------------------
0170                       ; Backup scratchpad of TI-Basic session 4
0171                       ;-------------------------------------------------------
0172               tib.run.return.4:
0173 6562 8820  50         c     @tib.session,@const.4
     6564 A0B4     
     6566 2006     
0174 6568 160B  14         jne   tib.run.return.5      ; Not the current session, check next one.
0175               
0176 656A 06A0  36         bl    @cpym2m
     656C 253A     
0177 656E 8300                   data >8300,>f400,256  ; Backup TI Basic scratchpad to >f400
     6570 F400     
     6572 0100     
0178               
0179 6574 06A0  36         bl    @cpym2m
     6576 253A     
0180 6578 EF00                   data >ef00,>f900,256  ; Backup auxiliary memory to >f900
     657A F900     
     657C 0100     
0181               
0182 657E 1013  14         jmp   tib.return.page_in    ; Skip to page-in
0183                       ;-------------------------------------------------------
0184                       ; Backup scratchpad of TI-Basic session 5
0185                       ;-------------------------------------------------------
0186               tib.run.return.5:
0187 6580 8820  50         c     @tib.session,@const.5
     6582 A0B4     
     6584 3938     
0188 6586 160B  14         jne   tib.run.return.failed ; Not the current session, abort here
0189               
0190 6588 06A0  36         bl    @cpym2m
     658A 253A     
0191 658C 8300                   data >8300,>f500,256  ; Backup TI Basic scratchpad to >f500
     658E F500     
     6590 0100     
0192               
0193 6592 06A0  36         bl    @cpym2m
     6594 253A     
0194 6596 EF00                   data >ef00,>fa00,256  ; Backup auxiliary memory to >fa00
     6598 FA00     
     659A 0100     
0195               
0196 659C 1004  14         jmp   tib.return.page_in    ; Skip to page-in
0197                       ;-------------------------------------------------------
0198                       ; Asserts failed
0199                       ;-------------------------------------------------------
0200               tib.run.return.failed:
0201 659E C80B  42         mov   r11,@>ffce            ; \ Save caller address
     65A0 FFCE     
0202 65A2 06A0  36         bl    @cpu.crash            ; / Crash and halt system
     65A4 2026     
0203                       ;-------------------------------------------------------
0204                       ; Page-in scratchpad memory
0205                       ;-------------------------------------------------------
0206               tib.return.page_in:
0207 65A6 1D00  20         sbo   0                     ; Enable writing to SAMS registers
0208               
0209 65A8 C120  42         mov   @tib.samstab.ptr,tmp0 ; \ Get pointer to basic session SAMS table.
     65AA A0EA     
0210 65AC 0224  30         ai    tmp0,12               ; / Get 7th entry in table
     65AE 000C     
0211               
0212 65B0 C814  50         mov   *tmp0,@>401c          ; \ Restore SAMS page in
     65B2 401C     
0213                                                   ; | memory window >0e00 - >0eff
0214                                                   ; | Was temporarily paged-out
0215                                                   ; | in tib.return.run
0216                                                   ; / Required before doing VDP memory dump
0217               
0218 65B4 1E00  20         sbz   0                     ; Disable writing to SAMS registers
0219               
0220 65B6 06A0  36         bl    @cpym2m
     65B8 253A     
0221 65BA AD00                   data cpu.scrpad2,cpu.scrpad1,256
     65BC 8300     
     65BE 0100     
0222                                                   ; Restore scratchpad contents
0223               
0224 65C0 02E0  18         lwpi  cpu.scrpad1           ; Activate primary scratchpad
     65C2 8300     
0225               
0226 65C4 C0A0  34         mov   @tv.sp2.conf,config   ; Restore the SP2 config register
     65C6 A234     
0227               
0228 65C8 06A0  32         bl    @mute                 ; Mute sound generators
     65CA 28AA     
0229                       ;-------------------------------------------------------
0230                       ; Cleanup after return from TI Basic
0231                       ;-------------------------------------------------------
0232               tib.run.return.vdpdump:
0233 65CC 06A0  32         bl    @scroff               ; Turn screen off
     65CE 26E6     
0234 65D0 06A0  32         bl    @cpyv2m
     65D2 2518     
0235 65D4 0000                   data >0000,>b000,16384
     65D6 B000     
     65D8 4000     
0236                                                   ; Dump TI Basic 16K VDP memory to ram buffer
0237                                                   ; >b000->efff
0238                       ;-------------------------------------------------------
0239                       ; Restore VDP screen with Stevie content
0240                       ;-------------------------------------------------------
0241               tib.run.return.stevie:
0242 65DA 06A0  32         bl    @mem.sams.set.external
     65DC 610A     
0243                                                   ; Load SAMS page layout when returning from
0244                                                   ; external program.
0245               
0246 65DE 06A0  32         bl    @cpym2v
     65E0 24E6     
0247 65E2 0000                   data >0000,>b000,16384
     65E4 B000     
     65E6 4000     
0248                                                   ; Restore Stevie 16K to VDP from RAM buffer
0249                                                   ; >b000->efff
0250                       ;-------------------------------------------------------
0251                       ; Restore SAMS memory layout for editor buffer and index
0252                       ;-------------------------------------------------------
0253 65E8 06A0  32         bl    @mem.sams.set.stevie  ; Setup SAMS memory banks for stevie
     65EA 612E     
0254                                                   ; \ For this to work the bank having the
0255                                                   ; | @tv.sams.xxxx variables must already
0256                                                   ; | be active and may not switch to
0257                                                   ; / another bank.
0258                       ;-------------------------------------------------------
0259                       ; Setup F18a 80x30 mode again
0260                       ;-------------------------------------------------------
0261 65EC 06A0  32         bl    @f18unl               ; Unlock the F18a
     65EE 278A     
0263               
0264 65F0 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     65F2 2332     
0265 65F4 3140                   data >3140            ; F18a VR49 (>31), bit 40
0266               
0268               
0269 65F6 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     65F8 22F8     
0270 65FA 7F50                   data stevie.80x30     ; Equate selected video mode table
0271               
0272 65FC 06A0  32         bl    @putvr                ; Turn on position based attributes
     65FE 2332     
0273 6600 3202                   data >3202            ; F18a VR50 (>32), bit 2
0274               
0275 6602 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     6604 A006     
0276 6606 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     6608 A008     
0277 660A 04E0  34         clr   @parm3                ; Colorize all panes
     660C A00A     
0278               
0279 660E 06A0  32         bl    @pane.colorscheme.load
     6610 6BF0     
0280                                                   ; Reload color scheme
0281                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0282                                                   ; | i  @parm2 = Skip colorizing marked lines
0283                                                   ; |             if >FFFF
0284                                                   ; | i  @parm3 = Only colorize CMDB pane
0285                                                   ; /             if >FFFF
0286               
0287 6612 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     6614 31C6     
0288                                                   ; \ i  @tv.ruler.visible = Ruler visible
0289                                                   ; | i  @edb.special.file = Special file flag
0290                                                   ; / i  @tv.error.visible = Error visible
0291               
0292 6616 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack is on?
     6618 A0C0     
0293 661A 1604  14         jne   tib.run.return.exit   ; Yes, skip keylist
0294                       ;------------------------------------------------------
0295                       ; Set shortcut list in bottom status line
0296                       ;------------------------------------------------------
0297 661C 0204  20         li    tmp0,txt.keys.basic1
     661E 3C5E     
0298 6620 C804  38         mov   tmp0,@cmdb.pankeys    ; Save Keylist in status line
     6622 A72E     
0299                       ;------------------------------------------------------
0300                       ; Exit
0301                       ;------------------------------------------------------
0302               tib.run.return.exit:
0303 6624 C339  30         mov   *stack+,r12           ; Pop r12
0304 6626 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0305 6628 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0306 662A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0307 662C C2F9  30         mov   *stack+,r11           ; Pop r11
0308 662E 045B  20         b     *r11                  ; Return
0309               
0310               tib.run.return.data.samspage
0311 6630 0F00             data  >0f00                 ; SAMS page >0f
                   < stevie_b7.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; TI Basic program uncruncher
0085                       ;-----------------------------------------------------------------------
0086                       copy  "tib.uncrunch.helper.asm"    ; Helper functions for uncrunching
     **** ****     > tib.uncrunch.helper.asm
0001               * FILE......: tib.uncrunch.helper asm
0002               * Purpose...: Helper functions used for uncrunching
0003               
0004               
0005               ***************************************************************
0006               * _v2sams
0007               * Convert VDP address to SAMS page equivalent and get SAMS page
0008               ***************************************************************
0009               * bl   _v2sams
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * tmp0 = VRAM address in range >0000 - >3fff
0013               *
0014               * OUTPUT
0015               * @tib.var3 = SAMS page ID mapped to VRAM address
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Converts the VDP address to index into SAMS page layout table
0022               * mem.sams.layout.basic(X) and get SAMS page.
0023               *
0024               * Index offset in SAMS page layout table:
0025               * VRAM 0000-0fff = 6   \
0026               * VRAM 1000-1fff = 8   |  Offset of slots with SAMS pages having
0027               * VRAM 2000-2fff = 10  |  the 16K VDP dump of TI basic session.
0028               * VRAM 3000-3fff = 12  /
0029               ********|*****|*********************|**************************
0030               _v2sams:
0031 6632 0649  14         dect  stack
0032 6634 C64B  30         mov   r11,*stack            ; Save return address
0033 6636 0649  14         dect  stack
0034 6638 C644  30         mov   tmp0,*stack           ; Push tmp0
0035 663A 0649  14         dect  stack
0036 663C C645  30         mov   tmp1,*stack           ; Push tmp1
0037                       ;------------------------------------------------------
0038                       ; Calculate index in SAMS page table
0039                       ;------------------------------------------------------
0040 663E 0244  22         andi  tmp0,>f000            ; Only keep high-nibble of MSB
     6640 F000     
0041               
0042 6642 09B4  38         srl   tmp0,11               ; Move high-nibble to LSB and multiply by 2
0043 6644 A120  34         a     @tib.stab.ptr,tmp0    ; Add pointer base address
     6646 A0C2     
0044               
0045                       ;
0046                       ; In the SAMS page layout table of the TI Basic session, the 16K VDP
0047                       ; memory dump page starts at the 4th word. So need to add fixed offset.
0048                       ;
0049 6648 0224  22         ai    tmp0,6                ; Add fixed offset
     664A 0006     
0050 664C C114  26         mov   *tmp0,tmp0            ; Get SAMS page number
0051                       ;------------------------------------------------------
0052                       ; Check if SAMS page needs to be switched
0053                       ;------------------------------------------------------
0054 664E 8804  34         c     tmp0,@tib.var3        ; SAMS page has changed?
     6650 A0F0     
0055 6652 1307  14         jeq   _v2sams.exit          ; No, exit early
0056               
0057 6654 C804  38         mov   tmp0,@tib.var3        ; Set new SAMS page
     6656 A0F0     
0058 6658 0984  32         srl   tmp0,8                ; MSB to LSB
0059 665A 0205  20         li    tmp1,>f000            ; Memory address to map to
     665C F000     
0060               
0061 665E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6660 25D6     
0062                                                   ; \ i  tmp0  = SAMS page number
0063                                                   ; / i  tmp1  = Memory map address
0064                       ;------------------------------------------------------
0065                       ; Exit
0066                       ;------------------------------------------------------
0067               _v2sams.exit:
0068 6662 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 6664 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6666 C2F9  30         mov   *stack+,r11           ; Pop r11
0071 6668 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0087                       copy  "tib.uncrunch.asm"           ; Uncrunch TI Basic program
     **** ****     > tib.uncrunch.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch
0007               * Uncrunch TI Basic program to editor buffer
0008               ***************************************************************
0009               * bl   @tib.uncrunch
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2, tmp3, tmp4
0019               ********|*****|*********************|**************************
0020               tib.uncrunch:
0021 666A 0649  14         dect  stack
0022 666C C64B  30         mov   r11,*stack            ; Save return address
0023 666E 0649  14         dect  stack
0024 6670 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6672 0649  14         dect  stack
0026 6674 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Set indicator
0029                       ;------------------------------------------------------
0030 6676 0649  14         dect  stack
0031 6678 C660  46         mov   @parm1,*stack         ; Push @parm1
     667A A006     
0032               
0033 667C 06A0  32         bl    @fm.newfile           ; \ Clear editor buffer
     667E 6C14     
0034                                                   ; / (destroys parm1)
0035                       ;------------------------------------------------------
0036                       ; Determine filename
0037                       ;------------------------------------------------------
0038 6680 C119  26         mov   *stack,tmp0           ; Get TI Basic session
0039 6682 0A14  18         sla   tmp0,1                ; Align to word boundary
0040 6684 C824  54         mov   @data.filename.ptr(tmp0),@edb.filename.ptr
     6686 66E6     
     6688 A514     
0041               
0042 668A C820  54         mov   @tv.busycolor,@parm1  ; Get busy color
     668C A220     
     668E A006     
0043 6690 06A0  32         bl    @pane.colorscheme.botline
     6692 6C02     
0044                                                   ; Set colors for bottom line
0045                                                   ; \ i  @parm1 = Color combination
0046                                                   ; /
0047               
0048 6694 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6696 A006     
0049               
0050 6698 06A0  32         bl    @hchar
     669A 2832     
0051 669C 1D00                   byte pane.botrow,0,32,55
     669E 2037     
0052 66A0 FFFF                   data eol              ; Remove shortcuts
0053               
0054 66A2 06A0  32         bl    @putat
     66A4 2442     
0055 66A6 1D00                   byte pane.botrow,0
0056 66A8 3AFA                   data txt.uncrunching  ; Show expansion message
0057                       ;------------------------------------------------------
0058                       ; Prepare for uncrunching
0059                       ;------------------------------------------------------
0060 66AA 06A0  32         bl    @tib.uncrunch.prepare ; Prepare for uncrunching TI Basic program
     66AC 66EE     
0061                                                   ; \ i  @parm1 = TI Basic session to uncrunch
0062                                                   ; /
0063                       ;------------------------------------------------------
0064                       ; Uncrunch TI Basic program
0065                       ;------------------------------------------------------
0066 66AE 06A0  32         bl    @tib.uncrunch.prg     ; Uncrunch TI Basic program
     66B0 67BC     
0067                       ;------------------------------------------------------
0068                       ; Prepare for exit
0069                       ;------------------------------------------------------
0070 66B2 C120  34         mov   @tv.sams.f000,tmp0    ; Get SAMS page number
     66B4 A20E     
0071 66B6 0205  20         li    tmp1,>f000            ; Map SAMS page to >f000-ffff
     66B8 F000     
0072               
0073 66BA 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     66BC 25D6     
0074                                                   ; \ i  tmp0  = SAMS page number
0075                                                   ; / i  tmp1  = Memory map address
0076                       ;------------------------------------------------------
0077                       ; Close dialog and refresh frame buffer
0078                       ;------------------------------------------------------
0079 66BE 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     66C0 6BDE     
0080               
0081 66C2 04E0  34         clr   @parm1                ; Goto line 1
     66C4 A006     
0082               
0083 66C6 06A0  32         bl    @fb.refresh           ; Refresh frame buffer
     66C8 6C4A     
0084                                                   ; \ i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087 66CA 04E0  34         clr   @fb.row               ; Frame buffer line 0
     66CC A306     
0088 66CE 04E0  34         clr   @fb.column            ; Frame buffer column 0
     66D0 A30C     
0089 66D2 04E0  26         clr   @wyx                  ; Position VDP cursor
     66D4 832A     
0090               
0091 66D6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     66D8 319E     
0092                                                   ; \ i   @fb.top      = Address top row in FB
0093                                                   ; | i   @fb.topline  = Top line in FB
0094                                                   ; | i   @fb.row      = Current row in FB
0095                                                   ; |                  (offset 0..@fb.scrrows)
0096                                                   ; | i   @fb.column   = Current column in FB
0097                                                   ; | i   @fb.colsline = Columns per line FB
0098                                                   ; |
0099                                                   ; / o   @fb.current  = Updated pointer
0100               
0101 66DA 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     66DC 37A4     
0102                                                   ; | i  @fb.row        = Row in frame buffer
0103                                                   ; / o  @fb.row.length = Length of row
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               tib.uncrunch.exit:
0108 66DE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0109 66E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0110 66E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0111 66E4 045B  20         b     *r11                  ; Return
0112               
0113               
0114               data.filename.ptr:
0115 66E6 3B22             data  txt.newfile,txt.tib1,txt.tib2,txt.tib3
     66E8 3B2E     
     66EA 3B3C     
     66EC 3B4A     
                   < stevie_b7.asm
0088                       copy  "tib.uncrunch.prep.asm"      ; Prepare for uncrunching
     **** ****     > tib.uncrunch.prep.asm
0001               * FILE......: tib.uncrunch.prep.asm
0002               * Purpose...: Uncrunch TI Basic program to editor buffer
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.prepare
0007               * Prepare for uncrunching TI-Basic program
0008               ***************************************************************
0009               * bl   @tib.uncrunch.prepare
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = TI Basic session to uncrunch (1-5)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Remarks
0021               *
0022               * Pointers:
0023               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0024               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0025               *
0026               * Pointers to tables in VRAM:
0027               * @tib.lnt.top.ptr  = Top of line number table
0028               * @tib.lnt.bot.ptr  = Bottom of line number table
0029               * @tib.symt.top.ptr = Top of symbol table
0030               * @tib.symt.bot.ptr = Bottom of symbol table
0031               * @tib.strs.top.ptr = Top of string space
0032               * @tib.strs.bot.ptr = Bottom of string space
0033               *
0034               * Variables
0035               * @tib.var1  = TI Basic session
0036               * @tib.var2  = Address of SAMS page layout table entry mapped to VRAM address
0037               * @tib.var3  = SAMS page ID mapped to VRAM address
0038               * @tib.lines = Number of lines in TI Basic program
0039               ********|*****|*********************|**************************
0040               tib.uncrunch.prepare:
0041 66EE 0649  14         dect  stack
0042 66F0 C64B  30         mov   r11,*stack            ; Save return address
0043 66F2 0649  14         dect  stack
0044 66F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0045 66F6 0649  14         dect  stack
0046 66F8 C645  30         mov   tmp1,*stack           ; Push tmp1
0047 66FA 0649  14         dect  stack
0048 66FC C646  30         mov   tmp2,*stack           ; Push tmp2
0049                       ;------------------------------------------------------
0050                       ; Initialisation
0051                       ;------------------------------------------------------
0052 66FE 04E0  34         clr   @tib.var1             ;
     6700 A0EC     
0053 6702 04E0  34         clr   @tib.var2             ; Clear temporary variables
     6704 A0EE     
0054 6706 04E0  34         clr   @tib.var3             ;
     6708 A0F0     
0055 670A 04E0  34         clr   @tib.var4             ;
     670C A0F2     
0056 670E 04E0  34         clr   @tib.var5             ;
     6710 A0F4     
0057                       ;------------------------------------------------------
0058                       ; (1) Assert on TI basic session
0059                       ;------------------------------------------------------
0060 6712 C120  34         mov   @parm1,tmp0           ; Get session to uncrunch
     6714 A006     
0061 6716 C804  38         mov   tmp0,@tib.var1        ; Make copy
     6718 A0EC     
0062               
0063 671A 0284  22         ci    tmp0,1                ; \
     671C 0001     
0064 671E 1103  14         jlt   !                     ; | Skip to (2) if valid
0065 6720 0284  22         ci    tmp0,5                ; | session ID.
     6722 0005     
0066 6724 1204  14         jle   tib.uncrunch.prepare.2; /
0067                       ;------------------------------------------------------
0068                       ; Assert failed
0069                       ;------------------------------------------------------
0070 6726 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6728 FFCE     
0071 672A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     672C 2026     
0072                       ;------------------------------------------------------
0073                       ; (2) Get scratchpad of TI Basic session
0074                       ;------------------------------------------------------
0075               tib.uncrunch.prepare.2:
0076 672E 06A0  32         bl    @sams.page.set        ; Set SAMS page
     6730 25D2     
0077 6732 00FF                   data >00ff,>f000      ; \ i  p1  = SAMS page number
     6734 F000     
0078                                                   ; / i  p2  = Memory map address
0079               
0080                       ; TI Basic session 1 scratchpad >f100
0081                       ; TI Basic session 2 scratchpad >f200
0082                       ; TI Basic session 3 scratchpad >f300
0083                       ; TI Basic session 4 scratchpad >f400
0084                       ; TI Basic session 5 scratchpad >f500
0085               
0086 6736 C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     6738 A0EC     
0087 673A 0A84  32         sla   tmp0,8                ; Get scratchpad offset (>100->500)
0088 673C 0224  22         ai    tmp0,>f000            ; Add base address
     673E F000     
0089 6740 C804  38         mov   tmp0,@tib.scrpad.ptr  ; Store pointer to scratchpad in SAMS
     6742 A0C4     
0090                       ;------------------------------------------------------
0091                       ; (3) Get relevant pointers stored in scratchpad
0092                       ;------------------------------------------------------
0093 6744 C824  54         mov   @>18(tmp0),@tib.strs.top.ptr
     6746 0018     
     6748 A0CE     
0094                                                   ; @>8318 Pointer to top of string space
0095                                                   ; in VRAM
0096               
0097 674A C824  54         mov   @>1a(tmp0),@tib.strs.bot.ptr
     674C 001A     
     674E A0D0     
0098                                                   ; @>831a Pointer to bottom of string space
0099                                                   ; in VRAM
0100               
0101 6750 C824  54         mov   @>30(tmp0),@tib.lnt.bot.ptr
     6752 0030     
     6754 A0C8     
0102                                                   ; @>8330 Pointer to bottom of line number
0103                                                   ; table in VRAM
0104               
0105 6756 C824  54         mov   @>32(tmp0),@tib.lnt.top.ptr
     6758 0032     
     675A A0C6     
0106                                                   ; @>8332 Pointer to top of line number
0107                                                   ; table in VRAM
0108               
0109 675C C820  54         mov   @tib.lnt.bot.ptr,@tib.symt.top.ptr
     675E A0C8     
     6760 A0CA     
0110 6762 0660  34         dect  @tib.symt.top.ptr     ; Pointer to top of symbol table in VRAM.
     6764 A0CA     
0111                                                   ; Table top is just below the bottom of
0112                                                   ; the line number table.
0113               
0114 6766 C824  54         mov   @>3e(tmp0),@tib.symt.bot.ptr
     6768 003E     
     676A A0CC     
0115                                                   ; @>833e Pointer to bottom of symbol table
0116                                                   ; in VRAM
0117                       ;------------------------------------------------------
0118                       ; (4) Calculate number of lines in TI Basic program
0119                       ;------------------------------------------------------
0120 676C C120  34         mov   @tib.lnt.top.ptr,tmp0 ; \ Size of line number table entry: 4 bytes
     676E A0C6     
0121 6770 6120  34         s     @tib.lnt.bot.ptr,tmp0 ; /
     6772 A0C8     
0122 6774 1305  14         jeq   tib.uncrunch.prepare.np
0123               
0124 6776 0584  14         inc   tmp0                  ; One time offset
0125 6778 0924  20         srl   tmp0,2                ; tmp0=tmp0/4
0126 677A C804  38         mov   tmp0,@tib.lines       ; Save lines
     677C A0D2     
0127 677E 1002  14         jmp   tib.uncrunch.prepare.5
0128                       ;------------------------------------------------------
0129                       ; No program present
0130                       ;------------------------------------------------------
0131               tib.uncrunch.prepare.np:
0132 6780 04E0  34         clr   @tib.lines            ; No program
     6782 A0D2     
0133                       ;------------------------------------------------------
0134                       ; (5) Get pointer to SAMS page table
0135                       ;------------------------------------------------------
0136               tib.uncrunch.prepare.5:
0137                       ; The data tables of the 5 TI basic sessions form a
0138                       ; uniform region, we calculate the index of the 1st word in the
0139                       ; specified session.
0140 6784 C120  34         mov   @tib.var1,tmp0        ; Get TI Basic session
     6786 A0EC     
0141               
0142 6788 0A44  24         sla   tmp0,4                ; \ Get index of first word in SAMS page
0143                                                   ; | layout (of following TI Basic session)
0144                                                   ; /
0145               
0146 678A 0224  22         ai    tmp0,mem.sams.layout.basic - 16
     678C 6C8E     
0147                                                   ; Add base address for specified session
0148               
0149 678E C804  38         mov   tmp0,@tib.stab.ptr    ; Save pointer
     6790 A0C2     
0150               
0151                       ;------------------------------------------------------
0152                       ; (6) Get filename of TI basic program
0153                       ;------------------------------------------------------
0154 6792 C120  34         mov   @tib.scrpad.ptr,tmp0  ; Get pointer to scratchpad in SAMS
     6794 A0C4     
0155 6796 0224  22         ai    tmp0,>0500            ; Add offset for reaching auxiliary memory
     6798 0500     
0156                                                   ; \ Session 1: >f100 + >0500 = >f600
0157                                                   ; | ...
0158                                                   ; / Session 5: >f500 + >0500 = >fa00
0159               
0160 679A C154  26         mov   *tmp0,tmp1            ; Check if filename set
0161 679C 130A  14         jeq   tib.uncrunch.prepare.exit
0162                                                   ; No, skip setting filename
0163                       ;------------------------------------------------------
0164                       ; Set filename of editor buffer
0165                       ;------------------------------------------------------
0166 679E 0205  20         li    tmp1,edb.filename     ; Destination for copy
     67A0 A526     
0167 67A2 0206  20         li    tmp2,80               ; Number of bytes to copy
     67A4 0050     
0168               
0169 67A6 06A0  32         bl    @xpym2m               ; \ Copy TI Basic filename
     67A8 2540     
0170                                                   ; | i  tmp0 = Source address
0171                                                   ; | i  tmp1 = Target address
0172                                                   ; / i  tmp2 = Number of bytes to copy
0173               
0174 67AA 0204  20         li    tmp0,edb.filename     ; Set pointer to filename
     67AC A526     
0175 67AE C804  38         mov   tmp0,@edb.filename.ptr
     67B0 A514     
0176                       ;------------------------------------------------------
0177                       ; Exit
0178                       ;------------------------------------------------------
0179               tib.uncrunch.prepare.exit:
0180 67B2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0181 67B4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0182 67B6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0183 67B8 C2F9  30         mov   *stack+,r11           ; Pop r11
0184 67BA 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0089                       copy  "tib.uncrunch.prg.asm"       ; Uncrunch tokenized program code
     **** ****     > tib.uncrunch.prg.asm
0001               * FILE......: tib.uncrunch.prg.asm
0002               * Purpose...: Uncrunch tokenized program code
0003               
0004               ***************************************************************
0005               * tib.uncrunch.prg
0006               * Uncrunch tokenized program code
0007               ***************************************************************
0008               * bl   @tibasic.uncrunch.prg
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = TI Basic session to uncrunch (1-5)
0012               *
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2, tmp3, tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               *
0021               * Pointers:
0022               * @tib.scrpad.ptr = Scratchpad address in SAMS page >ff
0023               * @tib.stab.ptr   = SAMS page layout table of TI Basic session
0024               *
0025               * Pointers to tables in VRAM:
0026               * @tib.lnt.top.ptr  = Top of line number table
0027               * @tib.lnt.bot.ptr  = Bottom of line number table
0028               * @tib.symt.top.ptr = Top of symbol table
0029               * @tib.symt.bot.ptr = Bottom of symbol table
0030               * @tib.strs.top.ptr = Top of string space
0031               * @tib.strs.bot.ptr = Bottom of string space
0032               *
0033               * Variables
0034               * @tib.var1  = TI Basic Session
0035               * @tib.var2  = Saved VRAM address
0036               * @tib.var3  = SAMS page ID mapped to VRAM address
0037               * @tib.var4  = Line number in program
0038               * @tib.var5  = Pointer to statement (VRAM)
0039               * @tib.var6  = Current position (addr) in uncrunch area
0040               * @tib.var7  = **free**
0041               * @tib.var8  = Basic statement length in bytes
0042               * @tib.var9  = Target line number in editor buffer
0043               * @tib.lines = Number of lines in TI Basic program
0044               *
0045               * Register usage
0046               * tmp0  = (Mapped) address of line number or statement in VDP
0047               * tmp1  = Token to process
0048               * tmp2  = Statement length
0049               * tmp3  = Lines to process counter
0050               *
0051               * tmp0,tmp1,tmp2 also used as work registers at times
0052               ********|*****|*********************|**************************
0053               tib.uncrunch.prg:
0054 67BC 0649  14         dect  stack
0055 67BE C64B  30         mov   r11,*stack            ; Save return address
0056 67C0 0649  14         dect  stack
0057 67C2 C644  30         mov   tmp0,*stack           ; Push tmp0
0058 67C4 0649  14         dect  stack
0059 67C6 C645  30         mov   tmp1,*stack           ; Push tmp1
0060 67C8 0649  14         dect  stack
0061 67CA C646  30         mov   tmp2,*stack           ; Push tmp2
0062 67CC 0649  14         dect  stack
0063 67CE C647  30         mov   tmp3,*stack           ; Push tmp3
0064                       ;------------------------------------------------------
0065                       ; Exit early if no TI Basic program
0066                       ;------------------------------------------------------
0067 67D0 8820  50         c     @tib.lnt.top.ptr,@tib.lnt.bot.ptr
     67D2 A0C6     
     67D4 A0C8     
0068                                                   ; Line number table is empty?
0069 67D6 1602  14         jne   !                     ; No, keep on processing
0070 67D8 0460  28         b     @tib.uncrunch.prg.exit
     67DA 6904     
0071                       ;------------------------------------------------------
0072                       ; Initialisation
0073                       ;------------------------------------------------------
0074 67DC C120  34 !       mov   @tib.lnt.top.ptr,tmp0 ; Get top of line number table
     67DE A0C6     
0075 67E0 0224  22         ai    tmp0,-3               ; One time adjustment
     67E2 FFFD     
0076 67E4 C804  38         mov   tmp0,@tib.var2        ; Save VRAM address
     67E6 A0EE     
0077               
0078 67E8 04E0  34         clr   @tib.var9             ; 1st line in editor buffer
     67EA A0FC     
0079 67EC C1E0  34         mov   @tib.lines,tmp3       ; Set lines to process counter
     67EE A0D2     
0080                       ;------------------------------------------------------
0081                       ; Loop over program listing
0082                       ;------------------------------------------------------
0083               tib.uncrunch.prg.lnt.loop:
0084 67F0 C120  34         mov   @tib.var2,tmp0        ; Get VRAM address
     67F2 A0EE     
0085               
0086                       ; data  c99_dbg_tmp0          ; \ Print vram address in tmp0 on classic99
0087                       ; data  >1001                 ; | debugger console.
0088                       ; data  data.printf.vram.lnt  ; /
0089               
0090 67F4 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     67F6 6632     
0091                                                   ; \ i  tmp0 = VRAM address
0092                                                   ; |
0093                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0094                                                   ; |    VRAM address.
0095                                                   ; /
0096                       ;------------------------------------------------------
0097                       ; 1. Get line number
0098                       ;------------------------------------------------------
0099 67F8 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     67FA F000     
0100                                                   ; | instead of VRAM address.
0101                                                   ; |
0102                                                   ; / Example: >f7b3 maps to >37b3.
0103               
0104 67FC D834  48         movb  *tmp0+,@tib.var4      ; Line number MSB
     67FE A0F2     
0105 6800 D834  48         movb  *tmp0+,@tib.var4+1    ; Line number LSB
     6802 A0F3     
0106               
0107                       ;------------------------------------------------------
0108                       ; 1a. Get Pointer to statement (VRAM)
0109                       ;------------------------------------------------------
0110 6804 D834  48         movb  *tmp0+,@tib.var5      ; Pointer to statement MSB
     6806 A0F4     
0111 6808 D834  48         movb  *tmp0+,@tib.var5+1    ; Pointer to statement LSB
     680A A0F5     
0112               
0113 680C A820  54         a     @w$0004,@tib.var2     ; Sync VRAM address with mapped address in
     680E 2006     
     6810 A0EE     
0114                                                   ; tmp0 for steps 1 and 1a.
0115                       ;------------------------------------------------------
0116                       ; 2. Put line number in uncrunch area
0117                       ;------------------------------------------------------
0118 6812 0649  14         dect  stack
0119 6814 C644  30         mov   tmp0,*stack           ; Push tmp0
0120 6816 0649  14         dect  stack
0121 6818 C645  30         mov   tmp1,*stack           ; Push tmp1
0122 681A 0649  14         dect  stack
0123 681C C646  30         mov   tmp2,*stack           ; Push tmp2
0124 681E 0649  14         dect  stack
0125 6820 C647  30         mov   tmp3,*stack           ; Push tmp3
0126               
0127 6822 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6824 2A56     
0128 6826 A0F2                   data tib.var4         ; \ i  p1    = Source
0129 6828 A100                   data rambuf           ; | i  p2    = Destination
0130 682A 30                     byte 48               ; | i  p3MSB = ASCII offset
0131 682B   20                   byte 32               ; / i  p3LSB = Padding character
0132               
0133 682C 04E0  34         clr   @fb.uncrunch.area     ; \
     682E D960     
0134 6830 04E0  34         clr   @fb.uncrunch.area+2   ; | Clear length-byte and line number space
     6832 D962     
0135 6834 04E0  34         clr   @fb.uncrunch.area+4   ; /
     6836 D964     
0136               
0137 6838 06A0  32         bl    @at
     683A 2726     
0138 683C 1D1C                   byte pane.botrow,28   ; Position cursor
0139               
0140 683E 06A0  32         bl    @trimnum              ; Trim line number and move to uncrunch area
     6840 2AAE     
0141 6842 A100                   data rambuf           ; \ i  p1 = Source
0142 6844 D960                   data fb.uncrunch.area ; | i  p2 = Destination
0143 6846 0020                   data 32               ; / i  p3 = Padding character to scan
0144               
0145 6848 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0146 684A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0147 684C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0148 684E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0149                       ;------------------------------------------------------
0150                       ; 2a. Put space character following line number
0151                       ;------------------------------------------------------
0152               
0153                       ; Temporary re-use of tmp0 as work register for operations.
0154               
0155 6850 D120  34         movb  @fb.uncrunch.area,tmp0
     6852 D960     
0156                                                   ; Get length of trimmed number into MSB
0157 6854 0984  32         srl   tmp0,8                ; Move to LSB
0158 6856 0224  22         ai    tmp0,fb.uncrunch.area+1
     6858 D961     
0159                                                   ; Add base address and length byte
0160               
0161 685A 0205  20         li    tmp1,>2000            ; \ Put white space character (ASCII 32)
     685C 2000     
0162 685E DD05  32         movb  tmp1,*tmp0+           ; / following line number.
0163 6860 C804  38         mov   tmp0,@tib.var6        ; Save position in uncrunch area
     6862 A0F6     
0164               
0165 6864 B820  54         ab    @w$0100,@fb.uncrunch.area
     6866 2012     
     6868 D960     
0166                                                   ; Increase length-byte in uncrunch area
0167                       ;------------------------------------------------------
0168                       ; 3. Prepare for uncrunching program statement
0169                       ;------------------------------------------------------
0170 686A C120  34         mov   @tib.var5,tmp0        ; Get pointer to statement
     686C A0F4     
0171 686E 0604  14         dec   tmp0                  ; Goto statement length prefix
0172               
0178               
0179 6870 06A0  32         bl    @_v2sams              ; Get SAMS page mapped to VRAM address
     6872 6632     
0180                                                   ; \ i  tmp0 = VRAM address
0181                                                   ; |
0182                                                   ; | o  @tib.var3 = SAMS page ID mapped to
0183                                                   ; |    VRAM address.
0184                                                   ; /
0185               
0186 6874 0264  22         ori   tmp0,>f000            ; \ Use mapped address in >f000->ffff window
     6876 F000     
0187                                                   ; | instead of VRAM address.
0188                                                   ; |
0189                                                   ; / Example: >f7b3 maps to >37b3.
0190               
0191 6878 C160  34         mov   @tib.var4,tmp1
     687A A0F2     
0192               
0198               
0199 687C D174  28         movb  *tmp0+,tmp1           ; \ Get statement length in bytes
0200 687E 0985  32         srl   tmp1,8                ; / MSB to LSB
0201               
0202 6880 C805  38         mov   tmp1,@tib.var8        ; Save statement length
     6882 A0FA     
0203 6884 C185  18         mov   tmp1,tmp2             ; Set statement length in work register
0204                       ;------------------------------------------------------
0205                       ; 4. Uncrunch program statement to uncrunch area
0206                       ;------------------------------------------------------
0207               tib.uncrunch.prg.statement.loop:
0208 6886 D154  26         movb  *tmp0,tmp1            ; Get token into MSB
0209 6888 0985  32         srl   tmp1,8                ; Move token to LSB
0210 688A 1320  14         jeq   tib.uncrnch.prg.copy.statement
0211                                                   ; Skip to (5) if termination token >00
0212               
0213 688C 0285  22         ci    tmp1,>80              ; Is a valid token?
     688E 0080     
0214 6890 110D  14         jlt   tib.uncrunch.prg.statement.loop.nontoken
0215                                                   ; Skip decode for non-token
0216               
0217 6892 C804  38         mov   tmp0,@parm2           ; Mapped position in crunched statement
     6894 A008     
0218 6896 C805  38         mov   tmp1,@parm1           ; Token to process
     6898 A006     
0219               
0220 689A 06A0  32         bl    @tib.uncrunch.token   ; Decode statement token to uncrunch area
     689C 6940     
0221                                                   ; \ i  @parm1 = Token to process
0222                                                   ; |
0223                                                   ; | i  @parm2 = Mapped position (addr) in
0224                                                   ; |    crunched statement.
0225                                                   ; |
0226                                                   ; | o  @outparm1 = New position (addr) in
0227                                                   ; |    crunched statement.
0228                                                   ; |
0229                                                   ; | o  @outparm2 = Bytes processed in
0230                                                   ; |    crunched statement.
0231                                                   ; |
0232                                                   ; | o  @tib.var6 = Position (addr) in
0233                                                   ; /    uncrunch area.
0234               
0235 689E C120  34         mov   @outparm1,tmp0        ; Forward in crunched statement
     68A0 A018     
0236               
0237 68A2 61A0  34         s     @outparm2,tmp2        ; Update statement length
     68A4 A01A     
0238 68A6 15EF  14         jgt   tib.uncrunch.prg.statement.loop
0239                                                   ; Process next token(s) unless done
0240               
0241 68A8 1311  14         jeq   tib.uncrnch.prg.copy.statement
0242                                                   ; Continue with (5)
0243               
0244 68AA 110C  14         jlt   tib.uncrnch.prg.statement.loop.panic
0245                                                   ; Assert
0246                       ;------------------------------------------------------
0247                       ; 4a. Non-token without decode
0248                       ;------------------------------------------------------
0249               tib.uncrunch.prg.statement.loop.nontoken:
0250 68AC C160  34         mov   @tib.var6,tmp1        ; Get position (addr) in uncrunch area
     68AE A0F6     
0251 68B0 DD74  42         movb  *tmp0+,*tmp1+         ; Copy non-token to uncrunch area
0252               
0253 68B2 C805  38         mov   tmp1,@tib.var6        ; Save position in uncrunch area
     68B4 A0F6     
0254 68B6 B820  54         ab    @w$0100,@fb.uncrunch.area
     68B8 2012     
     68BA D960     
0255                                                   ; Increase length-byte in uncrunch area
0256               
0257 68BC 0606  14         dec   tmp2                  ; update statement length
0258 68BE 1102  14         jlt   tib.uncrnch.prg.statement.loop.panic
0259                                                   ; Assert
0260               
0261 68C0 15E2  14         jgt   tib.uncrunch.prg.statement.loop
0262                                                   ; Process next token(s) unless done
0263 68C2 1304  14         jeq   tib.uncrnch.prg.copy.statement
0264                       ;------------------------------------------------------
0265                       ; CPU crash
0266                       ;------------------------------------------------------
0267               tib.uncrnch.prg.statement.loop.panic:
0268 68C4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     68C6 FFCE     
0269 68C8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     68CA 2026     
0270                       ;------------------------------------------------------
0271                       ; 5. Copy uncrunched statement to editor buffer
0272                       ;------------------------------------------------------
0273               tib.uncrnch.prg.copy.statement:
0274 68CC C820  54         mov   @tib.var9,@parm1      ; Get editor buffer line number to store
     68CE A0FC     
     68D0 A006     
0275                                                   ; statement in.
0276               
0277 68D2 06A0  32         bl    @tib.uncrunch.line.pack
     68D4 6AE2     
0278                                                   ; Pack uncrunched line to editor buffer
0279                                                   ; \ i  @fb.uncrunch.area = Pointer to
0280                                                   ; |    buffer having uncrushed statement
0281                                                   ; |
0282                                                   ; | i  @parm1 = Line number in editor buffer
0283                                                   ; /
0284               
0285 68D6 05A0  34         inc   @tib.var9             ; Next line
     68D8 A0FC     
0286 68DA 05A0  34         inc   @edb.lines            ; Update Line counter
     68DC A504     
0287                       ;------------------------------------------------------
0288                       ; 6. Next entry in line number table
0289                       ;------------------------------------------------------
0290 68DE 0607  14         dec   tmp3                  ; Last line processed?
0291 68E0 1305  14         jeq   tib.uncrunch.prg.done ; yes, prepare for exit
0292               
0293 68E2 6820  54         s     @w$0008,@tib.var2     ; Next entry in VRAM line number table
     68E4 2008     
     68E6 A0EE     
0294 68E8 0460  28         b     @tib.uncrunch.prg.lnt.loop
     68EA 67F0     
0295                       ;------------------------------------------------------
0296                       ; 7. Finished processing program
0297                       ;------------------------------------------------------
0298               tib.uncrunch.prg.done:
0299 68EC 0720  34         seto  @fb.dirty             ; Refresh screen buffer
     68EE A31A     
0300 68F0 0720  34         seto  @edb.dirty            ; Update screen with editor buffer when done
     68F2 A506     
0301               
0302 68F4 0204  20         li    tmp0,id.special.basic  ;
     68F6 0003     
0303 68F8 C804  38         mov   tmp0,@edb.special.file ; Set filetype to TI Basic program
     68FA A522     
0304               
0305 68FC 0204  20         li    tmp0,txt.msg.tibasic
     68FE 3CA0     
0306 6900 C804  38         mov   tmp0,@tv.specmsg.ptr
     6902 A23A     
0307               
0308                       ;------------------------------------------------------
0309                       ; Exit
0310                       ;------------------------------------------------------
0311               tib.uncrunch.prg.exit:
0312 6904 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0313 6906 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0314 6908 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0315 690A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0316 690C C2F9  30         mov   *stack+,r11           ; Pop r11
0317 690E 045B  20         b     *r11                  ; Return
0318               
0319               
0320               data.printf.vram.lnt:
0321 6910 5652            text   'VRAM LNT >%04X'
     6912 414D     
     6914 204C     
     6916 4E54     
     6918 203E     
     691A 2530     
     691C 3458     
0322 691E 00              byte   0
0323                      even
0324               
0325               data.printf.vram.stmt:
0326 6920 5652            text   'VRAM STM >%04X'
     6922 414D     
     6924 2053     
     6926 544D     
     6928 203E     
     692A 2530     
     692C 3458     
0327 692E 00              byte   0
0328                      even
0329               
0330               data.printf.vram.lnum:
0331 6930 4261            text   'Basic line: %u'
     6932 7369     
     6934 6320     
     6936 6C69     
     6938 6E65     
     693A 3A20     
     693C 2575     
0332 693E 00              byte   0
                   < stevie_b7.asm
0090                       copy  "tib.uncrunch.token.asm"     ; Decode statement token
     **** ****     > tib.uncrunch.token.asm
0001               * FILE......: tib.uncrunch.token.asm
0002               * Purpose...: Decode token to uncrunch area
0003               
0004               
0005               ***************************************************************
0006               * tib.uncrunch.token
0007               * Decode token to uncrunch area
0008               ***************************************************************
0009               * bl   @tib.uncrunch.token
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Token to process
0013               * @parm2 = Mapped position (addr) in crunched statement
0014               *
0015               * OUTPUT
0016               * @outparm1  = New position (addr) in crunched statement
0017               * @outparm2  = Input bytes processed in crunched statement
0018               * @tib.var6  = Current position (addr) in uncrunch area
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, tmp4
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * For TI Basic statement decode see:
0025               * https://www.unige.ch/medecine/nouspikel/ti99/basic.htm#statements
0026               *
0027               * Using @outparm2 for storing the number of input bytes
0028               * processed in crunched statement
0029               *
0030               * Using @tib.var10 for storing the number of decoded output bytes
0031               * generated in uncrunch area.
0032               *
0033               * Variables
0034               * @tib.var6  = Current position (addr) in uncrunch area
0035               * @tib.var9  = Temporary use
0036               * @tib.var10 = Temporary use
0037               ********|*****|*********************|**************************
0038               tib.uncrunch.token:
0039 6940 0649  14         dect  stack
0040 6942 C64B  30         mov   r11,*stack            ; Save return address
0041 6944 0649  14         dect  stack
0042 6946 C644  30         mov   tmp0,*stack           ; Push tmp0
0043 6948 0649  14         dect  stack
0044 694A C645  30         mov   tmp1,*stack           ; Push tmp1
0045 694C 0649  14         dect  stack
0046 694E C646  30         mov   tmp2,*stack           ; Push tmp2
0047 6950 0649  14         dect  stack
0048 6952 C647  30         mov   tmp3,*stack           ; Push tmp3
0049 6954 0649  14         dect  stack
0050 6956 C648  30         mov   tmp4,*stack           ; Push tmp4
0051 6958 0649  14         dect  stack
0052 695A C660  46         mov   @tib.var9,*stack      ; Push @tib.var.9
     695C A0FC     
0053 695E 0649  14         dect  stack
0054 6960 C660  46         mov   @tib.var10,*stack     ; Push @tib.var.10
     6962 A0FE     
0055                       ;------------------------------------------------------
0056                       ; Initialisation
0057                       ;------------------------------------------------------
0058 6964 C120  34         mov   @parm1,tmp0           ; Get token
     6966 A006     
0059 6968 C820  54         mov   @parm2,@outparm1      ; Position (addr) in crunched statement
     696A A008     
     696C A018     
0060               
0061 696E 04E0  34         clr   @outparm2             ; Set input bytes processed
     6970 A01A     
0062 6972 04E0  34         clr   @tib.var10            ; Set output bytes generated (uncrunch area)
     6974 A0FE     
0063                       ;------------------------------------------------------
0064                       ; 1. Decide how to process token
0065                       ;------------------------------------------------------
0066 6976 0284  22         ci    tmp0,>c7              ; Quoted string?
     6978 00C7     
0067 697A 132A  14         jeq   tib.uncrunch.token.quoted
0068               
0069 697C 0284  22         ci    tmp0,>c8              ; Unquoted string?
     697E 00C8     
0070 6980 134D  14         jeq   tib.uncrunch.token.unquoted
0071               
0072 6982 0284  22         ci    tmp0,>c9              ; line number?
     6984 00C9     
0073 6986 136A  14         jeq   tib.uncrunch.token.linenum
0074                       ;------------------------------------------------------
0075                       ; 2. Decode token range >80 - >ff in lookup table
0076                       ;------------------------------------------------------
0077               tib.uncrunch.token.lookup:
0078 6988 0224  22         ai    tmp0,->0080           ; Token range >80 - >ff
     698A FF80     
0079 698C 0A14  18         sla   tmp0,1                ; Make it a word offset
0080 698E C124  34         mov   @tib.tokenindex(tmp0),tmp0
     6990 6F72     
0081                                                   ; Get pointer to token definition
0082 6992 0584  14         inc   tmp0                  ; Skip token identifier
0083               
0084 6994 D1B4  28         movb  *tmp0+,tmp2           ; Get length of decoded keyword
0085 6996 0986  32         srl   tmp2,8                ; MSB to LSB
0086               
0087 6998 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     699A A0F6     
0088 699C A806  38         a     tmp2,@tib.var6        ; Set current pos (addr) in uncrunch area
     699E A0F6     
0089               
0090 69A0 05A0  34         inc   @outparm2             ; Set input bytes processed
     69A2 A01A     
0091 69A4 C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated (uncrunch area)
     69A6 A0FE     
0092               
0093 69A8 06A0  32         bl    @xpym2m               ; Copy keyword to uncrunch area
     69AA 2540     
0094                                                   ; \ i  tmp0 = Source address
0095                                                   ; | i  tmp1 = Destination address
0096                                                   ; / i  tmp2 = Number of bytes to copy
0097               
0098 69AC C120  34         mov   @parm1,tmp0           ; Get token again
     69AE A006     
0099 69B0 0284  22         ci    tmp0,>b2              ; Token range with keyword needing blank?
     69B2 00B2     
0100 69B4 1509  14         jgt   !                     ; No, as of >b3 skip to (2b)
0101                       ;------------------------------------------------------
0102                       ; 2a. Write trailing blank after decoded keyword
0103                       ;------------------------------------------------------
0104 69B6 0204  20         li    tmp0,>2000            ; Blank in MSB
     69B8 2000     
0105 69BA C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69BC A0F6     
0106 69BE D554  38         movb  *tmp0,*tmp1           ; Write trailing blank
0107 69C0 05A0  34         inc   @tib.var6             ; Set current pos (addr) in uncrunch area
     69C2 A0F6     
0108 69C4 05A0  34         inc   @tib.var10            ; Set output bytes generated (uncrunch area)
     69C6 A0FE     
0109                       ;------------------------------------------------------
0110                       ; 2b. Update variables related to crunched statement
0111                       ;------------------------------------------------------
0112 69C8 05A0  34 !       inc   @outparm1             ; New pos (addr) in crunched statement
     69CA A018     
0113 69CC 0460  28         b     @tib.uncrunch.token.setlen
     69CE 6AC2     
0114                       ;------------------------------------------------------
0115                       ; 3. Special handling >c7: Decode quoted string
0116                       ;------------------------------------------------------
0117               tib.uncrunch.token.quoted:
0118 69D0 0204  20         li    tmp0,>2200            ; ASCII " in LSB
     69D2 2200     
0119 69D4 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     69D6 A0F6     
0120 69D8 DD44  32         movb  tmp0,*tmp1+           ; Write 1st double quote
0121               
0122 69DA C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     69DC A008     
0123 69DE 0584  14         inc   tmp0                  ; Skip token
0124 69E0 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C7 token
0125 69E2 0986  32         srl   tmp2,8                ; MSB to LSB
0126 69E4 130B  14         jeq   tib.uncrunch.token.quoted.quote2
0127                                                   ; Skip to (3c) if empty string
0128                       ;------------------------------------------------------
0129                       ; 3b. Copy string to uncrunch area
0130                       ;------------------------------------------------------
0131 69E6 0649  14         dect  stack
0132 69E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0133 69EA 0649  14         dect  stack
0134 69EC C645  30         mov   tmp1,*stack           ; Push tmp1
0135 69EE 0649  14         dect  stack
0136 69F0 C646  30         mov   tmp2,*stack           ; Push tmp2
0137               
0138 69F2 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     69F4 2540     
0139                                                   ; uncrunch area.
0140                                                   ; \ i  tmp0 = Source address
0141                                                   ; | i  tmp1 = Destination address
0142                                                   ; / i  tmp2 = Number of bytes to copy
0143               
0144 69F6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0145 69F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0146 69FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0147                       ;------------------------------------------------------
0148                       ; 3c. Write trailing double quote
0149                       ;------------------------------------------------------
0150               tib.uncrunch.token.quoted.quote2:
0151 69FC 0204  20         li    tmp0,>2200            ; " in MSB
     69FE 2200     
0152 6A00 A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0153 6A02 DD44  32         movb  tmp0,*tmp1+           ; Write 2nd double quote
0154 6A04 C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A06 A0F6     
0155                       ;------------------------------------------------------
0156                       ; 3d. Update variables related to crunched statement
0157                       ;------------------------------------------------------
0158 6A08 C106  18         mov   tmp2,tmp0             ; \ Get num of bytes copied to uncrunch area
0159 6A0A 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0160 6A0C C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6A0E A01A     
0161               
0162 6A10 C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A12 A0FE     
0163                                                   ; Same number as input bytes processed,
0164                                                   ; because quotes match token & length byte.
0165               
0166 6A14 A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6A16 A01A     
     6A18 A018     
0167               
0168 6A1A 1053  14         jmp   tib.uncrunch.token.setlen
0169                       ;------------------------------------------------------
0170                       ; 4. Special handling >c8: Decode unquoted string
0171                       ;------------------------------------------------------
0172               tib.uncrunch.token.unquoted:
0173 6A1C C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A1E A0F6     
0174 6A20 C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A22 A008     
0175 6A24 0584  14         inc   tmp0                  ; Skip token
0176 6A26 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte following >C8 token
0177 6A28 0986  32         srl   tmp2,8                ; MSB to LSB
0178               
0179 6A2A 0649  14         dect  stack
0180 6A2C C644  30         mov   tmp0,*stack           ; Push tmp0
0181 6A2E 0649  14         dect  stack
0182 6A30 C645  30         mov   tmp1,*stack           ; Push tmp1
0183 6A32 0649  14         dect  stack
0184 6A34 C646  30         mov   tmp2,*stack           ; Push tmp2
0185               
0186 6A36 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6A38 2540     
0187                                                   ; uncrunch area.
0188                                                   ; \ i  tmp0 = Source address
0189                                                   ; | i  tmp1 = Destination address
0190                                                   ; / i  tmp2 = Number of bytes to copy
0191               
0192 6A3A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0193 6A3C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0194 6A3E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0195               
0196 6A40 A146  18         a     tmp2,tmp1             ; Forward in uncrunch area
0197 6A42 C805  38         mov   tmp1,@tib.var6        ; Set current pos (addr) in uncrunch area
     6A44 A0F6     
0198                       ;------------------------------------------------------
0199                       ; 4a. Update variables related to crunched statement
0200                       ;------------------------------------------------------
0201 6A46 C106  18         mov   tmp2,tmp0             ; \ Amount of bytes copied to uncrunch area
0202 6A48 05C4  14         inct  tmp0                  ; / Count token byte and length byte
0203 6A4A C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6A4C A01A     
0204               
0205 6A4E 0644  14         dect  tmp0                  ; Don't count token byte and length byte
0206 6A50 C804  38         mov   tmp0,@tib.var10       ; Set output bytes generated (uncrunch area)
     6A52 A0FE     
0207               
0208 6A54 A820  54         a     @outparm2,@outparm1   ; New position (addr) in crunched statement
     6A56 A01A     
     6A58 A018     
0209               
0210 6A5A 1033  14         jmp   tib.uncrunch.token.setlen
0211                       ;------------------------------------------------------
0212                       ; 5. Special handling >c9: Decode line number
0213                       ;------------------------------------------------------
0214               tib.uncrunch.token.linenum:
0215 6A5C C120  34         mov   @parm2,tmp0           ; Get position (addr) in crunched statement
     6A5E A008     
0216 6A60 0584  14         inc   tmp0                  ; Skip token
0217 6A62 C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A64 A0F6     
0218               
0219 6A66 D174  28         movb  *tmp0+,tmp1           ; Get MSB of line number into MSB
0220 6A68 0985  32         srl   tmp1,8                ; MSB to LSB
0221 6A6A D174  28         movb  *tmp0+,tmp1           ; Get LSB of line number into MSB
0222 6A6C 06C5  14         swpb  tmp1                  ; Put it in the right order
0223 6A6E C805  38         mov   tmp1,@tib.var9        ; Put line number word in temporary variable
     6A70 A0FC     
0224                       ;------------------------------------------------------
0225                       ; 5a. Convert line number (word) to string
0226                       ;------------------------------------------------------
0227               
0228                       ; mknum destroys tmp0-tmp4
0229                       ; That's why we push/pop up to tmp4 although tmp3-tmp4 not used here.
0230               
0231 6A72 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6A74 2A56     
0232 6A76 A0FC                   data  tib.var9        ; \ i  p1    = Source
0233 6A78 A100                   data  rambuf          ; | i  p2    = Destination
0234 6A7A 30                     byte  48              ; | i  p3MSB = ASCII offset
0235 6A7B   20                   byte  32              ; / i  p3LSB = Padding character
0236               
0237 6A7C 06A0  32         bl    @trimnum              ; Trim number, remove leading spaces
     6A7E 2AAE     
0238 6A80 A100                   data  rambuf          ; \ i  p1 = Source
0239 6A82 A105                   data  rambuf+5        ; | i  p2 = Destination
0240 6A84 0020                   data  32              ; / i  p3 = Padding character to look for
0241                       ;------------------------------------------------------
0242                       ; 5b. Copy decoded line number to uncrunch area
0243                       ;------------------------------------------------------
0244 6A86 0204  20         li    tmp0,rambuf+6         ; Start of line number string
     6A88 A106     
0245 6A8A C160  34         mov   @tib.var6,tmp1        ; Get current pos (addr) in uncrunch area
     6A8C A0F6     
0246               
0247 6A8E D1A0  34         movb  @rambuf+5,tmp2        ; Get string length
     6A90 A105     
0248 6A92 0986  32         srl   tmp2,8                ; MSB to LSB
0249               
0250 6A94 C806  38         mov   tmp2,@tib.var10       ; Set output bytes generated
     6A96 A0FE     
0251 6A98 A820  54         a     @tib.var10,@tib.var6  ; Set current pos (addr) in uncrunch area
     6A9A A0FE     
     6A9C A0F6     
0252               
0253 6A9E 0649  14         dect  stack
0254 6AA0 C644  30         mov   tmp0,*stack           ; Push tmp0
0255 6AA2 0649  14         dect  stack
0256 6AA4 C645  30         mov   tmp1,*stack           ; Push tmp1
0257 6AA6 0649  14         dect  stack
0258 6AA8 C646  30         mov   tmp2,*stack           ; Push tmp2
0259               
0260 6AAA 06A0  32         bl    @xpym2m               ; Copy string from crunched statement to
     6AAC 2540     
0261                                                   ; uncrunch area.
0262                                                   ; \ i  tmp0 = Source address
0263                                                   ; | i  tmp1 = Destination address
0264                                                   ; / i  tmp2 = Number of bytes to copy
0265               
0266 6AAE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0267 6AB0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0268 6AB2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0269                       ;------------------------------------------------------
0270                       ; 5c. Update variables related to crunched statement
0271                       ;------------------------------------------------------
0272 6AB4 0204  20         li    tmp0,3                ; Token + line number word
     6AB6 0003     
0273 6AB8 A804  38         a     tmp0,@outparm1        ; New pos (addr) in crunched statement
     6ABA A018     
0274 6ABC C804  38         mov   tmp0,@outparm2        ; Set input bytes processed
     6ABE A01A     
0275 6AC0 1000  14         jmp   tib.uncrunch.token.setlen
0276                       ;------------------------------------------------------
0277                       ; 6. Update uncrunched statement length byte
0278                       ;------------------------------------------------------
0279               tib.uncrunch.token.setlen:
0280 6AC2 C120  34         mov   @tib.var10,tmp0       ; Get output bytes generated
     6AC4 A0FE     
0281 6AC6 0A84  32         sla   tmp0,8                ; LSB to MSB
0282 6AC8 B804  38         ab    tmp0,@fb.uncrunch.area
     6ACA D960     
0283                                                   ; Update string length-prefix byte
0284                       ;------------------------------------------------------
0285                       ; Exit
0286                       ;------------------------------------------------------
0287               tib.uncrunch.token.exit:
0288 6ACC C839  50         mov   *stack+,@tib.var10    ; Pop @tib.var10
     6ACE A0FE     
0289 6AD0 C839  50         mov   *stack+,@tib.var9     ; Pop @tib.var9
     6AD2 A0FC     
0290 6AD4 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0291 6AD6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0292 6AD8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0293 6ADA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0294 6ADC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0295 6ADE C2F9  30         mov   *stack+,r11           ; Pop r11
0296 6AE0 045B  20         b     *r11                  ; Return
                   < stevie_b7.asm
0091                       copy  "tib.uncrunch.line.pack.asm" ; Pack line to editor buffer
     **** ****     > tib.uncrunch.line.pack.asm
0001               * FILE......: tib.uncrunch.line.pack
0002               * Purpose...: Pack uncrunched line to editor buffer
0003               
0004               ***************************************************************
0005               * tib.uncrunch.line.pack
0006               * Pack uncrunched statement line to editor buffer
0007               ***************************************************************
0008               *  bl   @tib.uncrunch.line.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.uncrunch  = Pointer to uncrunch area
0012               * @parm1        = Line in editor buffer
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4
0018               *--------------------------------------------------------------
0019               * Remarks
0020               * none
0021               ********|*****|*********************|**************************
0022               tib.uncrunch.line.pack:
0023 6AE2 0649  14         dect  stack
0024 6AE4 C64B  30         mov   r11,*stack            ; Save return address
0025 6AE6 0649  14         dect  stack
0026 6AE8 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 6AEA 0649  14         dect  stack
0028 6AEC C645  30         mov   tmp1,*stack           ; Push tmp1
0029 6AEE 0649  14         dect  stack
0030 6AF0 C646  30         mov   tmp2,*stack           ; Push tmp2
0031 6AF2 0649  14         dect  stack
0032 6AF4 C647  30         mov   tmp3,*stack           ; Push tmp3
0033 6AF6 0649  14         dect  stack
0034 6AF8 C648  30         mov   tmp4,*stack           ; Push tmp4
0035                       ;------------------------------------------------------
0036                       ; 1. Prepare scan
0037                       ;------------------------------------------------------
0038 6AFA 0205  20         li    tmp1,fb.uncrunch.area ; Get pointer to uncrunch area
     6AFC D960     
0039 6AFE C1E0  34         mov   @parm1,tmp3           ; Editor buffer line
     6B00 A006     
0040               
0041 6B02 D235  28         movb  *tmp1+,tmp4           ; Get length byte
0042 6B04 0988  32         srl   tmp4,8                ; MSB to LSB
0043               
0044 6B06 06A0  32         bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     6B08 37C8     
0045                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0046                                                   ; /    free line
0047                       ;------------------------------------------------------
0048                       ; 2. Update index
0049                       ;------------------------------------------------------
0050 6B0A C807  38         mov   tmp3,@parm1           ; Set editor buffer line
     6B0C A006     
0051 6B0E C820  54         mov   @edb.next_free.ptr,@parm2
     6B10 A508     
     6B12 A008     
0052                                                   ; Pointer to new line
0053 6B14 C820  54         mov   @edb.sams.hipage,@parm3
     6B16 A51C     
     6B18 A00A     
0054                                                   ; SAMS page to use
0055               
0056 6B1A 06A0  32         bl    @idx.entry.update     ; Update index
     6B1C 356E     
0057                                                   ; \ i  @parm1 = Line number in editor buffer
0058                                                   ; | i  @parm2 = pointer to line in
0059                                                   ; |             editor buffer
0060                                                   ; / i  @parm3 = SAMS page
0061                       ;------------------------------------------------------
0062                       ; 3. Set line prefix in editor buffer
0063                       ;------------------------------------------------------
0064 6B1E 0204  20         li    tmp0,fb.uncrunch.area+1
     6B20 D961     
0065                                                   ; Source for memory copy
0066 6B22 C160  34         mov   @edb.next_free.ptr,tmp1
     6B24 A508     
0067                                                   ; Address of line in editor buffer
0068               
0069 6B26 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     6B28 A508     
0070               
0071 6B2A C188  18         mov   tmp4,tmp2             ; Get line length
0072 6B2C CD46  34         mov   tmp2,*tmp1+           ; Set saved line length as line prefix
0073                       ;------------------------------------------------------
0074                       ; 4. Copy line from uncrunch area to editor buffer
0075                       ;------------------------------------------------------
0076               tib.uncrunch.line.pack.copyline:
0077 6B2E 0286  22         ci    tmp2,2
     6B30 0002     
0078 6B32 1603  14         jne   tib.uncrunch.line.pack.copyline.checkbyte
0079 6B34 DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0080 6B36 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0081 6B38 1007  14         jmp   tib.uncrunch.line.pack.copyline.align16
0082               
0083               tib.uncrunch.line.pack.copyline.checkbyte:
0084 6B3A 0286  22         ci    tmp2,1
     6B3C 0001     
0085 6B3E 1602  14         jne   tib.uncrunch.line.pack.copyline.block
0086 6B40 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0087 6B42 1002  14         jmp   tib.uncrunch.line.pack.copyline.align16
0088               
0089               tib.uncrunch.line.pack.copyline.block:
0090 6B44 06A0  32         bl    @xpym2m               ; Copy memory block
     6B46 2540     
0091                                                   ; \ i  tmp0 = source
0092                                                   ; | i  tmp1 = destination, see (1)
0093                                                   ; / i  tmp2 = bytes to copy
0094                       ;------------------------------------------------------
0095                       ; 5. Align pointer to multiple of 16 memory address
0096                       ;------------------------------------------------------
0097               tib.uncrunch.line.pack.copyline.align16:
0098 6B48 A808  38         a     tmp4,@edb.next_free.ptr  ; Add length of line
     6B4A A508     
0099               
0100 6B4C C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6B4E A508     
0101 6B50 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0102 6B52 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     6B54 000F     
0103 6B56 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     6B58 A508     
0104                       ;------------------------------------------------------
0105                       ; 6. Restore SAMS page and prepare for exit
0106                       ;------------------------------------------------------
0107               tib.uncrunch.line.pack.prepexit:
0108 6B5A 8820  50         c     @edb.sams.hipage,@edb.sams.page
     6B5C A51C     
     6B5E A518     
0109 6B60 1306  14         jeq   tib.uncrunch.line.pack.exit
0110                                                      ; Exit early if SAMS page already mapped
0111               
0112 6B62 C120  34         mov   @edb.sams.page,tmp0
     6B64 A518     
0113 6B66 C160  34         mov   @edb.top.ptr,tmp1
     6B68 A500     
0114 6B6A 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6B6C 25D6     
0115                                                   ; \ i  tmp0 = SAMS page number
0116                                                   ; / i  tmp1 = Memory address
0117                       ;------------------------------------------------------
0118                       ; Exit
0119                       ;------------------------------------------------------
0120               tib.uncrunch.line.pack.exit:
0121 6B6E C239  30         mov   *stack+,tmp4          ; Pop tmp4
0122 6B70 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 6B72 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 6B74 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 6B76 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 6B78 C2F9  30         mov   *stack+,r11           ; Pop R11
0127 6B7A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0092                       ;-----------------------------------------------------------------------
0093                       ; Cartridge manager (FinalGROM 99, StrangeCart)
0094                       ;-----------------------------------------------------------------------
0095                       copy  "cart.fg99.mgr.asm"          ; FinalGROM 99
     **** ****     > cart.fg99.mgr.asm
0001               * FILE......: cart.fg99.mgr.asm
0002               * Purpose...: Controller for running FinalGROM 99 cartridge image
0003               
0004               ***************************************************************
0005               * cart.fg99.mgr
0006               * Run FinalGROM cartridge image
0007               ***************************************************************
0008               * bl   @cart.fg99.mgr
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.cmdall = Cartridge image name
0012               *
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               *--------------------------------------------------------------
0019               * Remarks
0020               ********|*****|*********************|**************************
0021               cart.fg99.mgr:
0022 6B7C 0649  14         dect  stack
0023 6B7E C64B  30         mov   r11,*stack            ; Save return address
0024 6B80 0649  14         dect  stack
0025 6B82 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6B84 0649  14         dect  stack
0027 6B86 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6B88 0649  14         dect  stack
0029 6B8A C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;-------------------------------------------------------
0031                       ; Exit early if no image name specified
0032                       ;-------------------------------------------------------
0033 6B8C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B8E 6C38     
0034 6B90 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B92 A018     
0035 6B94 1315  14         jeq   cart.fg99.mgr.exit    ; Yes, exit early
0036                       ;-------------------------------------------------------
0037                       ; Setup cartridge image
0038                       ;-------------------------------------------------------
0039 6B96 06A0  32         bl    @magic.set            ; Set magic string
     6B98 604A     
0040               
0041 6B9A 06A0  32         bl    @cpym2m                 ; Copy cartridge template to RAM
     6B9C 253A     
0042 6B9E 6BCA                   data fg99.cart.template ; \ Source
0043 6BA0 A100                   data rambuf             ; | Destination
0044 6BA2 0014                   data 20                 ; / Length (bytes)
0045               
0046 6BA4 0204  20         li    tmp0,cmdb.cmd         ; Cartridge image name (no length prefix)
     6BA6 A733     
0047 6BA8 0205  20         li    tmp1,rambuf + 8       ; Poke filename into template
     6BAA A108     
0048 6BAC C1A0  34         mov   @outparm1,tmp2        ; Get length of cartridge image name
     6BAE A018     
0049               
0050 6BB0 06A0  32         bl    @xpym2m               ; Copy memory block
     6BB2 2540     
0051                                                   ; \ i  tmp0 = source
0052                                                   ; | i  tmp1 = destination
0053                                                   ; / i  tmp2 = bytes to copy
0054                       ;------------------------------------------------------
0055                       ; Run FinalGROM cartridge image
0056                       ;------------------------------------------------------
0057 6BB4 0204  20         li    tmp0,rambuf           ; \
     6BB6 A100     
0058 6BB8 C804  38         mov   tmp0,@tv.fg99.img.ptr ; / Set pointer to cartridge structure
     6BBA A238     
0059               
0060 6BBC 06A0  32         bl    @cart.fg99.run        ; Run FinalGROM cartridge
     6BBE 382E     
0061                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
0062                                                   ; /
0063               *--------------------------------------------------------------
0064               * Exit
0065               *--------------------------------------------------------------
0066               cart.fg99.mgr.exit:
0067 6BC0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0068 6BC2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 6BC4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6BC6 C2F9  30         mov   *stack+,r11           ; Pop R11
0071 6BC8 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0074               *--------------------------------------------------------------
0075               * Cartridge template
0076               *--------------------------------------------------------------
0077               fg99.cart.template:
0078 6BCA 99              byte   >99                   ; \
0079 6BCB   4F            text   'OKFG99'              ; | Send this to reload
     6BCC 4B46     
     6BCE 4739     
     6BD0 39       
0080 6BD1   99            byte   >99                   ; /
0081 6BD2 0000            byte   >00, >00, >00, >00    ; \ File to load (8 chars, pad with >00)
     6BD4 0000     
0082 6BD6 0000            byte   >00, >00, >00, >00    ; /
     6BD8 0000     
0083 6BDA 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0084 6BDC 0000            data   >0000                 ; Start address
0085                      even
                   < stevie_b7.asm
0096                       ;-----------------------------------------------------------------------
0097                       ; Stubs
0098                       ;-----------------------------------------------------------------------
0099                       copy  "rom.stubs.bank7.asm"        ; Bank specific stubs
     **** ****     > rom.stubs.bank7.asm
0001               * FILE......: rom.stubs.bank7.asm
0002               * Purpose...: Bank 7 stubs for functions in other banks
0003               
0004               
0005               
0006               ***************************************************************
0007               * Stub for "cmdb.dialog.close"
0008               * bank1 vec.18
0009               ********|*****|*********************|**************************
0010               cmdb.dialog.close:
0011 6BDE 0649  14         dect  stack
0012 6BE0 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 6BE2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BE4 307A     
0017 6BE6 6002                   data bank1.rom        ; | i  p0 = bank address
0018 6BE8 7F92                   data vec.18           ; | i  p1 = Vector with target address
0019 6BEA 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 6BEC C2F9  30         mov   *stack+,r11           ; Pop r11
0024 6BEE 045B  20         b     *r11                  ; Return to caller
0025               
0026               
0027               ***************************************************************
0028               * Stub for "pane.colorscheme.load"
0029               * bank4 vec.41
0030               ********|*****|*********************|**************************
0031               pane.colorscheme.load:
0032 6BF0 0649  14         dect  stack
0033 6BF2 C64B  30         mov   r11,*stack            ; Save return address
0034                       ;------------------------------------------------------
0035                       ; Call function in bank 4
0036                       ;------------------------------------------------------
0037 6BF4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6BF6 307A     
0038 6BF8 6008                   data bank4.rom        ; | i  p0 = bank address
0039 6BFA 7FC0                   data vec.41           ; | i  p1 = Vector with target address
0040 6BFC 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044 6BFE C2F9  30         mov   *stack+,r11           ; Pop r11
0045 6C00 045B  20         b     *r11                  ; Return to caller
0046               
0047               
0048               ***************************************************************
0049               * Stub for "pane.colorscheme.botline"
0050               * bank4 vec.42
0051               ********|*****|*********************|**************************
0052               pane.colorscheme.botline:
0053 6C02 0649  14         dect  stack
0054 6C04 C64B  30         mov   r11,*stack            ; Save return address
0055                       ;------------------------------------------------------
0056                       ; Call function in bank 1
0057                       ;------------------------------------------------------
0058 6C06 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C08 307A     
0059 6C0A 6008                   data bank4.rom        ; | i  p0 = bank address
0060 6C0C 7FC2                   data vec.42           ; | i  p1 = Vector with target address
0061 6C0E 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065 6C10 C2F9  30         mov   *stack+,r11           ; Pop r11
0066 6C12 045B  20         b     *r11                  ; Return to caller
0067               
0068               ***************************************************************
0069               * Stub for "fm.newfile"
0070               * bank2 vec.5
0071               ********|*****|*********************|**************************
0072               fm.newfile:
0073 6C14 0649  14         dect  stack
0074 6C16 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 2
0077                       ;------------------------------------------------------
0078 6C18 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C1A 307A     
0079 6C1C 6004                   data bank2.rom        ; | i  p0 = bank address
0080 6C1E 7F78                   data vec.5            ; | i  p1 = Vector with target address
0081 6C20 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 6C22 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 6C24 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               ***************************************************************
0090               * Stub for "edb.find.init"
0091               * bank2 vec.20
0092               ********|*****|*********************|**************************
0093               edb.find.init:
0094 6C26 0649  14         dect  stack
0095 6C28 C64B  30         mov   r11,*stack            ; Save return address
0096                       ;------------------------------------------------------
0097                       ; Call function in bank 2
0098                       ;------------------------------------------------------
0099 6C2A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C2C 307A     
0100 6C2E 6004                   data bank2.rom        ; | i  p0 = bank address
0101 6C30 7F96                   data vec.20           ; | i  p1 = Vector with target address
0102 6C32 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0103                       ;------------------------------------------------------
0104                       ; Exit
0105                       ;------------------------------------------------------
0106 6C34 C2F9  30         mov   *stack+,r11           ; Pop r11
0107 6C36 045B  20         b     *r11                  ; Return to caller
0108               
0109               
0110               
0111               ***************************************************************
0112               * Stub for "cmdb.cmdb.getlength"
0113               * bank3 vec.26
0114               ********|*****|*********************|**************************
0115               cmdb.cmd.getlength:
0116 6C38 0649  14         dect  stack
0117 6C3A C64B  30         mov   r11,*stack            ; Save return address
0118                       ;------------------------------------------------------
0119                       ; Call function in bank 3
0120                       ;------------------------------------------------------
0121 6C3C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C3E 307A     
0122 6C40 6006                   data bank3.rom        ; | i  p0 = bank address
0123 6C42 7FA2                   data vec.26           ; | i  p1 = Vector with target address
0124 6C44 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0125                       ;------------------------------------------------------
0126                       ; Exit
0127                       ;------------------------------------------------------
0128 6C46 C2F9  30         mov   *stack+,r11           ; Pop r11
0129 6C48 045B  20         b     *r11                  ; Return to caller
0130               
0131               
0132               ***************************************************************
0133               * Stub for "fb.refresh"
0134               * bank4 vec.8
0135               ********|*****|*********************|**************************
0136               fb.refresh:
0137 6C4A 0649  14         dect  stack
0138 6C4C C64B  30         mov   r11,*stack            ; Save return address
0139                       ;------------------------------------------------------
0140                       ; Call function in bank 4
0141                       ;------------------------------------------------------
0142 6C4E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C50 307A     
0143 6C52 6008                   data bank4.rom        ; | i  p0 = bank address
0144 6C54 7F7E                   data vec.8            ; | i  p1 = Vector with target address
0145 6C56 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149 6C58 C2F9  30         mov   *stack+,r11           ; Pop r11
0150 6C5A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b7.asm
0100                       copy  "rom.stubs.bankx.asm"        ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * Exclude: bank0, bank1
0009               * bank1 vec.1
0010               ********|*****|*********************|**************************
0011               mem.sams.setup.stevie:
0012 6C5C 0649  14         dect  stack
0013 6C5E C64B  30         mov   r11,*stack            ; Save return address
0014                       ;------------------------------------------------------
0015                       ; Call function in bank 1
0016                       ;------------------------------------------------------
0017 6C60 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6C62 307A     
0018 6C64 6002                   data bank1.rom        ; | i  p0 = bank address
0019 6C66 7F70                   data vec.1            ; | i  p1 = Vector with target address
0020 6C68 600E                   data bankid           ; / i  p2 = Source ROM bank for return
0021                       ;------------------------------------------------------
0022                       ; Exit
0023                       ;------------------------------------------------------
0024 6C6A C2F9  30         mov   *stack+,r11           ; Pop r11
0025 6C6C 045B  20         b     *r11                  ; Return to caller
0027               
0028               
                   < stevie_b7.asm
0101                       ;-----------------------------------------------------------------------
0102                       ; Program data
0103                       ;-----------------------------------------------------------------------
0104                       copy  "data.sams.layout.asm"       ; SAMS bank layout for multi-purpose
     **** ****     > data.sams.layout.asm
0001               * FILE......: data.sams.layout.asm
0002               * Purpose...: SAMS bank layout for Stevie
0003               
0004               
0005               ; Following 32K memory regions are locked with
0006               ; fixed SAMS pages while running Stevie:
0007               ;
0008               ;  ---------------------------------------
0009               ;  >2000-2fff  SAMS page >00      locked
0010               ;  >3000-3fff  SAMS page >01      locked
0011               ;  >a000-afff  SAMS page >04      locked
0012               ;  ---------------------------------------
0013               ;  >b000-bfff  SAMS page >20-3f   variable
0014               ;  >c000-cfff  SAMS page >40-ff   variable
0015               ;  ---------------------------------------
0016               ;  >d000-dfff  SAMS page >05      locked+
0017               ;  >e000-efff  SAMS page >06      locked+
0018               ;  >f000-ffff  SAMS page >07      locked+
0019               ;  ---------------------------------------
0020               ;
0021               ;  1. During index search/reorganization the index temporarily
0022               ;     extends into memory range d000-ffff swapping the
0023               ;     otherwise locked+ pages as required.
0024               ;
0025               ;  2. Only when en external program is running (e.g. TI Basic)
0026               ;     or when terminating Stevie, the legacy page layout table
0027               ;     gets reactivated.
0028               
0029               
0030               
0031               ***************************************************************
0032               * SAMS page layout table
0033               * Stevie boot order
0034               *--------------------------------------------------------------
0035               mem.sams.layout.boot:
0036 6C6E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0037 6C70 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0038 6C72 0400             data  >0400                 ; >a000-afff, SAMS page >04
0039 6C74 2000             data  >2000                 ; >b000-bfff, SAMS page >20
0040                                                   ; \
0041                                                   ; | Index can allocate
0042                                                   ; | pages >20 to >3f.
0043                                                   ; /
0044 6C76 4000             data  >4000                 ; >c000-cfff, SAMS page >40
0045                                                   ; \
0046                                                   ; | Editor buffer can allocate
0047                                                   ; | pages >40 to >ff.
0048                                                   ; /
0049 6C78 0500             data  >0500                 ; >d000-dfff, SAMS page >05
0050 6C7A 0600             data  >0600                 ; >e000-efff, SAMS page >06
0051 6C7C 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0052               
0053               
0054               ***************************************************************
0055               * SAMS page layout table
0056               * Before running external progam
0057               *--------------------------------------------------------------
0058               mem.sams.layout.external:
0059 6C7E 0200             data  >0200                 ; >2000-2fff, SAMS page >00
0060 6C80 0300             data  >0300                 ; >3000-3fff, SAMS page >01
0061 6C82 0400             data  >0400                 ; >a000-afff, SAMS page >04
0062               
0063 6C84 1000             data  >1000                 ; >b000-efff, SAMS page >10
0064 6C86 1100             data  >1100                 ; \
0065 6C88 1200             data  >1200                 ; | Stevie session
0066 6C8A 1300             data  >1300                 ; | VDP content
0067                                                   ; /
0068 6C8C 0700             data  >0700                 ; >f000-ffff, SAMS page >07
0069               
0070               
0071               ***************************************************************
0072               * SAMS legacy page layout table
0073               * While running external program
0074               *--------------------------------------------------------------
0075               mem.sams.layout.legacy:
0076 6C8E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0077 6C90 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0078 6C92 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0079 6C94 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0080 6C96 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0081 6C98 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0082 6C9A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0083 6C9C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0084               
0085               
0086               
0087               ***************************************************************
0088               * SAMS page layout table
0089               * Backup TI Basic session 1 VRAM, scratchpad + auxiliary
0090               *--------------------------------------------------------------
0091               mem.sams.layout.basic1:
0092 6C9E 0200             data  >0200                 ; . >2000-2fff
0093 6CA0 0300             data  >0300                 ; . >3000-3fff
0094 6CA2 0400             data  >0400                 ; . >a000-afff
0095 6CA4 FB00             data  >fb00                 ; \ >b000-efff
0096 6CA6 FC00             data  >fc00                 ; |
0097 6CA8 FD00             data  >fd00                 ; | 16K VDP dump
0098 6CAA FE00             data  >fe00                 ; /
0099 6CAC FF00             data  >ff00                 ; . >f000-ffff
0100               
0101               
0102               ***************************************************************
0103               * SAMS page layout table
0104               * Backup TI Basic session 2 VRAM, scratchpad + auxiliary
0105               *--------------------------------------------------------------
0106               mem.sams.layout.basic2:
0107 6CAE 0200             data  >0200                 ; . >2000-2fff
0108 6CB0 0300             data  >0300                 ; . >3000-3fff
0109 6CB2 0400             data  >0400                 ; . >a000-afff
0110 6CB4 F700             data  >f700                 ; \ >b000-efff
0111 6CB6 F800             data  >f800                 ; |
0112 6CB8 F900             data  >f900                 ; | 16K VDP dump
0113 6CBA FA00             data  >fa00                 ; /
0114 6CBC FF00             data  >ff00                 ; . >f000-ffff
0115               
0116               
0117               ***************************************************************
0118               * SAMS page layout table
0119               * Backup TI Basic session 3 VRAM, scratchpad + auxiliary
0120               *--------------------------------------------------------------
0121               mem.sams.layout.basic3:
0122 6CBE 0200             data  >0200                 ; . >2000-2fff
0123 6CC0 0300             data  >0300                 ; . >3000-3fff
0124 6CC2 0400             data  >0400                 ; . >a000-afff
0125 6CC4 F300             data  >f300                 ; \ >b000-efff
0126 6CC6 F400             data  >f400                 ; |
0127 6CC8 F500             data  >f500                 ; | 16K VDP dump
0128 6CCA F600             data  >f600                 ; /
0129 6CCC FF00             data  >ff00                 ; . >f000-ffff
0130               
0131               
0132               ***************************************************************
0133               * SAMS page layout table
0134               * Run EA5 program image
0135               *--------------------------------------------------------------
0136               mem.sams.layout.ea5pgm:
0137                       equ   mem.sams.layout.legacy
0138               
0139               
0140               ***************************************************************
0141               * SAMS page layout table
0142               * FREE
0143               *--------------------------------------------------------------
0144               mem.sams.layout.free2:
0145 6CCE 0200             data  >0200                 ; . >2000-2fff
0146 6CD0 0300             data  >0300                 ; . >3000-3fff
0147 6CD2 0400             data  >0400                 ; . >a000-afff
0148 6CD4 EB00             data  >eb00                 ; \ >b000-efff
0149 6CD6 EC00             data  >ec00                 ; |
0150 6CD8 ED00             data  >ed00                 ; | 16K VDP dump
0151 6CDA EE00             data  >ee00                 ; /
0152 6CDC FF00             data  >ff00                 ; . >f000-ffff
0153               
0154               
0155      6C9E     mem.sams.layout.basic  equ mem.sams.layout.basic1
                   < stevie_b7.asm
0105                       copy  "data.tib.tokens.asm"        ; TI Basic tokens
     **** ****     > data.tib.tokens.asm
0001               * FILE......: data.tib.tokens.asm
0002               * Purpose...: TI Basic tokens
0003               
0004               
0005               ***************************************************************
0006               *                      TI Basic tokens
0007               ***************************************************************
0008               
0009               ;-----------------------------------------------------------------------
0010               ; Command tokens
0011               ;-----------------------------------------------------------------------
0012 6CDE 0003     tk.00   byte   >00,3,'R','U','N'
     6CE0 5255     
     6CE2 4E       
0013                       even
0014 6CE4 0103     tk.01   byte   >01,3,'N','E','W'
     6CE6 4E45     
     6CE8 57       
0015                       even
0016 6CEA 0203     tk.02   byte   >02,3,'C','O','N'
     6CEC 434F     
     6CEE 4E       
0017                       even
0018 6CF0 0208     tk.02l  byte   >02,8,'C','O','N','T','I','N','U','E'
     6CF2 434F     
     6CF4 4E54     
     6CF6 494E     
     6CF8 5545     
0019                       even
0020 6CFA 0304     tk.03   byte   >03,4,'L','I','S','T'
     6CFC 4C49     
     6CFE 5354     
0021                       even
0022 6D00 0403     tk.04   byte   >04,3,'B','Y','E'
     6D02 4259     
     6D04 45       
0023                       even
0024 6D06 0503     tk.05   byte   >05,3,'N','U','M'
     6D08 4E55     
     6D0A 4D       
0025                       even
0026 6D0C 0506     tk.05l  byte   >05,6,'N','U','M','B','E','R'
     6D0E 4E55     
     6D10 4D42     
     6D12 4552     
0027                       even
0028 6D14 0603     tk.06   byte   >06,3,'O','L','D'
     6D16 4F4C     
     6D18 44       
0029                       even
0030 6D1A 0703     tk.07   byte   >07,3,'R','E','S'
     6D1C 5245     
     6D1E 53       
0031                       even
0032 6D20 070A     tk.07l  byte   >07,10,'R','E','S','E','Q','U','E','N','C','E'
     6D22 5245     
     6D24 5345     
     6D26 5155     
     6D28 454E     
     6D2A 4345     
0033                       even
0034 6D2C 0804     tk.08   byte   >08,4,'S','A','V','E'
     6D2E 5341     
     6D30 5645     
0035                       even
0036 6D32 0904     tk.09   byte   >09,4,'E','D','I','T'
     6D34 4544     
     6D36 4954     
0037                       even
0038               ;-----------------------------------------------------------------------
0039               ; Program tokens
0040               ;-----------------------------------------------------------------------
0041 6D38 8105     tk.81   byte   >81,5,' ','E','L','S','E'
     6D3A 2045     
     6D3C 4C53     
     6D3E 45       
0042                       even
0043 6D40 8402     tk.84   byte   >84,2,'I','F'
     6D42 4946     
0044                       even
0045 6D44 8502     tk.85   byte   >85,2,'G','O'
     6D46 474F     
0046                       even
0047 6D48 8604     tk.86   byte   >86,4,'G','O','T','O'
     6D4A 474F     
     6D4C 544F     
0048                       even
0049 6D4E 8705     tk.87   byte   >87,5,'G','O','S','U','B'
     6D50 474F     
     6D52 5355     
     6D54 42       
0050                       even
0051 6D56 8806     tk.88   byte   >88,6,'R','E','T','U','R','N'
     6D58 5245     
     6D5A 5455     
     6D5C 524E     
0052                       even
0053 6D5E 8903     tk.89   byte   >89,3,'D','E','F'
     6D60 4445     
     6D62 46       
0054                       even
0055 6D64 8A03     tk.8a   byte   >8A,3,'D','I','M'
     6D66 4449     
     6D68 4D       
0056                       even
0057 6D6A 8B03     tk.8b   byte   >8B,3,'E','N','D'
     6D6C 454E     
     6D6E 44       
0058                       even
0059 6D70 8C03     tk.8c   byte   >8C,3,'F','O','R'
     6D72 464F     
     6D74 52       
0060                       even
0061 6D76 8D03     tk.8d   byte   >8D,3,'L','E','T'
     6D78 4C45     
     6D7A 54       
0062                       even
0063 6D7C 8E05     tk.8e   byte   >8E,5,'B','R','E','A','K'
     6D7E 4252     
     6D80 4541     
     6D82 4B       
0064                       even
0065 6D84 8F07     tk.8f   byte   >8F,7,'U','N','B','R','E','A','K'
     6D86 554E     
     6D88 4252     
     6D8A 4541     
     6D8C 4B       
0066                       even
0067 6D8E 9005     tk.90   byte   >90,5,'T','R','A','C','E'
     6D90 5452     
     6D92 4143     
     6D94 45       
0068                       even
0069 6D96 9107     tk.91   byte   >91,7,'U','N','T','R','A','C','E'
     6D98 554E     
     6D9A 5452     
     6D9C 4143     
     6D9E 45       
0070                       even
0071 6DA0 9205     tk.92   byte   >92,5,'I','N','P','U','T'
     6DA2 494E     
     6DA4 5055     
     6DA6 54       
0072                       even
0073 6DA8 9304     tk.93   byte   >93,4,'D','A','T','A'
     6DAA 4441     
     6DAC 5441     
0074                       even
0075 6DAE 9407     tk.94   byte   >94,7,'R','E','S','T','O','R','E'
     6DB0 5245     
     6DB2 5354     
     6DB4 4F52     
     6DB6 45       
0076                       even
0077 6DB8 9509     tk.95   byte   >95,9,'R','A','N','D','O','M','I','Z','E'
     6DBA 5241     
     6DBC 4E44     
     6DBE 4F4D     
     6DC0 495A     
     6DC2 45       
0078                       even
0079 6DC4 9604     tk.96   byte   >96,4,'N','E','X','T'
     6DC6 4E45     
     6DC8 5854     
0080                       even
0081 6DCA 9704     tk.97   byte   >97,4,'R','E','A','D'
     6DCC 5245     
     6DCE 4144     
0082                       even
0083 6DD0 9804     tk.98   byte   >98,4,'S','T','O','P'
     6DD2 5354     
     6DD4 4F50     
0084                       even
0085 6DD6 9906     tk.99   byte   >99,6,'D','E','L','E','T','E'
     6DD8 4445     
     6DDA 4C45     
     6DDC 5445     
0086                       even
0087 6DDE 9A03     tk.9a   byte   >9A,3,'R','E','M'
     6DE0 5245     
     6DE2 4D       
0088                       even
0089 6DE4 9B02     tk.9b   byte   >9B,2,'O','N'
     6DE6 4F4E     
0090                       even
0091 6DE8 9C05     tk.9c   byte   >9C,5,'P','R','I','N','T'
     6DEA 5052     
     6DEC 494E     
     6DEE 54       
0092                       even
0093 6DF0 9D04     tk.9d   byte   >9D,4,'C','A','L','L'
     6DF2 4341     
     6DF4 4C4C     
0094                       even
0095 6DF6 9E06     tk.9e   byte   >9E,6,'O','P','T','I','O','N'
     6DF8 4F50     
     6DFA 5449     
     6DFC 4F4E     
0096                       even
0097 6DFE 9F04     tk.9f   byte   >9F,4,'O','P','E','N'
     6E00 4F50     
     6E02 454E     
0098                       even
0099 6E04 A005     tk.a0   byte   >A0,5,'C','L','O','S','E'
     6E06 434C     
     6E08 4F53     
     6E0A 45       
0100                       even
0101 6E0C A103     tk.a1   byte   >A1,3,'S','U','B'
     6E0E 5355     
     6E10 42       
0102                       even
0103 6E12 A207     tk.a2   byte   >A2,7,'D','I','S','P','L','A','Y'
     6E14 4449     
     6E16 5350     
     6E18 4C41     
     6E1A 59       
0104                       even
0105 6E1C B005     tk.b0   byte   >B0,5,' ','T','H','E','N'
     6E1E 2054     
     6E20 4845     
     6E22 4E       
0106                       even
0107 6E24 B103     tk.b1   byte   >B1,3,' ','T','O'
     6E26 2054     
     6E28 4F       
0108                       even
0109 6E2A B205     tk.b2   byte   >B2,5,' ','S','T','E','P'
     6E2C 2053     
     6E2E 5445     
     6E30 50       
0110                       even
0111 6E32 B301     tk.b3   byte   >B3,1,','
     6E34 2C       
0112                       even
0113 6E36 B401     tk.b4   byte   >B4,1,';'
     6E38 3B       
0114                       even
0115 6E3A B501     tk.b5   byte   >B5,1,':'
     6E3C 3A       
0116                       even
0117 6E3E B601     tk.b6   byte   >B6,1,')'
     6E40 29       
0118                       even
0119 6E42 B701     tk.b7   byte   >B7,1,'('
     6E44 28       
0120                       even
0121 6E46 B801     tk.b8   byte   >B8,1,'&'
     6E48 26       
0122                       even
0123 6E4A BE01     tk.be   byte   >BE,1,'='
     6E4C 3D       
0124                       even
0125 6E4E BF01     tk.bf   byte   >BF,1,'<'
     6E50 3C       
0126                       even
0127 6E52 C001     tk.c0   byte   >C0,1,'>'
     6E54 3E       
0128                       even
0129 6E56 C101     tk.c1   byte   >C1,1,'+'
     6E58 2B       
0130                       even
0131 6E5A C201     tk.c2   byte   >C2,1,'-'
     6E5C 2D       
0132                       even
0133 6E5E C301     tk.c3   byte   >C3,1,'*'
     6E60 2A       
0134                       even
0135 6E62 C401     tk.c4   byte   >C4,1,'/'
     6E64 2F       
0136                       even
0137 6E66 C501     tk.c5   byte   >C5,1,'^'
     6E68 5E       
0138                       even
0139 6E6A C701     tk.c7   byte   >C7,1,34                ; Quote character
     6E6C 22       
0140                       even
0141 6E6E C801     tk.c8   byte   >C8,1,' '
     6E70 20       
0142                       even
0143 6E72 C901     tk.c9   byte   >C9,1,' '
     6E74 20       
0144                       even
0145 6E76 CA03     tk.ca   byte   >CA,3,'E','O','F'
     6E78 454F     
     6E7A 46       
0146                       even
0147 6E7C CB03     tk.cb   byte   >CB,3,'A','B','S'
     6E7E 4142     
     6E80 53       
0148                       even
0149 6E82 CC03     tk.cc   byte   >CC,3,'A','T','N'
     6E84 4154     
     6E86 4E       
0150                       even
0151 6E88 CD03     tk.cd   byte   >CD,3,'C','O','S'
     6E8A 434F     
     6E8C 53       
0152                       even
0153 6E8E CE03     tk.ce   byte   >CE,3,'E','X','P'
     6E90 4558     
     6E92 50       
0154                       even
0155 6E94 CF03     tk.cf   byte   >CF,3,'I','N','T'
     6E96 494E     
     6E98 54       
0156                       even
0157 6E9A D003     tk.d0   byte   >D0,3,'L','O','G'
     6E9C 4C4F     
     6E9E 47       
0158                       even
0159 6EA0 D103     tk.d1   byte   >D1,3,'S','G','N'
     6EA2 5347     
     6EA4 4E       
0160                       even
0161 6EA6 D203     tk.d2   byte   >D2,3,'S','I','N'
     6EA8 5349     
     6EAA 4E       
0162                       even
0163 6EAC D303     tk.d3   byte   >D3,3,'S','Q','R'
     6EAE 5351     
     6EB0 52       
0164                       even
0165 6EB2 D403     tk.d4   byte   >D4,3,'T','A','N'
     6EB4 5441     
     6EB6 4E       
0166                       even
0167 6EB8 D503     tk.d5   byte   >D5,3,'L','E','N'
     6EBA 4C45     
     6EBC 4E       
0168                       even
0169 6EBE D604     tk.d6   byte   >D6,4,'C','H','R','$'
     6EC0 4348     
     6EC2 5224     
0170                       even
0171 6EC4 D703     tk.d7   byte   >D7,3,'R','N','D'
     6EC6 524E     
     6EC8 44       
0172                       even
0173 6ECA D804     tk.d8   byte   >D8,4,'S','E','G','$'
     6ECC 5345     
     6ECE 4724     
0174                       even
0175 6ED0 D903     tk.d9   byte   >D9,3,'P','O','S'
     6ED2 504F     
     6ED4 53       
0176                       even
0177 6ED6 DA03     tk.da   byte   >DA,3,'V','A','L'
     6ED8 5641     
     6EDA 4C       
0178                       even
0179 6EDC DB04     tk.db   byte   >DB,4,'S','T','R','$'
     6EDE 5354     
     6EE0 5224     
0180                       even
0181 6EE2 DC03     tk.dc   byte   >DC,3,'A','S','C'
     6EE4 4153     
     6EE6 43       
0182                       even
0183 6EE8 DE03     tk.de   byte   >DE,3,'R','E','C'
     6EEA 5245     
     6EEC 43       
0184                       even
0185 6EEE F104     tk.f1   byte   >F1,4,'B','A','S','E'
     6EF0 4241     
     6EF2 5345     
0186                       even
0187 6EF4 F308     tk.f3   byte   >F3,8,'V','A','R','I','A','B','L','E'
     6EF6 5641     
     6EF8 5249     
     6EFA 4142     
     6EFC 4C45     
0188                       even
0189 6EFE F408     tk.f4   byte   >F4,8,'R','E','L','A','T','I','V','E'
     6F00 5245     
     6F02 4C41     
     6F04 5449     
     6F06 5645     
0190                       even
0191 6F08 F508     tk.f5   byte   >F5,8,'I','N','T','E','R','N','A','L'
     6F0A 494E     
     6F0C 5445     
     6F0E 524E     
     6F10 414C     
0192                       even
0193 6F12 F60A     tk.f6   byte   >F6,10,'S','E','Q','U','E','N','T','I','A','L'
     6F14 5345     
     6F16 5155     
     6F18 454E     
     6F1A 5449     
     6F1C 414C     
0194                       even
0195 6F1E F706     tk.f7   byte   >F7,6,'O','U','T','P','U','T'
     6F20 4F55     
     6F22 5450     
     6F24 5554     
0196                       even
0197 6F26 F806     tk.f8   byte   >F8,6,'U','P','D','A','T','E'
     6F28 5550     
     6F2A 4441     
     6F2C 5445     
0198                       even
0199 6F2E F906     tk.f9   byte   >F9,6,'A','P','P','E','N','D'
     6F30 4150     
     6F32 5045     
     6F34 4E44     
0200                       even
0201 6F36 FA06     tk.fa   byte   >FA,6,'F','I','X','E','D',' '
     6F38 4649     
     6F3A 5845     
     6F3C 4420     
0202                       even
0203 6F3E FB09     tk.fb   byte   >FB,9,'P','E','R','M','A','N','E','N','T'
     6F40 5045     
     6F42 524D     
     6F44 414E     
     6F46 454E     
     6F48 54       
0204                       even
0205 6F4A FC03     tk.fc   byte   >FC,3,'T','A','B'
     6F4C 5441     
     6F4E 42       
0206                       even
0207 6F50 FD01     tk.fd   byte   >FD,1,'#'
     6F52 23       
0208                       even
0209 6F54 FF01     tk.noop byte   >FF,1,'?'
     6F56 3F       
0210                       even
0211               ;-----------------------------------------------------------------------
0212               ; Token index command mode
0213               ;-----------------------------------------------------------------------
0214 6F58 6CDE     tki.00  data   tk.00               ; RUN
0215 6F5A 6CE4     tki.01  data   tk.01               ; NEW
0216 6F5C 6CEA     tki.02  data   tk.02               ; CON
0217 6F5E 6CF0     tki.02l data   tk.02l              ; CONTINUE
0218 6F60 6CFA     tki.03  data   tk.03               ; LIST
0219 6F62 6D00     tki.04  data   tk.04               ; BYE
0220 6F64 6D06     tki.05  data   tk.05               ; NUM
0221 6F66 6D0C     tki.05l data   tk.05l              ; NUMBER
0222 6F68 6D14     tki.06  data   tk.06               ; OLD
0223 6F6A 6D1A     tki.07  data   tk.07               ; RES
0224 6F6C 6D20     tki.07l data   tk.07l              ; RESEQUENCE
0225 6F6E 6D2C     tki.08  data   tk.08               ; SAVE
0226 6F70 6D32     tki.09  data   tk.09               ; EDIT
0227               ;-----------------------------------------------------------------------
0228               ; Token index program statement
0229               ;-----------------------------------------------------------------------
0230 6F72 6F54     tki.80  data   tk.noop             ;
0231 6F74 6D38     tki.81  data   tk.81               ; ELSE
0232 6F76 6F54     tki.82  data   tk.noop             ;
0233 6F78 6F54     tki.83  data   tk.noop             ;
0234 6F7A 6D40     tki.84  data   tk.84               ; IF
0235 6F7C 6D44     tki.85  data   tk.85               ; GO
0236 6F7E 6D48     tki.86  data   tk.86               ; GOTO
0237 6F80 6D4E     tki.87  data   tk.87               ; GOSUB
0238 6F82 6D56     tki.88  data   tk.88               ; RETURN
0239 6F84 6D5E     tki.89  data   tk.89               ; DEF
0240 6F86 6D64     tki.8a  data   tk.8a               ; DIM
0241 6F88 6D6A     tki.8b  data   tk.8b               ; END
0242 6F8A 6D70     tki.8c  data   tk.8c               ; FOR
0243 6F8C 6D76     tki.8d  data   tk.8d               ; LET
0244 6F8E 6D7C     tki.8e  data   tk.8e               ; BREAK
0245 6F90 6D84     tki.8f  data   tk.8f               ; UNBREAK
0246 6F92 6D8E     tki.90  data   tk.90               ; TRACE
0247 6F94 6D96     tki.91  data   tk.91               ; UNTRACE
0248 6F96 6DA0     tki.92  data   tk.92               ; INPUT
0249 6F98 6DA8     tki.93  data   tk.93               ; DATA
0250 6F9A 6DAE     tki.94  data   tk.94               ; RESTORE
0251 6F9C 6DB8     tki.95  data   tk.95               ; RANDOMIZE
0252 6F9E 6DC4     tki.96  data   tk.96               ; NEXT
0253 6FA0 6DCA     tki.97  data   tk.97               ; READ
0254 6FA2 6DD0     tki.98  data   tk.98               ; STOP
0255 6FA4 6DD6     tki.99  data   tk.99               ; DELETE
0256 6FA6 6DDE     tki.9a  data   tk.9a               ; REM
0257 6FA8 6DE4     tki.9b  data   tk.9b               ; ON
0258 6FAA 6DE8     tki.9c  data   tk.9c               ; PRINT
0259 6FAC 6DF0     tki.9d  data   tk.9d               ; CALL
0260 6FAE 6DF6     tki.9e  data   tk.9e               ; OPTION
0261 6FB0 6DFE     tki.9f  data   tk.9f               ; OPEN
0262 6FB2 6E04     tki.a0  data   tk.a0               ; CLOSE
0263 6FB4 6E0C     tki.a1  data   tk.a1               ; SUB
0264 6FB6 6E12     tki.a2  data   tk.a2               ; DISPLAY
0265 6FB8 6F54     tki.a3  data   tk.noop             ;
0266 6FBA 6F54     tki.a4  data   tk.noop             ;
0267 6FBC 6F54     tki.a5  data   tk.noop             ;
0268 6FBE 6F54     tki.a6  data   tk.noop             ;
0269 6FC0 6F54     tki.a7  data   tk.noop             ;
0270 6FC2 6F54     tki.a8  data   tk.noop             ;
0271 6FC4 6F54     tki.a9  data   tk.noop             ;
0272 6FC6 6F54     tki.aa  data   tk.noop             ;
0273 6FC8 6F54     tki.ab  data   tk.noop             ;
0274 6FCA 6F54     tki.ac  data   tk.noop             ;
0275 6FCC 6F54     tki.ad  data   tk.noop             ;
0276 6FCE 6F54     tki.ae  data   tk.noop             ;
0277 6FD0 6F54     tki.af  data   tk.noop             ;
0278 6FD2 6E1C     tki.b0  data   tk.b0               ; THEN
0279 6FD4 6E24     tki.b1  data   tk.b1               ; TO
0280 6FD6 6E2A     tki.b2  data   tk.b2               ; STEP
0281 6FD8 6E32     tki.b3  data   tk.b3               ; ,
0282 6FDA 6E36     tki.b4  data   tk.b4               ; ;
0283 6FDC 6E3A     tki.b5  data   tk.b5               ; :
0284 6FDE 6E3E     tki.b6  data   tk.b6               ; )
0285 6FE0 6E42     tki.b7  data   tk.b7               ; (
0286 6FE2 6E46     tki.b8  data   tk.b8               ; &
0287 6FE4 6F54     tki.b9  data   tk.noop             ;
0288 6FE6 6F54     tki.ba  data   tk.noop             ;
0289 6FE8 6F54     tki.bb  data   tk.noop             ;
0290 6FEA 6F54     tki.bc  data   tk.noop             ;
0291 6FEC 6F54     tki.bd  data   tk.noop             ;
0292 6FEE 6E4A     tki.be  data   tk.be               ; =
0293 6FF0 6E4E     tki.bf  data   tk.bf               ; <
0294 6FF2 6E52     tki.c0  data   tk.c0               ; >
0295 6FF4 6E56     tki.c1  data   tk.c1               ; +
0296 6FF6 6E5A     tki.c2  data   tk.c2               ; -
0297 6FF8 6E5E     tki.c3  data   tk.c3               ; *
0298 6FFA 6E62     tki.c4  data   tk.c4               ; /
0299 6FFC 6E66     tki.c5  data   tk.c5               ; ^
0300 6FFE 6F54     tki.c6  data   tk.noop             ;
0301 7000 6E6A     tki.c7  data   tk.c7               ; Quoted string
0302 7002 6E6E     tki.c8  data   tk.c8               ; Unquoted string
0303 7004 6E72     tki.c9  data   tk.c9               ; Line number
0304 7006 6E76     tki.ca  data   tk.ca               ; EOF
0305 7008 6E7C     tki.cb  data   tk.cb               ; ABS
0306 700A 6E82     tki.cc  data   tk.cc               ; ATN
0307 700C 6E88     tki.cd  data   tk.cd               ; COS
0308 700E 6E8E     tki.ce  data   tk.ce               ; EXP
0309 7010 6E94     tki.cf  data   tk.cf               ; INT
0310 7012 6E9A     tki.d0  data   tk.d0               ; LOG
0311 7014 6EA0     tki.d1  data   tk.d1               ; SGN
0312 7016 6EA6     tki.d2  data   tk.d2               ; SIN
0313 7018 6EAC     tki.d3  data   tk.d3               ; SQR
0314 701A 6EB2     tki.d4  data   tk.d4               ; TAN
0315 701C 6EB8     tki.d5  data   tk.d5               ; LEN
0316 701E 6EBE     tki.d6  data   tk.d6               ; CHAR$
0317 7020 6EC4     tki.d7  data   tk.d7               ; RND
0318 7022 6ECA     tki.d8  data   tk.d8               ; SEG$
0319 7024 6ED0     tki.d9  data   tk.d9               ; POS
0320 7026 6ED6     tki.da  data   tk.da               ; VAL
0321 7028 6EDC     tki.db  data   tk.db               ; STR$
0322 702A 6EE2     tki.dc  data   tk.dc               ; ASC
0323 702C 6F54     tki.dd  data   tk.noop             ;
0324 702E 6EE8     tki.de  data   tk.de               ; REC
0325 7030 6F54     tki.df  data   tk.noop             ;
0326 7032 6F54     tki.e0  data   tk.noop             ;
0327 7034 6F54     tki.e1  data   tk.noop             ;
0328 7036 6F54     tki.e2  data   tk.noop             ;
0329 7038 6F54     tki.e3  data   tk.noop             ;
0330 703A 6F54     tki.e4  data   tk.noop             ;
0331 703C 6F54     tki.e5  data   tk.noop             ;
0332 703E 6F54     tki.e6  data   tk.noop             ;
0333 7040 6F54     tki.e7  data   tk.noop             ;
0334 7042 6F54     tki.e8  data   tk.noop             ;
0335 7044 6F54     tki.e9  data   tk.noop             ;
0336 7046 6F54     tki.ea  data   tk.noop             ;
0337 7048 6F54     tki.eb  data   tk.noop             ;
0338 704A 6F54     tki.ec  data   tk.noop             ;
0339 704C 6F54     tki.ed  data   tk.noop             ;
0340 704E 6F54     tki.ee  data   tk.noop             ;
0341 7050 6F54     tki.ef  data   tk.noop             ;
0342 7052 6F54     tki.f0  data   tk.noop             ;
0343 7054 6EEE     tki.f1  data   tk.f1               ; BASE
0344 7056 6F54     tki.f2  data   tk.noop             ;
0345 7058 6EF4     tki.f3  data   tk.f3               ; VARIABLE
0346 705A 6EFE     tki.f4  data   tk.f4               ; RELATIVE
0347 705C 6F08     tki.f5  data   tk.f5               ; INTERNAL
0348 705E 6F12     tki.f6  data   tk.f6               ; SEQUENTIAL
0349 7060 6F1E     tki.f7  data   tk.f7               ; OUTPUT
0350 7062 6F26     tki.f8  data   tk.f8               ; UPDATE
0351 7064 6F2E     tki.f9  data   tk.f9               ; APPEND
0352 7066 6F36     tki.fa  data   tk.fa               ; FIXED
0353 7068 6F3E     tki.fb  data   tk.fb               ; PERMANENT
0354 706A 6F4A     tki.fc  data   tk.fc               ; TAB
0355 706C 6F50     tki.fd  data   tk.fd               ; #
0356 706E 6F54     tki.fe  data   tk.noop             ;
0357 7070 6F54     tki.ff  data   tk.noop             ; <NOOP>
0358               
0359      6F72     tib.tokenindex equ tki.80
                   < stevie_b7.asm
0106                       ;-----------------------------------------------------------------------
0107                       ; Scratchpad memory dump
0108                       ;-----------------------------------------------------------------------
0109                       aorg >7e00
0110                       copy  "data.scrpad.asm"            ; Required for TI Basic
     **** ****     > data.scrpad.asm
0001               * FILE......: data.scrpad.asm
0002               * Purpose...: Stevie Editor - data segment (scratchpad dump)
0003               
0004               ***************************************************************
0005               *    TI MONITOR scratchpad dump on cartridge menu screen
0006               ***************************************************************
0007               
0008               scrpad.monitor:
0009                       ;-------------------------------------------------------
0010                       ; Scratchpad TI monitor on cartridge selection screen
0011                       ;-------------------------------------------------------
0012 7E00 0000             byte  >00,>00,>21,>4D,>00,>00,>00,>00    ; >8300 - >8307
     7E02 214D     
     7E04 0000     
     7E06 0000     
0013 7E08 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8308 - >830f
     7E0A 0000     
     7E0C 0000     
     7E0E 0000     
0014 7E10 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8310 - >8317
     7E12 0000     
     7E14 0000     
     7E16 0000     
0015 7E18 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8318 - >831f
     7E1A 0000     
     7E1C 0000     
     7E1E 0000     
0016 7E20 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8320 - >8327
     7E22 0000     
     7E24 0000     
     7E26 0000     
0017 7E28 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8328 - >832f
     7E2A 0000     
     7E2C 0000     
     7E2E 0000     
0018 7E30 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8330 - >8337
     7E32 0000     
     7E34 0000     
     7E36 0000     
0019 7E38 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8338 - >833f
     7E3A 0000     
     7E3C 0000     
     7E3E 0000     
0020 7E40 0000             byte  >00,>00,>60,>13,>00,>00,>00,>00    ; >8340 - >8347
     7E42 6013     
     7E44 0000     
     7E46 0000     
0021 7E48 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8348 - >834f
     7E4A 0000     
     7E4C 0000     
     7E4E 0000     
0022 7E50 0000             byte  >00,>00,>01,>24,>00,>00,>00,>00    ; >8350 - >8357
     7E52 0124     
     7E54 0000     
     7E56 0000     
0023 7E58 311E             byte  >31,>1E,>00,>00,>00,>00,>00,>08    ; >8358 - >835f
     7E5A 0000     
     7E5C 0000     
     7E5E 0008     
0024 7E60 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8360 - >8367
     7E62 0000     
     7E64 0000     
     7E66 0000     
0025 7E68 0000             byte  >00,>00,>21,>52,>01,>06,>00,>00    ; >8368 - >836f
     7E6A 2152     
     7E6C 0106     
     7E6E 0000     
0026 7E70 37D7             byte  >37,>D7,>FE,>7E,>00,>FF,>00,>00    ; >8370 - >8377
     7E72 FE7E     
     7E74 00FF     
     7E76 0000     
0027 7E78 52D2             byte  >52,>D2,>00,>E4,>00,>00,>05,>09    ; >8378 - >837f
     7E7A 00E4     
     7E7C 0000     
     7E7E 0509     
0028 7E80 02FA             byte  >02,>FA,>03,>85,>00,>00,>00,>00    ; >8380 - >8387
     7E82 0385     
     7E84 0000     
     7E86 0000     
0029 7E88 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8388 - >838f
     7E8A 0000     
     7E8C 0000     
     7E8E 0000     
0030 7E90 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8390 - >8397
     7E92 0000     
     7E94 0000     
     7E96 0000     
0031 7E98 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >8398 - >839f
     7E9A 0000     
     7E9C 0000     
     7E9E 0000     
0032 7EA0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A0 - >83a7
     7EA2 0000     
     7EA4 0000     
     7EA6 0000     
0033 7EA8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83A8 - >83af
     7EAA 0000     
     7EAC 0000     
     7EAE 0000     
0034 7EB0 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B0 - >83b7
     7EB2 0000     
     7EB4 0000     
     7EB6 0000     
0035 7EB8 0000             byte  >00,>00,>00,>00,>00,>00,>00,>00    ; >83B8 - >83bf
     7EBA 0000     
     7EBC 0000     
     7EBE 0000     
0036 7EC0 5209             byte  >52,>09,>00,>00,>00,>00,>00,>00    ; >83C0 - >83c7
     7EC2 0000     
     7EC4 0000     
     7EC6 0000     
0037 7EC8 FFFF             byte  >FF,>FF,>FF,>00,>04,>84,>00,>00    ; >83C8 - >83cf
     7ECA FF00     
     7ECC 0484     
     7ECE 0000     
0038 7ED0 9804             byte  >98,>04,>E0,>00,>E0,>d5,>0A,>A6    ; >83D0 - >83d7
     7ED2 E000     
     7ED4 E0D5     
     7ED6 0AA6     
0039 7ED8 0070             byte  >00,>70,>83,>E0,>00,>74,>D0,>02    ; >83D8 - >83df
     7EDA 83E0     
     7EDC 0074     
     7EDE D002     
0040 7EE0 FFFF             byte  >FF,>FF,>FF,>FF,>00,>00,>04,>84    ; >83E0 - >83e7
     7EE2 FFFF     
     7EE4 0000     
     7EE6 0484     
0041 7EE8 0080             byte  >00,>80,>00,>00,>00,>00,>00,>00    ; >83E8 - >83ef
     7EEA 0000     
     7EEC 0000     
     7EEE 0000     
0042 7EF0 0000             byte  >00,>00,>00,>06,>05,>20,>04,>80    ; >83F0 - >83f7
     7EF2 0006     
     7EF4 0520     
     7EF6 0480     
0043 7EF8 0006             byte  >00,>06,>98,>00,>01,>08,>8C,>02    ; >83F8 - >83ff
     7EFA 9800     
     7EFC 0108     
     7EFE 8C02     
                   < stevie_b7.asm
0111                       ;-----------------------------------------------------------------------
0112                       ; Bank full check
0113                       ;-----------------------------------------------------------------------
0117                       ;-----------------------------------------------------------------------
0118                       ; Show ROM bank in CPU crash screen
0119                       ;-----------------------------------------------------------------------
0120                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7FF0 06A0  32         bl    @putat
     7FF2 2442     
0010 7FF4 0314                   byte 3,20
0011 7FF6 7F64                   data cpu.crash.showbank.bankstr
0012 7FF8 10FF  14         jmp   $
                   < stevie_b7.asm
0121                       ;-----------------------------------------------------------------------
0122                       ; Table for VDP modes
0123                       ;-----------------------------------------------------------------------
0124                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b7.asm
0125                       ;-----------------------------------------------------------------------
0126                       ; Vector table
0127                       ;-----------------------------------------------------------------------
0128                       copy  "rom.vectors.bank7.asm"    ; Vector table bank 7
     **** ****     > rom.vectors.bank7.asm
0001               * FILE......: rom.vectors.bank7.asm
0002               * Purpose...: Bank 7 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#7'
     7F66 4F4D     
     7F68 2337     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 7: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F70 60CC     vec.1   data  mem.sams.set.legacy   ;
0015 7F72 6104     vec.2   data  mem.sams.set.boot     ;
0016 7F74 612E     vec.3   data  mem.sams.set.stevie   ;
0017 7F76 610A     vec.4   data  mem.sams.set.external ;
0018 7F78 6110     vec.5   data  mem.sams.set.basic1   ;
0019 7F7A 611A     vec.6   data  mem.sams.set.basic2   ;
0020 7F7C 6124     vec.7   data  mem.sams.set.basic3   ;
0021 7F7E 2026     vec.8   data  cpu.crash             ;
0022 7F80 2026     vec.9   data  cpu.crash             ;
0023 7F82 61BE     vec.10  data  tib.run               ;
0024 7F84 666A     vec.11  data  tib.uncrunch          ;
0025 7F86 2026     vec.12  data  cpu.crash             ;
0026 7F88 2026     vec.13  data  cpu.crash             ;
0027 7F8A 2026     vec.14  data  cpu.crash             ;
0028 7F8C 2026     vec.15  data  cpu.crash             ;
0029 7F8E 2026     vec.16  data  cpu.crash             ;
0030 7F90 2026     vec.17  data  cpu.crash             ;
0031 7F92 2026     vec.18  data  cpu.crash             ;
0032 7F94 2026     vec.19  data  cpu.crash             ;
0033 7F96 604A     vec.20  data  magic.set             ;
0034 7F98 6064     vec.21  data  magic.clear           ;
0035 7F9A 6078     vec.22  data  magic.check           ;
0036 7F9C 618C     vec.23  data  tv.reset              ;
0037 7F9E 6B7C     vec.24  data  cart.fg99.mgr         ; FinalGROM 99
0038 7FA0 2026     vec.25  data  cpu.crash             ;
0039 7FA2 2026     vec.26  data  cpu.crash             ;
0040 7FA4 2026     vec.27  data  cpu.crash             ;
0041 7FA6 2026     vec.28  data  cpu.crash             ;
0042 7FA8 2026     vec.29  data  cpu.crash             ;
0043 7FAA 2026     vec.30  data  cpu.crash             ;
0044 7FAC 2026     vec.31  data  cpu.crash             ;
0045 7FAE 2026     vec.32  data  cpu.crash             ;
0046               *--------------------------------------------------------------
0047               * ROM 7: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7FB0 2026     vec.33  data  cpu.crash             ;
0050 7FB2 2026     vec.34  data  cpu.crash             ;
0051 7FB4 2026     vec.35  data  cpu.crash             ;
0052 7FB6 2026     vec.36  data  cpu.crash             ;
0053 7FB8 2026     vec.37  data  cpu.crash             ;
0054 7FBA 2026     vec.38  data  cpu.crash             ;
0055 7FBC 2026     vec.39  data  cpu.crash             ;
0056 7FBE 2026     vec.40  data  cpu.crash             ;
0057 7FC0 2026     vec.41  data  cpu.crash             ;
0058 7FC2 2026     vec.42  data  cpu.crash             ;
0059 7FC4 2026     vec.43  data  cpu.crash             ;
0060 7FC6 2026     vec.44  data  cpu.crash             ;
0061 7FC8 2026     vec.45  data  cpu.crash             ;
0062 7FCA 2026     vec.46  data  cpu.crash             ;
0063 7FCC 2026     vec.47  data  cpu.crash             ;
0064 7FCE 2026     vec.48  data  cpu.crash             ;
0065 7FD0 2026     vec.49  data  cpu.crash             ;
0066 7FD2 2026     vec.50  data  cpu.crash             ;
0067 7FD4 2026     vec.51  data  cpu.crash             ;
0068 7FD6 2026     vec.52  data  cpu.crash             ;
0069 7FD8 2026     vec.53  data  cpu.crash             ;
0070 7FDA 2026     vec.54  data  cpu.crash             ;
0071 7FDC 2026     vec.55  data  cpu.crash             ;
0072 7FDE 2026     vec.56  data  cpu.crash             ;
0073 7FE0 2026     vec.57  data  cpu.crash             ;
0074 7FE2 2026     vec.58  data  cpu.crash             ;
0075 7FE4 2026     vec.59  data  cpu.crash             ;
0076 7FE6 2026     vec.60  data  cpu.crash             ;
0077 7FE8 2026     vec.61  data  cpu.crash             ;
0078 7FEA 2026     vec.62  data  cpu.crash             ;
0079 7FEC 2026     vec.63  data  cpu.crash             ;
0080 7FEE 2026     vec.64  data  cpu.crash             ;
                   < stevie_b7.asm

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >600E :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CART.FG99.MGR....... >6B7C :     
    CART.FG99.MGR.EXIT.. >6BC0 :     
    CART.FG99.RUN....... >382E :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E37E :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLFREE......... >E37C :     
    CAT.VOLNAME......... >E3BA :     
    CAT.VOLSIZE......... >E378 :     
    CAT.VOLUSED......... >E37A :     
    CLHOOK.............. >2F72 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2F9A :     
    CMDB.ACTION.PTR..... >A730 :     
    CMDB.CMD............ >A733 :     
    CMDB.CMD.GETLENGTH.. >6C38 :     
    CMDB.CMDALL......... >A732 :     
    CMDB.CMDLEN......... >A732 :     
    CMDB.COLUMN......... >A718 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B6 :     
    CMDB.DIALOG......... >A720 :     
    CMDB.DIALOG.CLOSE... >6BDE :     
    CMDB.DIALOG.VAR..... >A722 :     
    CMDB.DIRTY.......... >A71E :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.FREE1.......... >A70E :     
    CMDB.INIT........... >3342 :     
    CMDB.INIT.EXIT...... >3396 :     
    CMDB.LENGTH......... >A71A :     
    CMDB.LINES.......... >A71C :     
    CMDB.PANHEAD........ >A724 :     
    CMDB.PANHEAD.BUF.... >A784 :     
    CMDB.PANHINT........ >A728 :     
    CMDB.PANHINT2....... >A72A :     
    CMDB.PANINFO........ >A726 :     
    CMDB.PANKEYS........ >A72E :     
    CMDB.PANMARKERS..... >A72C :     
    CMDB.PREVCURSOR..... >A710 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A712 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A716 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A714 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3940 :     
    CONST.11............ >3942 :     
    CONST.12............ >3944 :     
    CONST.13............ >3946 :     
    CONST.14............ >3948 :     
    CONST.15............ >394A :     
    CONST.16............ >394C :     
    CONST.2............. >2004 :     
    CONST.3............. >3936 :     
    CONST.32............ >394E :     
    CONST.4............. >2006 :     
    CONST.5............. >3938 :     
    CONST.6............. >393A :     
    CONST.7............. >393C :     
    CONST.8............. >2008 :     
    CONST.80............ >3950 :     
    CONST.9............. >393E :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DATA.FILENAME.PTR... >66E6 :     
    DATA.PRINTF.VRAM.LNT >6910 :     
    DATA.PRINTF.VRAM.LNUM >6930 :     
    DATA.PRINTF.VRAM.STMT >6920 :     
    DATA.TK.BREAK....... >6480 :     
    DATA.TK.END......... >647F :     
    DATA.TK.NEW......... >647C :     
    DATA.TK.OLD......... >647D :     
    DATA.TK.SAVE........ >647E :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D6B :     
    DEF.CLIP.FNAME.B.... >3D76 :     
    DEF.DEVICES......... >3D80 :     
    DEF.FG99.FNAME...... >3DB0 :     
    DEF.PRINTER.FNAME... >3D64 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FIND.INIT....... >6C26 :     
    EDB.FREE............ >A5DC :     
    EDB.HIPAGE.ALLOC.... >37C8 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37D4 :     
    EDB.HIPAGE.ALLOC.CRASH >37FE :     
    EDB.HIPAGE.ALLOC.EXIT >3806 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37F0 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >32F6 :     
    EDB.INIT.EXIT....... >333C :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >3760 :     
    EDB.LINE.GETLENGTH.EXIT >379C :     
    EDB.LINE.GETLENGTH.NULL >3798 :     
    EDB.LINE.GETLENGTH2. >37A4 :     
    EDB.LINE.GETLENGTH2.EXIT >37C2 :     
    EDB.LINE.MAPPAGE.... >3716 :     
    EDB.LINE.MAPPAGE.EXIT >3758 :     
    EDB.LINE.MAPPAGE.LOOKUP >3730 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.LOCKED.......... >A5DA :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.SRCH.COL.PTR.... >A5D4 :     
    EDB.SRCH.CURMATCH... >A5D0 :     
    EDB.SRCH.ENDLN...... >A5CA :     
    EDB.SRCH.IDX.CSIZE.. >0400 :     
    EDB.SRCH.IDX.CTOP... >F900 :     
    EDB.SRCH.IDX.RSIZE.. >0800 :     
    EDB.SRCH.IDX.RTOP... >F100 :     
    EDB.SRCH.MATCHCOL... >A5D8 :     
    EDB.SRCH.MATCHES.... >A5CE :     
    EDB.SRCH.OFFSET..... >A5D6 :     
    EDB.SRCH.ROW.PTR.... >A5D2 :     
    EDB.SRCH.STARTLN.... >A5C8 :     
    EDB.SRCH.STR........ >A576 :     
    EDB.SRCH.STRLEN..... >A5C6 :     
    EDB.SRCH.WORKLEN.... >A5CC :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERRPANE.EXIT........ >33C4 :     
    ERRPANE.INIT........ >339E :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >319E :     
    FB.CALC.POINTER.EXIT >31BE :     
    FB.CALC.SCRROWS..... >31C6 :     
    FB.CALC.SCRROWS.EXIT >31F2 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31E6 :     
    FB.CALC.SCRROWS.HANDLE.MC >31DA :     
    FB.CALC.SCRROWS.HANDLE.RULER >31D0 :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A31A :     
    FB.FREE............. >A3C2 :     
    FB.INIT............. >312A :     
    FB.INIT.EXIT........ >317C :     
    FB.PREVCURSOR....... >A316 :     
    FB.REFRESH.......... >6C4A :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >3184 :     
    FB.ROW2LINE.EXIT.... >3198 :     
    FB.RULER.SIT........ >A322 :     
    FB.RULER.TAT........ >A372 :     
    FB.SCRROWS.......... >A31E :     
    FB.SCRROWS.MAX...... >A320 :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31C :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A318 :     
    FG99................ >2E74 :     
    FG99.CART.TEMPLATE.. >6BCA :     
    FG99.EXIT........... >2EAE :     
    FG99.SEND.LOOP...... >2E84 :     
    FG99.WAIT........... >2E9C :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.CIRCBREAKER...... >A46A :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BC :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46C :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >1400 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E18 :     
    FILE.IMAGE.LOAD..... >2E14 :     
    FILE.IMAGE.SAVE..... >2E16 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E12 :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E1A :     
    FILE.STATUS......... >2E1C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.NEWFILE.......... >6C14 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EB8 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CART.FG99. >0028 :     
    ID.DIALOG.CART.TYPE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FIND...... >001E :     
    ID.DIALOG.FIND.BROWSE >0078 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.OPT....... >006C :     
    ID.DIALOG.OPT.CLIP.. >0013 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >0072 :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >361C :     
    IDX.ENTRY.DELETE.EXIT >3674 :     
    IDX.ENTRY.DELETE.LASTLINE >3648 :     
    IDX.ENTRY.DELETE.REORG >3650 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >365A :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >366E :     
    IDX.ENTRY.INSERT.... >36BE :     
    IDX.ENTRY.INSERT.EXIT >370A :     
    IDX.ENTRY.INSERT.REORG >36DC :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36E6 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >36FA :     
    IDX.ENTRY.UPDATE.... >356E :     
    IDX.ENTRY.UPDATE.CLEAR >35A8 :     
    IDX.ENTRY.UPDATE.EXIT >35B8 :     
    IDX.ENTRY.UPDATE.SAVE >3596 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >31F6 :     
    IDX.INIT.EXIT....... >3232 :     
    IDX.POINTER.GET..... >35C0 :     
    IDX.POINTER.GET.EXIT >3602 :     
    IDX.POINTER.GET.PARM >35F0 :     
    IDX.POINTER.GET.PARM.NULL >35FA :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    ISR................. >63BC :     
    ISR.COUNTER......... >6402 :     
    ISR.EXIT............ >6418 :     
    ISR.HOTKEY.......... >6406 :     
    ISR.SCAN.COPY....... >646C :     
    ISR.SCAN.COPY.LOOP.. >6472 :     
    ISR.SCAN.CRUNCHBUF.. >6422 :     
    ISR.SCAN.END........ >643E :     
    ISR.SCAN.EXIT....... >647A :     
    ISR.SCAN.NEW........ >6458 :     
    ISR.SCAN.OLD........ >6448 :     
    ISR.SCAN.SAVE....... >6450 :     
    ISR.SHOWID.......... >63D4 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.A............ >0061 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.C............ >00A3 :     
    KEY.LC.D............ >00A4 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.G............ >00A7 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.I............ >00A9 :     
    KEY.LC.J............ >00AA :     
    KEY.LC.K............ >00AB :     
    KEY.LC.L............ >00AC :     
    KEY.LC.M............ >00AD :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.T............ >0074 :     
    KEY.LC.U............ >0075 :     
    KEY.LC.V............ >0076 :     
    KEY.LC.W............ >0077 :     
    KEY.LC.X............ >0078 :     
    KEY.LC.Y............ >0079 :     
    KEY.LC.Z............ >007A :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.T............ >0054 :     
    KEY.UC.U............ >0055 :     
    KEY.UC.V............ >0056 :     
    KEY.UC.W............ >0057 :     
    KEY.UC.X............ >0058 :     
    KEY.UC.Y............ >0059 :     
    KEY.UC.Z............ >005A :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F52 :     
    KTHREAD_EXIT........ >2F64 :     
    KTHREAD_KB.......... >2F60 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >6078 :     
    MAGIC.CHECK.EXIT.... >6098 :     
    MAGIC.CLEAR......... >6064 :     
    MAGIC.CLEAR.EXIT.... >6074 :     
    MAGIC.SET........... >604A :     
    MAGIC.SET.EXIT...... >6060 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAGIC.STRING........ >609C :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.LAYOUT.BASIC >6C9E :     
    MEM.SAMS.LAYOUT.BASIC1 >6C9E :     
    MEM.SAMS.LAYOUT.BASIC2 >6CAE :     
    MEM.SAMS.LAYOUT.BASIC3 >6CBE :     
    MEM.SAMS.LAYOUT.BOOT >6C6E :     
    MEM.SAMS.LAYOUT.EA5PGM >6C8E :     
    MEM.SAMS.LAYOUT.EXTERNAL >6C7E :     
    MEM.SAMS.LAYOUT.FREE2 >6CCE :     
    MEM.SAMS.LAYOUT.LEGACY >6C8E :     
    MEM.SAMS.SET.BANKS.EXIT >60CA :     
    MEM.SAMS.SET.BASIC1. >6110 :     
    MEM.SAMS.SET.BASIC2. >611A :     
    MEM.SAMS.SET.BASIC3. >6124 :     
    MEM.SAMS.SET.BOOT... >6104 :     
    MEM.SAMS.SET.EXTERNAL >610A :     
    MEM.SAMS.SET.LEGACY. >60CC :     
    MEM.SAMS.SET.LEGACY.CODE >60FC :     
    MEM.SAMS.SET.STEVIE. >612E :     
    MEM.SAMS.SET.STEVIE.EXIT >618A :     
    MEM.SAMS.SETUP.STEVIE >6C5C :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F70 :     
    MKHOOK.............. >2F68 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2F96 :     
    MKSLOT.............. >2F7C :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >391C :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OLD.BASIC.PRG....... >63AC :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTROW......... >001D :     
    PANE.COLORSCHEME.BOTLINE >6C02 :     
    PANE.COLORSCHEME.LOAD >6BF0 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >380E :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3826 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >307A :     
    ROM.FARJUMP.ASSERT.CART >30EC :     
    ROM.FARJUMP.ASSERT.LOWMEM >30FA :     
    ROM.FARJUMP.BANKSWITCH.CALL >30DC :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30D4 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >310E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >310A :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30B8 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30BC :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30C4 :     
    ROM.FARJUMP.EXIT.... >3120 :     
    ROM.FARJUMP.RETURN.. >30DE :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6026 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3910 :     
    RSSLOT.............. >2FA8 :     
    RUNLI1.............. >2FC0 :     
    RUNLI2.............. >2FCC :     
    RUNLI3.............. >2FD0 :     
    RUNLI3A............. >2FD8 :     
    RUNLI4.............. >2FE2 :     
    RUNLI5.............. >2FEC :     
    RUNLI6.............. >2FFA :     
    RUNLI7.............. >3008 :     
    RUNLI9.............. >300C :     
    RUNLIA.............. >302E :     
    RUNLIB.............. >2FBC :     
    RUNLIC.............. >3052 :     
    RUNLID.............. >3068 :     
    RUNLIE.............. >3072 :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SCRPAD.MONITOR...... >7E00 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F34 :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3904 :     
    TASK.ONESHOT.EXIT... >390C :     
    TASK.VDP.COPY.SAT... >384E :     
    TASK.VDP.COPY.SAT.CMDB >3876 :     
    TASK.VDP.COPY.SAT.EXIT >38E4 :     
    TASK.VDP.COPY.SAT.FB >3886 :     
    TASK.VDP.COPY.SAT.FB.NORULER >389A :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38D0 :     
    TASK.VDP.COPY.SAT.WRITE >389E :     
    TASK.VDP.COPY.SAT.WRITE2 >38DA :     
    TASK.VDP.CURSOR..... >38F0 :     
    TASK.VDP.CURSOR.EXIT >38FE :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.RETURN.PAGE_IN.. >65A6 :     
    TIB.RUN............. >61BE :     
    TIB.RUN.INIT.BASIC1. >621A :     
    TIB.RUN.INIT.BASIC2. >6246 :     
    TIB.RUN.INIT.BASIC3. >6268 :     
    TIB.RUN.INIT.REST... >6286 :     
    TIB.RUN.RESUME.BASIC1 >6308 :     
    TIB.RUN.RESUME.BASIC2 >6318 :     
    TIB.RUN.RESUME.BASIC3 >6328 :     
    TIB.RUN.RESUME.PART2 >6338 :     
    TIB.RUN.RESUME.SCRPAD >635A :     
    TIB.RUN.RESUME.VDP.. >6346 :     
    TIB.RUN.RETURN...... >64EE :     
    TIB.RUN.RETURN.1.... >6508 :     
    TIB.RUN.RETURN.2.... >6526 :     
    TIB.RUN.RETURN.3.... >6544 :     
    TIB.RUN.RETURN.4.... >6562 :     
    TIB.RUN.RETURN.5.... >6580 :     
    TIB.RUN.RETURN.DATA.SAMSPAGE >6630 :     
    TIB.RUN.RETURN.EXIT. >6624 :     
    TIB.RUN.RETURN.FAILED >659E :     
    TIB.RUN.RETURN.MON.. >6482 :     
    TIB.RUN.RETURN.MON.CONT >64B6 :     
    TIB.RUN.RETURN.STEVIE >65DA :     
    TIB.RUN.RETURN.VDPDUMP >65CC :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.TOKENINDEX...... >6F72 :     
    TIB.UNCRNCH.PRG.COPY.STATEMENT >68CC :     
    TIB.UNCRNCH.PRG.STATEMENT.LOOP.PANIC >68C4 :     
    TIB.UNCRUNCH........ >666A :     
    TIB.UNCRUNCH.EXIT... >66DE :     
    TIB.UNCRUNCH.LINE.PACK >6AE2 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE >6B2E :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.ALIGN16 >6B48 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.BLOCK >6B44 :     
    TIB.UNCRUNCH.LINE.PACK.COPYLINE.CHECKBYTE >6B3A :     
    TIB.UNCRUNCH.LINE.PACK.EXIT >6B6E :     
    TIB.UNCRUNCH.LINE.PACK.PREPEXIT >6B5A :     
    TIB.UNCRUNCH.PREPARE >66EE :     
    TIB.UNCRUNCH.PREPARE.2 >672E :     
    TIB.UNCRUNCH.PREPARE.5 >6784 :     
    TIB.UNCRUNCH.PREPARE.EXIT >67B2 :     
    TIB.UNCRUNCH.PREPARE.NP >6780 :     
    TIB.UNCRUNCH.PRG.... >67BC :     
    TIB.UNCRUNCH.PRG.DONE >68EC :     
    TIB.UNCRUNCH.PRG.EXIT >6904 :     
    TIB.UNCRUNCH.PRG.LNT.LOOP >67F0 :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP >6886 :     
    TIB.UNCRUNCH.PRG.STATEMENT.LOOP.NONTOKEN >68AC :     
    TIB.UNCRUNCH.TOKEN.. >6940 :     
    TIB.UNCRUNCH.TOKEN.EXIT >6ACC :     
    TIB.UNCRUNCH.TOKEN.LINENUM >6A5C :     
    TIB.UNCRUNCH.TOKEN.LOOKUP >6988 :     
    TIB.UNCRUNCH.TOKEN.QUOTED >69D0 :     
    TIB.UNCRUNCH.TOKEN.QUOTED.QUOTE2 >69FC :     
    TIB.UNCRUNCH.TOKEN.SETLEN >6AC2 :     
    TIB.UNCRUNCH.TOKEN.UNQUOTED >6A1C :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F5A :     
    TIBASIC.PATTERNS.... >6384 :     
    TIBASIC.RESUME.LOAD. >636C :     
    TIBASIC.SCRPAD.83D4. >637C :     
    TIBASIC.SCRPAD.83FA. >637E :     
    TIBASIC.SCRPAD.83FC. >6380 :     
    TIBASIC.SCRPAD.83FE. >6382 :     
    TIMERS.............. >A064 :     
    TK.00............... >6CDE :     
    TK.01............... >6CE4 :     
    TK.02............... >6CEA :     
    TK.02L.............. >6CF0 :     
    TK.03............... >6CFA :     
    TK.04............... >6D00 :     
    TK.05............... >6D06 :     
    TK.05L.............. >6D0C :     
    TK.06............... >6D14 :     
    TK.07............... >6D1A :     
    TK.07L.............. >6D20 :     
    TK.08............... >6D2C :     
    TK.09............... >6D32 :     
    TK.81............... >6D38 :     
    TK.84............... >6D40 :     
    TK.85............... >6D44 :     
    TK.86............... >6D48 :     
    TK.87............... >6D4E :     
    TK.88............... >6D56 :     
    TK.89............... >6D5E :     
    TK.8A............... >6D64 :     
    TK.8B............... >6D6A :     
    TK.8C............... >6D70 :     
    TK.8D............... >6D76 :     
    TK.8E............... >6D7C :     
    TK.8F............... >6D84 :     
    TK.90............... >6D8E :     
    TK.91............... >6D96 :     
    TK.92............... >6DA0 :     
    TK.93............... >6DA8 :     
    TK.94............... >6DAE :     
    TK.95............... >6DB8 :     
    TK.96............... >6DC4 :     
    TK.97............... >6DCA :     
    TK.98............... >6DD0 :     
    TK.99............... >6DD6 :     
    TK.9A............... >6DDE :     
    TK.9B............... >6DE4 :     
    TK.9C............... >6DE8 :     
    TK.9D............... >6DF0 :     
    TK.9E............... >6DF6 :     
    TK.9F............... >6DFE :     
    TK.A0............... >6E04 :     
    TK.A1............... >6E0C :     
    TK.A2............... >6E12 :     
    TK.B0............... >6E1C :     
    TK.B1............... >6E24 :     
    TK.B2............... >6E2A :     
    TK.B3............... >6E32 :     
    TK.B4............... >6E36 :     
    TK.B5............... >6E3A :     
    TK.B6............... >6E3E :     
    TK.B7............... >6E42 :     
    TK.B8............... >6E46 :     
    TK.BE............... >6E4A :     
    TK.BF............... >6E4E :     
    TK.C0............... >6E52 :     
    TK.C1............... >6E56 :     
    TK.C2............... >6E5A :     
    TK.C3............... >6E5E :     
    TK.C4............... >6E62 :     
    TK.C5............... >6E66 :     
    TK.C7............... >6E6A :     
    TK.C8............... >6E6E :     
    TK.C9............... >6E72 :     
    TK.CA............... >6E76 :     
    TK.CB............... >6E7C :     
    TK.CC............... >6E82 :     
    TK.CD............... >6E88 :     
    TK.CE............... >6E8E :     
    TK.CF............... >6E94 :     
    TK.D0............... >6E9A :     
    TK.D1............... >6EA0 :     
    TK.D2............... >6EA6 :     
    TK.D3............... >6EAC :     
    TK.D4............... >6EB2 :     
    TK.D5............... >6EB8 :     
    TK.D6............... >6EBE :     
    TK.D7............... >6EC4 :     
    TK.D8............... >6ECA :     
    TK.D9............... >6ED0 :     
    TK.DA............... >6ED6 :     
    TK.DB............... >6EDC :     
    TK.DC............... >6EE2 :     
    TK.DE............... >6EE8 :     
    TK.F1............... >6EEE :     
    TK.F3............... >6EF4 :     
    TK.F4............... >6EFE :     
    TK.F5............... >6F08 :     
    TK.F6............... >6F12 :     
    TK.F7............... >6F1E :     
    TK.F8............... >6F26 :     
    TK.F9............... >6F2E :     
    TK.FA............... >6F36 :     
    TK.FB............... >6F3E :     
    TK.FC............... >6F4A :     
    TK.FD............... >6F50 :     
    TK.NOOP............. >6F54 :     
    TKI.00.............. >6F58 :     
    TKI.01.............. >6F5A :     
    TKI.02.............. >6F5C :     
    TKI.02L............. >6F5E :     
    TKI.03.............. >6F60 :     
    TKI.04.............. >6F62 :     
    TKI.05.............. >6F64 :     
    TKI.05L............. >6F66 :     
    TKI.06.............. >6F68 :     
    TKI.07.............. >6F6A :     
    TKI.07L............. >6F6C :     
    TKI.08.............. >6F6E :     
    TKI.09.............. >6F70 :     
    TKI.80.............. >6F72 :     
    TKI.81.............. >6F74 :     
    TKI.82.............. >6F76 :     
    TKI.83.............. >6F78 :     
    TKI.84.............. >6F7A :     
    TKI.85.............. >6F7C :     
    TKI.86.............. >6F7E :     
    TKI.87.............. >6F80 :     
    TKI.88.............. >6F82 :     
    TKI.89.............. >6F84 :     
    TKI.8A.............. >6F86 :     
    TKI.8B.............. >6F88 :     
    TKI.8C.............. >6F8A :     
    TKI.8D.............. >6F8C :     
    TKI.8E.............. >6F8E :     
    TKI.8F.............. >6F90 :     
    TKI.90.............. >6F92 :     
    TKI.91.............. >6F94 :     
    TKI.92.............. >6F96 :     
    TKI.93.............. >6F98 :     
    TKI.94.............. >6F9A :     
    TKI.95.............. >6F9C :     
    TKI.96.............. >6F9E :     
    TKI.97.............. >6FA0 :     
    TKI.98.............. >6FA2 :     
    TKI.99.............. >6FA4 :     
    TKI.9A.............. >6FA6 :     
    TKI.9B.............. >6FA8 :     
    TKI.9C.............. >6FAA :     
    TKI.9D.............. >6FAC :     
    TKI.9E.............. >6FAE :     
    TKI.9F.............. >6FB0 :     
    TKI.A0.............. >6FB2 :     
    TKI.A1.............. >6FB4 :     
    TKI.A2.............. >6FB6 :     
    TKI.A3.............. >6FB8 :     
    TKI.A4.............. >6FBA :     
    TKI.A5.............. >6FBC :     
    TKI.A6.............. >6FBE :     
    TKI.A7.............. >6FC0 :     
    TKI.A8.............. >6FC2 :     
    TKI.A9.............. >6FC4 :     
    TKI.AA.............. >6FC6 :     
    TKI.AB.............. >6FC8 :     
    TKI.AC.............. >6FCA :     
    TKI.AD.............. >6FCC :     
    TKI.AE.............. >6FCE :     
    TKI.AF.............. >6FD0 :     
    TKI.B0.............. >6FD2 :     
    TKI.B1.............. >6FD4 :     
    TKI.B2.............. >6FD6 :     
    TKI.B3.............. >6FD8 :     
    TKI.B4.............. >6FDA :     
    TKI.B5.............. >6FDC :     
    TKI.B6.............. >6FDE :     
    TKI.B7.............. >6FE0 :     
    TKI.B8.............. >6FE2 :     
    TKI.B9.............. >6FE4 :     
    TKI.BA.............. >6FE6 :     
    TKI.BB.............. >6FE8 :     
    TKI.BC.............. >6FEA :     
    TKI.BD.............. >6FEC :     
    TKI.BE.............. >6FEE :     
    TKI.BF.............. >6FF0 :     
    TKI.C0.............. >6FF2 :     
    TKI.C1.............. >6FF4 :     
    TKI.C2.............. >6FF6 :     
    TKI.C3.............. >6FF8 :     
    TKI.C4.............. >6FFA :     
    TKI.C5.............. >6FFC :     
    TKI.C6.............. >6FFE :     
    TKI.C7.............. >7000 :     
    TKI.C8.............. >7002 :     
    TKI.C9.............. >7004 :     
    TKI.CA.............. >7006 :     
    TKI.CB.............. >7008 :     
    TKI.CC.............. >700A :     
    TKI.CD.............. >700C :     
    TKI.CE.............. >700E :     
    TKI.CF.............. >7010 :     
    TKI.D0.............. >7012 :     
    TKI.D1.............. >7014 :     
    TKI.D2.............. >7016 :     
    TKI.D3.............. >7018 :     
    TKI.D4.............. >701A :     
    TKI.D5.............. >701C :     
    TKI.D6.............. >701E :     
    TKI.D7.............. >7020 :     
    TKI.D8.............. >7022 :     
    TKI.D9.............. >7024 :     
    TKI.DA.............. >7026 :     
    TKI.DB.............. >7028 :     
    TKI.DC.............. >702A :     
    TKI.DD.............. >702C :     
    TKI.DE.............. >702E :     
    TKI.DF.............. >7030 :     
    TKI.E0.............. >7032 :     
    TKI.E1.............. >7034 :     
    TKI.E2.............. >7036 :     
    TKI.E3.............. >7038 :     
    TKI.E4.............. >703A :     
    TKI.E5.............. >703C :     
    TKI.E6.............. >703E :     
    TKI.E7.............. >7040 :     
    TKI.E8.............. >7042 :     
    TKI.E9.............. >7044 :     
    TKI.EA.............. >7046 :     
    TKI.EB.............. >7048 :     
    TKI.EC.............. >704A :     
    TKI.ED.............. >704C :     
    TKI.EE.............. >704E :     
    TKI.EF.............. >7050 :     
    TKI.F0.............. >7052 :     
    TKI.F1.............. >7054 :     
    TKI.F2.............. >7056 :     
    TKI.F3.............. >7058 :     
    TKI.F4.............. >705A :     
    TKI.F5.............. >705C :     
    TKI.F6.............. >705E :     
    TKI.F7.............. >7060 :     
    TKI.F8.............. >7062 :     
    TKI.F9.............. >7064 :     
    TKI.FA.............. >7066 :     
    TKI.FB.............. >7068 :     
    TKI.FC.............. >706A :     
    TKI.FD.............. >706C :     
    TKI.FE.............. >706E :     
    TKI.FF.............. >7070 :     
    TMDAT............... >2F50 :     
    TMGR................ >2EB4 :     
    TMGR1............... >2EB8 :     
    TMGR10.............. >2F38 :     
    TMGR11.............. >2F46 :     
    TMGR12.............. >2F4A :     
    TMGR1A.............. >2EC6 :     
    TMGR2............... >2ECC :     
    TMGR3............... >2EDC :     
    TMGR4............... >2EEE :     
    TMGR5............... >2F04 :     
    TMGR6............... >2F08 :     
    TMGR7............... >2F0C :     
    TMGR8............... >2F0E :     
    TMGR9............... >2F16 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BOTCOLOR......... >A21C :     
    TV.BUSYCOLOR........ >A220 :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.COLOR....... >A224 :     
    TV.CMDB.HCOLOR...... >A226 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A23E :     
    TV.ERROR.ROWS....... >A232 :     
    TV.ERROR.VISIBLE.... >A230 :     
    TV.FG99.IMG.PTR..... >A238 :     
    TV.FJ.STACKPNT...... >A22E :     
    TV.FONT.PTR......... >A228 :     
    TV.FREE............. >A2DE :     
    TV.INIT............. >33CE :     
    TV.INIT.EXIT........ >341A :     
    TV.LINETERM......... >A23C :     
    TV.MARKCOLOR........ >A21E :     
    TV.PAD.STRING....... >34F6 :     
    TV.PAD.STRING.EXIT.. >3562 :     
    TV.PAD.STRING.LOOP.. >354C :     
    TV.PAD.STRING.PANIC. >355A :     
    TV.PANE.FOCUS....... >A22A :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3424 :     
    TV.RESET............ >618C :     
    TV.RESET.EXIT....... >61BA :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A222 :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A234 :     
    TV.SP2.STACK........ >A236 :     
    TV.SPECMSG.PTR...... >A23A :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >391E :     
    TV.TABS.TABLE.RL.... >392A :     
    TV.TASK.ONESHOT..... >A22C :     
    TV.TOPCOLOR......... >A21A :     
    TV.UINT16.MPY....... >34C0 :     
    TV.UINT16.PACK...... >3432 :     
    TV.UINT16.PACK.DONE. >34AC :     
    TV.UINT16.PACK.ERROR >34A4 :     
    TV.UINT16.PACK.EXIT. >34B0 :     
    TV.UINT16.PACK.LOOP. >347A :     
    TV.UINT16.UNPACK.... >34CA :     
    TV.UINT16.UNPACK.EXIT >34F0 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C8C :     
    TXT.AUTOINSERT...... >3968 :     
    TXT.BLOCK.CLIP...... >39F0 :     
    TXT.BLOCK.COPY...... >39BA :     
    TXT.BLOCK.DEL....... >39A6 :     
    TXT.BLOCK.INSIDE.... >3D22 :     
    TXT.BLOCK.MOVE...... >39CC :     
    TXT.BLOCK.PRINT..... >3A0A :     
    TXT.BLOCK.SAVE...... >39DE :     
    TXT.BOTTOM.......... >3956 :     
    TXT.CLEARMEM........ >3A1E :     
    TXT.CMDB.PROMPT..... >3D50 :     
    TXT.COLON........... >3954 :     
    TXT.COLORSCHEME..... >3D52 :     
    TXT.DONE.APPEND..... >3A68 :     
    TXT.DONE.CLIPBOARD.. >3ABC :     
    TXT.DONE.CLIPDEV.... >3ACC :     
    TXT.DONE.COPY....... >3A8A :     
    TXT.DONE.DELETE..... >3AAA :     
    TXT.DONE.INSERT..... >3A56 :     
    TXT.DONE.LOAD....... >3A46 :     
    TXT.DONE.PRINT...... >3A9A :     
    TXT.DONE.SAVE....... >3A7A :     
    TXT.FASTMODE........ >3ADA :     
    TXT.FILETYPE.DV80... >3B58 :     
    TXT.FILETYPE.NONE... >3C9A :     
    TXT.INSERT.......... >3962 :     
    TXT.IO.NOFILE....... >3CFE :     
    TXT.IOERR.LOAD...... >3CB6 :     
    TXT.IOERR.PRINT..... >3CE2 :     
    TXT.IOERR.SAVE...... >3CCC :     
    TXT.KB.............. >3B18 :     
    TXT.KEYMARKER....... >3C92 :     
    TXT.KEYS.BASIC1..... >3C5E :     
    TXT.KEYS.BLOCK...... >3BFA :     
    TXT.KEYS.BLOCKLOCK.. >3C36 :     
    TXT.KEYS.DEFAULT.... >3B66 :     
    TXT.KEYS.DEFAULTB... >3B78 :     
    TXT.KEYS.DEFAULTC... >3B96 :     
    TXT.KEYS.DEFAULTD... >3BC2 :     
    TXT.LINES........... >3B1C :     
    TXT.LOADING......... >3972 :     
    TXT.LOCKICON........ >3970 :     
    TXT.M1.............. >3B5E :     
    TXT.M2.............. >3B62 :     
    TXT.MEMFULL.LOAD.... >3D16 :     
    TXT.MSG.TIBASIC..... >3CA0 :     
    TXT.NEWFILE......... >3B22 :     
    TXT.NODISK.......... >3AE6 :     
    TXT.OVRWRITE........ >395C :     
    TXT.PICKER.ICON1.... >3D60 :     
    TXT.PICKER.ICON2.... >3D62 :     
    TXT.PRINTING........ >398A :     
    TXT.READDIR......... >3A32 :     
    TXT.SAVING.......... >397E :     
    TXT.SEARCHING....... >3998 :     
    TXT.SLASH........... >3952 :     
    TXT.STAR............ >396E :     
    TXT.TIB1............ >3B2E :     
    TXT.TIB2............ >3B3C :     
    TXT.TIB3............ >3B4A :     
    TXT.UNCRUNCHING..... >3AFA :     
    TXT.VERTLINE........ >3C90 :     
    TXT.WS1............. >3C94 :     
    TXT.WS2............. >3C96 :     
    TXT.WS4............. >3C9A :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E76 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2F9C :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >3092 :     
    XROM.FARJUMP.PUSH_RETURN >30A2 :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _FILE.RECORD.FOP.... >2E1E :     
    _FILE.RECORD.FOP.EXIT >2E70 :     
    _FILE.RECORD.FOP.OPTIMIZED >2E54 :     
    _FILE.RECORD.FOP.PAB >2E58 :     
    _IDX.ENTRY.DELETE.REORG >360C :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3614 :     
    _IDX.ENTRY.INSERT.REORG >3680 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3686 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36AE :     
    _IDX.SAMS.MAPCOLUMN.OFF >326C :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >329A :     
    _IDX.SAMS.MAPCOLUMN.ON >3238 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3262 :     
    _IDX.SAMSPAGE.GET... >32A6 :     
    _IDX.SAMSPAGE.GET.EXIT >32EC :     
    _MEM.SAMS.SET.BANKS. >60A2 :     
    _V2SAMS............. >6632 :     
    _V2SAMS.EXIT........ >6662 :     
