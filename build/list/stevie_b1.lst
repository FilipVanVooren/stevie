XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2025 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 251003-1953490
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0006                   copy 'equ.f18a.2480.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.2480.asm
0001               * FILE......: equ.f18a.2480.asm
0002               * Purpose...: F18a 24x80 mode
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 24x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0780     vdp.sit.size              equ  24*80   ; VDP SIT size 80 columns, 24 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0780     vdp.tat.size              equ  24*80   ; VDP TAT size 80 columns, 24 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      0017     pane.botrow               equ  23      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      1400     fh.vpab                   equ  >1400   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      000C     spfont  equ   >0c                   ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0041      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0042      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0043      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0044               
                   < equ.vdp.asm
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b1.asm
0031                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028      000C     tv.colorscheme.entries    equ 12       ; Entries in colorscheme table
0029               ;-----------------------------------------------------------------
0030               ;   Dialog ID's
0031               ;-----------------------------------------------------------------
0032      000A     id.dialog.load            equ  10      ; "Load file"
0033      000B     id.dialog.insert          equ  11      ; "Insert file"
0034      000C     id.dialog.append          equ  12      ; "Append file"
0035      000D     id.dialog.cat             equ  13      ; "Catalog"
0036      000F     id.dialog.save            equ  15      ; "Save file"
0037      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0038      0011     id.dialog.print           equ  17      ; "Print file"
0039      0012     id.dialog.printblock      equ  18      ; "Print block"
0040      0013     id.dialog.opt.clip        equ  19      ; "Configure clipboard"
0041      0014     id.dialog.goto            equ  20      ; "Goto"
0042      001E     id.dialog.find            equ  30      ; "Find"
0043      0028     id.dialog.cart.fg99       equ  40      ; "FinalGROM 99 Cartridge"
0044               ;-----------------------------------------------------------------
0045               ;   Dialog ID's >= 100 indicate that command prompt should be
0046               ;   hidden and no characters added to CMDB keyboard buffer.
0047               ;-----------------------------------------------------------------
0048      0064     id.dialog.menu            equ  100     ; "Main Menu"
0049      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0050      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0051      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0052      0068     id.dialog.help            equ  104     ; "About"
0053      0069     id.dialog.file            equ  105     ; "File"
0054      006A     id.dialog.cart.type       equ  106     ; "Cartridge Type"
0055      006B     id.dialog.basic           equ  107     ; "TI Basic"
0056      006C     id.dialog.opt             equ  108     ; "Configure"
0057      006D     id.dialog.editor          equ  109     ; "Configure editor"
0058      006E     id.dialog.font            equ  110     ; "Configure font"
0059      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0060      0072     id.dialog.run             equ  114     ; "Run program image (EA5)"
0061      0078     id.dialog.find.browse     equ  120     ; "Find - Search results"
0062               ;-----------------------------------------------------------------
0063               ; Suffix characters for clipboards
0064               ;-----------------------------------------------------------------
0065      3100     clip1                     equ  >3100   ; '1'
0066      3200     clip2                     equ  >3200   ; '2'
0067      3300     clip3                     equ  >3300   ; '3'
0068      3400     clip4                     equ  >3400   ; '4'
0069      3500     clip5                     equ  >3500   ; '5'
0070               ;-----------------------------------------------------------------
0071               ; Keyboard flags in Stevie
0072               ;-----------------------------------------------------------------
0073      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0074               ;-----------------------------------------------------------------
0075               ; File work mode
0076               ;-----------------------------------------------------------------
0077      0001     id.file.loadfile          equ  1       ; Load file
0078      0002     id.file.insertfile        equ  2       ; Insert file
0079      0003     id.file.appendfile        equ  3       ; Append file
0080      0004     id.file.savefile          equ  4       ; Save file
0081      0005     id.file.saveblock         equ  5       ; Save block to file
0082      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0083      0007     id.file.printfile         equ  7       ; Print file
0084      0008     id.file.printblock        equ  8       ; Print block
0085               ;-----------------------------------------------------------------
0086               ; Special file indicator
0087               ;-----------------------------------------------------------------
0088      0000     id.special.normal         equ  0       ; Normal file
0089      0002     id.special.readonly       equ  2       ; Read-only file
0090      0003     id.special.basic          equ  3       ; TI Basic program
0091               ;-----------------------------------------------------------------
0092               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0093               ;-----------------------------------------------------------------
0094      A000     core1.top         equ  >a000           ; Structure begin
0095      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0096      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0097      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0098      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0099      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0100      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0101      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0102      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0103      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0104      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0105      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0106      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0107      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0108      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0109      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0110      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0111      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0112      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0113      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0114      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0115      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0116      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0117      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0118      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0119      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0120      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0121      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0122      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0123                                 ;--------------------------------------------
0124                                 ; TI Basic related
0125                                 ;--------------------------------------------
0126      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0127      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0128      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0129      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0130      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0131      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0132      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0133      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0134      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0135      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0136      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0137      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0138      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0139      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0140      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0141      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0142      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0143      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0144      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0145      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0146      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0147      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0148      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0149      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0150      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0151      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0152      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0153      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0154      A100     core1.free        equ  core1.top + 256 ; End of structure
0155               ;-----------------------------------------------------------------
0156               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0157               ;-----------------------------------------------------------------
0158      A100     core2.top         equ  >a100           ; Structure begin
0159      A100     rambuf            equ  core2.top       ; RAM workbuffer
0160      A200     core2.free        equ  core2.top + 256 ; End of structure
0161               ;-----------------------------------------------------------------
0162               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0163               ;-----------------------------------------------------------------
0164      A200     tv.struct         equ  >a200           ; Structure begin
0165      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0166      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0167      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0168      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0169      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0170      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0171      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0172      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0173      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0174      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0175      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0176      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0177      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer
0178      A21A     tv.topcolor       equ  tv.struct + 26  ; FG/BG-color top status line
0179      A21C     tv.botcolor       equ  tv.struct + 28  ; FG/BG-color bottom status line
0180      A21E     tv.markcolor      equ  tv.struct + 30  ; FG/BG-color marked lines in framebuffer
0181      A220     tv.busycolor      equ  tv.struct + 32  ; FG/BG-color bottom line when busy
0182      A222     tv.rulercolor     equ  tv.struct + 34  ; FG/BG-color ruler line
0183      A224     tv.cmdb.color     equ  tv.struct + 36  ; FG/BG-color cmdb lines
0184      A226     tv.cmdb.hcolor    equ  tv.struct + 38  ; FG/BG-color cmdb header line
0185      A228     tv.font.ptr       equ  tv.struct + 40  ; Pointer to font (in ROM bank 6 or RAM)
0186      A22A     tv.pane.focus     equ  tv.struct + 42  ; Identify pane that has focus
0187      A22C     tv.task.oneshot   equ  tv.struct + 44  ; Pointer to one-shot routine
0188      A22E     tv.fj.stackpnt    equ  tv.struct + 46  ; Pointer to farjump return stack
0189      A230     tv.error.visible  equ  tv.struct + 48  ; Error pane visible
0190      A232     tv.error.rows     equ  tv.struct + 50  ; Number of rows in error pane
0191      A234     tv.sp2.conf       equ  tv.struct + 52  ; Backup of SP2 config register
0192      A236     tv.sp2.stack      equ  tv.struct + 54  ; Backup of SP2 stack register
0193      A238     tv.fg99.img.ptr   equ  tv.struct + 56  ; Pointer to Final GROM cartridge to load
0194      A23A     tv.specmsg.ptr    equ  tv.struct + 58  ; Pointer to special message above botrow
0195      A23C     tv.lineterm       equ  tv.struct + 60  ; Default line termination character(s)
0196      A23E     tv.show.linelen   equ  tv.struct + 62  ; Show line length in status line
0197      A240     tv.error.msg      equ  tv.struct + 64  ; Error message (max. 160 characters)
0198      A2E0     tv.free           equ  tv.struct + 224 ; End of structure
0199               ;-----------------------------------------------------------------
0200               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0201               ;-----------------------------------------------------------------
0202      A300     fb.struct         equ  >a300           ; Structure begin
0203      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0204      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0205      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0206                                                      ; line X in editor buffer).
0207      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0208                                                      ; (offset 0 .. @fb.scrrows)
0209      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0210      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0211      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0212      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0213      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0214      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0215      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0216      A316     fb.prevcursor     equ  fb.struct + 22  ; Previous cursor position
0217      A318     fb.yxsave         equ  fb.struct + 24  ; Copy of cursor YX for toggling fb/cmdb
0218      A31A     fb.dirty          equ  fb.struct + 26  ; Frame buffer dirty flag
0219      A31C     fb.status.dirty   equ  fb.struct + 28  ; Status line(s) dirty flag
0220      A31E     fb.scrrows        equ  fb.struct + 30  ; Rows on physical screen for framebuffer
0221      A320     fb.scrrows.max    equ  fb.struct + 32  ; Max # of rows on physical screen for fb
0222      A322     fb.ruler.sit      equ  fb.struct + 34  ; 80 char ruler  (no length-prefix!)
0223      A372     fb.ruler.tat      equ  fb.struct + 114 ; 80 char colors (no length-prefix!)
0224      A3C2     fb.free           equ  fb.struct + 194 ; End of structure
0225               ;-----------------------------------------------------------------
0226               ; File handle structure                @>a400-a4ff   (256 bytes)
0227               ;-----------------------------------------------------------------
0228      A400     fh.struct         equ  >a400           ; stevie file handling structures
0229               ;*******************************************************************************
0230               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0231               ;*******************************************************************************
0232      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0233      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0234      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0235      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0236      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0237      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0238      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0239      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0240      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0241      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0242      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0243      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0244      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0245      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0246      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0247      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0248      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0249      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0250      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0251      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0252      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0253      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0254      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0255      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0256      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0257      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0258      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0259      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0260      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0261      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0262      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0263      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0264      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0265      A464     fh.temp3          equ  fh.struct + 100 ; Temporary variable 3
0266      A466     fh.pabtpl.ptr     equ  fh.struct + 102 ; Pointer to PAB template in ROM/RAM
0267      A468     fh.dir.rec.ptr    equ  fh.struct + 104 ; Pointer to directory record
0268      A46A     fh.circbreaker    equ  fh.struct + 106 ; Circuit breaker. Halt file operation
0269      A46C     fh.membuffer      equ  fh.struct + 108 ; 80 bytes file memory buffer
0270      A4BC     fh.free           equ  fh.struct + 188 ; End of structure
0271               ;-----------------------------------------------------------------
0272               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0273               ; Overloads file handle structure
0274               ;-----------------------------------------------------------------
0275      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0276      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0277               ;-----------------------------------------------------------------
0278               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0279               ;-----------------------------------------------------------------
0280      A500     edb.struct        equ  >a500            ; Begin structure
0281      A500     edb.top.ptr       equ  edb.struct       ; Pointer to editor buffer
0282      A502     edb.index.ptr     equ  edb.struct + 2   ; Pointer to index
0283      A504     edb.lines         equ  edb.struct + 4   ; Total lines in editor buffer - 1
0284      A506     edb.dirty         equ  edb.struct + 6   ; Editor buffer dirty (Text changed!)
0285      A508     edb.next_free.ptr equ  edb.struct + 8   ; Pointer to next free line
0286      A50A     edb.insmode       equ  edb.struct + 10  ; Insert mode (>ffff=insert)
0287      A50C     edb.autoinsert    equ  edb.struct + 12  ; Auto-insert on ENTER flag (>ffff=on)
0288      A50E     edb.block.m1      equ  edb.struct + 14  ; Block start line marker (>ffff=unset)
0289      A510     edb.block.m2      equ  edb.struct + 16  ; Block end line marker (>ffff=unset)
0290      A512     edb.block.var     equ  edb.struct + 18  ; Local var used in block operation
0291      A514     edb.filename.ptr  equ  edb.struct + 20  ; Pointer to length-prefixed string
0292                                                       ; with current filename.
0293      A516     edb.filetype.ptr  equ  edb.struct + 22  ; Pointer to length-prefixed string
0294                                                       ; with current file type.
0295      A518     edb.sams.page     equ  edb.struct + 24  ; Current SAMS page
0296      A51A     edb.sams.lopage   equ  edb.struct + 26  ; Lowest SAMS page in use
0297      A51C     edb.sams.hipage   equ  edb.struct + 28  ; Highest SAMS page in use
0298      A51E     edb.bk.fb.topline equ  edb.struct + 30  ; Backup of @fb.topline before opening
0299                                                       ; other file from special file.
0300      A520     edb.bk.fb.row     equ  edb.struct + 32  ; Backup of @fb.row before opening
0301                                                       ; other file from special file.
0302      A522     edb.special.file  equ  edb.struct + 34  ; Special file in editor buffer
0303      A524     edb.lineterm      equ  edb.struct + 36  ; Line termination character
0304                                                       ; MSB: Mode on (>ff) or off (>00)
0305                                                       ; LSB: Line termination character
0306      A526     edb.filename      equ  edb.struct + 38  ; 80 characters inline buffer reserved
0307                                                       ; for filename, but not always used.
0308      A576     edb.srch.str      equ  edb.struct + 118 ; 80 characters search string buffer
0309      A5C6     edb.srch.strlen   equ  edb.struct + 198 ; Length of search string
0310      A5C8     edb.srch.startln  equ  edb.struct + 200 ; Start line in editor buffer for search
0311      A5CA     edb.srch.endln    equ  edb.struct + 202 ; End line in editor buffer for search
0312      A5CC     edb.srch.worklen  equ  edb.struct + 204 ; Length of unpacked line in work buffer
0313      A5CE     edb.srch.matches  equ  edb.struct + 206 ; Number of search matches
0314      A5D0     edb.srch.curmatch equ  edb.struct + 208 ; Current index entry in search matches
0315      A5D2     edb.srch.row.ptr  equ  edb.struct + 210 ; Pointer entry in rows search index
0316      A5D4     edb.srch.col.ptr  equ  edb.struct + 212 ; Pointer entry in cols search index
0317      A5D6     edb.srch.offset   equ  edb.struct + 214 ; Offset into current row index entry
0318      A5D8     edb.srch.matchcol equ  edb.struct + 216 ; Column of search match in current row
0319      A5DA     edb.locked        equ  edb.struct + 218 ; Editor locked flag (>ffff=locked)
0320      A5DC     edb.free          equ  edb.struct + 220 ; End of structure
0321               ;-----------------------------------------------------------------
0322               ; Index structure                      @>a600-a6ff   (256 bytes)
0323               ;-----------------------------------------------------------------
0324      A600     idx.struct        equ  >a600           ; stevie index structure
0325      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0326      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0327      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0328      A606     idx.free          equ  idx.struct + 6  ; End of structure
0329               ;-----------------------------------------------------------------
0330               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0331               ;-----------------------------------------------------------------
0332      A700     cmdb.struct       equ  >a700             ; Command Buffer structure
0333      A700     cmdb.top.ptr      equ  cmdb.struct       ; Pointer to command buffer (history)
0334      A702     cmdb.visible      equ  cmdb.struct + 2   ; Command buffer visible? (>ffff=yes)
0335      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4   ; Copy of FB WYX if entering cmdb pane
0336      A706     cmdb.scrrows      equ  cmdb.struct + 6   ; Current size of CMDB pane (in rows)
0337      A708     cmdb.default      equ  cmdb.struct + 8   ; Default size of CMDB pane (in rows)
0338      A70A     cmdb.cursor       equ  cmdb.struct + 10  ; Screen YX of cursor in CMDB pane
0339      A70C     cmdb.yxsave       equ  cmdb.struct + 12  ; Copy of WYX
0340      A70E     cmdb.free1        equ  cmdb.struct + 14  ; **free**
0341      A710     cmdb.prevcursor   equ  cmdb.struct + 16  ; Previous cursor position
0342      A712     cmdb.vdptop       equ  cmdb.struct + 18  ; VDP addr CMDB pane header line (TAT)
0343      A714     cmdb.yxtop        equ  cmdb.struct + 20  ; YX pos CMDB pane header line
0344      A716     cmdb.yxprompt     equ  cmdb.struct + 22  ; YX pos of command buffer prompt
0345      A718     cmdb.column       equ  cmdb.struct + 24  ; Current column in command buffer pane
0346      A71A     cmdb.length       equ  cmdb.struct + 26  ; Length of current row in CMDB
0347      A71C     cmdb.lines        equ  cmdb.struct + 28  ; Total lines in CMDB
0348      A71E     cmdb.dirty        equ  cmdb.struct + 30  ; Command buffer dirty (Text changed!)
0349      A720     cmdb.dialog       equ  cmdb.struct + 32  ; Dialog identifier
0350      A722     cmdb.dialog.var   equ  cmdb.struct + 34  ; Dialog private variable or pointer
0351      A724     cmdb.panhead      equ  cmdb.struct + 36  ; Pointer string pane header
0352      A726     cmdb.paninfo      equ  cmdb.struct + 38  ; Pointer string pane info (1st line)
0353      A728     cmdb.panhint      equ  cmdb.struct + 40  ; Pointer string pane hint (2nd line)
0354      A72A     cmdb.panhint2     equ  cmdb.struct + 42  ; Pointer string pane hint (extra)
0355      A72C     cmdb.panmarkers   equ  cmdb.struct + 44  ; Pointer key marker list  (3rd line)
0356      A72E     cmdb.pankeys      equ  cmdb.struct + 46  ; Pointer string pane keys (stat line)
0357      A730     cmdb.action.ptr   equ  cmdb.struct + 48  ; Pointer function to execute
0358      A732     cmdb.cmdall       equ  cmdb.struct + 50  ; Current command including length-byte
0359      A732     cmdb.cmdlen       equ  cmdb.struct + 50  ; Length of current command (MSB byte!)
0360      A733     cmdb.cmd          equ  cmdb.struct + 51  ; Current command (80 bytes max.)
0361      A784     cmdb.panhead.buf  equ  cmdb.struct + 132 ; String buffer for pane header
0362      A7B6     cmdb.dflt.fname   equ  cmdb.struct + 182 ; Default for filename
0363      A800     cmdb.free         equ  cmdb.struct + 256 ; End of structure
0364               ;-----------------------------------------------------------------
0365               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0366               ;-----------------------------------------------------------------
0367      A900     sp2.stktop        equ  >a900           ; \
0368                                                      ; | The stack grows from high memory
0369                                                      ; | towards low memory.
0370                                                      ; |
0371                                                      ; | Stack leaking is checked in SP2
0372                                                      ; | user hook "edkey.keyscan.hook"
0373                                                      ; /
0374               ;-----------------------------------------------------------------
0375               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0376               ;-----------------------------------------------------------------
0377      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0378                                                      ; / stored in cartridge ROM bank7.asm
0379               
0380      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0381                                                      ; | scratchpad backup/restore routines.
0382                                                      ; /
0383               
0384      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0385      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0386                                                      ; calling TI Basic/External programs
0387               ;-----------------------------------------------------------------
0388               ; Farjump return stack                 @>af00-afff     (256 bytes)
0389               ;-----------------------------------------------------------------
0390      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0391                                                      ; Grows downwards from high to low.
0392               ;-----------------------------------------------------------------
0393               ; Index                                @>b000-bfff    (4096 bytes)
0394               ;-----------------------------------------------------------------
0395      B000     idx.top           equ  >b000           ; Top of index
0396      1000     idx.size          equ  4096            ; Index size
0397               ;-----------------------------------------------------------------
0398               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0399               ;-----------------------------------------------------------------
0400      C000     edb.top           equ  >c000           ; Editor buffer high memory
0401      1000     edb.size          equ  4096            ; Editor buffer size
0402               ;-----------------------------------------------------------------
0403               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0404               ;-----------------------------------------------------------------
0405      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0406      0960     fb.size           equ  80*30           ; Frame buffer size
0407      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0408                                                      ; / >d960->dcff
0409               ;-----------------------------------------------------------------
0410               ; Defaults area                        @>de00-dfff     (512 bytes)
0411               ;-----------------------------------------------------------------
0412      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0413      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0414      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0415               ;-----------------------------------------------------------------
0416               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0417               ;-----------------------------------------------------------------
0418      E000     cat.top           equ  >e000           ; Top of file catalog
0419      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0420      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0421      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0422      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0423      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0424      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0425      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0426      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0427      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0428      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0429      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0430      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0431               ;-----------------------------------------------------------------
0432               ; Directory/File catalog pointers and numbers
0433               ;-----------------------------------------------------------------
0434      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0435      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0436      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0437      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0438      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0439      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0440      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0441      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0442      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0443      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0444      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0445      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0446      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0447      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0448      E378     cat.volsize       equ  cat.top + 888   ; Volume size
0449      E37A     cat.volused       equ  cat.top + 890   ; Volume used
0450      E37C     cat.volfree       equ  cat.top + 892   ; Volume free
0451      E37E     cat.free1         equ  cat.top + 894   ; **free** up to 954
0452               ;-----------------------------------------------------------------
0453               ; Directory/File catalog strings (always length byte included)
0454               ;-----------------------------------------------------------------
0455      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0456      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0457      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0458      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0459      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0460      0F00     cat.size          equ  3840            ; Catalog total size
0461               ;-----------------------------------------------------------------
0462               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0463               ;-----------------------------------------------------------------
0464      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0465      0100     cmdb.size         equ  256             ; Command buffer size
0466               ;-----------------------------------------------------------------
0467               ; Heap & Strings area                  @>f000-f0ff     (256 bytes)
0468               ;-----------------------------------------------------------------
0469      F000     heap.top          equ  >f000           ; 80 Current filename
0470      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0471      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0472               ;-----------------------------------------------------------------
0473               ; Search results index for rows        @>f100-f8ff    (2048 bytes)
0474               ;-----------------------------------------------------------------
0475      F100     edb.srch.idx.rtop   equ  >f100         ; Search match index for rows
0476      0800     edb.srch.idx.rsize  equ  2048          ; Size of search match index for rows
0477               ;-----------------------------------------------------------------
0478               ; Search results index for columns     @>f900-fcff    (1024 bytes)
0479               ;-----------------------------------------------------------------
0480      F900     edb.srch.idx.ctop   equ  >f900         ; Search match index for columns
0481      0400     edb.srch.idx.csize  equ  1024          ; Size of search match index for columns
0482               ;-----------------------------------------------------------------
0483               ; Stevie specific equates
0484               ;-----------------------------------------------------------------
0485      0000     fh.fopmode.none      equ  0            ; No file operation in progress
0486      0001     fh.fopmode.readfile  equ  1            ; Read file from disk to memory
0487      0002     fh.fopmode.writefile equ  2            ; Save file from memory to disk
0488      0006     cmdb.rows            equ  6            ; Number of rows in CMDB pane
0489      A028     rom0_kscan_out       equ  keycode1     ; W here to store value of key pressed
0490      9900     tv.colorize.reset    equ  >9900        ; Colorization off
0491      00FE     tv.1timeonly         equ  254          ; One-time only flag indicator
0492      0100     tv.sams.maxpage      equ  256          ; Max SAMS pages supported
                   < stevie_b1.asm
0032                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0033                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      004F     key.uc.o      equ >4f               ; O
0036      0050     key.uc.p      equ >50               ; P
0037      0051     key.uc.q      equ >51               ; Q
0038      0052     key.uc.r      equ >52               ; R
0039      0053     key.uc.s      equ >53               ; S
0040      0054     key.uc.t      equ >54               ; T
0041      0055     key.uc.u      equ >55               ; U
0042      0056     key.uc.v      equ >56               ; V
0043      0057     key.uc.w      equ >57               ; W
0044      0058     key.uc.x      equ >58               ; X
0045      0059     key.uc.y      equ >59               ; Y
0046      005A     key.uc.z      equ >5a               ; Z
0047      0061     key.lc.a      equ >61               ; a
0048      00A2     key.lc.b      equ >a2               ; b
0049      00A3     key.lc.c      equ >a3               ; c
0050      00A4     key.lc.d      equ >a4               ; d
0051      00A5     key.lc.e      equ >a5               ; e
0052      00A6     key.lc.f      equ >a6               ; f
0053      00A7     key.lc.g      equ >a7               ; g
0054      00A8     key.lc.h      equ >a8               ; h
0055      00A9     key.lc.i      equ >a9               ; i
0056      00AA     key.lc.j      equ >aa               ; j
0057      00AB     key.lc.k      equ >ab               ; k
0058      00AC     key.lc.l      equ >ac               ; l
0059      00AD     key.lc.m      equ >ad               ; m
0060      006E     key.lc.n      equ >6e               ; n
0061      006F     key.lc.o      equ >6f               ; o
0062      0070     key.lc.p      equ >70               ; p
0063      0071     key.lc.q      equ >71               ; q
0064      0072     key.lc.r      equ >72               ; r
0065      0073     key.lc.s      equ >73               ; s
0066      0074     key.lc.t      equ >74               ; t
0067      0075     key.lc.u      equ >75               ; u
0068      0076     key.lc.v      equ >76               ; v
0069      0077     key.lc.w      equ >77               ; w
0070      0078     key.lc.x      equ >78               ; x
0071      0079     key.lc.y      equ >79               ; y
0072      007A     key.lc.z      equ >7a               ; z
0073               *---------------------------------------------------------------
0074               * Keyboard scancodes - Function keys
0075               *-------------|---------------------|---------------------------
0076      00BC     key.fctn.0    equ >bc               ; fctn + 0
0077      0003     key.fctn.1    equ >03               ; fctn + 1
0078      0004     key.fctn.2    equ >04               ; fctn + 2
0079      0007     key.fctn.3    equ >07               ; fctn + 3
0080      0002     key.fctn.4    equ >02               ; fctn + 4
0081      000E     key.fctn.5    equ >0e               ; fctn + 5
0082      000C     key.fctn.6    equ >0c               ; fctn + 6
0083      0001     key.fctn.7    equ >01               ; fctn + 7
0084      0006     key.fctn.8    equ >06               ; fctn + 8
0085      000F     key.fctn.9    equ >0f               ; fctn + 9
0086      0000     key.fctn.a    equ >00               ; fctn + a
0087      00BE     key.fctn.b    equ >be               ; fctn + b
0088      0000     key.fctn.c    equ >00               ; fctn + c
0089      0009     key.fctn.d    equ >09               ; fctn + d
0090      000B     key.fctn.e    equ >0b               ; fctn + e
0091      0000     key.fctn.f    equ >00               ; fctn + f
0092      0000     key.fctn.g    equ >00               ; fctn + g
0093      00BF     key.fctn.h    equ >bf               ; fctn + h
0094      0000     key.fctn.i    equ >00               ; fctn + i
0095      00C0     key.fctn.j    equ >c0               ; fctn + j
0096      00C1     key.fctn.k    equ >c1               ; fctn + k
0097      00C2     key.fctn.l    equ >c2               ; fctn + l
0098      00C3     key.fctn.m    equ >c3               ; fctn + m
0099      00C4     key.fctn.n    equ >c4               ; fctn + n
0100      0000     key.fctn.o    equ >00               ; fctn + o
0101      0000     key.fctn.p    equ >00               ; fctn + p
0102      00C5     key.fctn.q    equ >c5               ; fctn + q
0103      0000     key.fctn.r    equ >00               ; fctn + r
0104      0008     key.fctn.s    equ >08               ; fctn + s
0105      0000     key.fctn.t    equ >00               ; fctn + t
0106      0000     key.fctn.u    equ >00               ; fctn + u
0107      007F     key.fctn.v    equ >7f               ; fctn + v
0108      007E     key.fctn.w    equ >7e               ; fctn + w
0109      000A     key.fctn.x    equ >0a               ; fctn + x
0110      00C6     key.fctn.y    equ >c6               ; fctn + y
0111      0000     key.fctn.z    equ >00               ; fctn + z
0112               *---------------------------------------------------------------
0113               * Keyboard scancodes - Function keys extra
0114               *---------------------------------------------------------------
0115      00B9     key.fctn.dot    equ >b9             ; fctn + .
0116      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0117      0005     key.fctn.plus   equ >05             ; fctn + +
0118               *---------------------------------------------------------------
0119               * Keyboard scancodes - control keys
0120               *-------------|---------------------|---------------------------
0121      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0122      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0123      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0124      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0125      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0126      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0127      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0128      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0129      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0130      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0131      0081     key.ctrl.a    equ >81               ; ctrl + a
0132      0082     key.ctrl.b    equ >82               ; ctrl + b
0133      0083     key.ctrl.c    equ >83               ; ctrl + c
0134      0084     key.ctrl.d    equ >84               ; ctrl + d
0135      0085     key.ctrl.e    equ >85               ; ctrl + e
0136      0086     key.ctrl.f    equ >86               ; ctrl + f
0137      0087     key.ctrl.g    equ >87               ; ctrl + g
0138      0088     key.ctrl.h    equ >88               ; ctrl + h
0139      0089     key.ctrl.i    equ >89               ; ctrl + i
0140      008A     key.ctrl.j    equ >8a               ; ctrl + j
0141      008B     key.ctrl.k    equ >8b               ; ctrl + k
0142      008C     key.ctrl.l    equ >8c               ; ctrl + l
0143      008D     key.ctrl.m    equ >8d               ; ctrl + m
0144      008E     key.ctrl.n    equ >8e               ; ctrl + n
0145      008F     key.ctrl.o    equ >8f               ; ctrl + o
0146      0090     key.ctrl.p    equ >90               ; ctrl + p
0147      0091     key.ctrl.q    equ >91               ; ctrl + q
0148      0092     key.ctrl.r    equ >92               ; ctrl + r
0149      0093     key.ctrl.s    equ >93               ; ctrl + s
0150      0094     key.ctrl.t    equ >94               ; ctrl + t
0151      0095     key.ctrl.u    equ >95               ; ctrl + u
0152      0096     key.ctrl.v    equ >96               ; ctrl + v
0153      0097     key.ctrl.w    equ >97               ; ctrl + w
0154      0098     key.ctrl.x    equ >98               ; ctrl + x
0155      0099     key.ctrl.y    equ >99               ; ctrl + y
0156      009A     key.ctrl.z    equ >9a               ; ctrl + z
0157               *---------------------------------------------------------------
0158               * Keyboard scancodes - control keys extra
0159               *---------------------------------------------------------------
0160      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0161      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0162      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0163      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0164      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0165               *---------------------------------------------------------------
0166               * Special keys
0167               *---------------------------------------------------------------
0168      000D     key.enter     equ >0d               ; enter
0169      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0034               
0035               ***************************************************************
0036               * BANK 1
0037               ********|*****|*********************|**************************
0038      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0039                       aorg  >6000
0040                       save  >6000,>8000           ; Save bank
0041                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE x.x.x RESET MEM"
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Change to rom.program2 to skip menu option "STEVIE x.x.x RESET MEM"
0024                       ;
0025 6006 6026             data  rom.program2          ; 6  \ Pointer to program list         >6006
0026                                                   ; 7  /
0027               
0028 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0029                                                   ; 9  /
0030               
0031 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0032                                                   ; 11 /
0033               
0034                       ;-----------------------------------------------------------------------
0035                       ; Program list entry
0036                       ;-----------------------------------------------------------------------
0037               rom.program1:
0038 600C 6026             data  rom.program2          ; 12 \ Next program list entry         >600c
0039                                                   ; 13 / (no more items following)
0040               
0041 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0042                                                   ; 15 /
0043               
0044 6010 1553             stri 'STEVIE 1.8.2 MEMRESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 312E     
     601A 382E     
     601C 3220     
     601E 4D45     
     6020 4D52     
     6022 4553     
     6024 4554     
0045                       even
0046               
0047                       ;-----------------------------------------------------------------------
0048                       ; Program list entry
0049                       ;-----------------------------------------------------------------------
0050               rom.program2:
0051 6026 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0052                                                   ; 13 / (no more items following)
0053               
0054 6028 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0055                                                   ; 15 /
0056               
0060               
0064               
0066 602A 0C53                 stri 'STEVIE 1.8.2'
     602C 5445     
     602E 5649     
     6030 4520     
     6032 312E     
     6034 382E     
     6036 32       
0068               
                   < stevie_b1.asm
0042               
0043               ***************************************************************
0044               * Step 1: Switch to bank 0 (uniform code accross all banks)
0045               ********|*****|*********************|**************************
0046                       aorg  kickstart.code1       ; >6040
0047 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0048               ***************************************************************
0049               * Step 2: Satisfy assembler, must know relocated code
0050               ********|*****|*********************|**************************
0051                       aorg  >2000                 ; Relocate to >2000
0052                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FCA     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7FF0     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 1024  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 101E  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1018  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 100B  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               ***************************************************************
0172               * file.load - Load binary file into VDP memory
0173               ***************************************************************
0174               *  bl   @file.load
0175               *       data P0
0176               *--------------------------------------------------------------
0177               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0178               *--------------------------------------------------------------
0179               *  bl   @xfile.load
0180               *
0181               *  R0 = Address of PAB in VDP RAM
0182               *--------------------------------------------------------------
0183               *  Output:
0184               *  tmp0     = Copy of VDP PAB byte 1 after operation
0185               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0186               *  tmp2 LSB = Copy of status register after operation
0187               ********|*****|*********************|**************************
0188               file.load:
0189 2E12 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0190               *--------------------------------------------------------------
0191               * Initialisation
0192               *--------------------------------------------------------------
0193               xfile.load:
0194 2E14 0649  22         dect  stack
0195 2E16 C64B  38         mov   r11,*stack            ; Save return address
0196               
0197 2E18 0205  24         li    tmp1,io.op.load       ; io.op.load
     2E1A 0005     
0198 2E1C 1005  14         jmp   _file.record.fop      ; Do file operation
0199               
0200               
0201               file.record.seek:
0202 2E1E 1000  14         nop                         ; Not yet supported
0203               
0204               file.image.save:
0205 2E20 1000  14         nop                         ; Not yet supported
0206               
0207               file.delete:
0208 2E22 1000  14         nop                         ; Not yet supported
0209               
0210               file.rename:
0211 2E24 1000  14         nop                         ; Not yet supported
0212               
0213               file.status:
0214 2E26 1000  14         nop
0215               
0216               
0217               
0218               ***************************************************************
0219               * _file.record.fop - File operation
0220               ***************************************************************
0221               * Called internally via JMP/B by file operations
0222               *--------------------------------------------------------------
0223               *  Input:
0224               *  r0   = Address of PAB in VDP RAM
0225               *  r1   = File type/mode
0226               *  tmp1 = File operation opcode
0227               *
0228               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0229               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0230               *--------------------------------------------------------------
0231               *  Output:
0232               *  tmp0     = Copy of VDP PAB byte 1 after operation
0233               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0234               *  tmp2 LSB = Copy of status register after operation
0235               *--------------------------------------------------------------
0236               *  Register usage:
0237               *  r0, r1, tmp0, tmp1, tmp2
0238               *--------------------------------------------------------------
0239               *  Remarks
0240               *  Private, only to be called from inside fio_level3 module
0241               *  via jump or branch instruction.
0242               *
0243               *  Uses @waux1 for backup/restore of memory word @>8322
0244               ********|*****|*********************|**************************
0245               _file.record.fop:
0246                       ;------------------------------------------------------
0247                       ; Write to PAB required?
0248                       ;------------------------------------------------------
0249 2E28 C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E2A A436     
0250                       ;------------------------------------------------------
0251                       ; Set file opcode in VDP PAB
0252                       ;------------------------------------------------------
0253 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0254               
0255 2E2E A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E30 A44E     
0256                                                   ; >00 = Data buffer in VDP RAM
0257                                                   ; >40 = Data buffer in CPU RAM
0258               
0259 2E32 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E34 22CC     
0260                                                   ; \ i  tmp0 = VDP target address
0261                                                   ; / i  tmp1 = Byte to write
0262                       ;------------------------------------------------------
0263                       ; Set file type/mode in VDP PAB
0264                       ;------------------------------------------------------
0265 2E36 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0266 2E38 0584  22         inc   tmp0                  ; Next byte in PAB
0267 2E3A C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E3C A44C     
0268               
0269 2E3E 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E40 22CC     
0270                                                   ; \ i  tmp0 = VDP target address
0271                                                   ; / i  tmp1 = Byte to write
0272                       ;------------------------------------------------------
0273                       ; Prepare for DSRLNK
0274                       ;------------------------------------------------------
0275 2E42 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E44 0009     
0276 2E46 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E48 8356     
0277               *--------------------------------------------------------------
0278               * Call DSRLINK for doing file operation
0279               *--------------------------------------------------------------
0280 2E4A C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E4C 8322     
     2E4E 833C     
0281               
0282 2E50 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E52 A42A     
0283 2E54 1504  14         jgt   _file.record.fop.optimized
0284                                                   ; Optimized version
0285               
0286                       ;------------------------------------------------------
0287                       ; First IO call. Call standard DSRLNK
0288                       ;------------------------------------------------------
0289 2E56 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E58 2C4A     
0290 2E5A 0008                   data >8               ; \ i  p0 = >8 (DSR)
0291                                                   ; / o  r0 = Copy of VDP PAB byte 1
0292 2E5C 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0293               
0294                       ;------------------------------------------------------
0295                       ; Recurring IO call. Call optimized DSRLNK
0296                       ;------------------------------------------------------
0297               _file.record.fop.optimized:
0298 2E5E 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E60 2D7A     
0299               
0300               *--------------------------------------------------------------
0301               * Return PAB details to caller
0302               *--------------------------------------------------------------
0303               _file.record.fop.pab:
0304 2E62 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0305                                                   ; Upon DSRLNK return status register EQ bit
0306                                                   ; 1 = No file error
0307                                                   ; 0 = File error occured
0308               
0309 2E64 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E66 833C     
     2E68 8322     
0310               *--------------------------------------------------------------
0311               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0312               *--------------------------------------------------------------
0313 2E6A C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E6C A436     
0314 2E6E 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E70 0005     
0315 2E72 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E74 22E4     
0316 2E76 C144  30         mov   tmp0,tmp1             ; Move to destination
0317               *--------------------------------------------------------------
0318               * Get PAB byte 1 from VDP ram into tmp0 (status)
0319               *--------------------------------------------------------------
0320 2E78 C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0321                                                   ; as returned by DSRLNK
0322               *--------------------------------------------------------------
0323               * Exit
0324               *--------------------------------------------------------------
0325               ; If an error occured during the IO operation, then the
0326               ; equal bit in the saved status register (=tmp2) is set to 1.
0327               ;
0328               ; Upon return from this IO call you should basically test with:
0329               ;       coc   @wbit2,tmp2           ; Equal bit set?
0330               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0331               ;
0332               ; Then look for further details in the copy of VDP PAB byte 1
0333               ; in register tmp0, bits 13-15
0334               ;
0335               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0336               ;                                   ; calls, skip for type >A subprograms!)
0337               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0338               ;       jeq   my_error_handler
0339               *--------------------------------------------------------------
0340               _file.record.fop.exit:
0341 2E7A C2F9  46         mov   *stack+,r11           ; Pop R11
0342 2E7C 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E7E C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E80 0649  22         dect  stack
0038 2E82 C64B  38         mov   r11,*stack            ; Save return address
0039 2E84 0649  22         dect  stack
0040 2E86 C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E88 C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E8A 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E8C 0014     
0046               fg99.send.loop:
0047 2E8E 04E0  34         clr   @>6000                ; Signal new byte
     2E90 6000     
0048 2E92 0201  24         li    r1,>0038              ; >7000 >> 9
     2E94 0038     
0049 2E96 D070  44         movb  *r0+,r1
0050 2E98 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E9A 04D1  30         clr   *r1                   ; Send byte
0053 2E9C 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E9E 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2EA0 04E0  34         clr   @>6000                ; Done sending filename
     2EA2 6000     
0057 2EA4 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2EA6 0200  24         li    r0,>6000              ; check >6000->6200
     2EA8 6000     
0063 2EAA 0202  24         li    r2,>100
     2EAC 0100     
0064 2EAE C070  46 !       mov   *r0+, r1
0065 2EB0 1603  14         jne   fg99.exit             ; Done loading, exit
0066 2EB2 0602  22         dec   r2
0067 2EB4 16FC  14         jne   -!
0068 2EB6 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EB8 C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EBA C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EBC 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EBE 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EC0 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EC2 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EC4 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EC6 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EC8 201C     
0029 2ECA 1602  14         jne   tmgr1a                ; No, so move on
0030 2ECC E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2ECE 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2ED0 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2ED2 2020     
0035 2ED4 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ED6 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ED8 2010     
0048 2EDA 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2EDC 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2EDE 200E     
0050 2EE0 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2EE2 0460  28         b     @kthread              ; Run kernel thread
     2EE4 2F5C     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EE6 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EE8 2014     
0056 2EEA 13EB  14         jeq   tmgr1
0057 2EEC 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EEE 2012     
0058 2EF0 16E8  14         jne   tmgr1
0059 2EF2 C120  38         mov   @wtiusr,tmp0
     2EF4 832E     
0060 2EF6 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EF8 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EFA 2F5A     
0065 2EFC C10A  30         mov   r10,tmp0
0066 2EFE 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2F00 00FF     
0067 2F02 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2F04 201C     
0068 2F06 1303  14         jeq   tmgr5
0069 2F08 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F0A 003C     
0070 2F0C 1002  14         jmp   tmgr6
0071 2F0E 0284  26 tmgr5   ci    tmp0,50
     2F10 0032     
0072 2F12 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F14 1001  14         jmp   tmgr8
0074 2F16 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F18 C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F1A 832C     
0079 2F1C 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F1E FF00     
0080 2F20 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F22 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F24 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F26 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F28 C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F2A 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F2C 830C     
     2F2E 830D     
0089 2F30 1608  14         jne   tmgr10                ; No, get next slot
0090 2F32 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F34 FF00     
0091 2F36 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F38 C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F3A 8330     
0096 2F3C 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F3E C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F40 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F42 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F44 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F46 8315     
     2F48 8314     
0103 2F4A 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F4C 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F4E 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F50 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F52 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F54 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F56 FF00     
0109 2F58 10B4  14         jmp   tmgr1
0110 2F5A 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F5C E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F5E 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F60 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F62 2006     
0023 2F64 1602  14         jne   kthread_kb
0024 2F66 06A0  36         bl    @sdpla1               ; Run sound player
     2F68 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F6A 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F6C 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F6E 0460  28         b     @tmgr3                ; Exit
     2F70 2EE6     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F72 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F74 832E     
0018 2F76 E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F78 2012     
0019 2F7A 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EC2     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F7C 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F7E 832E     
0029 2F80 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F82 FEFF     
0030 2F84 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F86 C13B  46 mkslot  mov   *r11+,tmp0
0018 2F88 C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F8A C184  30         mov   tmp0,tmp2
0023 2F8C 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F8E A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F90 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F92 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F94 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F96 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F98 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F9A 2022     
0035 2F9C 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F9E 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2FA0 05CB  22 mkslo1  inct  r11
0041 2FA2 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2FA4 C13B  46 clslot  mov   *r11+,tmp0
0053 2FA6 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2FA8 A120  38         a     @wtitab,tmp0          ; Add table base
     2FAA 832C     
0055 2FAC 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FAE 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FB0 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FB2 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FB4 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FB6 A120  38         a     @wtitab,tmp0          ; Add table base
     2FB8 832C     
0071 2FBA 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FBC C154  38         mov   *tmp0,tmp1
0073 2FBE 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FC0 FF00     
0074 2FC2 C505  38         mov   tmp1,*tmp0
0075 2FC4 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FC6 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FC8 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FCA 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FCC 0000     
0288 2FCE 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FD0 8300     
0289 2FD2 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FD4 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FD6 0202  20 runli2  li    r2,>8308
     2FD8 8308     
0294 2FDA 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FDC 0282  22         ci    r2,>8400
     2FDE 8400     
0296 2FE0 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FE2 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FE4 FFFF     
0301 2FE6 1602  14         jne   runli4                ; No, continue
0302 2FE8 0420  42         blwp  @0                    ; Yes, bye bye
     2FEA 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FEC C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FEE 833C     
0307 2FF0 04C1  14         clr   r1                    ; Reset counter
0308 2FF2 0202  20         li    r2,10                 ; We test 10 times
     2FF4 000A     
0309 2FF6 C0E0  30 runli5  mov   @vdps,r3
     2FF8 8802     
0310 2FFA 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FFC 2020     
0311 2FFE 1302  14         jeq   runli6
0312 3000 0581  14         inc   r1                    ; Increase counter
0313 3002 10F9  14         jmp   runli5
0314 3004 0602  14 runli6  dec   r2                    ; Next test
0315 3006 16F7  14         jne   runli5
0316 3008 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     300A 1250     
0317 300C 1202  14         jle   runli7                ; No, so it must be NTSC
0318 300E 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3010 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3012 06A0  32 runli7  bl    @loadmc
     3014 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 3016 04C1  14 runli9  clr   r1
0327 3018 04C2  14         clr   r2
0328 301A 04C3  14         clr   r3
0329 301C 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     301E A900     
0330 3020 020F  20         li    r15,vdpw              ; Set VDP write address
     3022 8C00     
0332 3024 06A0  32         bl    @mute                 ; Mute sound generators
     3026 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 3028 0280  22         ci    r0,>4a4a              ; Crash flag set?
     302A 4A4A     
0339 302C 1605  14         jne   runlia
0340 302E 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3030 228E     
0341 3032 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     3034 0000     
     3036 3000     
0346 3038 06A0  32 runlia  bl    @filv
     303A 228E     
0347 303C 0FC0             data  pctadr,spfclr,16      ; Load color table
     303E 00F4     
     3040 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3042 06A0  32         bl    @f18unl               ; Unlock the F18A
     3044 278A     
0355 3046 06A0  32         bl    @f18chk               ; Check if F18A is there \
     3048 27B4     
0356 304A 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     304C 27B4     
0357 304E 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3050 27B4     
0358 3052 06A0  32         bl    @f18lck               ; Lock the F18A again
     3054 27A0     
0359               
0360 3056 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     3058 2332     
0361 305A 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 305C 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     305E 22F8     
0375 3060 7F50             data  spvmod                ; Equate selected video mode table
0376 3062 0204  20         li    tmp0,spfont           ; Get font option
     3064 000C     
0377 3066 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 3068 1304  14         jeq   runlid                ; Yes, skip it
0379 306A 06A0  32         bl    @ldfnt
     306C 2360     
0380 306E 1900             data  fntadr,spfont         ; Load specified font
     3070 000C     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3072 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     3074 4A4A     
0385 3076 1602  14         jne   runlie                ; No, continue
0386 3078 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     307A 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 307C 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     307E 0040     
0391 3080 0460  28         b     @main                 ; Give control to main program
     3082 6046     
                   < stevie_b1.asm
0053                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 3084 0649  14         dect  stack
0029 3086 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 3088 0649  14         dect  stack
0031 308A C645  30         mov   tmp1,*stack           ; Push tmp1
0032 308C 0649  14         dect  stack
0033 308E C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3090 0649  14         dect  stack
0035 3092 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 3094 C13B  30         mov   *r11+,tmp0            ; P0
0040 3096 C17B  30         mov   *r11+,tmp1            ; P1
0041 3098 C1BB  30         mov   *r11+,tmp2            ; P2
0042 309A 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 309C 0649  14         dect  stack
0048 309E C644  30         mov   tmp0,*stack           ; Push tmp0
0049 30A0 0649  14         dect  stack
0050 30A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 30A4 0649  14         dect  stack
0052 30A6 C646  30         mov   tmp2,*stack           ; Push tmp2
0053 30A8 0649  14         dect  stack
0054 30AA C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30AC 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30AE 6000     
0060 30B0 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30B2 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30B4 A22E     
0064 30B6 0647  14         dect  tmp3
0065 30B8 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30BA 0647  14         dect  tmp3
0067 30BC C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30BE C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30C0 A22E     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30C2 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30C4 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30C6 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30C8 0224  22         ai    tmp0,>0800
     30CA 0800     
0086 30CC 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30CE 0285  22         ci    tmp1,>ffff
     30D0 FFFF     
0095 30D2 1602  14         jne   !
0096 30D4 C160  34         mov   @trmpvector,tmp1
     30D6 A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30D8 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30DA 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30DC 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30DE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30E0 FFCE     
0111 30E2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30E4 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30E6 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30E8 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30EA A22E     
0122 30EC C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30EE 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30F0 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30F2 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30F4 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30F6 028B  22         ci    r11,>6000
     30F8 6000     
0139 30FA 1104  14         jlt   rom.farjump.assert.lowmem
0140 30FC 028B  22         ci    r11,>7fff
     30FE 7FFF     
0141 3100 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 3102 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 3104 028B  22         ci    r11,>2000
     3106 2000     
0148 3108 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 310A 028B  22         ci    r11,>3fff
     310C 3FFF     
0150 310E 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3110 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3112 A22E     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 3114 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 3116 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 3118 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 311A 0225  22         ai    tmp1,>0800
     311C 0800     
0171 311E 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3120 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3122 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3124 FFCE     
0178 3126 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3128 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 312A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 312C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 312E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3130 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3132 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3134 0649  14         dect  stack
0021 3136 C64B  30         mov   r11,*stack            ; Save return address
0022 3138 0649  14         dect  stack
0023 313A C644  30         mov   tmp0,*stack           ; Push tmp0
0024 313C 0649  14         dect  stack
0025 313E C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3140 0204  20         li    tmp0,fb.top
     3142 D000     
0030 3144 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     3146 A300     
0031 3148 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     314A A304     
0032 314C 04E0  34         clr   @fb.row               ; Current row=0
     314E A306     
0033 3150 04E0  34         clr   @fb.column            ; Current column=0
     3152 A30C     
0034               
0035 3154 0204  20         li    tmp0,colrow
     3156 0050     
0036 3158 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     315A A30E     
0037 315C 04E0  34         clr   @fb.vwco              ; Set view window column offset
     315E A310     
0038               
0039 3160 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3162 0016     
0040 3164 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     3166 A320     
0041               
0042 3168 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     316A 31D0     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 316C 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     316E A22A     
0048 3170 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3172 A312     
0049 3174 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3176 A31A     
0050 3178 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     317A A31C     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 317C 06A0  32         bl    @film
     317E 2236     
0055 3180 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3182 0000     
     3184 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 3186 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 3188 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 318A C2F9  30         mov   *stack+,r11           ; Pop r11
0063 318C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 318E 0649  14         dect  stack
0025 3190 C64B  30         mov   r11,*stack            ; Save return address
0026 3192 0649  14         dect  stack
0027 3194 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3196 C120  34         mov   @parm1,tmp0
     3198 A006     
0032 319A A120  34         a     @fb.topline,tmp0
     319C A304     
0033 319E C804  38         mov   tmp0,@outparm1
     31A0 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 31A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 31A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 31A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 31A8 0649  14         dect  stack
0028 31AA C64B  30         mov   r11,*stack            ; Save return address
0029 31AC 0649  14         dect  stack
0030 31AE C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31B0 0649  14         dect  stack
0032 31B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31B4 C120  34         mov   @fb.row,tmp0
     31B6 A306     
0037 31B8 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31BA A30E     
0038 31BC A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31BE A30C     
0039 31C0 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31C2 A300     
0040 31C4 C805  38         mov   tmp1,@fb.current
     31C6 A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31CC C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31D0 0649  14         dect  stack
0026 31D2 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31D4 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31D6 A320     
     31D8 A31E     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31DA 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31DC A210     
0037 31DE 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31E0 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E2 A31E     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31E4 8820  50         c     @edb.special.file,@const.0
     31E6 A522     
     31E8 2000     
0044 31EA 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31EC 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31EE A31E     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31F0 0760  38         abs   @tv.error.visible     ; Error area visible?
     31F2 A230     
0051 31F4 1303  14         jeq   fb.calc.scrrows.exit
0052 31F6 6820  54         s     @tv.error.rows,@fb.scrrows
     31F8 A232     
     31FA A31E     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31FC C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3200 0649  14         dect  stack
0052 3202 C64B  30         mov   r11,*stack            ; Save return address
0053 3204 0649  14         dect  stack
0054 3206 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 3208 0204  20         li    tmp0,idx.top
     320A B000     
0059 320C C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     320E A502     
0060               
0061 3210 C120  34         mov   @tv.sams.b000,tmp0
     3212 A206     
0062 3214 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     3216 A600     
0063 3218 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     321A A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 321C 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     321E 0004     
0068 3220 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3222 A604     
0069               
0070 3224 06A0  32         bl    @_idx.sams.mapcolumn.on
     3226 3242     
0071                                                   ; Index in continuous memory region
0072               
0073 3228 06A0  32         bl    @film
     322A 2236     
0074 322C B000                   data idx.top,>00,idx.size * 5
     322E 0000     
     3230 5000     
0075                                                   ; Clear index
0076               
0077 3232 06A0  32         bl    @_idx.sams.mapcolumn.off
     3234 3276     
0078                                                   ; Restore memory window layout
0079               
0080 3236 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3238 A602     
     323A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 323C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 323E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3240 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3242 0649  14         dect  stack
0102 3244 C64B  30         mov   r11,*stack            ; Push return address
0103 3246 0649  14         dect  stack
0104 3248 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 324A 0649  14         dect  stack
0106 324C C645  30         mov   tmp1,*stack           ; Push tmp1
0107 324E 0649  14         dect  stack
0108 3250 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3252 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3254 A602     
0113 3256 0205  20         li    tmp1,idx.top
     3258 B000     
0114 325A 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     325C 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 325E 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3260 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3262 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3264 0225  22         ai    tmp1,>1000            ; Next memory region
     3266 1000     
0124 3268 0606  14         dec   tmp2                  ; Update loop counter
0125 326A 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 326C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 326E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3270 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3272 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3274 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3276 0649  14         dect  stack
0151 3278 C64B  30         mov   r11,*stack            ; Push return address
0152 327A 0649  14         dect  stack
0153 327C C644  30         mov   tmp0,*stack           ; Push tmp0
0154 327E 0649  14         dect  stack
0155 3280 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3282 0649  14         dect  stack
0157 3284 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3286 0649  14         dect  stack
0159 3288 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 328A 0205  20         li    tmp1,idx.top
     328C B000     
0164 328E 0206  20         li    tmp2,5                ; Always 5 pages
     3290 0005     
0165 3292 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3294 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3296 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3298 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     329A 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 329C 0225  22         ai    tmp1,>1000            ; Next memory region
     329E 1000     
0176 32A0 0606  14         dec   tmp2                  ; Update loop counter
0177 32A2 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 32A4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 32A6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 32A8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32AC C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32AE 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32B0 0649  14         dect  stack
0212 32B2 C64B  30         mov   r11,*stack            ; Save return address
0213 32B4 0649  14         dect  stack
0214 32B6 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32B8 0649  14         dect  stack
0216 32BA C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32BC 0649  14         dect  stack
0218 32BE C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32C0 C184  18         mov   tmp0,tmp2             ; Line number
0223 32C2 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32C4 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32C6 0800     
0225               
0226 32C8 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32CA 0A16  18         sla   tmp2,1                ; line number * 2
0231 32CC C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32CE A018     
0232               
0233 32D0 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32D2 A602     
0234 32D4 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32D6 A600     
0235               
0236 32D8 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32DA C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32DC A600     
0242 32DE C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32E0 A206     
0243 32E2 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32E4 0205  20         li    tmp1,>b000            ; Memory window for index page
     32E6 B000     
0246               
0247 32E8 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32EA 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32EC 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32EE A604     
0254 32F0 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32F2 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32F4 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32F6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32FC C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3300 0649  14         dect  stack
0023 3302 C64B  30         mov   r11,*stack            ; Save return address
0024 3304 0649  14         dect  stack
0025 3306 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3308 0204  20         li    tmp0,edb.top          ; \
     330A C000     
0030 330C C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     330E A500     
0031 3310 C804  38         mov   tmp0,@edb.next_free.ptr
     3312 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3314 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     3316 A50A     
0035               
0036 3318 0204  20         li    tmp0,1
     331A 0001     
0037 331C C804  38         mov   tmp0,@edb.lines       ; Lines=1
     331E A504     
0038               
0039 3320 0720  34         seto  @edb.block.m1         ; Reset block start line
     3322 A50E     
0040 3324 0720  34         seto  @edb.block.m2         ; Reset block end line
     3326 A510     
0041               
0042 3328 C820  54         mov   @tv.lineterm,@edb.lineterm
     332A A23C     
     332C A524     
0043                                                   ; Set line termination char from default
0044               
0045 332E 0204  20         li    tmp0,txt.newfile      ; "New file"
     3330 3B30     
0046 3332 C804  38         mov   tmp0,@edb.filename.ptr
     3334 A514     
0047               
0048 3336 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3338 A440     
0049 333A 04E0  34         clr   @fh.kilobytes.prev    ; /
     333C A45C     
0050               
0051 333E 0204  20         li    tmp0,txt.filetype.none
     3340 3CA8     
0052 3342 C804  38         mov   tmp0,@edb.filetype.ptr
     3344 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 3346 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 3348 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 334A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 334C 0649  14         dect  stack
0023 334E C64B  30         mov   r11,*stack            ; Save return address
0024 3350 0649  14         dect  stack
0025 3352 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3354 0649  14         dect  stack
0027 3356 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3358 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     335A EF00     
0032 335C C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     335E A700     
0033               
0034 3360 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3362 A702     
0035 3364 0204  20         li    tmp0,6
     3366 0006     
0036 3368 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     336A A706     
0037 336C C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     336E A708     
0038               
0039 3370 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3372 A71C     
0040 3374 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3376 A71E     
0041 3378 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     337A A730     
0042 337C 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     337E A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3380 0204  20         li    tmp0,pane.botrow      ; \
     3382 0017     
0047 3384 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3386 A706     
0048 3388 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     338A 833A     
0049 338C C105  18         mov   tmp1,tmp0             ; | Get result
0050 338E 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3390 0980     
0051 3392 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3394 A712     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 3396 06A0  32         bl    @film
     3398 2236     
0056 339A EF00                   data  cmdb.top,>00,cmdb.size
     339C 0000     
     339E 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 33A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 33A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 33A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 33A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 33A8 0649  14         dect  stack
0023 33AA C64B  30         mov   r11,*stack            ; Save return address
0024 33AC 0649  14         dect  stack
0025 33AE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33B0 0649  14         dect  stack
0027 33B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33B4 0649  14         dect  stack
0029 33B6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33B8 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33BA A230     
0034 33BC 0204  20         li    tmp0,3
     33BE 0003     
0035 33C0 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33C2 A232     
0036               
0037 33C4 06A0  32         bl    @film
     33C6 2236     
0038 33C8 A240                   data tv.error.msg,0,160
     33CA 0000     
     33CC 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33CE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33D0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33D4 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33D6 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33D8 0649  14         dect  stack
0023 33DA C64B  30         mov   r11,*stack            ; Save return address
0024 33DC 0649  14         dect  stack
0025 33DE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33E0 0649  14         dect  stack
0027 33E2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33E4 0649  14         dect  stack
0029 33E6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33E8 0204  20         li    tmp0,1                ; \ Set default color scheme
     33EA 0001     
0034 33EC C804  38         mov   tmp0,@tv.colorscheme  ; /
     33EE A212     
0035               
0036 33F0 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33F2 A22C     
0037 33F4 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33F6 200C     
0038               
0039 33F8 0204  20         li    tmp0,fj.bottom
     33FA B000     
0040 33FC C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33FE A22E     
0041               
0042 3400 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     3402 A23A     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 3404 06A0  32         bl    @cpym2m
     3406 253A     
0047 3408 3D72                   data def.printer.fname,tv.printer.fname,7
     340A DE00     
     340C 0007     
0048               
0049 340E 06A0  32         bl    @cpym2m
     3410 253A     
0050 3412 3D79                   data def.clip.fname.a,tv.clip.fname,10
     3414 DE50     
     3416 000A     
0051               
0052 3418 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     341A A50C     
0053 341C 04E0  34         clr   @tv.show.linelen      ; Show line length off by default
     341E A23E     
0054               
0055 3420 0204  20         li    tmp0,13               ; \
     3422 000D     
0056 3424 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3426 A23C     
0057                                                   ; / LSB = 13 Carriage return
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               tv.init.exit:
0062 3428 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0063 342A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0064 342C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0065 342E C2F9  30         mov   *stack+,r11           ; Pop R11
0066 3430 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3432 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3434 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3436 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3438 3084     
0028 343A 600E                   data bank7.rom        ; | i  p0 = bank address
0029 343C 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 343E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3440 0649  14         dect  stack
0025 3442 C64B  30         mov   r11,*stack            ; Push return address
0026 3444 0649  14         dect  stack
0027 3446 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3448 0649  14         dect  stack
0029 344A C645  30         mov   tmp1,*stack           ; Push tmp1
0030 344C 0649  14         dect  stack
0031 344E C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3450 0649  14         dect  stack
0033 3452 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3454 0649  14         dect  stack
0035 3456 C640  30         mov   r0,*stack             ; Push r0
0036 3458 0649  14         dect  stack
0037 345A C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 345C C120  34         mov   @parm1,tmp0           ; Pointer to input string
     345E A006     
0042 3460 04C5  14         clr   tmp1                  ; Termination character >00
0043 3462 04E0  34         clr   @outparm1             ; Reset output parameters
     3464 A018     
0044 3466 04E0  34         clr   @outparm2             ; Reset output parameters
     3468 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 346A 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     346C 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 346E C1A0  30         mov   @waux1,tmp2           ; Get string length
     3470 833C     
0056 3472 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3474 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3476 0005     
0058 3478 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 347A C120  34         mov   @parm1,tmp0           ; Pointer to input string
     347C A006     
0063               
0064 347E A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 3480 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     3482 FFF6     
0066 3484 0746  18         abs   tmp2                  ; /
0067               
0068 3486 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 3488 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 348A 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 348C 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 348E 0285  22         ci    tmp1,32               ; Blank ?
     3490 0020     
0080 3492 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3494 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3496 FFD0     
0085 3498 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 349A 0285  22         ci    tmp1,9
     349C 0009     
0087 349E 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 34A0 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     34A2 34CE     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 34A4 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 34A6 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 34A8 05C6  14         inct  tmp2                  ; Update loop counter
0102 34AA 0286  22         ci    tmp2,8                ; Last digit done?
     34AC 0008     
0103 34AE 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34B0 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34B2 04E0  34         clr   @outparm1             ; Empty uint16
     34B4 A018     
0110 34B6 0720  34         seto  @outparm2             ; Invalid input string
     34B8 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34BA C807  38         mov   tmp3,@outparm1
     34BC A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34BE C079  30         mov   *stack+,r1            ; Pop r1
0121 34C0 C039  30         mov   *stack+,r0            ; Pop r0
0122 34C2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34C4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34CA C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34CC 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34CE 2710             data  10000,1000,100,10,1
     34D0 03E8     
     34D2 0064     
     34D4 000A     
     34D6 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34D8 0649  14         dect  stack
0022 34DA C64B  30         mov   r11,*stack            ; Save return address
0023 34DC 0649  14         dect  stack
0024 34DE C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34E0 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34E2 2A56     
0029 34E4 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34E6 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34E8 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34E9   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34EA 0204  20         li    tmp0,uint16.unpacked
     34EC A02C     
0035 34EE 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34F0 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34F2 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34F4 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34F6 2AAE     
0040 34F8 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34FA A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34FC 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3500 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 3502 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 3504 0649  14         dect  stack
0031 3506 C64B  30         mov   r11,*stack            ; Push return address
0032 3508 0649  14         dect  stack
0033 350A C644  30         mov   tmp0,*stack           ; Push tmp0
0034 350C 0649  14         dect  stack
0035 350E C645  30         mov   tmp1,*stack           ; Push tmp1
0036 3510 0649  14         dect  stack
0037 3512 C646  30         mov   tmp2,*stack           ; Push tmp2
0038 3514 0649  14         dect  stack
0039 3516 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 3518 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     351A A006     
0044 351C D194  26         movb  *tmp0,tmp2            ; /
0045 351E 0986  32         srl   tmp2,8                ; Right align
0046 3520 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 3522 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3524 A008     
0049 3526 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 3528 C120  34         mov   @parm1,tmp0           ; Get source address
     352A A006     
0054 352C C160  34         mov   @parm4,tmp1           ; Get destination address
     352E A00C     
0055 3530 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 3532 0649  14         dect  stack
0058 3534 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 3536 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3538 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 353A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 353C C120  34         mov   @parm2,tmp0           ; Get requested length
     353E A008     
0070 3540 0A84  32         sla   tmp0,8                ; Left align
0071 3542 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3544 A00C     
0072 3546 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 3548 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 354A 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 354C C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     354E A008     
0079 3550 6187  18         s     tmp3,tmp2             ; |
0080 3552 0586  14         inc   tmp2                  ; /
0081               
0082 3554 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3556 A00A     
0083 3558 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 355A DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 355C 0606  14         dec   tmp2                  ; Update loop counter
0090 355E 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 3560 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3562 A00C     
     3564 A018     
0093 3566 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 3568 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     356A FFCE     
0099 356C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     356E 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 3570 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 3572 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 3574 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3576 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 3578 C2F9  30         mov   *stack+,r11           ; Pop r11
0109 357A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 357C 0649  14         dect  stack
0023 357E C64B  30         mov   r11,*stack            ; Save return address
0024 3580 0649  14         dect  stack
0025 3582 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3584 0649  14         dect  stack
0027 3586 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3588 C120  34         mov   @parm1,tmp0           ; Get line number
     358A A006     
0032 358C C160  34         mov   @parm2,tmp1           ; Get pointer
     358E A008     
0033 3590 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 3592 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3594 0FFF     
0039 3596 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3598 06E0  34         swpb  @parm3
     359A A00A     
0044 359C D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     359E A00A     
0045 35A0 06E0  34         swpb  @parm3                ; \ Restore original order again,
     35A2 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 35A4 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35A6 32B0     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 35A8 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     35AA A018     
0056 35AC C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35AE B000     
0057 35B0 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35B2 A018     
0058 35B4 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35B6 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35B8 32B0     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35BA C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35BC A018     
0068 35BE 04E4  34         clr   @idx.top(tmp0)        ; /
     35C0 B000     
0069 35C2 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35C4 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35CA C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35CC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35CE 0649  14         dect  stack
0022 35D0 C64B  30         mov   r11,*stack            ; Save return address
0023 35D2 0649  14         dect  stack
0024 35D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35D6 0649  14         dect  stack
0026 35D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35DA 0649  14         dect  stack
0028 35DC C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35DE C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35E0 A006     
0033               
0034 35E2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35E4 32B0     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35E6 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35E8 A018     
0039 35EA C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35EC B000     
0040               
0041 35EE 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35F0 C185  18         mov   tmp1,tmp2             ; \
0047 35F2 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35F4 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35F6 00FF     
0052 35F8 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35FA 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35FC C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35FE C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3600 A018     
0059 3602 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3604 A01A     
0060 3606 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3608 04E0  34         clr   @outparm1
     360A A018     
0066 360C 04E0  34         clr   @outparm2
     360E A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3610 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3612 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3614 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3616 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3618 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 361A 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     361C B000     
0018 361E C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3620 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3622 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3624 0606  14         dec   tmp2                  ; tmp2--
0026 3626 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3628 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 362A 0649  14         dect  stack
0047 362C C64B  30         mov   r11,*stack            ; Save return address
0048 362E 0649  14         dect  stack
0049 3630 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3632 0649  14         dect  stack
0051 3634 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3636 0649  14         dect  stack
0053 3638 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 363A 0649  14         dect  stack
0055 363C C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 363E C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3640 A006     
0060               
0061 3642 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3644 32B0     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3646 C120  34         mov   @outparm1,tmp0        ; Index offset
     3648 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 364A C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     364C A008     
0070 364E 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3650 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3652 A006     
0074 3654 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3656 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3658 B000     
0081 365A 04D4  26         clr   *tmp0                 ; Clear index entry
0082 365C 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 365E C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3660 A008     
0088 3662 0287  22         ci    tmp3,2048
     3664 0800     
0089 3666 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3668 06A0  32         bl    @_idx.sams.mapcolumn.on
     366A 3242     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 366C C120  34         mov   @parm1,tmp0           ; Restore line number
     366E A006     
0103 3670 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3672 06A0  32         bl    @_idx.entry.delete.reorg
     3674 361A     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3676 06A0  32         bl    @_idx.sams.mapcolumn.off
     3678 3276     
0111                                                   ; Restore memory window layout
0112               
0113 367A 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 367C 06A0  32         bl    @_idx.entry.delete.reorg
     367E 361A     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 3680 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 3682 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3684 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3686 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 368A C2F9  30         mov   *stack+,r11           ; Pop r11
0132 368C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 368E 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     3690 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 3692 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3694 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3696 FFCE     
0027 3698 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     369A 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 369C 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     369E B000     
0032 36A0 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 36A2 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 36A4 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 36A6 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 36A8 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 36AA 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 36AC A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36AE 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36B0 AFFC     
0043 36B2 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36B4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36B6 FFCE     
0049 36B8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36BA 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36BC C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36BE 0644  14         dect  tmp0                  ; Move pointer up
0056 36C0 0645  14         dect  tmp1                  ; Move pointer up
0057 36C2 0606  14         dec   tmp2                  ; Next index entry
0058 36C4 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36C6 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36C8 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36CA 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36CC 0649  14         dect  stack
0089 36CE C64B  30         mov   r11,*stack            ; Save return address
0090 36D0 0649  14         dect  stack
0091 36D2 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36D4 0649  14         dect  stack
0093 36D6 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36D8 0649  14         dect  stack
0095 36DA C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36DC 0649  14         dect  stack
0097 36DE C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36E0 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36E2 A008     
0102 36E4 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36E6 A006     
0103 36E8 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36EA C1E0  34         mov   @parm2,tmp3
     36EC A008     
0110 36EE 0287  22         ci    tmp3,2048
     36F0 0800     
0111 36F2 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36F4 06A0  32         bl    @_idx.sams.mapcolumn.on
     36F6 3242     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36F8 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36FA A008     
0123 36FC 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36FE 06A0  32         bl    @_idx.entry.insert.reorg
     3700 368E     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 3702 06A0  32         bl    @_idx.sams.mapcolumn.off
     3704 3276     
0131                                                   ; Restore memory window layout
0132               
0133 3706 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3708 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     370A A008     
0139               
0140 370C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     370E 32B0     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3710 C120  34         mov   @outparm1,tmp0        ; Index offset
     3712 A018     
0145               
0146 3714 06A0  32         bl    @_idx.entry.insert.reorg
     3716 368E     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3718 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 371A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 371C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 371E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3720 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3722 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3724 0649  14         dect  stack
0022 3726 C64B  30         mov   r11,*stack            ; Push return address
0023 3728 0649  14         dect  stack
0024 372A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 372C 0649  14         dect  stack
0026 372E C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3730 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3732 A504     
0031 3734 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3736 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3738 FFCE     
0037 373A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     373C 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 373E C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3740 A006     
0043               
0044 3742 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3744 35CE     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3746 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3748 A01A     
0050 374A C160  34         mov   @outparm1,tmp1        ; Pointer to line
     374C A018     
0051 374E 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3750 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3752 A208     
0057 3754 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3756 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3758 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 375A C820  54         mov   @outparm2,@tv.sams.c000
     375C A01A     
     375E A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3760 C820  54         mov   @outparm2,@edb.sams.page
     3762 A01A     
     3764 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3766 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3768 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 376A C2F9  30         mov   *stack+,r11           ; Pop r11
0077 376C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 376E 0649  14         dect  stack
0022 3770 C64B  30         mov   r11,*stack            ; Push return address
0023 3772 0649  14         dect  stack
0024 3774 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3776 0649  14         dect  stack
0026 3778 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 377A 04E0  34         clr   @outparm1             ; Reset length
     377C A018     
0031 377E 04E0  34         clr   @outparm2             ; Reset SAMS bank
     3780 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3782 C120  34         mov   @parm1,tmp0           ; \
     3784 A006     
0036 3786 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3788 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     378A A504     
0039 378C 1201  14         jle   !                     ; No, continue processing
0040 378E 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 3790 C120  34 !       mov   @parm1,tmp0           ; Get line
     3792 A006     
0046               
0047 3794 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3796 3724     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3798 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     379A A018     
0053 379C 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 379E C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 37A0 C805  38         mov   tmp1,@outparm1        ; Save length
     37A2 A018     
0060 37A4 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 37A6 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     37A8 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 37AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 37AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37AE C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37B0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37B2 0649  14         dect  stack
0021 37B4 C64B  30         mov   r11,*stack            ; Save return address
0022 37B6 0649  14         dect  stack
0023 37B8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37BA C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37BC A304     
0028 37BE A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37C0 A306     
0029 37C2 C804  38         mov   tmp0,@parm1
     37C4 A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37C6 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37C8 376E     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37CA C820  54         mov   @outparm1,@fb.row.length
     37CC A018     
     37CE A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37D2 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37D4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37D6 0649  14         dect  stack
0021 37D8 C64B  30         mov   r11,*stack            ; Save return address
0022 37DA 0649  14         dect  stack
0023 37DC C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37DE 0649  14         dect  stack
0025 37E0 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37E2 C120  34         mov   @edb.next_free.ptr,tmp0
     37E4 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37E6 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37E8 0FFF     
0035 37EA 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37EC 0052     
0036 37EE 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37F0 0FF0     
0037 37F2 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37F4 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37F6 A51C     
0043 37F8 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37FA A500     
     37FC A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37FE C120  34         mov   @edb.sams.hipage,tmp0
     3800 A51C     
0050 3802 C160  34         mov   @edb.top.ptr,tmp1
     3804 A500     
0051 3806 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3808 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 380A 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 380C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     380E FFCE     
0061 3810 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3812 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3814 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3816 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3818 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 381A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 381C 0649  14         dect  stack
0022 381E C64B  30         mov   r11,*stack            ; Push return address
0023 3820 0649  14         dect  stack
0024 3822 C660  42         mov   @wyx,*stack           ; Push cursor position
     3824 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3826 06A0  32         bl    @hchar
     3828 2832     
0029 382A 0032                   byte 0,50,32,22
     382C 2016     
0030 382E FFFF                   data EOL              ; Clear message
0031               
0032 3830 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3832 A22C     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3834 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3836 832A     
0038 3838 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 383A 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "cart.fg99.run.asm"         ; Run FinalGROM cartridge image
     **** ****     > cart.fg99.run.asm
0001               * FILE......: cart.fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * cart.fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @cart.fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               * Is expected to run from RAM and not from cartridge space.
0023               ********|*****|*********************|**************************
0024               cart.fg99.run:
0025                       ;-------------------------------------------------------
0026                       ; Put VDP in TI Basic compatible mode (32x24)
0027                       ;-------------------------------------------------------
0028 383C 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     383E 2806     
0029               
0030 3840 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3842 22F8     
0031 3844 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0032               
0033 3846 06A0  32         bl    @scroff               ; Turn off screen
     3848 26E6     
0034                       ;------------------------------------------------------
0035                       ; Clear magic string
0036                       ;------------------------------------------------------
0037                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0038                       ; Indicate it's unsafe to resume Stevie and initialization
0039                       ; is necessary.
0040                       ; clr   @magic.str.w1
0041                       ; clr   @magic.str.w2
0042                       ; clr   @magic.str.w3
0043                       ;-------------------------------------------------------
0044                       ; Load FG99 cartridge, but do not start cartridge yet
0045                       ;-------------------------------------------------------
0046 384A C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     384C A238     
0047 384E 06A0  32         bl    @xfg99                ; Load FinalGROM cartridge image
     3850 2E80     
0048                                                   ; \ i tmp0 = Pointer to cartridge image
0049                                                   ; /
0050                       ;-------------------------------------------------------
0051                       ; Turn SAMS mapper off and exit to monitor
0052                       ;-------------------------------------------------------
0053 3852 020C  20         li    r12,>1e00             ; SAMS CRU address
     3854 1E00     
0054 3856 1E01  16         sbz   1                     ; Disable SAMS mapper
0055                                                   ; \ We keep the mapper off while
0056                                                   ; | running TI Basic or other external
0057                                                   ; / programs.
0058               
0059 3858 0420  42         blwp @0                     ; Return to monitor
     385A 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 385C 0649  14         dect  stack
0009 385E C64B  30         mov   r11,*stack            ; Save return address
0010 3860 0649  14         dect  stack
0011 3862 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3864 0649  14         dect  stack
0013 3866 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 3868 0649  14         dect  stack
0015 386A C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 386C C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     386E A22A     
0020               
0021 3870 0284  22         ci    tmp0,pane.focus.fb
     3872 0000     
0022 3874 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 3876 0284  22         ci    tmp0,pane.focus.cmdb
     3878 0001     
0025 387A 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 387C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     387E FFCE     
0031 3880 06A0  32         bl    @cpu.crash            ; / Halt system.
     3882 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 3884 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3886 A70A     
     3888 832A     
0037 388A E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     388C 2020     
0038 388E 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3890 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3892 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3894 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3896 2020     
0048 3898 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     389A 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 389C C160  34         mov   @tv.ruler.visible,tmp1
     389E A210     
0056 38A0 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 38A2 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     38A4 1000     
0058 38A6 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 38A8 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     38AA 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 38AC C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38AE A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38B0 C160  34         mov   @tv.ruler.visible,tmp1
     38B2 A210     
0071                                                   ; Ruler visible?
0072 38B4 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38B6 C160  34         mov   @cmdb.visible,tmp1
     38B8 A702     
0076 38BA 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38BC FFFF     
0077 38BE 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38C0 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38C2 FF00     
0081 38C4 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38C6 00F0     
0082 38C8 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38CA A05A     
0083               
0084 38CC C120  34         mov   @ramsat,tmp0
     38CE A056     
0085 38D0 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38D2 00FF     
0086 38D4 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38D6 0800     
0087 38D8 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38DA A05E     
0088               
0089 38DC 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38DE 04C5  14         clr   tmp1
0095 38E0 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38E2 A05D     
0096                                                   ; / by transparant color
0097 38E4 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38E6 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38E8 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38EA 24E6     
0104 38EC 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38EE A056     
     38F0 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38F2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38F4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38F8 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38FA 0460  28         b     @slotok               ; Exit task
     38FC 2F3E     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38FE 0649  14         dect  stack
0009 3900 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 3902 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3904 3084     
0014 3906 600C                   data bank6.rom        ; | i  p0 = bank address
0015 3908 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 390A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 390C C2F9  30         mov   *stack+,r11           ; Pop r11
0022 390E 0460  28         b     @slotok               ; Exit task
     3910 2F3E     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3912 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3914 A22C     
0010 3916 1301  14         jeq   task.oneshot.exit
0011               
0012 3918 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 391A 0460  28         b     @slotok                ; Exit task
     391C 2F3E     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 391E 0000             data  >0000,>8201           ; Cursor
     3920 8201     
0014 3922 0000             data  >0000,>8301           ; Current line indicator     <
     3924 8301     
0015 3926 0820             data  >0820,>8401           ; Current column indicator   v
     3928 8401     
0016               nosprite:
0017 392A D000             data  >d000                 ; End-of-Sprites list
0018               
0019               ***************************************************************
0020               * Tab positions
0021               ********|*****|*********************|**************************
0022               tv.tabs.table.lr:
0023 392C 0007             byte  0,7,12,25             ; \   Default tab positions as used
     392E 0C19     
0024 3930 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3932 3B4F     
0025 3934 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3936 0000     
0026                                                   ; /   >ff means end-of-list.
0027               
0028               tv.tabs.table.rl:
0029 3938 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     393A 2D1E     
0030 393C 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     393E 0700     
0031 3940 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3942 0000     
0032                                                   ; /   >ff means end-of-list.
0033               
0034               ***************************************************************
0035               * Constants for numbers 0-10
0036               ********|*****|*********************|**************************
0037      2000     const.0       equ   w$0000          ; 0
0038      2002     const.1       equ   w$0001          ; 1
0039      2004     const.2       equ   w$0002          ; 2
0040 3944 0003     const.3       data  3               ; 3
0041      2006     const.4       equ   w$0004          ; 4
0042 3946 0005     const.5       data  5               ; 5
0043 3948 0006     const.6       data  6               ; 6
0044 394A 0007     const.7       data  7               ; 7
0045      2008     const.8       equ   w$0008          ; 8
0046 394C 0009     const.9       data  9               ; 9
0047 394E 000A     const.10      data  10              ; 10 ; A
0048 3950 000B     const.11      data  11              ; 11 ; B
0049 3952 000C     const.12      data  12              ; 12 ; C
0050 3954 000D     const.13      data  13              ; 13 ; D
0051 3956 000E     const.14      data  14              ; 14 ; E
0052 3958 000F     const.15      data  15              ; 15 ; F
0053 395A 0010     const.16      data  16              ; 16
0054 395C 0020     const.32      data  32              ; 32
0055 395E 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 3960 012F     txt.slash          stri '/'
0008                                  even
0009 3962 013A     txt.colon          stri ':'
0010                                  even
0011 3964 0520     txt.bottom         stri '  BOT'
     3966 2042     
     3968 4F54     
0012                                  even
0013 396A 044F     txt.ovrwrite       stri 'OVR '
     396C 5652     
     396E 20       
0014                                  even
0015 3970 0449     txt.insert         stri 'INS '
     3972 4E53     
     3974 20       
0016                                  even
0017 3976 0449     txt.autoinsert     stri 'INS+'
     3978 4E53     
     397A 2B       
0018                                  even
0019 397C 012A     txt.star           stri '*'
0020                                  even
0021 397E 011D     txt.lockicon       byte 1,29
0022                                  even
0023 3980 0A4C     txt.loading        stri 'Loading...'
     3982 6F61     
     3984 6469     
     3986 6E67     
     3988 2E2E     
     398A 2E       
0024                                  even
0025 398C 0A53     txt.saving         stri 'Saving....'
     398E 6176     
     3990 696E     
     3992 672E     
     3994 2E2E     
     3996 2E       
0026                                  even
0027 3998 0C50     txt.printing       stri 'Printing....'
     399A 7269     
     399C 6E74     
     399E 696E     
     39A0 672E     
     39A2 2E2E     
     39A4 2E       
0028                                  even
0029 39A6 0C53     txt.searching      stri 'Searching...'
     39A8 6561     
     39AA 7263     
     39AC 6869     
     39AE 6E67     
     39B0 2E2E     
     39B2 2E       
0030                                  even
0031 39B4 1244     txt.block.del      stri 'Deleting block....'
     39B6 656C     
     39B8 6574     
     39BA 696E     
     39BC 6720     
     39BE 626C     
     39C0 6F63     
     39C2 6B2E     
     39C4 2E2E     
     39C6 2E       
0032                                  even
0033 39C8 1143     txt.block.copy     stri 'Copying block....'
     39CA 6F70     
     39CC 7969     
     39CE 6E67     
     39D0 2062     
     39D2 6C6F     
     39D4 636B     
     39D6 2E2E     
     39D8 2E2E     
0034                                  even
0035 39DA 104D     txt.block.move     stri 'Moving block....'
     39DC 6F76     
     39DE 696E     
     39E0 6720     
     39E2 626C     
     39E4 6F63     
     39E6 6B2E     
     39E8 2E2E     
     39EA 2E       
0036                                  even
0037 39EC 1053     txt.block.save     stri 'Saving block....'
     39EE 6176     
     39F0 696E     
     39F2 6720     
     39F4 626C     
     39F6 6F63     
     39F8 6B2E     
     39FA 2E2E     
     39FC 2E       
0038                                  even
0039 39FE 1843     txt.block.clip     stri 'Copying to clipboard....'
     3A00 6F70     
     3A02 7969     
     3A04 6E67     
     3A06 2074     
     3A08 6F20     
     3A0A 636C     
     3A0C 6970     
     3A0E 626F     
     3A10 6172     
     3A12 642E     
     3A14 2E2E     
     3A16 2E       
0040                                  even
0041 3A18 1250     txt.block.print    stri 'Printing block....'
     3A1A 7269     
     3A1C 6E74     
     3A1E 696E     
     3A20 6720     
     3A22 626C     
     3A24 6F63     
     3A26 6B2E     
     3A28 2E2E     
     3A2A 2E       
0042                                  even
0043 3A2C 1343     txt.clearmem       stri 'Clearing memory....'
     3A2E 6C65     
     3A30 6172     
     3A32 696E     
     3A34 6720     
     3A36 6D65     
     3A38 6D6F     
     3A3A 7279     
     3A3C 2E2E     
     3A3E 2E2E     
0044                                  even
0045 3A40 1352     txt.readdir        stri 'Reading catalog....'
     3A42 6561     
     3A44 6469     
     3A46 6E67     
     3A48 2063     
     3A4A 6174     
     3A4C 616C     
     3A4E 6F67     
     3A50 2E2E     
     3A52 2E2E     
0046                                  even
0047 3A54 0E4C     txt.done.load      stri 'Load completed'
     3A56 6F61     
     3A58 6420     
     3A5A 636F     
     3A5C 6D70     
     3A5E 6C65     
     3A60 7465     
     3A62 64       
0048                                  even
0049 3A64 1049     txt.done.insert    stri 'Insert completed'
     3A66 6E73     
     3A68 6572     
     3A6A 7420     
     3A6C 636F     
     3A6E 6D70     
     3A70 6C65     
     3A72 7465     
     3A74 64       
0050                                  even
0051 3A76 1041     txt.done.append    stri 'Append completed'
     3A78 7070     
     3A7A 656E     
     3A7C 6420     
     3A7E 636F     
     3A80 6D70     
     3A82 6C65     
     3A84 7465     
     3A86 64       
0052                                  even
0053 3A88 0E53     txt.done.save      stri 'Save completed'
     3A8A 6176     
     3A8C 6520     
     3A8E 636F     
     3A90 6D70     
     3A92 6C65     
     3A94 7465     
     3A96 64       
0054                                  even
0055 3A98 0E43     txt.done.copy      stri 'Copy completed'
     3A9A 6F70     
     3A9C 7920     
     3A9E 636F     
     3AA0 6D70     
     3AA2 6C65     
     3AA4 7465     
     3AA6 64       
0056                                  even
0057 3AA8 0F50     txt.done.print     stri 'Print completed'
     3AAA 7269     
     3AAC 6E74     
     3AAE 2063     
     3AB0 6F6D     
     3AB2 706C     
     3AB4 6574     
     3AB6 6564     
0058                                  even
0059 3AB8 1044     txt.done.delete    stri 'Delete completed'
     3ABA 656C     
     3ABC 6574     
     3ABE 6520     
     3AC0 636F     
     3AC2 6D70     
     3AC4 6C65     
     3AC6 7465     
     3AC8 64       
0060                                  even
0061 3ACA 0F43     txt.done.clipboard stri 'Clipboard saved'
     3ACC 6C69     
     3ACE 7062     
     3AD0 6F61     
     3AD2 7264     
     3AD4 2073     
     3AD6 6176     
     3AD8 6564     
0062                                  even
0063 3ADA 0D43     txt.done.clipdev   stri 'Clipboard set'
     3ADC 6C69     
     3ADE 7062     
     3AE0 6F61     
     3AE2 7264     
     3AE4 2073     
     3AE6 6574     
0064                                  even
0065 3AE8 0B46     txt.fastmode       stri 'Fastmode IO'
     3AEA 6173     
     3AEC 746D     
     3AEE 6F64     
     3AF0 6520     
     3AF2 494F     
0066                                  even
0067 3AF4 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3AF6 6F20     
     3AF8 4465     
     3AFA 7669     
     3AFC 6365     
     3AFE 2F44     
     3B00 6973     
     3B02 6B2F     
     3B04 5061     
     3B06 7468     
0068                                  even
0069 3B08 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3B0A 6E63     
     3B0C 7275     
     3B0E 6E63     
     3B10 6869     
     3B12 6E67     
     3B14 2054     
     3B16 4920     
     3B18 4261     
     3B1A 7369     
     3B1C 6320     
     3B1E 6C69     
     3B20 6E65     
     3B22 2E2E     
     3B24 2E2E     
0070                                  even
0071 3B26 026B     txt.kb             stri 'kb'
     3B28 62       
0072                                  even
0073 3B2A 054C     txt.lines          stri 'Lines'
     3B2C 696E     
     3B2E 6573     
0074                                  even
0075 3B30 0A5B     txt.newfile        stri '[New file]'
     3B32 4E65     
     3B34 7720     
     3B36 6669     
     3B38 6C65     
     3B3A 5D       
0076                                  even
0077 3B3C 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B3E 5449     
     3B40 2042     
     3B42 6173     
     3B44 6963     
     3B46 2023     
     3B48 315D     
0078                                  even
0079 3B4A 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B4C 5449     
     3B4E 2042     
     3B50 6173     
     3B52 6963     
     3B54 2023     
     3B56 325D     
0080                                  even
0081 3B58 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B5A 5449     
     3B5C 2042     
     3B5E 6173     
     3B60 6963     
     3B62 2023     
     3B64 335D     
0082                                  even
0083 3B66 0444     txt.filetype.dv80  stri 'DV80'
     3B68 5638     
     3B6A 30       
0084                                  even
0085 3B6C 034D     txt.m1             stri 'M1='
     3B6E 313D     
0086                                  even
0087 3B70 034D     txt.m2             stri 'M2='
     3B72 323D     
0088                                  even
0089 3B74 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3B76 392D     
     3B78 4D65     
     3B7A 6E75     
     3B7C 2020     
     3B7E 5E48     
     3B80 2D48     
     3B82 656C     
     3B84 70       
0090                                  even
0091 3B86 1C46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic# '
     3B88 392D     
     3B8A 4D65     
     3B8C 6E75     
     3B8E 2020     
     3B90 5E48     
     3B92 2D48     
     3B94 656C     
     3B96 7020     
     3B98 2046     
     3B9A 302D     
     3B9C 4261     
     3B9E 7369     
     3BA0 6323     
     3BA2 20       
0092                                  even
0093 3BA4 2B46     txt.keys.defaultc  stri 'F9-Menu  ^H-Help  ^,=Prev  ^.=Next  ^/=Done'
     3BA6 392D     
     3BA8 4D65     
     3BAA 6E75     
     3BAC 2020     
     3BAE 5E48     
     3BB0 2D48     
     3BB2 656C     
     3BB4 7020     
     3BB6 205E     
     3BB8 2C3D     
     3BBA 5072     
     3BBC 6576     
     3BBE 2020     
     3BC0 5E2E     
     3BC2 3D4E     
     3BC4 6578     
     3BC6 7420     
     3BC8 205E     
     3BCA 2F3D     
     3BCC 446F     
     3BCE 6E65     
0094                                  even
0095 3BD0 3746     txt.keys.defaultd  stri 'F9-Menu  ^H-Help  F0-Basic#   ^,=Prev  ^.=Next  ^/=Done'
     3BD2 392D     
     3BD4 4D65     
     3BD6 6E75     
     3BD8 2020     
     3BDA 5E48     
     3BDC 2D48     
     3BDE 656C     
     3BE0 7020     
     3BE2 2046     
     3BE4 302D     
     3BE6 4261     
     3BE8 7369     
     3BEA 6323     
     3BEC 2020     
     3BEE 205E     
     3BF0 2C3D     
     3BF2 5072     
     3BF4 6576     
     3BF6 2020     
     3BF8 5E2E     
     3BFA 3D4E     
     3BFC 6578     
     3BFE 7420     
     3C00 205E     
     3C02 2F3D     
     3C04 446F     
     3C06 6E65     
0096                                  even
0097               
0098 3C08 3A46     txt.keys.block     stri 'F9-Exit  ^Copy  ^Move  ^Del  ^Save  ^Print  ^1-3=Clipboard'
     3C0A 392D     
     3C0C 4578     
     3C0E 6974     
     3C10 2020     
     3C12 5E43     
     3C14 6F70     
     3C16 7920     
     3C18 205E     
     3C1A 4D6F     
     3C1C 7665     
     3C1E 2020     
     3C20 5E44     
     3C22 656C     
     3C24 2020     
     3C26 5E53     
     3C28 6176     
     3C2A 6520     
     3C2C 205E     
     3C2E 5072     
     3C30 696E     
     3C32 7420     
     3C34 205E     
     3C36 312D     
     3C38 333D     
     3C3A 436C     
     3C3C 6970     
     3C3E 626F     
     3C40 6172     
     3C42 64       
0099                                  even
0100 3C44 2646     txt.keys.blocklock stri 'F9-Exit  ^Save  ^Print  ^1-3=Clipboard'
     3C46 392D     
     3C48 4578     
     3C4A 6974     
     3C4C 2020     
     3C4E 5E53     
     3C50 6176     
     3C52 6520     
     3C54 205E     
     3C56 5072     
     3C58 696E     
     3C5A 7420     
     3C5C 205E     
     3C5E 312D     
     3C60 333D     
     3C62 436C     
     3C64 6970     
     3C66 626F     
     3C68 6172     
     3C6A 64       
0101                                  even
0102               
0103 3C6C 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C6E 392D     
     3C70 4261     
     3C72 636B     
     3C74 2020     
     3C76 4635     
     3C78 2D41     
     3C7A 7574     
     3C7C 6F55     
     3C7E 6E70     
     3C80 6163     
     3C82 6B20     
     3C84 2053     
     3C86 5041     
     3C88 4345     
     3C8A 2D55     
     3C8C 6E70     
     3C8E 6163     
     3C90 6B20     
     3C92 7072     
     3C94 6F67     
     3C96 7261     
     3C98 6D       
0104                                  even
0105 3C9A 020E     txt.alpha.down     data >020e,>0f00
     3C9C 0F00     
0106 3C9E 0110     txt.vertline       data >0110
0107 3CA0 011C     txt.keymarker      byte 1,28
0108                                  even
0109 3CA2 0120     txt.ws1            stri ' '
0110                                  even
0111 3CA4 0220     txt.ws2            stri '  '
     3CA6 20       
0112                                  even
0113 3CA8 0420     txt.ws4            stri '    '
     3CAA 2020     
     3CAC 20       
0114                                  even
0115      3CA8     txt.filetype.none  equ txt.ws4
0116               
0117 3CAE 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CB0 4920     
     3CB2 4261     
     3CB4 7369     
     3CB6 6320     
     3CB8 6D6F     
     3CBA 6465     
     3CBC 2061     
     3CBE 6374     
     3CC0 6976     
     3CC2 652E     
0118                                  even
0119               ;--------------------------------------------------------------
0120               ; Strings for error line pane
0121               ;--------------------------------------------------------------
0122 3CC4 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CC6 6169     
     3CC8 6C65     
     3CCA 6420     
     3CCC 6C6F     
     3CCE 6164     
     3CD0 696E     
     3CD2 6720     
     3CD4 6669     
     3CD6 6C65     
     3CD8 3A20     
0123                                  even
0124 3CDA 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CDC 6169     
     3CDE 6C65     
     3CE0 6420     
     3CE2 7361     
     3CE4 7669     
     3CE6 6E67     
     3CE8 2066     
     3CEA 696C     
     3CEC 653A     
     3CEE 20       
0125                                  even
0126 3CF0 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CF2 6169     
     3CF4 6C65     
     3CF6 6420     
     3CF8 7072     
     3CFA 696E     
     3CFC 7469     
     3CFE 6E67     
     3D00 2074     
     3D02 6F20     
     3D04 6465     
     3D06 7669     
     3D08 6365     
     3D0A 3A20     
0127                                  even
0128 3D0C 164E     txt.io.nofile      stri 'No filename specified.'
     3D0E 6F20     
     3D10 6669     
     3D12 6C65     
     3D14 6E61     
     3D16 6D65     
     3D18 2073     
     3D1A 7065     
     3D1C 6369     
     3D1E 6669     
     3D20 6564     
     3D22 2E       
0129                                  even
0130 3D24 0B49     txt.memfull.load   stri 'Index full.'
     3D26 6E64     
     3D28 6578     
     3D2A 2066     
     3D2C 756C     
     3D2E 6C2E     
0131                                  even
0132 3D30 2C43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range'
     3D32 6F70     
     3D34 792F     
     3D36 4D6F     
     3D38 7665     
     3D3A 2074     
     3D3C 6172     
     3D3E 6765     
     3D40 7420     
     3D42 6D75     
     3D44 7374     
     3D46 2062     
     3D48 6520     
     3D4A 6F75     
     3D4C 7473     
     3D4E 6964     
     3D50 6520     
     3D52 4D31     
     3D54 2D4D     
     3D56 3220     
     3D58 7261     
     3D5A 6E67     
     3D5C 65       
0133                                  even
0134               ;--------------------------------------------------------------
0135               ; Strings for command buffer
0136               ;--------------------------------------------------------------
0137 3D5E 013E     txt.cmdb.prompt    stri '>'
0138                                  even
0139 3D60 0D43     txt.colorscheme    stri 'Color scheme:'
     3D62 6F6C     
     3D64 6F72     
     3D66 2073     
     3D68 6368     
     3D6A 656D     
     3D6C 653A     
0140                                  even
0141               ;--------------------------------------------------------------
0142               ; Strings for command buffer
0143               ;--------------------------------------------------------------
0144 3D6E 0102     txt.picker.icon1   byte 1,2
0145                                  even
0146 3D70 0103     txt.picker.icon2   byte 1,3
0147                                  even
0148               
0149               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D72 0650     def.printer.fname   stri 'PI.PIO'
     3D74 492E     
     3D76 5049     
     3D78 4F       
0008 3D79   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D7A 4453     
     3D7C 4B31     
     3D7E 2E43     
     3D80 4C49     
     3D82 50       
0009                                   even
0010 3D84 0954     def.clip.fname.b    stri 'TIPI.CLIP'
     3D86 4950     
     3D88 492E     
     3D8A 434C     
     3D8C 4950     
0011                                   even
0012 3D8E 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3D90 4453     
     3D92 4B2C     
     3D94 4844     
     3D96 582C     
     3D98 4944     
     3D9A 452C     
     3D9C 5049     
     3D9E 2E2C     
     3DA0 5049     
     3DA2 4F2C     
     3DA4 5449     
     3DA6 5049     
     3DA8 2E2C     
     3DAA 5244     
     3DAC 2C53     
     3DAE 4353     
     3DB0 2C53     
     3DB2 4444     
     3DB4 2C57     
     3DB6 4453     
     3DB8 2C52     
     3DBA 5332     
     3DBC 3332     
0013                                   even
0014 3DBE 0546     def.fg99.fname      stri 'FCMDC'
     3DC0 434D     
     3DC2 4443     
0015                                   even
                   < ram.resident.asm
                   < stevie_b1.asm
0054                       ;------------------------------------------------------
0055                       ; Activate bank 1 and branch to  >6036
0056                       ;------------------------------------------------------
0057 3DC4 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3DC6 6002     
0058               
0062               
0063 3DC8 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3DCA 6046     
0064               ***************************************************************
0065               * Step 3: Include main editor modules
0066               ********|*****|*********************|**************************
0067               main:
0068                       aorg  kickstart.code2       ; >6046
0069 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0070                       ;-----------------------------------------------------------------------
0071                       ; Include files
0072                       ;-----------------------------------------------------------------------
0073                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1304  14         jeq   main.continue         ; Yes, we're good. Initialize
0030                       ;------------------------------------------------------
0031                       ; Show "F18A NOT FOUND" message
0032                       ;------------------------------------------------------
0033 6050 06A0  32         bl    @putstr
     6052 241E     
0034 6054 6110                   data txt.nof18a       ; Show message
0035 6056 10FF  14         jmp   $                     ; Halt here
0036               
0037               main.continue:
0038                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0039               
0040                       ;------------------------------------------------------
0041                       ; Setup F18A VDP
0042                       ;------------------------------------------------------
0043 6058 06A0  32         bl    @mute                 ; Turn sound generators off
     605A 28AA     
0044 605C 06A0  32         bl    @scroff               ; Turn screen off
     605E 26E6     
0045                       ;------------------------------------------------------
0046                       ; Clear VDP memory >0000 - >0fff
0047                       ;------------------------------------------------------
0048 6060 06A0  32         bl    @filv
     6062 228E     
0049 6064 0000                   data >0000,32,>0960   ; Clear screen area
     6066 0020     
     6068 0960     
0050               
0051 606A 06A0  32         bl    @filv
     606C 228E     
0052 606E 0960                   data >0960,00,>06a0   ; Clear area for record buffer + PAB, etc.
     6070 0000     
     6072 06A0     
0053                       ;------------------------------------------------------
0054                       ; Initialize high memory expansion
0055                       ;------------------------------------------------------
0056 6074 06A0  32         bl    @film
     6076 2236     
0057 6078 A000                   data >a000,00,>4f00   ; Clear a000-eeef
     607A 0000     
     607C 4F00     
0058                       ;------------------------------------------------------
0059                       ; Setup cursor, screen, etc.
0060                       ;------------------------------------------------------
0061 607E 06A0  32         bl    @f18unl               ; Unlock the F18a
     6080 278A     
0062               
0069               
0070 6082 06A0  32         bl    @putvr                ; Turn on position based attributes
     6084 2332     
0071 6086 3202                   data >3202            ; F18a VR50 (>32), bit 2
0072               
0073 6088 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     608A 2706     
0074 608C 06A0  32         bl    @s8x8                 ; Small sprite
     608E 2716     
0075               
0076 6090 06A0  32         bl    @cpym2m
     6092 253A     
0077 6094 391E                   data romsat,ramsat,14 ; Load sprite SAT
     6096 A056     
     6098 000E     
0078               
0079 609A C820  54         mov   @romsat+2,@tv.curshape
     609C 3920     
     609E A214     
0080                                                   ; Save cursor shape & color
0081               
0082 60A0 06A0  32         bl    @vdp.dump.patterns    ; Dump sprite and character patterns to VDP
     60A2 7AB2     
0083               
0084 60A4 04E0  34         clr   @parm1                ; Pick font 0
     60A6 A006     
0085 60A8 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     60AA 7ADA     
0086                                                   ; \ i  @parm1       = Font index (0-5)
0087                                                   ; / o  @tv.font.ptr = Pointer to font
0088               *--------------------------------------------------------------
0089               * Initialize
0090               *--------------------------------------------------------------
0091 60AC 06A0  32         bl    @mem.sams.setup.stevie
     60AE 6138     
0092                                                   ; Load SAMS pages for stevie
0093               
0094 60B0 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60B2 33D8     
0095 60B4 06A0  32         bl    @tv.reset             ; Reset editor
     60B6 7B52     
0096               
0097 60B8 06A0  32         bl    @dialog               ; Setup memory for dialogs stringa
     60BA 78DA     
0098                       ;------------------------------------------------------
0099                       ; Load colorscheme and turn on screen
0100                       ;------------------------------------------------------
0101 60BC 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60BE A006     
0102 60C0 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60C2 A008     
0103 60C4 04E0  34         clr   @parm3                ; Colorize all panes
     60C6 A00A     
0104               
0105 60C8 06A0  32         bl    @pane.colorscheme.load
     60CA 7A16     
0106                                                   ; Reload color scheme
0107                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0108                                                   ; | i  @parm2 = Skip colorizing marked lines
0109                                                   ; |             if >FFFF
0110                                                   ; | i  @parm3 = Only colorize CMDB pane
0111                                                   ; /             if >FFFF
0112               
0113                       ;-------------------------------------------------------
0114                       ; Setup editor tasks
0115                       ;-------------------------------------------------------
0116 60CC 06A0  32         bl    @at
     60CE 2726     
0117 60D0 0000                   data  >0000           ; Cursor YX position = >0000
0118               
0119 60D2 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60D4 A064     
0120 60D6 C804  30         mov   tmp0,@wtitab          ; /
     60D8 832C     
0121               
0123               
0124 60DA 06A0  32         bl    @mkslot
     60DC 2F86     
0125 60DE 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60E0 7542     
0126 60E2 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60E4 385C     
0127 60E6 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60E8 38FE     
0128 60EA 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60EC 3912     
0129 60EE FFFF                   data eol
0130               
0140               
0141 60F0 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60F2 0300     
0142 60F4 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60F6 8314     
0143                       ;-------------------------------------------------------
0144                       ; Setup keyboard scanning and start kernel/timers
0145                       ;-------------------------------------------------------
0146 60F8 06A0  32         bl    @mkhook
     60FA 2F72     
0147 60FC 615C                   data edkey.keyscan.hook
0148                                                   ; Setup keyboard scanning hook
0149                       ;-------------------------------------------------------
0150                       ; Initialisation complete
0151                       ;-------------------------------------------------------
0152 60FE 06A0  32         bl    @magic.set            ; Set magic string
     6100 7BD4     
0153               
0154 6102 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     6104 37D7     
0155 6106 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     6108 8370     
0156 610A 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0157                       ;-------------------------------------------------------
0158                       ; Start kernel
0159                       ;-------------------------------------------------------
0160 610C 0460  28         b     @tmgr                 ; Run kernel and timers
     610E 2EBE     
0161               
0162               
0163 6110 264E     txt.nof18a stri 'NO F18A FOUND. STEVIE CANNOT RUN HERE.'
     6112 4F20     
     6114 4631     
     6116 3841     
     6118 2046     
     611A 4F55     
     611C 4E44     
     611E 2E20     
     6120 5354     
     6122 4556     
     6124 4945     
     6126 2043     
     6128 414E     
     612A 4E4F     
     612C 5420     
     612E 5255     
     6130 4E20     
     6132 4845     
     6134 5245     
     6136 2E       
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Low-level modules
0076                       ;-----------------------------------------------------------------------
0077                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 6138 0649  14         dect  stack
0018 613A C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 613C 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     613E 7BB0     
0023               
0024 6140 06A0  32         bl    @sams.layout.copy
     6142 269E     
0025 6144 A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026                       ;------------------------------------------------------
0027                       ; Set lowest / highest page in use for editor buffer
0028                       ;------------------------------------------------------
0029 6146 C820  54         mov   @tv.sams.c000,@edb.sams.page
     6148 A208     
     614A A518     
0030 614C C820  54         mov   @edb.sams.page,@edb.sams.lopage
     614E A518     
     6150 A51A     
0031 6152 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6154 A518     
     6156 A51C     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               mem.sams.setup.stevie.exit:
0036 6158 C2F9  30         mov   *stack+,r11           ; Pop r11
0037 615A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Keyboard actions
0080                       ;-----------------------------------------------------------------------
0081                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 615C 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     615E A900     
0013                                                   ; on the stack anymore.
0014               
0015 6160 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6162 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6164 FFCE     
0020 6166 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6168 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 616A 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     616C 200A     
0025 616E 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 6170 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6172 200A     
0031 6174 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     6176 2002     
     6178 A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 617A C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     617C A028     
     617E A02A     
0036 6180 0460  28         b     @edkey.key.process    ; Process key
     6182 61A2     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 6184 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     6186 A026     
0042 6188 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     618A 2002     
0043 618C 1308  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 618E 04E0  34         clr   @keycode1             ; \
     6190 A028     
0047 6192 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6194 A02A     
0048 6196 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     6198 0001     
0049 619A C804  38         mov   tmp0,@kbflags         ; /
     619C A026     
0050                       ;------------------------------------------------------
0051                       ; Exit keyboard hook
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.exit:
0054 619E 0460  28         b     @hookok               ; Return
     61A0 2EC2     
0055                       ;------------------------------------------------------
0056                       ; Keyboard debounce
0057                       ;------------------------------------------------------
0058      2EC2     edkey.keyscan.hook.debounce  equ  hookok
                   < stevie_b1.asm
0082                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 61A2 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     61A4 A028     
0009 61A6 0A85  32         sla   tmp1,8                ; Move to MSB
0010 61A8 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 61AA C1A0  34         mov   @tv.pane.focus,tmp2
     61AC A22A     
0015 61AE 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     61B0 0000     
0016 61B2 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 61B4 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     61B6 0001     
0020 61B8 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 61BA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     61BC FFCE     
0026 61BE 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     61C0 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 61C2 0285  22         ci    tmp1,>2000            ; Space key pressed?
     61C4 2000     
0032 61C6 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 61C8 0649  14         dect  stack
0038 61CA C644  30         mov   tmp0,*stack           ; Push tmp0
0039 61CC 0649  14         dect  stack
0040 61CE C645  30         mov   tmp1,*stack           ; Push tmp1
0041 61D0 0649  14         dect  stack
0042 61D2 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 61D4 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 61D6 020C  20         li    r12,>0024             ; CRU address decoder
     61D8 0024     
0046 61DA 30C4  30         ldcr  tmp0,3                ; Select column
0047 61DC 020C  20         li    r12,>0006             ; Address of the first row
     61DE 0006     
0048 61E0 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61E2 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61E4 4000     
0050 61E6 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61E8 C339  30         mov   *stack+,r12           ; Pop r12
0056 61EA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61EE 0460  28         b     @edkey.action.block.mark
     61F0 6844     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61F2 C339  30         mov   *stack+,r12           ; Pop r12
0065 61F4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61F8 0206  20         li    tmp2,keymap_actions.editor
     61FA 7C0A     
0072 61FC 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61FE 0206  20         li    tmp2,keymap_actions.cmdb
     6200 7CE4     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 6202 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 6204 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 6206 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 6208 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 620A 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     620C 6100     
0096 620E 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 6210 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     6212 7A00     
0099 6214 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 6216 0225  22         ai    tmp1,->2000           ; Make uppercase
     6218 E000     
0102 621A 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 621C 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 621E 0225  22         ai    tmp1,>2000            ; Make lowercase
     6220 2000     
0109               
0110               edkey.key.check.next.entry:
0111 6222 0226  22         ai    tmp2,4                ; Skip current entry
     6224 0004     
0112 6226 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 6228 0586  14         inc   tmp2                  ; Move to scope
0118 622A 9816  42         cb    *tmp2,@tv.pane.focus+1
     622C A22B     
0119                                                   ; (1) Process key if scope matches pane
0120 622E 1309  14         jeq   edkey.key.process.action
0121               
0122 6230 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     6232 A721     
0123 6234 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 6236 0226  22         ai    tmp2,3                ; Skip current entry
     6238 0003     
0128 623A C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     623C A028     
0129 623E 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6240 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 6242 0586  14         inc   tmp2                  ; Move to action address
0136 6244 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 6246 0204  20         li    tmp0,id.dialog.unsaved
     6248 0065     
0139 624A 8120  34         c     @cmdb.dialog,tmp0
     624C A720     
0140 624E 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6250 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6252 A730     
0143 6254 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 6256 C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     6258 A22A     
0149 625A 1607  14         jne   !                     ; No, skip frame buffer processing
0150 625C C120  34         mov   @edb.locked,tmp0      ; Is editor locked?
     625E A5DA     
0151 6260 1619  14         jne   edkey.key.process.flash
0152                                                   ; Yes, flash screen and exit
0153 6262 C105  18         mov   tmp1,tmp0             ; Get keycode
0154 6264 06A0  32         bl    @edk.fb.char          ; Add character to frame buffer
     6266 69C6     
0155                                                   ; \ i  tmp0 = Keycode (MSB)
0156                                                   ; /
0157 6268 102F  14         jmp   edkey.key.process.exit
0158                       ;-------------------------------------------------------
0159                       ; (11) CMDB buffer
0160                       ;-------------------------------------------------------
0161 626A 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     626C 0001     
0162 626E 1607  14         jne   edkey.key.process.crash
0163                                                   ; No, crash
0164                       ;-------------------------------------------------------
0165                       ; Don't add character if dialog has ID >= 100
0166                       ;-------------------------------------------------------
0167 6270 C120  34         mov   @cmdb.dialog,tmp0
     6272 A720     
0168 6274 0284  22         ci    tmp0,99
     6276 0063     
0169 6278 1506  14         jgt   edkey.key.process.enter
0170                       ;-------------------------------------------------------
0171                       ; Add character to CMDB
0172                       ;-------------------------------------------------------
0173 627A 0460  28         b     @edkey.action.cmdb.char
     627C 6A7E     
0174                                                   ; Add character to CMDB buffer
0175                       ;-------------------------------------------------------
0176                       ; Crash
0177                       ;-------------------------------------------------------
0178               edkey.key.process.crash:
0179 627E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6280 FFCE     
0180 6282 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6284 2026     
0181                       ;-------------------------------------------------------
0182                       ; Check ENTER key if ID >= 100 and close pane if match
0183                       ;-------------------------------------------------------
0184               edkey.key.process.enter:
0185 6286 C120  34         mov   @keycode1,tmp0        ; Get key
     6288 A028     
0186 628A 0284  22         ci    tmp0,key.space        ; SPACE ?
     628C 0020     
0187 628E 161C  14         jne   edkey.key.process.exit
0188 6290 0460  28         b     @edkey.action.cmdb.close.dialog
     6292 7038     
0189                       ;-------------------------------------------------------
0190                       ; Flash screen if editor is locked
0191                       ;-------------------------------------------------------
0192               edkey.key.process.flash:
0193 6294 04E0  34         clr   @parm1                  ; Screen off
     6296 A006     
0194 6298 04E0  34         clr   @parm2                  ; Marked lines colored
     629A A008     
0195 629C 04E0  34         clr   @parm3                  ; Color everything
     629E A00A     
0196               
0197 62A0 0649  14         dect  stack
0198 62A2 C660  46         mov   @tv.colorscheme,*stack  ; Backup color theme
     62A4 A212     
0199 62A6 C820  54         mov   @const.13,@tv.colorscheme
     62A8 3954     
     62AA A212     
0200                                                     ; Set color scheme
0201               
0202 62AC 06A0  32         bl    @pane.colorscheme.load  ; Load colorschene
     62AE 7A16     
0203                                                     ; \ i  parm1 = Screen on/off
0204                                                     ; | i  parm2 = Marked lines colored
0205                                                     ; / i  parm3 = Color everything
0206               
0207 62B0 C839  50         mov   *stack+,@tv.colorscheme ; Restore color theme
     62B2 A212     
0208               
0209 62B4 0720  34         seto  @parm1                  ; Screen on
     62B6 A006     
0210 62B8 04E0  34         clr   @parm2                  ; Marked lines colored
     62BA A008     
0211 62BC 04E0  34         clr   @parm3                  ; Color everything
     62BE A00A     
0212               
0213 62C0 06A0  32         bl    @pane.colorscheme.load  ; Load colorschene
     62C2 7A16     
0214                                                     ; \ i  parm1 = Screen on/off
0215                                                     ; | i  parm2 = Marked lines colored
0216                                                     ; / i  parm3 = Color everything
0217               
0218 62C4 06A0  32         bl    @edb.lock               ; Call lock function to show message again
     62C6 73FA     
0219                       ;-------------------------------------------------------
0220                       ; Exit
0221                       ;-------------------------------------------------------
0222               edkey.key.process.exit:
0223 62C8 0460  28         b     @edkey.keyscan.hook.debounce
     62CA 2EC2     
0224                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; Keyboard actions - Framebuffer (1)
0085                       ;-----------------------------------------------------------------------
0086                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 62CC C120  34         mov   @fb.column,tmp0
     62CE A30C     
0009 62D0 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 62D2 0620  34         dec   @fb.column            ; Column-- in screen buffer
     62D4 A30C     
0014 62D6 0620  26         dec   @wyx                  ; Column-- VDP cursor
     62D8 832A     
0015 62DA 0620  34         dec   @fb.current
     62DC A302     
0016 62DE 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62E0 A31C     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 62E2 0460  28 !       b     @edkey.keyscan.hook.debounce
     62E4 2EC2     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 62E6 8820  50         c     @fb.column,@fb.row.length
     62E8 A30C     
     62EA A308     
0029 62EC 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 62EE 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     62F0 A30C     
0034 62F2 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     62F4 832A     
0035 62F6 05A0  34         inc   @fb.current
     62F8 A302     
0036 62FA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62FC A31C     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 62FE 0460  28 !       b     @edkey.keyscan.hook.debounce
     6300 2EC2     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 6302 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     6304 7976     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 6306 0460  28         b     @edkey.keyscan.hook.debounce
     6308 2EC2     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 630A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     630C A31C     
0061 630E C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     6310 A308     
0062 6312 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     6314 0050     
0063 6316 1102  14         jlt   !                     ; | is right of last character on line,
0064 6318 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     631A 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 631C C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     631E A30C     
0069 6320 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     6322 273E     
0070               
0071 6324 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6326 31A8     
0072                                                   ; \ i   @fb.top      = Address top row in FB
0073                                                   ; | i   @fb.topline  = Top line in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; |                  (offset 0..@fb.scrrows)
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; | i   @fb.colsline = Columns per line FB
0078                                                   ; |
0079                                                   ; / o   @fb.current  = Updated pointer
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083 6328 0460  28         b     @edkey.keyscan.hook.debounce
     632A 2EC2     
0084                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 632C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     632E A31C     
0009 6330 C120  34         mov   @fb.column,tmp0
     6332 A30C     
0010 6334 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 6336 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6338 A302     
0015 633A 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 633C 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 633E 0605  14         dec   tmp1
0022 6340 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 6342 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 6344 D195  26         movb  *tmp1,tmp2            ; Get character
0030 6346 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 6348 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 634A 0986  32         srl   tmp2,8                ; Right justify
0033 634C 0286  22         ci    tmp2,32               ; Space character found?
     634E 0020     
0034 6350 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 6352 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6354 2020     
0040 6356 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 6358 0287  22         ci    tmp3,>20ff            ; First character is space
     635A 20FF     
0043 635C 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 635E C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     6360 A30C     
0048 6362 61C4  18         s     tmp0,tmp3
0049 6364 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     6366 0002     
0050 6368 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 636A 0585  14         inc   tmp1
0056 636C 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 636E C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6370 A30C     
0062 6372 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6374 273E     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 6376 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6378 31A8     
0068                                                   ; \ i   @fb.top      = Address top row in FB
0069                                                   ; | i   @fb.topline  = Top line in FB
0070                                                   ; | i   @fb.row      = Current row in FB
0071                                                   ; |                  (offset 0..@fb.scrrows)
0072                                                   ; | i   @fb.column   = Current column in FB
0073                                                   ; | i   @fb.colsline = Columns per line FB
0074                                                   ; |
0075                                                   ; / o   @fb.current  = Updated pointer
0076               
0080               
0081 637A 0460  28 !       b     @edkey.keyscan.hook.debounce ; Back to editor main
     637C 2EC2     
0082               
0083               
0084               
0085               *---------------------------------------------------------------
0086               * Cursor next word
0087               *---------------------------------------------------------------
0088               edkey.action.nword:
0089 637E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6380 A31C     
0090 6382 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0091 6384 C120  34         mov   @fb.column,tmp0
     6386 A30C     
0092 6388 8804  34         c     tmp0,@fb.row.length
     638A A308     
0093 638C 1426  14         jhe   !                     ; column=last char ? Skip further processing
0094                       ;-------------------------------------------------------
0095                       ; Prepare 2 char buffer
0096                       ;-------------------------------------------------------
0097 638E C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6390 A302     
0098 6392 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0099 6394 1006  14         jmp   edkey.action.nword_scan_char
0100                       ;-------------------------------------------------------
0101                       ; Multiple spaces mode
0102                       ;-------------------------------------------------------
0103               edkey.action.nword_ms:
0104 6396 0708  14         seto  tmp4                  ; Set multiple spaces mode
0105                       ;-------------------------------------------------------
0106                       ; Scan forward to first character following space
0107                       ;-------------------------------------------------------
0108               edkey.action.nword_scan
0109 6398 0585  14         inc   tmp1
0110 639A 0584  14         inc   tmp0                  ; Column++ in screen buffer
0111 639C 8804  34         c     tmp0,@fb.row.length
     639E A308     
0112 63A0 1316  14         jeq   edkey.action.nword_done
0113                                                   ; Column=last char ? Skip further processing
0114                       ;-------------------------------------------------------
0115                       ; Check character
0116                       ;-------------------------------------------------------
0117               edkey.action.nword_scan_char
0118 63A2 D195  26         movb  *tmp1,tmp2            ; Get character
0119 63A4 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0120 63A6 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0121 63A8 0986  32         srl   tmp2,8                ; Right justify
0122               
0123 63AA 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     63AC FFFF     
0124 63AE 1604  14         jne   edkey.action.nword_scan_char_other
0125                       ;-------------------------------------------------------
0126                       ; Special handling if multiple spaces found
0127                       ;-------------------------------------------------------
0128               edkey.action.nword_scan_char_ms:
0129 63B0 0286  22         ci    tmp2,32
     63B2 0020     
0130 63B4 160C  14         jne   edkey.action.nword_done
0131                                                   ; Exit if non-space found
0132 63B6 10F0  14         jmp   edkey.action.nword_scan
0133                       ;-------------------------------------------------------
0134                       ; Normal handling
0135                       ;-------------------------------------------------------
0136               edkey.action.nword_scan_char_other:
0137 63B8 0286  22         ci    tmp2,32               ; Space character found?
     63BA 0020     
0138 63BC 16ED  14         jne   edkey.action.nword_scan
0139                                                   ; No space found, try again
0140                       ;-------------------------------------------------------
0141                       ; Space found, now look closer
0142                       ;-------------------------------------------------------
0143 63BE 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     63C0 2020     
0144 63C2 13E9  14         jeq   edkey.action.nword_ms
0145                                                   ; Yes, so continue scanning
0146 63C4 0287  22         ci    tmp3,>20ff            ; First characer is space?
     63C6 20FF     
0147 63C8 13E7  14         jeq   edkey.action.nword_scan
0148                       ;--------------------------------------------------------
0149                       ; Set cursor following space
0150                       ;--------------------------------------------------------
0151 63CA 0585  14         inc   tmp1
0152 63CC 0584  14         inc   tmp0                  ; Column++ in screen buffer
0153                       ;-------------------------------------------------------
0154                       ; Save position and position hardware cursor
0155                       ;-------------------------------------------------------
0156               edkey.action.nword_done:
0157 63CE C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     63D0 A30C     
0158 63D2 06A0  32         bl    @xsetx                ; Set VDP cursor X
     63D4 273E     
0159                       ;-------------------------------------------------------
0160                       ; Exit
0161                       ;-------------------------------------------------------
0162               edkey.action.nword.exit:
0163 63D6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     63D8 31A8     
0164                                                   ; \ i   @fb.top      = Address top row in FB
0165                                                   ; | i   @fb.topline  = Top line in FB
0166                                                   ; | i   @fb.row      = Current row in FB
0167                                                   ; |                  (offset 0..@fb.scrrows)
0168                                                   ; | i   @fb.column   = Current column in FB
0169                                                   ; | i   @fb.colsline = Columns per line FB
0170                                                   ; |
0171                                                   ; / o   @fb.current  = Updated pointer
0172               
0176               
0177 63DA 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     63DC 2EC2     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 63DE C120  34         mov   @fb.vwco,tmp0
     63E0 A310     
0009 63E2 0284  22         ci    tmp0,16
     63E4 0010     
0010 63E6 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 63E8 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 63EA 04E0  34         clr   @parm1
     63EC A006     
0016 63EE 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 63F0 0224  22 !       ai    tmp0,-16              ; Scroll left
     63F2 FFF0     
0021 63F4 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63F6 A006     
0022               
0023 63F8 0204  20         li    tmp0,16               ; Temporary constant
     63FA 0010     
0024 63FC 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     63FE A30C     
     6400 200E     
0025 6402 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 6404 A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     6406 A30C     
0030 6408 A804  30         a     tmp0,@wyx             ; VDP Cursor
     640A 832A     
0031 640C A804  38         a     tmp0,@fb.current
     640E A302     
0032 6410 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 6412 C120  34         mov   @fb.vwco,tmp0
     6414 A310     
0040 6416 0284  22         ci    tmp0,175
     6418 00AF     
0041 641A 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 641C 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 641E 04E0  34         clr   @parm1
     6420 A006     
0047 6422 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 6424 0224  22 !       ai    tmp0,16               ; Scroll right
     6426 0010     
0052 6428 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     642A A006     
0053               
0054 642C 0204  20         li    tmp0,16               ; Temporary constant
     642E 0010     
0055 6430 8120  34         c     @fb.column,tmp0
     6432 A30C     
0056 6434 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 6436 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     6438 A30C     
0061 643A 6804  30         s     tmp0,@wyx             ; VDP Cursor
     643C 832A     
0062 643E 6804  38         s     tmp0,@fb.current
     6440 A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 6442 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     6444 7924     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 6446 0460  28         b     @edkey.keyscan.hook.debounce
     6448 2EC2     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0089                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 644A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     644C A31C     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 644E 8820  50         c     @fb.row.dirty,@w$ffff
     6450 A30A     
     6452 2022     
0013 6454 1604  14         jne   edkey.action.ppage.sanity
0014               
0015 6456 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6458 7282     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.row      = Current row in FB
0018                                                   ; | i   @fb.column   = Current column in FB
0019                                                   ; / i   @fb.colsline = Cols per line in FB
0020               
0021 645A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     645C A30A     
0022                       ;-------------------------------------------------------
0023                       ; Assert
0024                       ;-------------------------------------------------------
0025               edkey.action.ppage.sanity:
0026 645E C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     6460 A304     
0027 6462 1312  14         jeq   edkey.action.ppage.exit
0028                       ;-------------------------------------------------------
0029                       ; Special treatment top page
0030                       ;-------------------------------------------------------
0031 6464 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     6466 A31E     
0032 6468 1503  14         jgt   edkey.action.ppage.topline
0033 646A 04E0  34         clr   @fb.topline           ; topline = 0
     646C A304     
0034 646E 1003  14         jmp   edkey.action.ppage.refresh
0035                       ;-------------------------------------------------------
0036                       ; Adjust topline
0037                       ;-------------------------------------------------------
0038               edkey.action.ppage.topline:
0039 6470 6820  54         s     @fb.scrrows,@fb.topline
     6472 A31E     
     6474 A304     
0040                       ;-------------------------------------------------------
0041                       ; Refresh page
0042                       ;-------------------------------------------------------
0043               edkey.action.ppage.refresh:
0044 6476 C820  54         mov   @fb.topline,@parm1
     6478 A304     
     647A A006     
0045 647C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     647E A312     
0046               
0047 6480 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6482 A008     
0048               
0049 6484 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6486 64FC     
0050                                                   ; | i  @parm1 = Top line in editor buffer
0051                                                   ; / i  @parm2 = Row offset in frame buffer
0052                       ;-------------------------------------------------------
0053                       ; Exit
0054                       ;-------------------------------------------------------
0055               edkey.action.ppage.exit:
0056 6488 0460  28         b     @edkey.keyscan.hook.debounce
     648A 2EC2     
0057                                                   ; Back to editor main
0058               
0059               
0060               
0061               
0062               *---------------------------------------------------------------
0063               * Next page
0064               *---------------------------------------------------------------
0065               edkey.action.npage:
0066 648C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     648E A31C     
0067                       ;-------------------------------------------------------
0068                       ; Crunch current row if dirty
0069                       ;-------------------------------------------------------
0070 6490 8820  50         c     @fb.row.dirty,@w$ffff
     6492 A30A     
     6494 2022     
0071 6496 1604  14         jne   edkey.action.npage.sanity
0072               
0073 6498 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     649A 7282     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.row      = Current row in FB
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; / i   @fb.colsline = Cols per line in FB
0078               
0079 649C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     649E A30A     
0080                       ;-------------------------------------------------------
0081                       ; Assert
0082                       ;-------------------------------------------------------
0083               edkey.action.npage.sanity:
0084 64A0 C120  34         mov   @fb.topline,tmp0
     64A2 A304     
0085 64A4 A120  34         a     @fb.scrrows,tmp0
     64A6 A31E     
0086 64A8 0584  14         inc   tmp0                  ; Base 1 offset !
0087 64AA 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     64AC A504     
0088 64AE 150C  14         jgt   edkey.action.npage.exit
0089                       ;-------------------------------------------------------
0090                       ; Adjust topline
0091                       ;-------------------------------------------------------
0092               edkey.action.npage.topline:
0093 64B0 A820  54         a     @fb.scrrows,@fb.topline
     64B2 A31E     
     64B4 A304     
0094                       ;-------------------------------------------------------
0095                       ; Refresh page
0096                       ;-------------------------------------------------------
0097               edkey.action.npage.refresh:
0098 64B6 C820  54         mov   @fb.topline,@parm1
     64B8 A304     
     64BA A006     
0099 64BC 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64BE A312     
0100               
0101 64C0 04E0  34         clr   @parm2                ; No row offset in frame buffer
     64C2 A008     
0102               
0103 64C4 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64C6 64FC     
0104                                                   ; | i  @parm1 = Top line in editor buffer
0105                                                   ; / i  @parm2 = Row offset in frame buffer
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               edkey.action.npage.exit:
0110 64C8 0460  28         b     @edkey.keyscan.hook.debounce
     64CA 2EC2     
0111                                                   ; Back to editor main
                   < stevie_b1.asm
0090                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008 64CC 06A0  32         bl    @fb.cursor.top        ; Goto top of file
     64CE 798A     
0009 64D0 0460  28         b     @edkey.keyscan.hook.debounce
     64D2 2EC2     
0010                                                   ; Back to editor main
0011               
0012               *---------------------------------------------------------------
0013               * Goto top of screen
0014               *---------------------------------------------------------------
0015               edkey.action.topscr:
0016 64D4 06A0  32         bl    @fb.cursor.topscr     ; Goto top of screen
     64D6 7994     
0017 64D8 0460  28         b     @edkey.keyscan.hook.debounce
     64DA 2EC2     
0018                                                   ; Back to editor main
0019               
0020               *---------------------------------------------------------------
0021               * Goto bottom of file
0022               *---------------------------------------------------------------
0023               edkey.action.bot:
0024 64DC 06A0  32         bl    @fb.cursor.bot        ; Goto bottom of file
     64DE 799E     
0025 64E0 0460  28         b     @edkey.keyscan.hook.debounce
     64E2 2EC2     
0026                                                   ; Back to editor main
0027               
0028               *---------------------------------------------------------------
0029               * Goto bottom of screen
0030               *---------------------------------------------------------------
0031               edkey.action.botscr:
0032 64E4 06A0  32         bl    @fb.cursor.botscr     ; Goto bottom of screen
     64E6 79A8     
0033 64E8 0460  28         b     @edkey.keyscan.hook.debounce
     64EA 2EC2     
0034                                                   ; Back to editor main
0035               
0036               *---------------------------------------------------------------
0037               * Cursor up
0038               *---------------------------------------------------------------
0039               edkey.action.up:
0040 64EC 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     64EE 7962     
0041 64F0 0460  28         b     @edkey.keyscan.hook.debounce
     64F2 2EC2     
0042                                                   ; Back to editor main
0043               
0044               *---------------------------------------------------------------
0045               * Cursor down
0046               *---------------------------------------------------------------
0047               edkey.action.down:
0048 64F4 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     64F6 796C     
0049 64F8 0460  28         b     @edkey.keyscan.hook.debounce
     64FA 2EC2     
0050                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               * @parm2  = Row offset in frame buffer
0018               *
0019               * Register usage
0020               * none
0021               ********|*****|*********************|**************************
0022               edkey.fb.goto.toprow:
0023 64FC 0649  14         dect  stack
0024 64FE C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Assert on line
0027                       ;-------------------------------------------------------
0028 6500 C120  34         mov   @parm1,tmp0           ; \ Line number 0?
     6502 A006     
0029 6504 8120  34         c     @edb.lines,tmp0       ; | Line number beyond EOF ?
     6506 A504     
0030 6508 1B05  14         jh    edkey.fb.goto.offset  ; / No, keep on going
0031                       ;-------------------------------------------------------
0032                       ; Goto EOF
0033                       ;-------------------------------------------------------
0034 650A C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     650C A504     
     650E A006     
0035 6510 0620  34         dec   @parm1                ; / Base 0
     6512 A006     
0036                       ;-------------------------------------------------------
0037                       ; Assert on row offset in frame buffer
0038                       ;-------------------------------------------------------
0039               edkey.fb.goto.offset:
0040 6514 8820  50         c     @parm2,@fb.scrrows    ; Row offset off page ?
     6516 A008     
     6518 A31E     
0041 651A 1104  14         jlt   edkey.fb.goto.row     ; No, use row offset
0042 651C C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     651E A31E     
     6520 A306     
0043 6522 1003  14         jmp   edkey.fb.goto.line    ; Goto line
0044               edkey.fb.goto.row:
0045 6524 C820  54         mov   @parm2,@fb.row        ; Set row offset
     6526 A008     
     6528 A306     
0046                       ;-------------------------------------------------------
0047                       ; Goto line
0048                       ;-------------------------------------------------------
0049               edkey.fb.goto.line:
0050 652A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     652C A31C     
0051               
0052 652E 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6530 793A     
0053                                                   ; | i  @parm1 = Line to start with
0054                                                   ; /             (becomes @fb.topline)
0055               
0056 6532 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6534 A30C     
0057               
0058 6536 C120  34         mov   @fb.row,tmp0          ; \
     6538 A306     
0059 653A 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0060 653C C804  30         mov   tmp0,@wyx             ; /
     653E 832A     
0061               
0062 6540 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6542 31A8     
0063                                                   ; \ i   @fb.top      = Address top row in FB
0064                                                   ; | i   @fb.topline  = Top line in FB
0065                                                   ; | i   @fb.row      = Current row in FB
0066                                                   ; |                  (offset 0..@fb.scrrows)
0067                                                   ; | i   @fb.column   = Current column in FB
0068                                                   ; | i   @fb.colsline = Columns per line FB
0069                                                   ; |
0070                                                   ; / o   @fb.current  = Updated pointer
0071               
0072 6544 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6546 37B2     
0073                                                   ; | i  @fb.row        = Row in frame buffer
0074                                                   ; / o  @fb.row.length = Length of row
0075               
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079 6548 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0080 654A 0460  28         b     @edkey.keyscan.hook.debounce
     654C 2EC2     
0081                                                   ; Back to editor main
0082               
0083               
0084               *---------------------------------------------------------------
0085               * Goto specified line (@parm1) in editor buffer
0086               *---------------------------------------------------------------
0087               edkey.action.goto:
0088                       ;-------------------------------------------------------
0089                       ; Crunch current row if dirty
0090                       ;-------------------------------------------------------
0091 654E 8820  50         c     @fb.row.dirty,@w$ffff
     6550 A30A     
     6552 2022     
0092 6554 1609  14         jne   edkey.action.goto.refresh
0093               
0094 6556 0649  14         dect  stack
0095 6558 C660  46         mov   @parm1,*stack         ; Push parm1
     655A A006     
0096               
0097 655C 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     655E 7282     
0098                                                   ; \ i   @fb.top      = Address top row in FB
0099                                                   ; | i   @fb.row      = Current row in FB
0100                                                   ; | i   @fb.column   = Current column in FB
0101                                                   ; / i   @fb.colsline = Cols per line in FB
0102               
0103 6560 C839  50         mov   *stack+,@parm1        ; Pop parm1
     6562 A006     
0104 6564 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6566 A30A     
0105                       ;-------------------------------------------------------
0106                       ; Refresh page
0107                       ;-------------------------------------------------------
0108               edkey.action.goto.refresh:
0109 6568 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     656A A312     
0110               
0111 656C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     656E A008     
0112               
0113 6570 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6572 64FC     
0114                                                   ; | i  @parm1 = Top line in editor buffer
0115                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0092                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008                       ;-------------------------------------------------------
0009                       ; Skip if editor buffer is locked
0010                       ;-------------------------------------------------------
0011 6574 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     6576 A5DA     
0012 6578 163D  14         jne   edkey.action.del_char.exit
0013                                                   ; Yes, exit
0014                       ;-------------------------------------------------------
0015                       ; Get current line in editor buffer
0016                       ;-------------------------------------------------------
0017 657A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     657C A506     
0018 657E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6580 31A8     
0019                                                   ; \ i   @fb.top      = Address top row in FB
0020                                                   ; | i   @fb.topline  = Top line in FB
0021                                                   ; | i   @fb.row      = Current row in FB
0022                                                   ; |                  (offset 0..@fb.scrrows)
0023                                                   ; | i   @fb.column   = Current column in FB
0024                                                   ; | i   @fb.colsline = Columns per line FB
0025                                                   ; |
0026                                                   ; / o   @fb.current  = Updated pointer
0027                       ;-------------------------------------------------------
0028                       ; Assert 1 - Empty line
0029                       ;-------------------------------------------------------
0030               edkey.action.del_char.sanity1:
0031 6582 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6584 A308     
0032 6586 1336  14         jeq   edkey.action.del_char.exit
0033                                                   ; Exit if empty line
0034 6588 C120  34         mov   @fb.current,tmp0      ; Get pointer
     658A A302     
0035                       ;-------------------------------------------------------
0036                       ; Assert 2 - Already at EOL
0037                       ;-------------------------------------------------------
0038               edkey.action.del_char.sanity2:
0039 658C C1C6  18         mov   tmp2,tmp3             ; \
0040 658E 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0041 6590 81E0  34         c     @fb.column,tmp3
     6592 A30C     
0042 6594 110A  14         jlt   edkey.action.del_char.sanity3
0043                       ;------------------------------------------------------
0044                       ; At EOL - clear current character
0045                       ;------------------------------------------------------
0046 6596 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0047 6598 D505  30         movb  tmp1,*tmp0            ; /
0048 659A C820  54         mov   @fb.column,@fb.row.length
     659C A30C     
     659E A308     
0049                                                   ; Row length - 1
0050 65A0 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65A2 A30A     
0051 65A4 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65A6 A31A     
0052 65A8 1025  14         jmp  edkey.action.del_char.exit
0053                       ;-------------------------------------------------------
0054                       ; Assert 3 - Abort if row length > 80
0055                       ;-------------------------------------------------------
0056               edkey.action.del_char.sanity3:
0057 65AA 0286  22         ci    tmp2,colrow
     65AC 0050     
0058 65AE 1204  14         jle   edkey.action.del_char.prep
0059                                                   ; Continue if row length <= 80
0060                       ;-----------------------------------------------------------------------
0061                       ; CPU crash
0062                       ;-----------------------------------------------------------------------
0063 65B0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     65B2 FFCE     
0064 65B4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65B6 2026     
0065                       ;-------------------------------------------------------
0066                       ; Calculate number of characters to move
0067                       ;-------------------------------------------------------
0068               edkey.action.del_char.prep:
0069 65B8 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0070 65BA 61E0  34         s     @fb.column,tmp3
     65BC A30C     
0071 65BE 0607  14         dec   tmp3                  ; Remove base 1 offset
0072 65C0 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0073 65C2 C144  18         mov   tmp0,tmp1
0074 65C4 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0075 65C6 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     65C8 A30C     
0076                       ;-------------------------------------------------------
0077                       ; Setup pointers
0078                       ;-------------------------------------------------------
0079 65CA C120  34         mov   @fb.current,tmp0      ; Get pointer
     65CC A302     
0080 65CE C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0081 65D0 0585  14         inc   tmp1                  ; / tmp1 = Next character
0082                       ;-------------------------------------------------------
0083                       ; Loop from current character until end of line
0084                       ;-------------------------------------------------------
0085               edkey.action.del_char.loop:
0086 65D2 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0087 65D4 0606  14         dec   tmp2
0088 65D6 16FD  14         jne   edkey.action.del_char.loop
0089                       ;-------------------------------------------------------
0090                       ; Special treatment if line 80 characters long
0091                       ;-------------------------------------------------------
0092 65D8 0206  20         li    tmp2,colrow
     65DA 0050     
0093 65DC 81A0  34         c     @fb.row.length,tmp2
     65DE A308     
0094 65E0 1603  14         jne   edkey.action.del_char.save
0095 65E2 0604  14         dec   tmp0                  ; One time adjustment
0096 65E4 04C5  14         clr   tmp1
0097 65E6 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0098                       ;-------------------------------------------------------
0099                       ; Save variables
0100                       ;-------------------------------------------------------
0101               edkey.action.del_char.save:
0102 65E8 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65EA A30A     
0103 65EC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65EE A31A     
0104 65F0 0620  34         dec   @fb.row.length        ; @fb.row.length--
     65F2 A308     
0105                       ;-------------------------------------------------------
0106                       ; Exit
0107                       ;-------------------------------------------------------
0108               edkey.action.del_char.exit:
0109 65F4 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     65F6 2EC2     
0110               
0111               
0112               *---------------------------------------------------------------
0113               * Delete until end of line
0114               *---------------------------------------------------------------
0115               edkey.action.del_eol:
0116                       ;-------------------------------------------------------
0117                       ; Skip if editor buffer is locked
0118                       ;-------------------------------------------------------
0119 65F8 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     65FA A5DA     
0120 65FC 1618  14         jne   edkey.action.del_eol.exit
0121                                                   ; Yes, exit
0122                       ;-------------------------------------------------------
0123                       ; Get current line in editor buffer
0124                       ;-------------------------------------------------------
0125 65FE 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6600 A506     
0126 6602 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6604 31A8     
0127                                                   ; \ i   @fb.top      = Address top row in FB
0128                                                   ; | i   @fb.topline  = Top line in FB
0129                                                   ; | i   @fb.row      = Current row in FB
0130                                                   ; |                  (offset 0..@fb.scrrows)
0131                                                   ; | i   @fb.column   = Current column in FB
0132                                                   ; | i   @fb.colsline = Columns per line FB
0133                                                   ; |
0134                                                   ; / o   @fb.current  = Updated pointer
0135               
0136 6606 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6608 A308     
0137 660A 1311  14         jeq   edkey.action.del_eol.exit
0138                                                   ; Exit if empty line
0139                       ;-------------------------------------------------------
0140                       ; Prepare for erase operation
0141                       ;-------------------------------------------------------
0142 660C C120  34         mov   @fb.current,tmp0      ; Get pointer
     660E A302     
0143 6610 C1A0  34         mov   @fb.colsline,tmp2
     6612 A30E     
0144 6614 61A0  34         s     @fb.column,tmp2
     6616 A30C     
0145 6618 04C5  14         clr   tmp1
0146                       ;-------------------------------------------------------
0147                       ; Loop until last column in frame buffer
0148                       ;-------------------------------------------------------
0149               edkey.action.del_eol_loop:
0150 661A DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0151 661C 0606  14         dec   tmp2
0152 661E 16FD  14         jne   edkey.action.del_eol_loop
0153                       ;-------------------------------------------------------
0154                       ; Save variables
0155                       ;-------------------------------------------------------
0156 6620 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6622 A30A     
0157 6624 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6626 A31A     
0158               
0159 6628 C820  54         mov   @fb.column,@fb.row.length
     662A A30C     
     662C A308     
0160                                                   ; Set new row length
0161                       ;-------------------------------------------------------
0162                       ; Exit
0163                       ;-------------------------------------------------------
0164               edkey.action.del_eol.exit:
0165 662E 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6630 2EC2     
0166               
0167               
0168               *---------------------------------------------------------------
0169               * Delete current line
0170               *---------------------------------------------------------------
0171               edkey.action.del_line:
0172                       ;-------------------------------------------------------
0173                       ; Skip if editor buffer is locked
0174                       ;-------------------------------------------------------
0175 6632 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     6634 A5DA     
0176 6636 1631  14         jne   edkey.action.del_line.exit2
0177                                                   ; Yes, exit
0178                       ;-------------------------------------------------------
0179                       ; Get current line in editor buffer
0180                       ;-------------------------------------------------------
0181 6638 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     663A 31A8     
0182                                                   ; \ i   @fb.top      = Address top row in FB
0183                                                   ; | i   @fb.topline  = Top line in FB
0184                                                   ; | i   @fb.row      = Current row in FB
0185                                                   ; |                  (offset 0..@fb.scrrows)
0186                                                   ; | i   @fb.column   = Current column in FB
0187                                                   ; | i   @fb.colsline = Columns per line FB
0188                                                   ; |
0189                                                   ; / o   @fb.current  = Updated pointer
0190               
0191 663C 04E0  34         clr   @fb.row.dirty         ; Discard current line
     663E A30A     
0192               
0193 6640 C820  54         mov   @fb.topline,@parm1    ; \
     6642 A304     
     6644 A006     
0194 6646 A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     6648 A306     
     664A A006     
0195 664C 05A0  34         inc   @parm1                ; /
     664E A006     
0196               
0197                       ;-------------------------------------------------------
0198                       ; Special handling if at BOT (no real line)
0199                       ;-------------------------------------------------------
0200 6650 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     6652 A006     
     6654 A504     
0201 6656 1207  14         jle   edkey.action.del_line.doit
0202                                                   ; No, is real line. Continue with delete.
0203               
0204 6658 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     665A A304     
     665C A006     
0205 665E 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6660 793A     
0206                                                   ; \ i  @parm1 = Line to start with
0207                                                   ; /
0208 6662 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6664 64EC     
0209                       ;-------------------------------------------------------
0210                       ; Delete line in editor buffer
0211                       ;-------------------------------------------------------
0212               edkey.action.del_line.doit:
0213 6666 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     6668 7A96     
0214                                                   ; \ i  @parm1 = Line number to delete
0215                                                   ; /
0216               
0217 666A 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     666C A006     
     666E A504     
0218 6670 1302  14         jeq   edkey.action.del_line.refresh
0219                                                   ; Yes, skip get length. No need for garbage.
0220                       ;-------------------------------------------------------
0221                       ; Get length of current row in frame buffer
0222                       ;-------------------------------------------------------
0223 6672 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     6674 37B2     
0224                                                   ; \ i  @fb.row        = Current row
0225                                                   ; / o  @fb.row.length = Length of row
0226                       ;-------------------------------------------------------
0227                       ; Refresh frame buffer
0228                       ;-------------------------------------------------------
0229               edkey.action.del_line.refresh:
0230 6676 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6678 A304     
     667A A006     
0231               
0232 667C 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     667E 793A     
0233                                                   ; \ i  @parm1 = Line to start with
0234                                                   ; /
0235               
0236 6680 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6682 A506     
0237                       ;-------------------------------------------------------
0238                       ; Special treatment if current line was last line
0239                       ;-------------------------------------------------------
0240 6684 C120  34         mov   @fb.topline,tmp0
     6686 A304     
0241 6688 A120  34         a     @fb.row,tmp0
     668A A306     
0242               
0243 668C 8804  34         c     tmp0,@edb.lines       ; Was last line?
     668E A504     
0244 6690 1102  14         jlt   edkey.action.del_line.exit
0245               
0246 6692 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6694 64EC     
0247                       ;-------------------------------------------------------
0248                       ; Exit
0249                       ;-------------------------------------------------------
0250               edkey.action.del_line.exit:
0251 6696 0460  28         b     @edkey.action.home           ; Move cursor to home and return
     6698 6302     
0252               edkey.action.del_line.exit2:
0253 669A 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     669C 2EC2     
                   < stevie_b1.asm
0093                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010                       ;-------------------------------------------------------
0011                       ; Skip if editor buffer is locked
0012                       ;-------------------------------------------------------
0013 669E C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     66A0 A5DA     
0014 66A2 1605  14         jne   edkey.action.ins_char.ws.exit
0015                                                   ; Yes, exit
0016                       ;-------------------------------------------------------
0017                       ; Insert character
0018                       ;-------------------------------------------------------
0019 66A4 C820  54         mov   @edkey.actions.ins.char.ws.data,@parm1
     66A6 66B2     
     66A8 A006     
0020                                                   ; White space, freeze cursor
0021               
0022 66AA 06A0  32         bl    @fb.insert.char       ; Insert character
     66AC 79B2     
0023                                                   ; \ i  @parm1 = MSB character to insert
0024                                                   ; |             LSB = 0 move cursor right
0025                                                   ; /             LSB > 0 do not move cursor
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.ins_char.ws.exit:
0030 66AE 0460  28         b     @edkey.keyscan.hook.debounce
     66B0 2EC2     
0031                                                   ; Back to editor main
0032               edkey.actions.ins.char.ws.data:
0033 66B2 20FF             data  >20ff
0034               
0035               *---------------------------------------------------------------
0036               * Insert new line on current line
0037               *---------------------------------------------------------------
0038               edkey.action.ins_line:
0039                       ;-------------------------------------------------------
0040                       ; Skip if editor buffer is locked
0041                       ;-------------------------------------------------------
0042 66B4 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     66B6 A5DA     
0043 66B8 1604  14         jne   edkey.action.ins_line.exit
0044                                                   ; Yes, exit
0045                       ;-------------------------------------------------------
0046                       ; Insert line
0047                       ;-------------------------------------------------------
0048 66BA 04E0  34         clr   @parm1                ; Insert new line on curren line
     66BC A006     
0049               
0050 66BE 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66C0 7980     
0051                                                   ; \ i  @parm1 = 0 for insert current line
0052                                                   ; /            >0 for insert following line
0053                       ;-------------------------------------------------------
0054                       ; Exit
0055                       ;-------------------------------------------------------
0056               edkey.action.ins_line.exit:
0057 66C2 0460  28         b     @edkey.keyscan.hook.debounce
     66C4 2EC2     
0058                                                   ; Back to editor main
0059               
0060               
0061               *---------------------------------------------------------------
0062               * Insert new line on following line
0063               *---------------------------------------------------------------
0064               edkey.action.ins_line_after:
0065                       ;-------------------------------------------------------
0066                       ; Skip if editor buffer is locked
0067                       ;-------------------------------------------------------
0068 66C6 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     66C8 A5DA     
0069 66CA 1604  14         jne   edkey.action.ins_line_after.exit
0070                                                   ; Yes, exit
0071                       ;-------------------------------------------------------
0072                       ; Insert line on following line
0073                       ;-------------------------------------------------------
0074 66CC 0720  34         seto  @parm1                ; Insert new line on following line
     66CE A006     
0075               
0076 66D0 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66D2 7980     
0077                                                   ; \ i  @parm1 = 0 for insert current line
0078                                                   ; /            >0 for insert following line
0079                       ;-------------------------------------------------------
0080                       ; Exit
0081                       ;-------------------------------------------------------
0082               edkey.action.ins_line_after.exit:
0083 66D4 0460  28         b     @edkey.keyscan.hook.debounce
     66D6 2EC2     
0084                                                   ; Back to editor main
                   < stevie_b1.asm
0094                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 66D8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     66DA A31C     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 66DC 8820  50         c     @fb.row.dirty,@w$ffff
     66DE A30A     
     66E0 2022     
0013 66E2 1606  14         jne   edkey.action.enter.newline
0014 66E4 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66E6 A506     
0015               
0016 66E8 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     66EA 7282     
0017                                                   ; \ i   @fb.top      = Address top row in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; | i   @fb.column   = Current column in FB
0020                                                   ; / i   @fb.colsline = Cols per line in FB
0021               
0022 66EC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     66EE A30A     
0023                       ;-------------------------------------------------------
0024                       ; Insert a new line if insert mode is on
0025                       ;-------------------------------------------------------
0026               edkey.action.enter.newline:
0027 66F0 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     66F2 A50A     
0028 66F4 1307  14         jeq   edkey.action.enter.upd_counter
0029                                                   ; Overwrite mode, skip insert
0030               
0031 66F6 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     66F8 A50C     
0032 66FA 1304  14         jeq   edkey.action.enter.upd_counter
0033                                                   ; Autoinsert off, skip insert
0034               
0035 66FC 0720  34         seto  @parm1                ; Insert line on following line
     66FE A006     
0036               
0037 6700 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6702 7980     
0038                                                   ; \  i  @parm1 = current/following line
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Update line counter
0042                       ;-------------------------------------------------------
0043               edkey.action.enter.upd_counter:
0044 6704 C120  34         mov   @fb.topline,tmp0
     6706 A304     
0045 6708 A120  34         a     @fb.row,tmp0
     670A A306     
0046 670C 0584  14         inc   tmp0
0047 670E 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     6710 A504     
0048 6712 1102  14         jlt   edkey.action.newline  ; No, continue newline
0049 6714 05A0  34         inc   @edb.lines            ; Total lines++
     6716 A504     
0050                       ;-------------------------------------------------------
0051                       ; Process newline
0052                       ;-------------------------------------------------------
0053               edkey.action.newline:
0054                       ;-------------------------------------------------------
0055                       ; Scroll 1 line if cursor at bottom row of screen
0056                       ;-------------------------------------------------------
0057 6718 C120  34         mov   @fb.scrrows,tmp0
     671A A31E     
0058 671C 0604  14         dec   tmp0
0059 671E 8120  34         c     @fb.row,tmp0
     6720 A306     
0060 6722 110C  14         jlt   edkey.action.newline.down
0061                       ;-------------------------------------------------------
0062                       ; Scroll
0063                       ;-------------------------------------------------------
0064 6724 C120  34         mov   @fb.scrrows,tmp0
     6726 A31E     
0065 6728 C820  54         mov   @fb.topline,@parm1
     672A A304     
     672C A006     
0066 672E 05A0  34         inc   @parm1
     6730 A006     
0067 6732 06A0  32         bl    @fb.refresh
     6734 793A     
0068 6736 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6738 A312     
0069 673A 1004  14         jmp   edkey.action.newline.rest
0070                       ;-------------------------------------------------------
0071                       ; Move cursor down a row, there are still rows left
0072                       ;-------------------------------------------------------
0073               edkey.action.newline.down:
0074 673C 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     673E A306     
0075 6740 06A0  32         bl    @down                 ; Row++ VDP cursor
     6742 272C     
0076                       ;-------------------------------------------------------
0077                       ; Set VDP cursor and save variables
0078                       ;-------------------------------------------------------
0079               edkey.action.newline.rest:
0080 6744 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     6746 7944     
0081                                                   ; | o  @outparm1 = Matching column
0082                                                   ; / o  @outparm2 = Char on matching column
0083               
0084 6748 C120  34         mov   @outparm1,tmp0
     674A A018     
0085 674C C804  38         mov   tmp0,@fb.column
     674E A30C     
0086 6750 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     6752 273E     
0087               
0088 6754 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6756 37B2     
0089                                                   ; | i  @fb.row        = Row in frame buffer
0090                                                   ; / o  @fb.row.length = Length of row
0091               
0092 6758 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     675A 31A8     
0093                                                   ; \ i   @fb.top      = Address top row in FB
0094                                                   ; | i   @fb.topline  = Top line in FB
0095                                                   ; | i   @fb.row      = Current row in FB
0096                                                   ; |                  (offset 0..@fb.scrrows)
0097                                                   ; | i   @fb.column   = Current column in FB
0098                                                   ; | i   @fb.colsline = Columns per line FB
0099                                                   ; |
0100                                                   ; / o   @fb.current  = Updated pointer
0101               
0102 675C 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     675E A31A     
0103               
0107               
0108                       ;-------------------------------------------------------
0109                       ; Exit
0110                       ;-------------------------------------------------------
0111               edkey.action.newline.exit:
0112 6760 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6762 2EC2     
0113               
0114               
0115               
0116               
0117               *---------------------------------------------------------------
0118               * Toggle insert/overwrite mode
0119               *---------------------------------------------------------------
0120               edkey.action.ins_onoff:
0121 6764 0649  14         dect  stack
0122 6766 C64B  30         mov   r11,*stack            ; Save return address
0123               
0124 6768 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     676A A31C     
0125 676C 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     676E A50A     
0126                       ;-------------------------------------------------------
0127                       ; Exit
0128                       ;-------------------------------------------------------
0129               edkey.action.ins_onoff.exit:
0130 6770 C2F9  30         mov   *stack+,r11           ; Pop r11
0131 6772 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6774 2EC2     
                   < stevie_b1.asm
0095                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 6776 0649  14         dect  stack
0009 6778 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 677A 0649  14         dect  stack
0011 677C C660  42         mov   @wyx,*stack           ; Push cursor YX
     677E 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6780 C120  34         mov   @tv.ruler.visible,tmp0
     6782 A210     
0016                                                   ; Ruler currently off?
0017 6784 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 6786 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6788 A31A     
0024 678A 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     678C A210     
0025 678E 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 6790 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6792 A31E     
0031 6794 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 6796 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     6798 A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 679A 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 679C 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     679E A31A     
0038 67A0 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     67A2 A210     
0039 67A4 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     67A6 7900     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 67A8 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     67AA 7862     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 67AC C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     67AE 832A     
0050 67B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 67B2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67B4 2EC2     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 67B6 C120  34         mov   @edb.dirty,tmp0
     67B8 A506     
0012 67BA 1302  14         jeq   !
0013 67BC 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     67BE 7796     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 67C0 0460  28 !       b     @tv.quit
     67C2 3432     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 67C4 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     67C6 A50E     
     67C8 2022     
0025 67CA 1302  14         jeq   !
0026 67CC 0460  28         b     @edkey.action.block.copy
     67CE 6868     
0027                                                   ; Copy code block
0028 67D0 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     67D2 77A4     
0029               
0030               
0031               *---------------------------------------------------------------
0032               * Reset results of find operation
0033               *---------------------------------------------------------------
0034               edkey.action.find.reset:
0035 67D4 06A0  32         bl    @edb.find.init        ; Reset search results
     67D6 7734     
0036 67D8 0720  34         seto  @fb.dirty             ; Frame buffer dirty
     67DA A31A     
0037 67DC 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     67DE A31C     
0038                       ;-------------------------------------------------------
0039                       ; Exit
0040                       ;-------------------------------------------------------
0041               edkey.action.find.reset.exit:
0042 67E0 0460  28         b     @edkey.keyscan.hook.debounce
     67E2 2EC2     
0043                                                   ; Back to editor main
                   < stevie_b1.asm
0097                       copy  "edkey.fb.file.load.asm"      ; Load file into editor
     **** ****     > edkey.fb.file.load.asm
0001               * FILE......: edkey.fb.file.load.asm
0002               * Purpose...: Load file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.file
0006               * Load file directly into editor (without CMDB "Open File")
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to filename string
0012               * @parm2 = Type of special file to load
0013               ********|*****|*********************|**************************
0014               edkey.action.fb.load.file:
0015 67E4 0649  14         dect  stack
0016 67E6 C64B  30         mov   r11,*stack            ; Save return address
0017 67E8 0649  14         dect  stack
0018 67EA C644  30         mov   tmp0,*stack           ; Push tmp0
0019 67EC 0649  14         dect  stack
0020 67EE C645  30         mov   tmp1,*stack           ; Push tmp1
0021                       ;-------------------------------------------------------
0022                       ; Load file
0023                       ;-------------------------------------------------------
0024 67F0 C160  34         mov   @parm2,tmp1           ; Backup @parm2
     67F2 A008     
0025               
0026 67F4 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     67F6 7862     
0027               
0028 67F8 C120  34         mov   @parm1,tmp0           ; Pointer to filename set?
     67FA A006     
0029 67FC 1607  14         jne   !                     ; Yes, continue
0030                       ;-------------------------------------------------------
0031                       ; Show error "No filename specified"
0032                       ;-------------------------------------------------------
0033 67FE 0204  20         li    tmp0,txt.io.nofile    ; \
     6800 3D0C     
0034 6802 C804  38         mov   tmp0,@parm1           ; / Error message
     6804 A006     
0035               
0036 6806 06A0  32         bl    @error.display        ; Show error message
     6808 78E4     
0037                                                   ; \ i  @parm1 = Pointer to error message
0038                                                   ; /
0039               
0040 680A 1012  14         jmp   edkey.action.fb.load.file.exit2
0041                       ;------------------------------------------------------
0042                       ; Show dialog "Unsaved changed" if editor buffer dirty
0043                       ;------------------------------------------------------
0044 680C C120  34 !       mov   @edb.dirty,tmp0       ; Editor buffer dirty?
     680E A506     
0045 6810 1301  14         jeq   edkey.action.fb.load.loadfile
0046                                                   ; No, continue processing
0047 6812 1013  14         jmp   edkey.action.fb.load.file.exit3
0048                                                   ; Dirty, exit
0049                       ;-------------------------------------------------------
0050                       ; Load file
0051                       ;-------------------------------------------------------
0052               edkey.action.fb.load.loadfile:
0053 6814 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6816 7654     
0054                                                   ; \ i  @parm1 = Pointer to length-prefixed
0055                                                   ; /             device/filename string
0056                       ;-------------------------------------------------------
0057                       ; Handle special files
0058                       ;-------------------------------------------------------
0059 6818 100B  14         jmp   edkey.action.fb.load.file.exit2
0060                                                   ; Skip goto line
0061                       ;-------------------------------------------------------
0062                       ; Goto line in file and exit
0063                       ;-------------------------------------------------------
0064               edkey.action.fb.load.file.exit1:
0065 681A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 681C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 681E C2F9  30         mov   *stack+,r11           ; Pop R11
0068               
0069 6820 C820  54         mov   @edb.bk.fb.topline,@parm1
     6822 A51E     
     6824 A006     
0070 6826 C820  54         mov   @edb.bk.fb.row,@parm2
     6828 A520     
     682A A008     
0071               
0072 682C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     682E 64FC     
0073                                                   ; | i  @parm1 = Top line in editor buffer
0074                                                   ; / i  @parm2 = Row offset in frame buffer
0075                       ;-------------------------------------------------------
0076                       ; Goto top of file (TOF) and exit
0077                       ;-------------------------------------------------------
0078               edkey.action.fb.load.file.exit2:
0079 6830 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0080 6832 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0081 6834 C2F9  30         mov   *stack+,r11           ; Pop R11
0082 6836 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6838 64CC     
0083                       ;-------------------------------------------------------
0084                       ; Show dialog "Unsaved changes" and exit
0085                       ;-------------------------------------------------------
0086               edkey.action.fb.load.file.exit3:
0087 683A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 683C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 683E C2F9  30         mov   *stack+,r11           ; Pop R11
0090 6840 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6842 7796     
                   < stevie_b1.asm
0098                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 6844 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     6846 7A50     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 6848 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     684A 2EC2     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 684C 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     684E 7A5A     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 6850 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     6852 7038     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 6854 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     6856 7A64     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 6858 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     685A 7038     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 685C 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     685E 79F8     
0042 6860 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     6862 7A78     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 6864 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6866 2EC2     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 6868 0649  14         dect  stack
0054 686A C64B  30         mov   r11,*stack            ; Push return address
0055 686C 0649  14         dect  stack
0056 686E C644  30         mov   tmp0,*stack           ; Push tmp0
0057                       ;-------------------------------------------------------
0058                       ; Exit early if editor buffer locked
0059                       ;-------------------------------------------------------
0060 6870 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     6872 A5DA     
0061 6874 1619  14         jne   edkey.action.block.copy.exit
0062                                                   ; Yes, exit early
0063                       ;-------------------------------------------------------
0064                       ; Exit early if nothing to do
0065                       ;-------------------------------------------------------
0066 6876 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6878 A510     
     687A 2022     
0067 687C 1315  14         jeq   edkey.action.block.copy.exit
0068                                                   ; Yes, exit early
0069                       ;-------------------------------------------------------
0070                       ; Init
0071                       ;-------------------------------------------------------
0072 687E C120  30         mov   @wyx,tmp0             ; Get cursor position
     6880 832A     
0073 6882 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     6884 FF00     
0074 6886 C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     6888 A318     
0075                       ;-------------------------------------------------------
0076                       ; Copy
0077                       ;-------------------------------------------------------
0078 688A 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     688C 79F8     
0079               
0080 688E 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     6890 A006     
0081 6892 06A0  32         bl    @edb.block.copy       ; Copy code block
     6894 7A8C     
0082                                                   ; \ i  @parm1    = Message flag
0083                                                   ; / o  @outparm1 = >ffff if success
0084               
0085 6896 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     6898 A018     
     689A 2000     
0086 689C 1305  14         jeq   edkey.action.block.copy.exit
0087                                                   ; If yes, exit early
0088               
0089 689E C820  54         mov   @fb.yxsave,@parm1
     68A0 A318     
     68A2 A006     
0090 68A4 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     68A6 7930     
0091                                                   ; \ i  @parm1 = cursor YX position
0092                                                   ; /
0093                       ;-------------------------------------------------------
0094                       ; Exit
0095                       ;-------------------------------------------------------
0096               edkey.action.block.copy.exit:
0097 68A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0098 68AA C2F9  30         mov   *stack+,r11           ; Pop r11
0099 68AC 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     68AE 2EC2     
0100               
0101               
0102               
0103               
0104               *---------------------------------------------------------------
0105               * Delete code block
0106               ********|*****|*********************|**************************
0107               edkey.action.block.delete:
0108 68B0 0649  14         dect  stack
0109 68B2 C64B  30         mov   r11,*stack            ; Push return address
0110 68B4 0649  14         dect  stack
0111 68B6 C644  30         mov   tmp0,*stack           ; Push tmp0
0112                       ;-------------------------------------------------------
0113                       ; Exit early if editor buffer locked
0114                       ;-------------------------------------------------------
0115 68B8 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     68BA A5DA     
0116 68BC 1617  14         jne   edkey.action.block.delete.exit
0117                                                   ; Yes, exit early
0118                       ;-------------------------------------------------------
0119                       ; Exit early if nothing to do
0120                       ;-------------------------------------------------------
0121 68BE 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     68C0 A510     
     68C2 2022     
0122 68C4 1313  14         jeq   edkey.action.block.delete.exit
0123                                                   ; Yes, exit early
0124                       ;-------------------------------------------------------
0125                       ; Delete
0126                       ;-------------------------------------------------------
0127 68C6 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     68C8 79F8     
0128 68CA 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     68CC A006     
0129 68CE 06A0  32         bl    @edb.block.delete     ; Delete code block
     68D0 7A82     
0130                                                   ; \ i  @parm1    = Display message Yes/No
0131                                                   ; / o  @outparm1 = >ffff if success
0132                       ;-------------------------------------------------------
0133                       ; Reposition in frame buffer
0134                       ;-------------------------------------------------------
0135 68D2 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     68D4 A018     
     68D6 2000     
0136 68D8 1309  14         jeq   edkey.action.block.delete.exit
0137                                                   ; If yes, exit early
0138               
0139 68DA C820  54         mov   @fb.topline,@parm1
     68DC A304     
     68DE A006     
0140 68E0 04E0  34         clr   @parm2                ; No row offset in frame buffer
     68E2 A008     
0141                       ;-------------------------------------------------------
0142                       ; Custom exit
0143                       ;-------------------------------------------------------
0144 68E4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0145 68E6 C2F9  30         mov   *stack+,r11           ; Pop r11
0146 68E8 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     68EA 64FC     
0147                                                   ; | i  @parm1 = Top line in editor buffer
0148                                                   ; / i  @parm2 = Row offset in frame buffer
0149                       ;-------------------------------------------------------
0150                       ; Exit
0151                       ;-------------------------------------------------------
0152               edkey.action.block.delete.exit:
0153 68EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0154 68EE C2F9  30         mov   *stack+,r11           ; Pop r11
0155 68F0 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     68F2 2EC2     
0156               
0157               
0158               *---------------------------------------------------------------
0159               * Move code block
0160               ********|*****|*********************|**************************
0161               edkey.action.block.move:
0162 68F4 0649  14         dect  stack
0163 68F6 C64B  30         mov   r11,*stack            ; Push return address
0164 68F8 0649  14         dect  stack
0165 68FA C644  30         mov   tmp0,*stack           ; Push tmp0
0166                       ;-------------------------------------------------------
0167                       ; Exit early if editor buffer locked
0168                       ;-------------------------------------------------------
0169 68FC C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     68FE A5DA     
0170 6900 161B  14         jne   edkey.action.block.move.exit
0171                                                   ; Yes, exit early
0172                       ;-------------------------------------------------------
0173                       ; Exit early if nothing to do
0174                       ;-------------------------------------------------------
0175 6902 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6904 A510     
     6906 2022     
0176 6908 1317  14         jeq   edkey.action.block.move.exit
0177                                                   ; Yes, exit early
0178                       ;-------------------------------------------------------
0179                       ; Delete
0180                       ;-------------------------------------------------------
0181 690A 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     690C 79F8     
0182               
0183 690E 0720  34         seto  @parm1                ; Set message to "Moving block..."
     6910 A006     
0184 6912 06A0  32         bl    @edb.block.copy       ; Copy code block
     6914 7A8C     
0185                                                   ; \ i  @parm1    = Message flag
0186                                                   ; / o  @outparm1 = >ffff if success
0187               
0188 6916 0720  34         seto  @parm1                ; Don't display delete message
     6918 A006     
0189 691A 06A0  32         bl    @edb.block.delete     ; Delete code block
     691C 7A82     
0190                                                   ; \ i  @parm1    = Display message Yes/No
0191                                                   ; / o  @outparm1 = >ffff if success
0192                       ;-------------------------------------------------------
0193                       ; Reposition in frame buffer
0194                       ;-------------------------------------------------------
0195 691E 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6920 A018     
     6922 2000     
0196 6924 13E3  14         jeq   edkey.action.block.delete.exit
0197                                                   ; If yes, exit early
0198               
0199 6926 C820  54         mov   @fb.topline,@parm1
     6928 A304     
     692A A006     
0200 692C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     692E A008     
0201                       ;-------------------------------------------------------
0202                       ; Custom exit
0203                       ;-------------------------------------------------------
0204 6930 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0205 6932 C2F9  30         mov   *stack+,r11           ; Pop r11
0206 6934 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6936 64FC     
0207                                                   ; | i  @parm1 = Top line in editor buffer
0208                                                   ; / i  @parm2 = Row offset in frame buffer
0209                       ;-------------------------------------------------------
0210                       ; Exit
0211                       ;-------------------------------------------------------
0212               edkey.action.block.move.exit:
0213 6938 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0214 693A C2F9  30         mov   *stack+,r11           ; Pop r11
0215 693C 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     693E 2EC2     
0216               
0217               
0218               *---------------------------------------------------------------
0219               * Goto marker M1
0220               ********|*****|*********************|**************************
0221               edkey.action.block.goto.m1:
0222 6940 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6942 A50E     
     6944 2022     
0223 6946 1307  14         jeq   edkey.action.block.goto.m1.exit
0224                                                   ; Yes, exit early
0225                       ;-------------------------------------------------------
0226                       ; Goto marker M1
0227                       ;-------------------------------------------------------
0228 6948 C820  54         mov   @edb.block.m1,@parm1
     694A A50E     
     694C A006     
0229 694E 0620  34         dec   @parm1                ; Base 0 offset
     6950 A006     
0230               
0231 6952 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     6954 654E     
0232                                                   ; \ i @parm1 = Target line in EB
0233                                                   ; /
0234                       ;-------------------------------------------------------
0235                       ; Exit
0236                       ;-------------------------------------------------------
0237               edkey.action.block.goto.m1.exit:
0238 6956 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6958 2EC2     
                   < stevie_b1.asm
0099                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
0008 695A 0649  14         dect  stack
0009 695C C64B  30         mov   r11,*stack            ; Save return address
0010 695E 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     6960 794E     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
0015 6962 C2F9  30         mov   *stack+,r11           ; Pop r11
0016 6964 0460  28         b     @edkey.keyscan.hook.debounce
     6966 2EC2     
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
0024 6968 0649  14         dect  stack
0025 696A C64B  30         mov   r11,*stack            ; Save return address
0026 696C 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     696E 7958     
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
0031 6970 C2F9  30         mov   *stack+,r11           ; Pop r11
0032 6972 0460  28         b     @edkey.keyscan.hook.debounce
     6974 2EC2     
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0100                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 6976 0649  14         dect  stack
0017 6978 C644  30         mov   tmp0,*stack           ; Push tmp0
0018 697A 0204  20         li    tmp0,clip1
     697C 3100     
0019 697E 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 6980 0649  14         dect  stack
0022 6982 C644  30         mov   tmp0,*stack           ; Push tmp0
0023 6984 0204  20         li    tmp0,clip2
     6986 3200     
0024 6988 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 698A 0649  14         dect  stack
0027 698C C644  30         mov   tmp0,*stack           ; Push tmp0
0028 698E 0204  20         li    tmp0,clip3
     6990 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 6992 C804  38 !       mov   tmp0,@parm1
     6994 A006     
0033 6996 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     6998 7A6E     
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
0040 699A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 699C C820  54         mov   @fb.topline,@parm1    ; Get topline
     699E A304     
     69A0 A006     
0043 69A2 04E0  34         clr   @parm2                ; No row offset in frame buffer
     69A4 A008     
0044               
0045 69A6 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     69A8 64FC     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0101                       copy  "edkey.fb.mov.match.asm"      ; Goto search matches
     **** ****     > edkey.fb.mov.match.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to search matches in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous match
0006               *---------------------------------------------------------------
0007               edkey.action.goto.pmatch:
0008 69AA 0760  38         abs   @edb.srch.matches            ; Any search matches?
     69AC A5CE     
0009 69AE 1302  14         jeq   !                            ; No, exit early
0010 69B0 06A0  32         bl    @fb.goto.prevmatch           ; Goto previous match
     69B2 79C6     
0011 69B4 0460  28 !       b     @edkey.keyscan.hook.debounce ; Back to editor main
     69B6 2EC2     
0012               
0013               
0014               *---------------------------------------------------------------
0015               * Cursor on next match
0016               *---------------------------------------------------------------
0017               edkey.action.goto.nmatch:
0018 69B8 0760  38         abs   @edb.srch.matches            ; Any search matches?
     69BA A5CE     
0019 69BC 1302  14         jeq   !                            ; No, goto line 1
0020 69BE 06A0  32         bl    @fb.goto.nextmatch           ; Goto next match
     69C0 79D0     
0021 69C2 0460  28 !       b     @edkey.keyscan.hook.debounce ; Back to editor main
     69C4 2EC2     
                   < stevie_b1.asm
0102                       copy  "edk.fb.char.asm"             ; Process character
     **** ****     > edk.fb.char.asm
0001               * FILE......: edk.fb.char
0002               * Purpose...: Add character (frame buffer version)
0003               
0004               ***************************************************************
0005               * edk.fb.char
0006               * Add character (frame buffer version)
0007               ***************************************************************
0008               * bl  @ed.fb.char
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * tmp0 = Keycode (MSB)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               ********|*****|*********************|**************************
0019               edk.fb.char:
0020 69C6 0649  14         dect  stack
0021 69C8 C64B  30         mov   r11,*stack            ; Save return address
0022 69CA 0649  14         dect  stack
0023 69CC C644  30         mov   tmp0,*stack           ; Push tmp0
0024 69CE 0649  14         dect  stack
0025 69D0 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 69D2 0649  14         dect  stack
0027 69D4 C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;-------------------------------------------------------
0029                       ; Asserts
0030                       ;-------------------------------------------------------
0031 69D6 0284  22         ci    tmp0,>2000            ; Keycode < ASCII 32 ?
     69D8 2000     
0032 69DA 1119  14         jlt   edk.fb.char.exit      ; Yes, skip
0033 69DC 0284  22         ci    tmp0,>7e00            ; Keycode > ASCII 126 ?
     69DE 7E00     
0034 69E0 1516  14         jgt   edk.fb.char.exit      ; Yes, skip
0035                       ;-------------------------------------------------------
0036                       ; Save cursor YX
0037                       ;-------------------------------------------------------
0038 69E2 C160  34         mov   @fb.row,tmp1          ; \
     69E4 A306     
0039 69E6 0A85  32         sla   tmp1,8                ; | Row to MSB
0040 69E8 C1A0  34         mov   @fb.column,tmp2       ; | Column to LSB
     69EA A30C     
0041 69EC E185  18         soc   tmp1,tmp2             ; | Overlay
0042 69EE C806  38         mov   tmp2,@fb.prevcursor   ; / Save cursor YX
     69F0 A316     
0043                       ;-------------------------------------------------------
0044                       ; Setup
0045                       ;-------------------------------------------------------
0046 69F2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     69F4 A31C     
0047 69F6 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     69F8 A506     
0048 69FA C804  38         mov   tmp0,@parm1           ; Store character for insert
     69FC A006     
0049 69FE C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6A00 A50A     
0050 6A02 1303  14         jeq   edk.fb.char.overwrite
0051                       ;-------------------------------------------------------
0052                       ; Insert mode
0053                       ;-------------------------------------------------------
0054 6A04 06A0  32         bl    @fb.insert.char       ; Insert character
     6A06 79B2     
0055                                                   ; \ i  @parm1 = MSB character to insert
0056                                                   ; |             LSB = 0 move cursor right
0057                                                   ; /             LSB > 0 do not move cursor
0058               
0059 6A08 1002  14         jmp   edk.fb.char.drawcursor
0060                       ;-------------------------------------------------------
0061                       ; Overwrite mode - Write character
0062                       ;-------------------------------------------------------
0063               edk.fb.char.overwrite:
0064 6A0A 06A0  32         bl    @fb.replace.char      ; Replace (overwrite) character
     6A0C 79BC     
0065                                                   ; \ i  @parm1 = MSB character to replace
0066                                                   ; /
0067                       ;-------------------------------------------------------
0068                       ; Draw cursor (TAT)
0069                       ;-------------------------------------------------------
0070               edk.fb.char.drawcursor:
0074                       ;-------------------------------------------------------
0075                       ; Exit
0076                       ;-------------------------------------------------------
0077               edk.fb.char.exit:
0078 6A0E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0079 6A10 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0080 6A12 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0081 6A14 C2F9  30         mov   *stack+,r11           ; Pop R11
0082 6A16 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0103                       ;-----------------------------------------------------------------------
0104                       ; Keyboard actions - Command Buffer
0105                       ;-----------------------------------------------------------------------
0106                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.left:
0008 6A18 0649  14         dect  stack
0009 6A1A C644  30         mov   tmp0,*stack           ; Push tmp0
0010                       ;-------------------------------------------------------
0011                       ; Initialisation
0012                       ;-------------------------------------------------------
0013 6A1C C120  34         mov   @cmdb.column,tmp0     ; \ Left boundary (X=0) reached
     6A1E A718     
0014 6A20 1304  14         jeq   !                     ; yes, skip further processing
0015                       ;-------------------------------------------------------
0016                       ; Update cursor position
0017                       ;-------------------------------------------------------
0018 6A22 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     6A24 A718     
0019 6A26 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6A28 A70A     
0020               
0024                       ;-------------------------------------------------------
0025                       ; Exit
0026                       ;-------------------------------------------------------
0027 6A2A C139  30 !       mov   *stack+,tmp0          ; Pop tmp0
0028 6A2C 0460  28         b     @edkey.keyscan.hook.debounce
     6A2E 2EC2     
0029                                                   ; Back to editor main
0030               
0031               
0032               *---------------------------------------------------------------
0033               * Cursor right
0034               ********|*****|*********************|**************************
0035               edkey.action.cmdb.right:
0036 6A30 0649  14         dect  stack
0037 6A32 C644  30         mov   tmp0,*stack           ; Push tmp0
0038                       ;-------------------------------------------------------
0039                       ; Initialisation
0040                       ;-------------------------------------------------------
0041 6A34 06A0  32         bl    @cmdb.cmd.getlength   ; \ Get length of command line input
     6A36 788A     
0042                                                   ; | i   @cmdb.cmd = Pointer to prompt
0043                                                   ; / o   @outparm1 = Length of prompt
0044               
0045 6A38 C120  34         mov   @outparm1,tmp0        ;
     6A3A A018     
0046 6A3C 8120  34         c     @cmdb.column,tmp0     ; Right boundary reached?
     6A3E A718     
0047 6A40 1504  14         jgt   !                     ; yes. exot
0048                       ;-------------------------------------------------------
0049                       ; Update cursor position
0050                       ;-------------------------------------------------------
0051 6A42 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6A44 A718     
0052 6A46 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6A48 A70A     
0053               
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060 6A4A C139  30 !       mov   *stack+,tmp0          ; Pop tmp0
0061 6A4C 0460  28         b     @edkey.keyscan.hook.debounce
     6A4E 2EC2     
0062                                                   ; Back to editor main
0063               
0064               
0065               *---------------------------------------------------------------
0066               * Cursor home
0067               ********|*****|*********************|**************************
0068               edkey.action.cmdb.home:
0069 6A50 0649  14         dect  stack
0070 6A52 C644  30         mov   tmp0,*stack           ; Push tmp0
0071                       ;-------------------------------------------------------
0072                       ; Update cursor position
0073                       ;-------------------------------------------------------
0074 6A54 04E0  34         clr   @cmdb.column          ; First column
     6A56 A718     
0075 6A58 0204  20         li    tmp0,3                ; X=3
     6A5A 0003     
0076 6A5C D120  34         movb  @cmdb.cursor,tmp0     ; Get CMDB cursor Y position
     6A5E A70A     
0077 6A60 C804  38         mov   tmp0,@cmdb.cursor     ; Set new YX position for cursor
     6A62 A70A     
0078               
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085 6A64 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 6A66 0460  28         b     @edkey.keyscan.hook.debounce
     6A68 2EC2     
0087                                                   ; Back to editor main
0088               
0089               
0090               *---------------------------------------------------------------
0091               * Cursor end of line
0092               ********|*****|*********************|**************************
0093               edkey.action.cmdb.end:
0094                       ;-------------------------------------------------------
0095                       ; Update cursor position
0096                       ;-------------------------------------------------------
0097 6A6A 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Repositon cursor
     6A6C 78A8     
0098               
0102                       ;-------------------------------------------------------
0103                       ; Exit
0104                       ;-------------------------------------------------------
0105 6A6E 0460  28         b     @edkey.keyscan.hook.debounce
     6A70 2EC2     
0106                                                   ; Back to editor main
                   < stevie_b1.asm
0107                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 6A72 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6A74 7880     
0026 6A76 06A0  32         bl    @cmdb.refresh_prompt  ; Draw command line
     6A78 7876     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 6A7A 0460  28         b     @edkey.action.cmdb.home
     6A7C 6A50     
0032                                                   ; Reposition cursor
0033               
0034               
0035               ***************************************************************
0036               * edkey.action.cmdb.char
0037               * Add character to command line
0038               ***************************************************************
0039               * b  @edkey.action.cmdb.char
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * tmp1
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               *--------------------------------------------------------------
0050               * Notes
0051               ********|*****|*********************|**************************
0052               edkey.action.cmdb.char:
0053 6A7E 0649  14         dect  stack
0054 6A80 C644  30         mov   tmp0,*stack           ; Push tmp0
0055 6A82 0649  14         dect  stack
0056 6A84 C645  30         mov   tmp1,*stack           ; Push tmp1
0057                       ;-------------------------------------------------------
0058                       ; Asserts
0059                       ;-------------------------------------------------------
0060 6A86 C120  34         mov   @keycode1,tmp0        ; Get keycode
     6A88 A028     
0061 6A8A 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6A8C 0020     
0062 6A8E 1117  14         jlt   edkey.action.cmdb.char.exit
0063                                                   ; Yes, skip
0064               
0065 6A90 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6A92 007E     
0066 6A94 1514  14         jgt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069                       ;-------------------------------------------------------
0070                       ; Add character
0071                       ;-------------------------------------------------------
0072 6A96 C144  18         mov   tmp0,tmp1             ; \
0073 6A98 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0074               
0075 6A9A 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6A9C A733     
0076 6A9E A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6AA0 A718     
0077 6AA2 D505  30         movb  tmp1,*tmp0            ; Add character
0078 6AA4 05A0  34         inc   @cmdb.column          ; Next column
     6AA6 A718     
0079 6AA8 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6AAA A70A     
0080               
0081 6AAC 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6AAE 788A     
0082                                                   ; \ i  @cmdb.cmd = Command string
0083                                                   ; / o  @outparm1 = Length of command
0084               
0085 6AB0 C120  34         mov   @outparm1,tmp0        ; Get command line
     6AB2 A018     
0086 6AB4 0A84  32         sla   tmp0,8                ; Move to MSB
0087 6AB6 D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6AB8 A732     
0088               
0092               
0093 6ABA 06A0  32         bl    @cmdb.refresh_prompt  ; Draw command line
     6ABC 7876     
0094                       ;-------------------------------------------------------
0095                       ; Exit
0096                       ;-------------------------------------------------------
0097               edkey.action.cmdb.char.exit:
0098 6ABE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0099 6AC0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0100 6AC2 0460  28         b     @edkey.keyscan.hook.debounce
     6AC4 2EC2     
0101                                                   ; Back to editor main
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6AC6 C120  34         mov   @cmdb.visible,tmp0
     6AC8 A702     
0009 6ACA 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6ACC 04E0  34         clr   @cmdb.column          ; Column = 0
     6ACE A718     
0015 6AD0 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6AD2 7858     
0016 6AD4 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6AD6 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6AD8 7862     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6ADA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6ADC 2EC2     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.cfg.clip.asm"     ; Configure clipboard
     **** ****     > edkey.cmdb.cfg.clip.asm
0001               * FILE......: edkey.cmdb.cfg.clip.asm
0002               * Purpose...: Configure clipboard
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.clip:
0008 6ADE 0649  14         dect  stack
0009 6AE0 C64B  30         mov   r11,*stack            ; Save return address
0010 6AE2 0649  14         dect  stack
0011 6AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6AE6 0204  20         li    tmp0,tv.clip.fname    ; \
     6AE8 DE50     
0016 6AEA C804  38         mov   tmp0,@parm1           ; / Pointer clipboard filename buffer
     6AEC A006     
0017               
0018 6AEE 0204  20         li    tmp0,txt.done.clipdev ; \
     6AF0 3ADA     
0019 6AF2 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6AF4 A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6AF6 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6AF8 78C6     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.clip.exit:
0030 6AFA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6AFC C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6AFE 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6B00 64CC     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6B02 0649  14         dect  stack
0012 6B04 C64B  30         mov   r11,*stack            ; Save return address
0013 6B06 0649  14         dect  stack
0014 6B08 C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6B0A C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6B0C A506     
0019 6B0E 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6B10 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6B12 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6B14 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6B16 7796     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6B18 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B1A 7862     
0028 6B1C 06A0  32         bl    @fm.newfile           ; New file in editor
     6B1E 76B6     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6B20 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6B22 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6B24 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6B26 64CC     
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008 6B28 0649  14         dect  stack
0009 6B2A C64B  30         mov   r11,*stack            ; Save return address
0010 6B2C 0649  14         dect  stack
0011 6B2E C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Read directory if last character is '.'
0014                       ;-------------------------------------------------------
0015 6B30 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6B32 A732     
0016 6B34 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6B36 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6B38 A732     
0018 6B3A D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6B3C 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6B3E 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6B40 002E     
0021 6B42 1607  14         jne   edkey.action.cmdb.load.checklen
0022                                                   ; No, check filename length
0023                       ;-------------------------------------------------------
0024                       ; Read directory and exit
0025                       ;-------------------------------------------------------
0026 6B44 0204  20         li    tmp0,cmdb.cmdall      ; \ Pass filename as parm1
     6B46 A732     
0027 6B48 C804  38         mov   tmp0,@parm1           ; /
     6B4A A006     
0028               
0029 6B4C 06A0  32         bl    @fm.directory         ; Read device directory
     6B4E 76C8     
0030                                                   ; \ @parm1 = Pointer to length-prefixed
0031                                                   ; |          string containing device
0032                                                   ; |          or >0000 if using parm2
0033                                                   ; | @parm2 = Index in device list
0034                                                   ; /          (ignored if parm1 set)
0035 6B50 1019  14         jmp   edkey.action.cmdb.load.exit
0036                       ;-------------------------------------------------------
0037                       ; Check filename length
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.load.checklen:
0040 6B52 06A0  32         bl    @cmdb.cmd.getlength            ; Get length of current command
     6B54 788A     
0041 6B56 C120  34         mov   @outparm1,tmp0                 ; Length == 0 ?
     6B58 A018     
0042 6B5A 1314  14         jeq   edkey.action.cmdb.load.exit    ; Yes, exit early
0043                       ;-------------------------------------------------------
0044                       ; Get filename
0045                       ;-------------------------------------------------------
0046 6B5C 0A84  32 !       sla   tmp0,8                ; LSB to MSB
0047 6B5E D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6B60 A732     
0048               
0049 6B62 06A0  32         bl    @cpym2m
     6B64 253A     
0050 6B66 A732                   data cmdb.cmdlen,heap.top,80
     6B68 F000     
     6B6A 0050     
0051                                                   ; Copy filename from command line to buffer
0052               
0053 6B6C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B6E 7862     
0054                       ;-------------------------------------------------------
0055                       ; Load file
0056                       ;-------------------------------------------------------
0057               edkey.action.cmdb.load.file:
0058 6B70 04E0  34         clr   @edb.special.file     ; Reset special file flag
     6B72 A522     
0059 6B74 04E0  34         clr   @tv.specmsg.ptr       ; Reset special message
     6B76 A23A     
0060               
0061 6B78 0204  20         li    tmp0,heap.top         ; Pass filename as parm1
     6B7A F000     
0062 6B7C C804  38         mov   tmp0,@parm1           ; (1st line in heap)
     6B7E A006     
0063               
0064 6B80 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6B82 7654     
0065                                                   ; \ i  parm1 = Pointer to length-prefixed
0066                                                   ; /            device/filename string
0067                       ;-------------------------------------------------------
0068                       ; Exit
0069                       ;-------------------------------------------------------
0070               edkey.action.cmdb.load.exit:
0071 6B84 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 6B86 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 6B88 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6B8A 64CC     
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6B8C 0649  14         dect  stack
0009 6B8E C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B90 0649  14         dect  stack
0011 6B92 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B94 A304     
0012                       ;-------------------------------------------------------
0013                       ; Read directory if last character is '.'
0014                       ;-------------------------------------------------------
0015 6B96 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6B98 A732     
0016 6B9A 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6B9C 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6B9E A732     
0018 6BA0 D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6BA2 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6BA4 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6BA6 002E     
0021 6BA8 1607  14         jne   edkey.action.cmdb.insert.checklen
0022                                                   ; No, check filename length
0023                       ;-------------------------------------------------------
0024                       ; Read directory and exit
0025                       ;-------------------------------------------------------
0026 6BAA 0204  20         li    tmp0,cmdb.cmdall      ; \ Pass filename as parm1
     6BAC A732     
0027 6BAE C804  38         mov   tmp0,@parm1           ; /
     6BB0 A006     
0028               
0029 6BB2 06A0  32         bl    @fm.directory         ; Read device directory
     6BB4 76C8     
0030                                                   ; \ @parm1 = Pointer to length-prefixed
0031                                                   ; |          string containing device
0032                                                   ; |          or >0000 if using parm2
0033                                                   ; | @parm2 = Index in device list
0034                                                   ; /          (ignored if parm1 set)
0035 6BB6 1030  14         jmp   edkey.action.cmdb.insert.exit
0036                       ;-------------------------------------------------------
0037                       ; Check filename length
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.insert.checklen:
0040 6BB8 06A0  32         bl    @cmdb.cmd.getlength              ; Get length of current command
     6BBA 788A     
0041 6BBC C120  34         mov   @outparm1,tmp0                   ; Length == 0 ?
     6BBE A018     
0042 6BC0 132B  14         jeq   edkey.action.cmdb.insert.exit    ; Yes, exit early
0043                       ;-------------------------------------------------------
0044                       ; Get filename
0045                       ;-------------------------------------------------------
0046 6BC2 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0047 6BC4 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BC6 A732     
0048               
0049 6BC8 06A0  32         bl    @cpym2m
     6BCA 253A     
0050 6BCC A732                   data cmdb.cmdall,heap.top,80
     6BCE F000     
     6BD0 0050     
0051                                                   ; Copy filename from command line to buffer
0052               
0053 6BD2 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6BD4 7862     
0054                       ;-------------------------------------------------------
0055                       ; Pass filename as parm1
0056                       ;-------------------------------------------------------
0057 6BD6 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BD8 F000     
0058 6BDA C804  38         mov   tmp0,@parm1
     6BDC A006     
0059                       ;-------------------------------------------------------
0060                       ; Insert file at line
0061                       ;-------------------------------------------------------
0062               edkey.action.cmdb.insert.file:
0063                       ;-------------------------------------------------------
0064                       ; Get line
0065                       ;-------------------------------------------------------
0066 6BDE C820  54         mov   @fb.row,@parm1
     6BE0 A306     
     6BE2 A006     
0067 6BE4 06A0  32         bl    @fb.row2line          ; Row to editor line
     6BE6 318E     
0068                                                   ; \ i @fb.topline = Top line in frame buffer
0069                                                   ; | i @parm1      = Row in frame buffer
0070                                                   ; / o @outparm1   = Matching line in EB
0071               
0072 6BE8 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6BEA A018     
     6BEC A008     
0073 6BEE 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6BF0 A008     
0074                       ;-------------------------------------------------------
0075                       ; Get device/filename
0076                       ;-------------------------------------------------------
0077 6BF2 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BF4 F000     
0078 6BF6 C804  38         mov   tmp0,@parm1
     6BF8 A006     
0079                       ;-------------------------------------------------------
0080                       ; Insert file
0081                       ;-------------------------------------------------------
0082 6BFA 0204  20         li    tmp0,id.file.insertfile
     6BFC 0002     
0083 6BFE C804  38         mov   tmp0,@parm3           ; Set work mode
     6C00 A00A     
0084               
0085 6C02 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6C04 767A     
0086                                                   ; \ i  parm1 = Pointer to length-prefixed
0087                                                   ; |            device/filename string
0088                                                   ; | i  parm2 = Line number to load file at
0089                                                   ; / i  parm3 = Work mode
0090                       ;-------------------------------------------------------
0091                       ; Refresh frame buffer
0092                       ;-------------------------------------------------------
0093 6C06 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6C08 A31A     
0094 6C0A 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6C0C A506     
0095               
0096 6C0E C820  54         mov   @fb.topline,@parm1
     6C10 A304     
     6C12 A006     
0097 6C14 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6C16 793A     
0098                                                   ; | i  @parm1 = Line to start with
0099                                                   ; /             (becomes @fb.topline)
0100               
0101                       ;-------------------------------------------------------
0102                       ; Exit
0103                       ;-------------------------------------------------------
0104               edkey.action.cmdb.insert.exit:
0105 6C18 C839  50         mov   *stack+,@parm1        ; Pop top row
     6C1A A006     
0106 6C1C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0107               
0108 6C1E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6C20 A008     
0109               
0110 6C22 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6C24 64FC     
0111                                                   ; | i  @parm1 = Top line in editor buffer
0112                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6C26 0649  14         dect  stack
0009 6C28 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C2A 0649  14         dect  stack
0011 6C2C C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C2E A304     
0012                       ;-------------------------------------------------------
0013                       ; Read directory if last character is '.'
0014                       ;-------------------------------------------------------
0015 6C30 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6C32 A732     
0016 6C34 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6C36 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6C38 A732     
0018 6C3A D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6C3C 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6C3E 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6C40 002E     
0021 6C42 1607  14         jne   edkey.action.cmdb.append.checklen
0022                                                   ; No, check filename length
0023                       ;-------------------------------------------------------
0024                       ; Read directory and exit
0025                       ;-------------------------------------------------------
0026 6C44 0204  20         li    tmp0,cmdb.cmdall      ; \ Pass filename as parm1
     6C46 A732     
0027 6C48 C804  38         mov   tmp0,@parm1           ; /
     6C4A A006     
0028               
0029 6C4C 06A0  32         bl    @fm.directory         ; Read device directory
     6C4E 76C8     
0030                                                   ; \ @parm1 = Pointer to length-prefixed
0031                                                   ; |          string containing device
0032                                                   ; |          or >0000 if using parm2
0033                                                   ; | @parm2 = Index in device list
0034                                                   ; /          (ignored if parm1 set)
0035 6C50 1029  14         jmp   edkey.action.cmdb.append.exit
0036                       ;-------------------------------------------------------
0037                       ; Check filename length
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.append.checklen:
0040 6C52 06A0  32         bl    @cmdb.cmd.getlength            ; Get length of current command
     6C54 788A     
0041 6C56 C120  34         mov   @outparm1,tmp0                 ; Length == 0 ?
     6C58 A018     
0042 6C5A 1324  14         jeq   edkey.action.cmdb.append.exit  ; Yes, exit early
0043                       ;-------------------------------------------------------
0044                       ; Get filename
0045                       ;-------------------------------------------------------
0046 6C5C 0A84  32         sla   tmp0,8               ; LSB to MSB
0047 6C5E D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C60 A732     
0048               
0049 6C62 06A0  32         bl    @cpym2m
     6C64 253A     
0050 6C66 A732                   data cmdb.cmdall,heap.top,80
     6C68 F000     
     6C6A 0050     
0051                                                   ; Copy filename from command line to buffer
0052               
0053 6C6C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C6E 7862     
0054                       ;-------------------------------------------------------
0055                       ; Pass filename as parm1
0056                       ;-------------------------------------------------------
0057 6C70 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6C72 F000     
0058 6C74 C804  38         mov   tmp0,@parm1
     6C76 A006     
0059                       ;-------------------------------------------------------
0060                       ; Append file
0061                       ;-------------------------------------------------------
0062               edkey.action.cmdb.append.file:
0063 6C78 C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6C7A A504     
     6C7C A008     
0064                                                   ; / editor buffer (base 0 offset)
0065                       ;-------------------------------------------------------
0066                       ; Get device/filename
0067                       ;-------------------------------------------------------
0068 6C7E 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6C80 F000     
0069 6C82 C804  38         mov   tmp0,@parm1
     6C84 A006     
0070                       ;-------------------------------------------------------
0071                       ; Append file
0072                       ;-------------------------------------------------------
0073 6C86 0204  20         li    tmp0,id.file.appendfile
     6C88 0003     
0074 6C8A C804  38         mov   tmp0,@parm3           ; Set work mode
     6C8C A00A     
0075               
0076 6C8E 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6C90 767A     
0077                                                   ; \ i  parm1 = Pointer to length-prefixed
0078                                                   ; |            device/filename string
0079                                                   ; | i  parm2 = Line number to load file at
0080                                                   ; / i  parm3 = Work mode
0081                       ;-------------------------------------------------------
0082                       ; Refresh frame buffer
0083                       ;-------------------------------------------------------
0084 6C92 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6C94 A31A     
0085 6C96 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6C98 A506     
0086               
0087 6C9A C820  54         mov   @fb.topline,@parm1
     6C9C A304     
     6C9E A006     
0088 6CA0 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6CA2 793A     
0089                                                   ; | i  @parm1 = Line to start with
0090                                                   ; /             (becomes @fb.topline)
0091               
0092                       ;-------------------------------------------------------
0093                       ; Exit
0094                       ;-------------------------------------------------------
0095               edkey.action.cmdb.append.exit:
0096 6CA4 C839  50         mov   *stack+,@parm1        ; Pop top row
     6CA6 A006     
0097 6CA8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0098               
0099 6CAA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6CAC A008     
0100               
0101 6CAE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6CB0 64FC     
0102                                                   ; | i  @parm1 = Top line in editor buffer
0103                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6CB2 0204  20         li    tmp0,clip1
     6CB4 3100     
0009 6CB6 1006  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6CB8 0204  20         li    tmp0,clip2
     6CBA 3200     
0013 6CBC 1003  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6CBE 0204  20         li    tmp0,clip3
     6CC0 3300     
0017 6CC2 1000  14         jmp   edkey.action.cmdb.clip
0018               
0019               
0020               
0021               edkey.action.cmdb.clip:
0022 6CC4 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6CC6 A006     
0023               
0024 6CC8 06A0  32         bl    @film
     6CCA 2236     
0025 6CCC A732                   data cmdb.cmdall,>00,80
     6CCE 0000     
     6CD0 0050     
0026               
0027 6CD2 06A0  32         bl    @cpym2m
     6CD4 253A     
0028 6CD6 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6CD8 A732     
     6CDA 0050     
0029                       ;------------------------------------------------------
0030                       ; Append suffix character to clipboard device/filename
0031                       ;------------------------------------------------------
0032 6CDC C120  34         mov   @tv.clip.fname,tmp0
     6CDE DE50     
0033 6CE0 C144  18         mov   tmp0,tmp1
0034 6CE2 0984  32         srl   tmp0,8                ; Get string length
0035 6CE4 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6CE6 A732     
0036 6CE8 0584  14         inc   tmp0                  ; Consider length-prefix byte
0037 6CEA D520  46         movb  @parm1,*tmp0          ; Append suffix
     6CEC A006     
0038               
0039 6CEE 0460  28         b     @edkey.action.cmdb.insert
     6CF0 6B8C     
0040                                                   ; Insert file
                   < stevie_b1.asm
0115                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6CF2 0649  14         dect  stack
0009 6CF4 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6CF6 0649  14         dect  stack
0011 6CF8 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6CFA A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6CFC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6CFE 7862     
0016               
0017 6D00 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D02 788A     
0018 6D04 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D06 A018     
0019 6D08 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D0A 0204  20         li    tmp0,txt.io.nofile    ; \
     6D0C 3D0C     
0024 6D0E C804  38         mov   tmp0,@parm1           ; / Error message
     6D10 A006     
0025               
0026 6D12 06A0  32         bl    @error.display        ; Show error message
     6D14 78E4     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D16 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D18 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D1A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D1C A732     
0036               
0037 6D1E 06A0  32         bl    @cpym2m
     6D20 253A     
0038 6D22 A732                   data cmdb.cmdlen,heap.top,80
     6D24 F000     
     6D26 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6D28 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D2A F000     
0044 6D2C C804  38         mov   tmp0,@parm1
     6D2E A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D30 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D32 A510     
     6D34 2022     
0049 6D36 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6D38 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D3A A50E     
     6D3C A008     
0055 6D3E 0620  34         dec   @parm2                ; /
     6D40 A008     
0056               
0057 6D42 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D44 A510     
     6D46 A00A     
0058               
0059 6D48 0204  20         li    tmp0,id.file.saveblock
     6D4A 0005     
0060 6D4C 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6D4E 04E0  34         clr   @parm2                ; First line to save
     6D50 A008     
0066 6D52 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D54 A504     
     6D56 A00A     
0067               
0068 6D58 0204  20         li    tmp0,id.file.savefile
     6D5A 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6D5C C804  38         mov   tmp0,@parm4           ; Set work mode
     6D5E A00C     
0074               
0075 6D60 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D62 76A4     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6D64 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D66 A006     
0087 6D68 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6D6A 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6D6C A008     
0090               
0091 6D6E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D70 64FC     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0116                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6D72 0649  14         dect  stack
0009 6D74 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D76 0649  14         dect  stack
0011 6D78 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D7A A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6D7C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D7E 7862     
0016               
0017 6D80 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D82 788A     
0018 6D84 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D86 A018     
0019 6D88 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D8A 0204  20         li    tmp0,txt.io.nofile    ; \
     6D8C 3D0C     
0024 6D8E C804  38         mov   tmp0,@parm1           ; / Error message
     6D90 A006     
0025               
0026 6D92 06A0  32         bl    @error.display        ; Show error message
     6D94 78E4     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D96 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D98 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D9A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D9C A732     
0036               
0037 6D9E 06A0  32         bl    @cpym2m
     6DA0 253A     
0038 6DA2 A732                   data cmdb.cmdlen,heap.top,80
     6DA4 F000     
     6DA6 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6DA8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6DAA F000     
0044 6DAC C804  38         mov   tmp0,@parm1
     6DAE A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6DB0 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6DB2 A510     
     6DB4 2022     
0049 6DB6 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6DB8 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6DBA A50E     
     6DBC A008     
0055 6DBE 0620  34         dec   @parm2                ; /
     6DC0 A008     
0056               
0057 6DC2 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6DC4 A510     
     6DC6 A00A     
0058               
0059 6DC8 0204  20         li    tmp0,id.file.printblock
     6DCA 0008     
0060 6DCC 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6DCE 04E0  34         clr   @parm2                ; First line to save
     6DD0 A008     
0066 6DD2 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6DD4 A504     
     6DD6 A00A     
0067               
0068 6DD8 0204  20         li    tmp0,id.file.printfile
     6DDA 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6DDC C804  38         mov   tmp0,@parm4           ; Set work mode
     6DDE A00C     
0074               
0075 6DE0 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6DE2 76A4     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6DE4 C839  50         mov   *stack+,@parm1        ; Pop top row
     6DE6 A006     
0087 6DE8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6DEA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6DEC A008     
0090               
0091 6DEE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6DF0 64FC     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0117                       copy  "edkey.cmdb.file.dir.asm"     ; Drive/Directory listing
     **** ****     > edkey.cmdb.file.dir.asm
0001               * FILE......: edkey.cmdb.fíle.directory.asm
0002               * Purpose...: Drive/Directory listing
0003               
0004               *---------------------------------------------------------------
0005               * Drive/Directory presets
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.directory.1:
0008 6DF2 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DF4 A006     
0009 6DF6 04E0  34         clr   @parm2
     6DF8 A008     
0010 6DFA 1065  14         jmp   edkey.action.cmdb.file.directory
0011               
0012               edkey.action.cmdb.file.directory.2:
0013 6DFC 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DFE A006     
0014 6E00 C820  54         mov   @const.1,@parm2
     6E02 2002     
     6E04 A008     
0015 6E06 105F  14         jmp   edkey.action.cmdb.file.directory
0016               
0017               edkey.action.cmdb.file.directory.3:
0018 6E08 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E0A A006     
0019 6E0C C820  54         mov   @const.2,@parm2
     6E0E 2004     
     6E10 A008     
0020 6E12 1059  14         jmp   edkey.action.cmdb.file.directory
0021               
0022               edkey.action.cmdb.file.directory.4:
0023 6E14 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E16 A006     
0024 6E18 C820  54         mov   @const.3,@parm2
     6E1A 3944     
     6E1C A008     
0025 6E1E 1053  14         jmp   edkey.action.cmdb.file.directory
0026               
0027               edkey.action.cmdb.file.directory.5:
0028 6E20 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E22 A006     
0029 6E24 C820  54         mov   @const.4,@parm2
     6E26 2006     
     6E28 A008     
0030 6E2A 104D  14         jmp   edkey.action.cmdb.file.directory
0031               
0032               edkey.action.cmdb.file.directory.6:
0033 6E2C 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E2E A006     
0034 6E30 C820  54         mov   @const.5,@parm2
     6E32 3946     
     6E34 A008     
0035 6E36 1047  14         jmp   edkey.action.cmdb.file.directory
0036               
0037               edkey.action.cmdb.file.directory.7:
0038 6E38 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E3A A006     
0039 6E3C C820  54         mov   @const.6,@parm2
     6E3E 3948     
     6E40 A008     
0040 6E42 1041  14         jmp   edkey.action.cmdb.file.directory
0041               
0042               edkey.action.cmdb.file.directory.8:
0043 6E44 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E46 A006     
0044 6E48 C820  54         mov   @const.7,@parm2
     6E4A 394A     
     6E4C A008     
0045 6E4E 103B  14         jmp   edkey.action.cmdb.file.directory
0046               
0047               edkey.action.cmdb.file.directory.9:
0048 6E50 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E52 A006     
0049 6E54 C820  54         mov   @const.8,@parm2
     6E56 2008     
     6E58 A008     
0050 6E5A 1035  14         jmp   edkey.action.cmdb.file.directory
0051               
0052               
0053               edkey.action.cmdb.file.directory.tipi:
0054 6E5C 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E5E A006     
0055 6E60 C820  54         mov   @const.9,@parm2
     6E62 394C     
     6E64 A008     
0056 6E66 102F  14         jmp   edkey.action.cmdb.file.directory
0057               
0058               edkey.action.cmdb.file.directory.scs1:
0059 6E68 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E6A A006     
0060 6E6C C820  54         mov   @const.10,@parm2
     6E6E 394E     
     6E70 A008     
0061 6E72 1029  14         jmp   edkey.action.cmdb.file.directory
0062               
0063               edkey.action.cmdb.file.directory.scs2:
0064 6E74 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E76 A006     
0065 6E78 C820  54         mov   @const.11,@parm2
     6E7A 3950     
     6E7C A008     
0066 6E7E 1023  14         jmp   edkey.action.cmdb.file.directory
0067               
0068               edkey.action.cmdb.file.directory.scs3:
0069 6E80 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E82 A006     
0070 6E84 C820  54         mov   @const.12,@parm2
     6E86 3952     
     6E88 A008     
0071 6E8A 101D  14         jmp   edkey.action.cmdb.file.directory
0072               
0073               edkey.action.cmdb.file.directory.ide1:
0074 6E8C 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E8E A006     
0075 6E90 C820  54         mov   @const.13,@parm2
     6E92 3954     
     6E94 A008     
0076 6E96 1017  14         jmp   edkey.action.cmdb.file.directory
0077               
0078               edkey.action.cmdb.file.directory.ide2:
0079 6E98 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6E9A A006     
0080 6E9C C820  54         mov   @const.14,@parm2
     6E9E 3956     
     6EA0 A008     
0081 6EA2 1011  14         jmp   edkey.action.cmdb.file.directory
0082               
0083               edkey.action.cmdb.file.directory.ide3:
0084 6EA4 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6EA6 A006     
0085 6EA8 C820  54         mov   @const.15,@parm2
     6EAA 3958     
     6EAC A008     
0086 6EAE 100B  14         jmp   edkey.action.cmdb.file.directory
0087               
0088               
0089               edkey.action.cmdb.file.directory.device:
0090 6EB0 06A0  32         bl    @cpym2m
     6EB2 253A     
0091 6EB4 A732                   data cmdb.cmdall,cat.device,80
     6EB6 EEB0     
     6EB8 0050     
0092                                                   ; Copy filename from command line to buffer
0093 6EBA 0204  20         li    tmp0,cat.device
     6EBC EEB0     
0094 6EBE C804  38         mov   tmp0,@parm1
     6EC0 A006     
0095 6EC2 04E0  34         clr   @parm2
     6EC4 A008     
0096               *---------------------------------------------------------------
0097               * Drive/Directory listing
0098               *---------------------------------------------------------------
0099               edkey.action.cmdb.file.directory:
0100 6EC6 0649  14         dect  stack
0101 6EC8 C64B  30         mov   r11,*stack            ; Save return address
0102 6ECA 0649  14         dect  stack
0103 6ECC C644  30         mov   tmp0,*stack           ; Push tmp0
0104                       ;-------------------------------------------------------
0105                       ; Catalog drive/directory
0106                       ;-------------------------------------------------------
0107 6ECE 06A0  32         bl    @fm.directory         ; Read device directory
     6ED0 76C8     
0108                                                   ; \ @parm1 = Pointer to length-prefixed
0109                                                   ; |          string containing device
0110                                                   ; |          or >0000 if using parm2
0111                                                   ; | @parm2 = Index in device list
0112                                                   ; /          (ignored if parm1 set)
0113                       ;-------------------------------------------------------
0114                       ; Exit
0115                       ;-------------------------------------------------------
0116               edkey.action.cmdb.file.catalog.exit:
0117 6ED2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0118 6ED4 C2F9  30         mov   *stack+,r11           ; Pop R11
0119 6ED6 0460  28         b     @edkey.keyscan.hook.debounce
     6ED8 2EC2     
0120                                                   ; Back to editor main
                   < stevie_b1.asm
0118                       copy  "edkey.cmdb.file.run.asm"     ; Run program image (EA5)
     **** ****     > edkey.cmdb.file.run.asm
0001               * FILE......: edkey.cmdb.file.run.asm
0002               * Purpose...: Run EA5 program image
0003               
0004               *---------------------------------------------------------------
0005               * Run EA5 program image
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.file.run:
0008 6EDA 0649  14         dect  stack
0009 6EDC C64B  30         mov   r11,*stack            ; Save return address
0010 6EDE 0649  14         dect  stack
0011 6EE0 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Read directory if last character is '.'
0014                       ;-------------------------------------------------------
0015 6EE2 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6EE4 A732     
0016 6EE6 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6EE8 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6EEA A732     
0018 6EEC D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6EEE 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6EF0 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6EF2 002E     
0021 6EF4 1607  14         jne   edkey.action.cmdb.file.run.checklen
0022                                                   ; No, check filename length
0023                       ;-------------------------------------------------------
0024                       ; Read directory and exit
0025                       ;-------------------------------------------------------
0026 6EF6 0204  20         li    tmp0,cmdb.cmdall      ; \ Pass filename as parm1
     6EF8 A732     
0027 6EFA C804  38         mov   tmp0,@parm1           ; /
     6EFC A006     
0028               
0029 6EFE 06A0  32         bl    @fm.directory         ; Read device directory
     6F00 76C8     
0030                                                   ; \ @parm1 = Pointer to length-prefixed
0031                                                   ; |          string containing device
0032                                                   ; |          or >0000 if using parm2
0033                                                   ; | @parm2 = Index in device list
0034                                                   ; /          (ignored if parm1 set)
0035 6F02 1015  14         jmp   edkey.action.cmdb.file.run.exit
0036                       ;-------------------------------------------------------
0037                       ; Check filename length
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.file.run.checklen:
0040 6F04 06A0  32         bl    @cmdb.cmd.getlength             ; Get length of current command
     6F06 788A     
0041 6F08 C120  34         mov   @outparm1,tmp0                  ; Length == 0 ?
     6F0A A018     
0042 6F0C 1310  14         jeq   edkey.action.cmdb.file.run.exit ; Yes, exit early
0043                       ;-------------------------------------------------------
0044                       ; Get filename
0045                       ;-------------------------------------------------------
0046 6F0E 0A84  32 !       sla   tmp0,8                ; LSB to MSB
0047 6F10 D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6F12 A732     
0048               
0049 6F14 06A0  32         bl    @cpym2m
     6F16 253A     
0050 6F18 A732                   data cmdb.cmdlen,heap.top,80
     6F1A F000     
     6F1C 0050     
0051                                                   ; Copy filename from command line to buffer
0052               
0053 6F1E 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6F20 7862     
0054                       ;-------------------------------------------------------
0055                       ; Load file
0056                       ;-------------------------------------------------------
0057               edkey.action.cmdb.file.run.ea5:
0058 6F22 0204  20         li    tmp0,heap.top         ; Pass filename as parm1
     6F24 F000     
0059 6F26 C804  38         mov   tmp0,@parm1           ; (1st line in heap)
     6F28 A006     
0060               
0061 6F2A 06A0  32         bl    @fm.run.ea5           ; Run EA5 program image
     6F2C 7692     
0062                                                   ; \ i  parm1 = Pointer to length-prefixed
0063                                                   ; /            device/filename string
0064                       ;-------------------------------------------------------
0065                       ; Exit
0066                       ;-------------------------------------------------------
0067               edkey.action.cmdb.file.run.exit:
0068 6F2E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0069 6F30 C2F9  30         mov   *stack+,r11           ; Pop R11
0070 6F32 0460  28         b     @edkey.keyscan.hook.debounce
     6F34 2EC2     
0071                                                   ; Back to editor main
                   < stevie_b1.asm
0119                       copy  "edkey.cmdb.pick.prev.asm"    ; Pick previous file in catalog
     **** ****     > edkey.cmdb.pick.prev.asm
0001               * FILE......: edkey.cmdb.file.prev.asm
0002               * Purpose...: File selection actions in CMDB pane
0003               
0004               *---------------------------------------------------------------
0005               * Pick previous file from catalog
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.cmdb.pick.prev
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.cmdb.pick.prev:
0016                       ;------------------------------------------------------
0017                       ; Adjust filename
0018                       ;------------------------------------------------------
0019 6F36 06A0  32         bl    @fm.browse.fname.prev ; Previous file in catalog filename list
     6F38 76DA     
0020               
0021 6F3A 0760  38         abs   @outparm1             ; Skipped flag set?
     6F3C A018     
0022 6F3E 160B  14         jne   edkey.action.cmdb.pick.prev.exit
0023                                                   ; Yes, exit early
0024               
0025 6F40 06A0  32         bl    @pane.filebrowser.hilight
     6F42 7A2A     
0026                       ;------------------------------------------------------
0027                       ; Previous file
0028                       ;------------------------------------------------------
0029               edkey.action.cmdb.pick.prev.setfile:
0030 6F44 06A0  32         bl    @cpym2m
     6F46 253A     
0031 6F48 E016                   data cat.fullfname,cmdb.cmdall,80
     6F4A A732     
     6F4C 0050     
0032                                                   ; Copy full filename to command line
0033               
0034 6F4E 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     6F50 7876     
0035 6F52 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     6F54 78A8     
0036               
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edkey.action.cmdb.pick.prev.exit:
0044 6F56 0460  28         b     @edkey.keyscan.hook.debounce
     6F58 2EC2     
0045                                                   ; Back to editor main
                   < stevie_b1.asm
0120                       copy  "edkey.cmdb.pick.next.asm"    ; Pick next file in catalog
     **** ****     > edkey.cmdb.pick.next.asm
0001               * FILE......: edkey.cmdb.file.next.asm
0002               * Purpose...: File selection actions in CMDB pane
0003               
0004               *---------------------------------------------------------------
0005               * Pick next file from catalog
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.cmdb.pick.next
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.cmdb.pick.next:
0016                       ;------------------------------------------------------
0017                       ; Adjust filename
0018                       ;------------------------------------------------------
0019 6F5A 06A0  32         bl    @fm.browse.fname.next ; Next file in catalog filename list
     6F5C 76EC     
0020 6F5E 0760  38         abs   @outparm1             ; Skipped flag set?
     6F60 A018     
0021 6F62 160B  14         jne   edkey.action.cmdb.pick.next.exit
0022                                                   ; Yes, exit early
0023               
0024 6F64 06A0  32         bl    @pane.filebrowser.hilight
     6F66 7A2A     
0025                       ;------------------------------------------------------
0026                       ; Next file
0027                       ;------------------------------------------------------
0028               edkey.action.cmdb.pick.next.setfile:
0029 6F68 06A0  32         bl    @cpym2m
     6F6A 253A     
0030 6F6C E016                   data cat.fullfname,cmdb.cmdall,80
     6F6E A732     
     6F70 0050     
0031                                                   ; Copy full filename to command line
0032               
0033 6F72 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     6F74 7876     
0034 6F76 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     6F78 78A8     
0035               
0039                       ;------------------------------------------------------
0040                       ; Exit
0041                       ;------------------------------------------------------
0042               edkey.action.cmdb.pick.next.exit:
0043 6F7A 0460  28         b     @edkey.keyscan.hook.debounce
     6F7C 2EC2     
0044                                                   ; Back to editor main
                   < stevie_b1.asm
0121                       copy  "edkey.cmdb.updir.asm"        ; Go up one directory level
     **** ****     > edkey.cmdb.updir.asm
0001               * FILE......: edkey.cmdb.updir.asm
0002               * Purpose...: Go up one directory level
0003               
0004               *---------------------------------------------------------------
0005               * Go up one directory level
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.cmdb.updir
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.cmdb.updir:
0016 6F7E 0649  14         dect  stack
0017 6F80 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Go up one directory level
0020                       ;------------------------------------------------------
0021 6F82 06A0  32         bl    @fm.browse.updir      ; Go up one directory level
     6F84 7710     
0022                                                   ; \ i @cat.device = Current device name/path
0023                                                   ; | o @outparm1   = >0000 if dir unchanged
0024                                                   ; /                 >ffff if dir changed
0025               
0026 6F86 C120  34         mov   @outparm1,tmp0        ; Get functional call result
     6F88 A018     
0027 6F8A 131D  14         jeq   edkey.action.cmdb.updir.exit
0028                       ;-------------------------------------------------------
0029                       ; Catalog drive/directory
0030                       ;-------------------------------------------------------
0031 6F8C 0204  20         li    tmp0,cat.device       ; \
     6F8E EEB0     
0032 6F90 C804  38         mov   tmp0,@parm1           ; / Set device name/path
     6F92 A006     
0033 6F94 04E0  34         clr   @parm2
     6F96 A008     
0034               
0035 6F98 06A0  32         bl    @fm.directory         ; Read device directory
     6F9A 76C8     
0036                                                   ; \ @parm1 = Pointer to length-prefixed
0037                                                   ; |          string containing device
0038                                                   ; |          or >0000 if using parm2
0039                                                   ; | @parm2 = Index in device list
0040                                                   ; /          (ignored if parm1 set)
0041                       ;-------------------------------------------------------
0042                       ; Update command line with device path if catalog dialog
0043                       ;-------------------------------------------------------
0044 6F9C 0204  20         li    tmp0,id.dialog.cat    ;
     6F9E 000D     
0045 6FA0 8120  34         c     @cmdb.dialog,tmp0     ; Is catalog dialog active?
     6FA2 A720     
0046 6FA4 1610  14         jne   edkey.action.cmdb.updir.exit
0047                                                   ; No, exit
0048               
0049 6FA6 06A0  32         bl    @cpym2m
     6FA8 253A     
0050 6FAA EEB0                   data cat.device,cmdb.cmdall,80
     6FAC A732     
     6FAE 0050     
0051                                                   ; Copy device path to command line
0052               
0053 6FB0 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6FB2 A71E     
0054                       ;-------------------------------------------------------
0055                       ; Cursor end of line
0056                       ;-------------------------------------------------------
0057 6FB4 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length byte of current command
     6FB6 A732     
0058 6FB8 0984  32         srl   tmp0,8                ; Right justify
0059 6FBA C804  38         mov   tmp0,@cmdb.column     ; Save column position
     6FBC A718     
0060 6FBE 0584  14         inc   tmp0                  ; One time adjustment command prompt
0061 6FC0 06C4  14         swpb  tmp0                  ; LSB TO MSB
0062 6FC2 D804  38         movb  tmp0,@cmdb.cursor+1   ; Set cursor position
     6FC4 A70B     
0063                       ;------------------------------------------------------
0064                       ; Exit
0065                       ;------------------------------------------------------
0066               edkey.action.cmdb.updir.exit:
0067 6FC6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 6FC8 0460  28         b     @edkey.keyscan.hook.debounce
     6FCA 2EC2     
0069                                                   ; Back to editor main
                   < stevie_b1.asm
0122                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6FCC 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6FCE A506     
0021 6FD0 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6FD2 756E     
0022 6FD4 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6FD6 7880     
0023 6FD8 C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6FDA A730     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6FDC 0284  22         ci    tmp0,>2000
     6FDE 2000     
0028 6FE0 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6FE2 0284  22         ci    tmp0,>7fff
     6FE4 7FFF     
0031 6FE6 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6FE8 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6FEA C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6FEC FFCE     
0040 6FEE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6FF0 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6FF2 0460  28         b     @edkey.keyscan.hook.debounce
     6FF4 2EC2     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6FF6 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6FF8 78BC     
0065 6FFA 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6FFC A71E     
0066 6FFE 0460  28        b     @edkey.keyscan.hook.debounce
     7000 2EC2     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.lineterm.toggle
0072               * Toggle line termination on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.lineterm.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.lineterm.toggle:
0083 7002 06A0  32        bl    @fm.lineterm           ; Toggle line termination mode
     7004 78D0     
0084 7006 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     7008 A71E     
0085 700A 0460  28        b     @edkey.keyscan.hook.debounce
     700C 2EC2     
0086                                                   ; Back to editor main
0087               
0088               
0089               ***************************************************************
0090               * edkey.action.cmdb.am.toggle
0091               * Toggle 'AutoUnpack' on/off
0092               ***************************************************************
0093               * b   @edkey.action.cmdb.am.toggle
0094               *--------------------------------------------------------------
0095               * INPUT
0096               * none
0097               *--------------------------------------------------------------
0098               * Register usage
0099               * none
0100               ********|*****|*********************|**************************
0101               edkey.action.cmdb.am.toggle:
0102 700E 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     7010 78B2     
0103 7012 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     7014 A71E     
0104 7016 0460  28        b     @edkey.keyscan.hook.debounce
     7018 2EC2     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * edkey.action.cmdb.preset
0111               * Set command value to preset
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.preset
0114               *--------------------------------------------------------------
0115               * INPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.preset:
0122 701A 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     701C 7894     
0123 701E 0460  28        b     @edkey.keyscan.hook.debounce
     7020 2EC2     
0124                                                   ; Back to editor main
0125               
0126               
0127               
0128               ***************************************************************
0129               * dialog.close
0130               * Close dialog "Help"
0131               ***************************************************************
0132               * b   @edkey.action.cmdb.close.about
0133               *--------------------------------------------------------------
0134               * OUTPUT
0135               * none
0136               *--------------------------------------------------------------
0137               * Register usage
0138               * none
0139               ********|*****|*********************|**************************
0140               edkey.action.cmdb.close.about:
0141 7022 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     7024 A722     
0142                       ;------------------------------------------------------
0143                       ; Erase header line
0144                       ;------------------------------------------------------
0145 7026 06A0  32         bl    @hchar
     7028 2832     
0146 702A 0000                   byte 0,0,32,80*2
     702C 20A0     
0147 702E FFFF                   data EOL
0148               
0149 7030 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     7032 726E     
0150                       ;-------------------------------------------------------
0151                       ; Exit
0152                       ;-------------------------------------------------------
0153 7034 0460  28         b     @edkey.keyscan.hook.debounce
     7036 2EC2     
0154                                                   ; Back to editor main
0155               
0156               
0157               
0158               ***************************************************************
0159               * edkey.action.cmdb.close.dialog
0160               * Close dialog
0161               ***************************************************************
0162               * b   @edkey.action.cmdb.close.dialog
0163               *--------------------------------------------------------------
0164               * OUTPUT
0165               * none
0166               *--------------------------------------------------------------
0167               * Register usage
0168               * none
0169               ********|*****|*********************|**************************
0170               edkey.action.cmdb.close.dialog:
0171 7038 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     703A 726E     
0172                       ;-------------------------------------------------------
0173                       ; Exit
0174                       ;-------------------------------------------------------
0175               edkey.action.cmdb.close.dialog.exit:
0176 703C 0460  28         b     @edkey.keyscan.hook.debounce
     703E 2EC2     
0177                                                   ; Back to editor main
                   < stevie_b1.asm
0123                       copy  "edkey.cmdb.autoinsert.asm"   ; Auto insert toggle
     **** ****     > edkey.cmdb.autoinsert.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor auto insert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 7040 0649  14         dect  stack
0009 7042 C64B  30         mov   r11,*stack            ; Save return address
0010 7044 0649  14         dect  stack
0011 7046 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Exit early if editor buffer is locked
0014                       ;-------------------------------------------------------
0015 7048 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     704A A5DA     
0016 704C 1604  14         jne   edkey.action.cmdb.autoinsert.exit
0017                                                   ; Yes, exit
0018                       ;-------------------------------------------------------
0019                       ; Toggle auto insert mode
0020                       ;-------------------------------------------------------
0021 704E 06A0  32         bl    @edb.autoinsert.toggle
     7050 747C     
0022                                                   ; Toggle Auto-Insert mode
0023 7052 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     7054 726E     
0024                       ;-------------------------------------------------------
0025                       ; Exit
0026                       ;-------------------------------------------------------
0027               edkey.action.cmdb.autoinsert.exit:
0028 7056 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0029 7058 C2F9  30         mov   *stack+,r11           ; Pop R11
0030 705A 0460  28         b     @edkey.keyscan.hook.debounce
     705C 2EC2     
0031                                                   ; Back to editor main
                   < stevie_b1.asm
0124                       copy  "edkey.cmdb.linelen.asm"      ; Line length display toggle
     **** ****     > edkey.cmdb.linelen.asm
0001               * FILE......: edkey.cmdb.linelen.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor line length display
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.linelen:
0008 705E 0649  14         dect  stack
0009 7060 C64B  30         mov   r11,*stack            ; Save return address
0010 7062 0649  14         dect  stack
0011 7064 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Toggle line length display
0014                       ;-------------------------------------------------------
0015 7066 06A0  32         bl    @tv.linelen.toggle    ; Toggle Line length display
     7068 74E2     
0016 706A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     706C 726E     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.linelen.exit:
0021 706E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 7070 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 7072 0460  28         b     @edkey.keyscan.hook.debounce
     7074 2EC2     
0024                                                   ; Back to editor main
                   < stevie_b1.asm
0125                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
0011 7076 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     7078 788A     
0012 707A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     707C A018     
0013 707E 1321  14         jeq   edkey.action.cmdb.goto.exit
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
0018 7080 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     7082 A733     
0019 7084 C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     7086 A006     
0020               
0021 7088 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     708A 3440     
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
0032 708C 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     708E A01A     
     7090 2022     
0033 7092 1317  14         jeq   edkey.action.cmdb.goto.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Prepare for goto
0037                       ;-------------------------------------------------------
0038               edkey.action.cmdb.goto.prepare:
0039 7094 0649  14         dect  stack
0040 7096 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     7098 A018     
0041               
0042 709A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     709C 726E     
0043                       ;-------------------------------------------------------
0044                       ; Crunch current row if dirty
0045                       ;-------------------------------------------------------
0046 709E 8820  50         c     @fb.row.dirty,@w$ffff
     70A0 A30A     
     70A2 2022     
0047 70A4 1604  14         jne   edkey.action.cmdb.goto.line
0048               
0049 70A6 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     70A8 7282     
0050                                                   ; \ i   @fb.top      = Address top row in FB
0051                                                   ; | i   @fb.row      = Current row in FB
0052                                                   ; | i   @fb.column   = Current column in FB
0053                                                   ; / i   @fb.colsline = Cols per line in FB
0054               
0055 70AA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     70AC A30A     
0056                       ;-------------------------------------------------------
0057                       ; Goto line
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.goto.line:
0060 70AE C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     70B0 A006     
0061 70B2 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     70B4 A006     
0062               
0063 70B6 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     70B8 A312     
0064               
0065 70BA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     70BC A008     
0066               
0067 70BE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     70C0 64FC     
0068                                                   ; | i  @parm1 = Top line in editor buffer
0069                                                   ; / i  @parm2 = Row offset in frame buffer
0070                       ;-------------------------------------------------------
0071                       ; Exit
0072                       ;-------------------------------------------------------
0073               edkey.action.cmdb.goto.exit:
0074 70C2 0460  28         b     @edkey.keyscan.hook.debounce
     70C4 2EC2     
0075                                                   ; Back to editor main
                   < stevie_b1.asm
0126                       copy  "edkey.cmdb.font.asm"         ; Set font
     **** ****     > edkey.cmdb.font.asm
0001               * FILE......: edkey.cmdb.font.asm
0002               * Purpose...: Set specified font
0003               
0004               *---------------------------------------------------------------
0005               * Load font
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.font1:
0008 70C6 04C4  14         clr   tmp0                  ; Load font 1
0009 70C8 100C  14         jmp   edkey.action.cmdb.font.load
0010               edkey.action.cmdb.font2:
0011 70CA 0204  20         li    tmp0,1                ; Load font 2
     70CC 0001     
0012 70CE 1009  14         jmp   edkey.action.cmdb.font.load
0013               edkey.action.cmdb.font3:
0014 70D0 0204  20         li    tmp0,2                ; Load font 3
     70D2 0002     
0015 70D4 1006  14         jmp   edkey.action.cmdb.font.load
0016               edkey.action.cmdb.font4:
0017 70D6 0204  20         li    tmp0,3                ; Load font 4
     70D8 0003     
0018 70DA 1003  14         jmp   edkey.action.cmdb.font.load
0019               edkey.action.cmdb.font5:
0020 70DC 0204  20         li    tmp0,4                ; Load font 5
     70DE 0004     
0021 70E0 1000  14         jmp   edkey.action.cmdb.font.load
0022                       ;-------------------------------------------------------
0023                       ; Load font
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.font.load:
0026 70E2 C804  38         mov   tmp0,@parm1
     70E4 A006     
0027 70E6 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     70E8 7ADA     
0028                                                   ; \ i  @parm1       = Font index (0-5)
0029                                                   ; / o  @tv.font.ptr = Pointer to font
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.cmdb.font.exit:
0034 70EA 0460  28         b     @edkey.keyscan.hook.debounce
     70EC 2EC2     
0035                                                   ; Back to editor main
                   < stevie_b1.asm
0127                       copy  "edkey.cmdb.filebrowser.prevcol.asm"
     **** ****     > edkey.cmdb.filebrowser.prevcol.asm
0001               * FILE......: edkey.cmdb.filebrowser.prevcol.asm
0002               * Purpose...: Previous column in filebrowser
0003               
0004               edkey.action.filebrowser.prevcol:
0005 70EE 0649  14         dect  stack
0006 70F0 C64B  30         mov   r11,*stack            ; Save return address
0007 70F2 0649  14         dect  stack
0008 70F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0009                       ;-------------------------------------------------------
0010                       ; Check column boundaries
0011                       ;-------------------------------------------------------
0012 70F6 C120  34         mov   @cat.barcol,tmp0      ; Get current column
     70F8 E376     
0013 70FA 1318  14         jeq   edkey.action.filebrowser.prevcol.exit
0014                                                   ; Already at first column. Skip
0015                       ;-------------------------------------------------------
0016                       ; Next column
0017                       ;-------------------------------------------------------
0018               edkey.action.filebrowser.prevcol.page:
0019 70FC 6820  54         s     @cat.nofilescol,@cat.shortcut.idx
     70FE E00A     
     7100 E012     
0020                                                   ; Calculate filename on page
0021               
0022 7102 06A0  32         bl   @pane.filebrowser.hilight
     7104 7A2A     
0023                                                   ; Highlight filename
0024                       ;-------------------------------------------------------
0025                       ; Check if on supported dialog for filename display
0026                       ;-------------------------------------------------------
0027               edkey.action.filebrowser.prevcol.checkdialog:
0028 7106 C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     7108 A720     
0029               
0030 710A 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     710C 000A     
0031 710E 110E  14         jlt   edkey.action.filebrowser.prevcol.exit
0032                                                   ; / Not in supported dialog range. Skip
0033               
0034 7110 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     7112 0072     
0035 7114 150B  14         jgt   edkey.action.filebrowser.prevcol.exit
0036                                                   ; / Not in supported dialog range. Skip
0037                       ;-------------------------------------------------------
0038                       ; Display device and filename
0039                       ;-------------------------------------------------------
0040               edkey.action.filebrowser.prevcol.page.display:
0041 7116 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7118 76FE     
0042                                                   ; \ i  @cat.device = Current device name
0043                                                   ; | i  @cat.shortcut.idx = Index in catalog
0044                                                   ; |        filename pointerlist
0045                                                   ; |
0046                                                   ; | o  @cat.fullfname = Combined string with
0047                                                   ; /        device & filename
0048               
0049 711A 06A0  32         bl    @cpym2m
     711C 253A     
0050 711E E016                   data cat.fullfname,cmdb.cmdall,80
     7120 A732     
     7122 0050     
0051                                                   ; Copy filename from command line to buffer
0052               
0053 7124 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     7126 7876     
0054 7128 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     712A 78A8     
0055                       ;-------------------------------------------------------
0056                       ; Exit
0057                       ;-------------------------------------------------------
0058               edkey.action.filebrowser.prevcol.exit:
0059 712C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0060 712E C2F9  30         mov   *stack+,r11           ; Pop R11
0061 7130 0460  28         b     @edkey.keyscan.hook.debounce
     7132 2EC2     
0062                                                   ; Back to editor main
                   < stevie_b1.asm
0128                                                           ; Previous column in filebrowser
0129                       copy  "edkey.cmdb.filebrowser.nextcol.asm"
     **** ****     > edkey.cmdb.filebrowser.nextcol.asm
0001               * FILE......: edkey.cmdb.filebrowser.nextcol.asm
0002               * Purpose...: Next column in filebrowser
0003               
0004               edkey.action.filebrowser.nextcol:
0005 7134 0649  14         dect  stack
0006 7136 C64B  30         mov   r11,*stack            ; Save return address
0007 7138 0649  14         dect  stack
0008 713A C644  30         mov   tmp0,*stack           ; Push tmp0
0009                       ;-------------------------------------------------------
0010                       ; Check column boundaries
0011                       ;-------------------------------------------------------
0012 713C C120  34         mov   @cat.barcol,tmp0      ; Get current column
     713E E376     
0013 7140 0284  22         ci    tmp0,2                ; Last column ?
     7142 0002     
0014 7144 13F3  14         jeq   edkey.action.filebrowser.prevcol.exit
0015                                                   ; Already at last column. Skip
0016                       ;-------------------------------------------------------
0017                       ; Check if passing end of file list
0018                       ;-------------------------------------------------------
0019 7146 C120  34         mov   @cat.shortcut.idx,tmp0
     7148 E012     
0020 714A A120  34         a     @cat.nofilescol,tmp0
     714C E00A     
0021 714E 8804  34         c     tmp0,@cat.filecount
     7150 E000     
0022 7152 1101  14         jlt   edkey.action.filebrowser.nextcol.page
0023                                                   ; Not passed end of file list. Display
0024 7154 1018  14         jmp   edkey.action.filebrowser.nextcol.exit
0025                                                   ; Passed end of file list. Skip
0026                       ;-------------------------------------------------------
0027                       ; Next column
0028                       ;-------------------------------------------------------
0029               edkey.action.filebrowser.nextcol.page:
0030 7156 A820  54         a     @cat.nofilescol,@cat.shortcut.idx
     7158 E00A     
     715A E012     
0031                                                   ; Calculate filename on page
0032               
0033 715C 06A0  32         bl   @pane.filebrowser.hilight
     715E 7A2A     
0034                                                   ; Highlight filename
0035                       ;-------------------------------------------------------
0036                       ; Check if on supported dialog for filename display
0037                       ;-------------------------------------------------------
0038               edkey.action.filebrowser.nextcol.checkdialog:
0039 7160 C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     7162 A720     
0040               
0041 7164 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     7166 000A     
0042 7168 110E  14         jlt   edkey.action.filebrowser.nextcol.exit
0043                                                   ; / Not in supported dialog range. Skip
0044               
0045 716A 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     716C 0072     
0046 716E 150B  14         jgt   edkey.action.filebrowser.nextcol.exit
0047                                                   ; / Not in supported dialog range. Skip
0048                       ;-------------------------------------------------------
0049                       ; Display device and filename
0050                       ;-------------------------------------------------------
0051               edkey.action.filebrowser.nextcol.page.display:
0052 7170 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7172 76FE     
0053                                                   ; \ i  @cat.device = Current device name
0054                                                   ; | i  @cat.shortcut.idx = Index in catalog
0055                                                   ; |        filename pointerlist
0056                                                   ; |
0057                                                   ; | o  @cat.fullfname = Combined string with
0058                                                   ; /        device & filename
0059               
0060 7174 06A0  32         bl    @cpym2m
     7176 253A     
0061 7178 E016                   data cat.fullfname,cmdb.cmdall,80
     717A A732     
     717C 0050     
0062                                                   ; Copy filename from command line to buffer
0063               
0064 717E 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     7180 7876     
0065 7182 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     7184 78A8     
0066                       ;-------------------------------------------------------
0067                       ; Exit
0068                       ;-------------------------------------------------------
0069               edkey.action.filebrowser.nextcol.exit:
0070 7186 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0071 7188 C2F9  30         mov   *stack+,r11           ; Pop R11
0072 718A 0460  28         b     @edkey.keyscan.hook.debounce
     718C 2EC2     
0073                                                   ; Back to editor main
                   < stevie_b1.asm
0130                                                           ; Next column in filebrowser
0131                       copy  "edkey.cmdb.filebrowser.prevpage.asm"
     **** ****     > edkey.cmdb.filebrowser.prevpage.asm
0001               * FILE......: edkey.cmdb.filebrowser.prevpage.asm
0002               * Purpose...: Previous page in filebrowser
0003               
0004               edkey.action.filebrowser.prevpage:
0005 718E 0649  14         dect  stack
0006 7190 C64B  30         mov   r11,*stack            ; Save return address
0007                       ;-------------------------------------------------------
0008                       ; Check page boundaries
0009                       ;-------------------------------------------------------
0010 7192 C120  34         mov   @cat.currentpage,tmp0
     7194 E00C     
0011 7196 0284  22         ci    tmp0,1
     7198 0001     
0012 719A 1603  14         jne   edkey.action.filebrowser.prevpage.page
0013 719C 04E0  34         clr   @cat.fpicker.idx
     719E E002     
0014 71A0 1008  14         jmp   edkey.action.filebrowser.prevpage.checkdialog
0015                       ;-------------------------------------------------------
0016                       ; Previous page
0017                       ;-------------------------------------------------------
0018               edkey.action.filebrowser.prevpage.page:
0019 71A2 6820  54         s     @cat.nofilespage,@cat.fpicker.idx
     71A4 E008     
     71A6 E002     
0020                                                   ; Calculate 1st filename on page
0021               
0022 71A8 C820  54         mov   @cat.fpicker.idx,@cat.shortcut.idx
     71AA E002     
     71AC E012     
0023                                                   ; Make it same for highlighter
0024               
0025 71AE 06A0  32         bl    @pane.filebrowser     ; Show filebrowser
     71B0 7A20     
0026                       ;-------------------------------------------------------
0027                       ; Check if on supported dialog for filename display
0028                       ;-------------------------------------------------------
0029               edkey.action.filebrowser.prevpage.checkdialog:
0030 71B2 C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     71B4 A720     
0031               
0032 71B6 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     71B8 000A     
0033 71BA 110E  14         jlt   edkey.action.filebrowser.prevpage.exit
0034                                                   ; / Not in supported dialog range. Skip
0035               
0036 71BC 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     71BE 0072     
0037 71C0 150B  14         jgt   edkey.action.filebrowser.prevpage.exit
0038                                                   ; / Not in supported dialog range. Skip
0039                       ;-------------------------------------------------------
0040                       ; Display device and filename
0041                       ;-------------------------------------------------------
0042               edkey.action.filebrowser.prevpage.page.display:
0043 71C2 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     71C4 76FE     
0044                                                   ; \ i  @cat.device = Current device name
0045                                                   ; | i  @cat.shortcut.idx = Index in catalog
0046                                                   ; |        filename pointerlist
0047                                                   ; |
0048                                                   ; | o  @cat.fullfname = Combined string with
0049                                                   ; /        device & filename
0050               
0051 71C6 06A0  32         bl    @cpym2m
     71C8 253A     
0052 71CA E016                   data cat.fullfname,cmdb.cmdall,80
     71CC A732     
     71CE 0050     
0053                                                   ; Copy filename from command line to buffer
0054               
0055 71D0 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     71D2 7876     
0056 71D4 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     71D6 78A8     
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               edkey.action.filebrowser.prevpage.exit:
0061 71D8 C2F9  30         mov   *stack+,r11           ; Pop R11
0062 71DA 0460  28         b     @edkey.keyscan.hook.debounce
     71DC 2EC2     
0063                                                   ; Back to editor main
                   < stevie_b1.asm
0132                                                           ; Previous page in filebrowser
0133                       copy  "edkey.cmdb.filebrowser.nextpage.asm"
     **** ****     > edkey.cmdb.filebrowser.nextpage.asm
0001               * FILE......: edkey.cmdb.filebrowser.nextpage.asm
0002               * Purpose...: Next page in filebrowser
0003               
0004               edkey.action.filebrowser.nextpage:
0005 71DE 0649  14         dect  stack
0006 71E0 C64B  30         mov   r11,*stack            ; Save return address
0007 71E2 0649  14         dect  stack
0008 71E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0009                       ;-------------------------------------------------------
0010                       ; Check page boundaries
0011                       ;-------------------------------------------------------
0012 71E6 8820  50         c     @cat.currentpage,@cat.totalpages
     71E8 E00C     
     71EA E00E     
0013 71EC 1104  14         jlt   edkey.action.filebrowser.nextpage.page
0014 71EE C820  54         mov   @cat.totalpages,@cat.currentpage
     71F0 E00E     
     71F2 E00C     
0015 71F4 1008  14         jmp   edkey.action.filebrowser.nextpage.checkdialog
0016                       ;-------------------------------------------------------
0017                       ; Next page
0018                       ;-------------------------------------------------------
0019               edkey.action.filebrowser.nextpage.page:
0020 71F6 A820  54         a     @cat.nofilespage,@cat.fpicker.idx
     71F8 E008     
     71FA E002     
0021                                                   ; Calculate 1st filename on page
0022               
0023 71FC C820  54         mov   @cat.fpicker.idx,@cat.shortcut.idx
     71FE E002     
     7200 E012     
0024                                                   ; Make it same for highlighter
0025               
0026 7202 06A0  32         bl    @pane.filebrowser     ; Show filebrowser
     7204 7A20     
0027                       ;-------------------------------------------------------
0028                       ; Check if on supported dialog for filename display
0029                       ;-------------------------------------------------------
0030               edkey.action.filebrowser.nextpage.checkdialog:
0031 7206 C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     7208 A720     
0032               
0033 720A 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     720C 000A     
0034 720E 110E  14         jlt   edkey.action.filebrowser.nextpage.exit
0035                                                   ; / Not in supported dialog range. Skip
0036               
0037 7210 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     7212 0072     
0038 7214 150B  14         jgt   edkey.action.filebrowser.nextpage.exit
0039                                                   ; / Not in supported dialog range. Skip
0040                       ;-------------------------------------------------------
0041                       ; Display device and filename
0042                       ;-------------------------------------------------------
0043               edkey.action.filebrowser.nextpage.page.display:
0044 7216 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7218 76FE     
0045                                                   ; \ i  @cat.device = Current device name
0046                                                   ; | i  @cat.shortcut.idx = Index in catalog
0047                                                   ; |        filename pointerlist
0048                                                   ; |
0049                                                   ; | o  @cat.fullfname = Combined string with
0050                                                   ; /        device & filename
0051               
0052 721A 06A0  32         bl    @cpym2m
     721C 253A     
0053 721E E016                   data cat.fullfname,cmdb.cmdall,80
     7220 A732     
     7222 0050     
0054                                                   ; Copy filename from command line to buffer
0055               
0056 7224 06A0  32         bl    @cmdb.refresh_prompt  ; Refresh command line
     7226 7876     
0057 7228 06A0  32         bl    @cmdb.cmd.cursor_eol  ; Cursor at end of input
     722A 78A8     
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               edkey.action.filebrowser.nextpage.exit:
0062 722C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0063 722E C2F9  30         mov   *stack+,r11           ; Pop R11
0064 7230 0460  28         b     @edkey.keyscan.hook.debounce
     7232 2EC2     
0065                                                   ; Back to editor main
                   < stevie_b1.asm
0134                                                           ; Next page in filebrowser
0135                       copy  "edkey.cmdb.find.search.asm"  ; Search operation for find dialog
     **** ****     > edkey.cmdb.find.search.asm
0001               * FILE......: edkey.cmdb.find.search.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Refresh index with search results
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.find.search:
0008 7234 06A0  32         bl    @edb.find.search      ; Perform search operation
     7236 7722     
0009 7238 0760  38         abs   @edb.srch.matches     ; Any search matches found?
     723A A5CE     
0010 723C 1504  14         jgt   edkey.action.cmdb.find.search.exit
0011                                                   ; Yes, exit
0012                       ;-------------------------------------------------------
0013                       ; No search matches, jump to 1st line in file
0014                       ;-------------------------------------------------------
0015 723E 04E0  34         clr   @parm1                ; 1st line in file
     7240 A006     
0016 7242 0460  28         b     @edkey.action.goto    ; Goto specified line
     7244 654E     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.find.search.exit:
0021 7246 0460  28         b     @edkey.keyscan.hook.debounce
     7248 2EC2     
0022                                                   ; Back to editor main
                   < stevie_b1.asm
0136                       copy  "edkey.cmdb.lock.asm"         ; Lock editor buffer
     **** ****     > edkey.cmdb.lock.asm
0001               * FILE......: edkey.cmdb.lock.asm
0002               * Purpose...: Lock editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Lock the editor buffer
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.lock:
0008 724A 0649  14         dect  stack
0009 724C C64B  30         mov   r11,*stack            ; Save return address
0010 724E 06A0  32         bl    @edb.lock             ; Lock editor buffer
     7250 73FA     
0011 7252 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     7254 726E     
0012                       ;-------------------------------------------------------
0013                       ; Exit
0014                       ;-------------------------------------------------------
0015               edkey.action.cmdb.lock.exit:
0016 7256 C2F9  30         mov   *stack+,r11           ; Pop R11
0017 7258 0460  28         b     @edkey.keyscan.hook.debounce
     725A 2EC2     
0018                                                   ; Back to editor main
                   < stevie_b1.asm
0137                       copy  "edkey.cmdb.unlock.asm"       ; Unlock editor buffer
     **** ****     > edkey.cmdb.unlock.asm
0001               * FILE......: edkey.cmdb.unlock.asm
0002               * Purpose...: Unlock editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Unlock the editor buffer
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.unlock:
0008 725C 0649  14         dect  stack
0009 725E C64B  30         mov   r11,*stack            ; Save return address
0010 7260 06A0  32         bl    @edb.unlock           ; Unlock editor buffer
     7262 743E     
0011 7264 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     7266 726E     
0012                       ;-------------------------------------------------------
0013                       ; Exit
0014                       ;-------------------------------------------------------
0015               edkey.action.cmdb.unlock.exit:
0016 7268 C2F9  30         mov   *stack+,r11           ; Pop R11
0017 726A 0460  28         b     @edkey.keyscan.hook.debounce
     726C 2EC2     
0018                                                   ; Back to editor main
                   < stevie_b1.asm
0138                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 726E 0649  14         dect  stack
0018 7270 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 7272 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     7274 A720     
0023 7276 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     7278 7862     
0024 727A 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     727C A31C     
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
0029 727E C2F9  30         mov   *stack+,r11           ; Pop r11
0030 7280 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0139                       ;-----------------------------------------------------------------------
0140                       ; Logic for Editor Buffer
0141                       ;-----------------------------------------------------------------------
0142                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 7282 0649  14         dect  stack
0028 7284 C64B  30         mov   r11,*stack            ; Save return address
0029 7286 0649  14         dect  stack
0030 7288 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 728A 0649  14         dect  stack
0032 728C C645  30         mov   tmp1,*stack           ; Push tmp1
0033 728E 0649  14         dect  stack
0034 7290 C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7292 0649  14         dect  stack
0036 7294 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7296 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     7298 A30C     
     729A A100     
0041 729C 04E0  34         clr   @fb.column
     729E A30C     
0042               
0043 72A0 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     72A2 31A8     
0044                                                   ; \ i   @fb.top      = Address top row in FB
0045                                                   ; | i   @fb.topline  = Top line in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; |                  (offset 0..@fb.scrrows)
0048                                                   ; | i   @fb.column   = Current column in FB
0049                                                   ; | i   @fb.colsline = Columns per line FB
0050                                                   ; |
0051                                                   ; / o   @fb.current  = Updated pointer
0052                       ;------------------------------------------------------
0053                       ; Prepare scan
0054                       ;------------------------------------------------------
0055 72A4 04C4  14         clr   tmp0                  ; Counter
0056 72A6 C160  34         mov   @fb.current,tmp1      ; Get position
     72A8 A302     
0057 72AA C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     72AC A102     
0058 72AE 04C7  14         clr   tmp3                  ; Counter for whitespace
0059                       ;------------------------------------------------------
0060                       ; 1. Scan line for >00 byte termination
0061                       ;------------------------------------------------------
0062               edb.line.pack.fb.scan:
0063 72B0 D1B5  28         movb  *tmp1+,tmp2           ; Get char
0064 72B2 0986  32         srl   tmp2,8                ; Right justify
0065 72B4 1309  14         jeq   edb.line.pack.fb.check_setpage
0066                                                   ; Stop scan if >00 found
0067 72B6 0584  14         inc   tmp0                  ; Increase string length
0068                       ;------------------------------------------------------
0069                       ; Not more than 80 characters
0070                       ;------------------------------------------------------
0071               edb.line.pack.fb.check80:
0072 72B8 0284  22         ci    tmp0,colrow
     72BA 0050     
0073 72BC 1305  14         jeq   edb.line.pack.fb.check_setpage
0074                                                   ; Stop scan if 80 characters processed
0075 72BE 10F8  14         jmp   edb.line.pack.fb.scan ; Next character
0076                       ;------------------------------------------------------
0077                       ; Check failed, crash CPU!
0078                       ;------------------------------------------------------
0079               edb.line.pack.fb.crash:
0080 72C0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     72C2 FFCE     
0081 72C4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     72C6 2026     
0082               edb.line.pack.fb.check_setpage:
0083                       ;------------------------------------------------------
0084                       ; Check and increase highest SAMS page
0085                       ;------------------------------------------------------
0086 72C8 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     72CA A104     
0087 72CC 06A0  32         bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     72CE 37D6     
0088                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0089                                                   ; /                         free line
0090                       ;------------------------------------------------------
0091                       ; 2. Prepare for storing line
0092                       ;------------------------------------------------------
0093               edb.line.pack.fb.prepare:
0094 72D0 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     72D2 A304     
     72D4 A006     
0095 72D6 A820  54         a     @fb.row,@parm1        ; /
     72D8 A306     
     72DA A006     
0096                       ;------------------------------------------------------
0097                       ; 2a. Update index
0098                       ;------------------------------------------------------
0099               edb.line.pack.fb.update_index:
0100 72DC C820  54         mov   @edb.next_free.ptr,@parm2
     72DE A508     
     72E0 A008     
0101                                                   ; Pointer to new line
0102 72E2 C820  54         mov   @edb.sams.hipage,@parm3
     72E4 A51C     
     72E6 A00A     
0103                                                   ; SAMS page to use
0104               
0105 72E8 06A0  32         bl    @idx.entry.update     ; Update index
     72EA 357C     
0106                                                   ; \ i  parm1 = Line number in editor buffer
0107                                                   ; | i  parm2 = pointer to line in
0108                                                   ; |            editor buffer
0109                                                   ; / i  parm3 = SAMS page
0110                       ;------------------------------------------------------
0111                       ; 3. Set line prefix in editor buffer
0112                       ;------------------------------------------------------
0113 72EC C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     72EE A102     
0114 72F0 C160  34         mov   @edb.next_free.ptr,tmp1
     72F2 A508     
0115                                                   ; Address of line in editor buffer
0116               
0117 72F4 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     72F6 A508     
0118               
0119 72F8 C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     72FA A104     
0120 72FC CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0121 72FE 1317  14         jeq   edb.line.pack.fb.prepexit
0122                                                   ; Nothing to copy if empty line
0123                       ;------------------------------------------------------
0124                       ; 4. Copy line from framebuffer to editor buffer
0125                       ;------------------------------------------------------
0126               edb.line.pack.fb.copyline:
0127 7300 0286  22         ci    tmp2,2
     7302 0002     
0128 7304 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0129 7306 DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0130 7308 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0131 730A 1007  14         jmp   edb.line.pack.fb.copyline.align16
0132               
0133               edb.line.pack.fb.copyline.checkbyte:
0134 730C 0286  22         ci    tmp2,1
     730E 0001     
0135 7310 1602  14         jne   edb.line.pack.fb.copyline.block
0136 7312 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0137 7314 1002  14         jmp   edb.line.pack.fb.copyline.align16
0138               
0139               edb.line.pack.fb.copyline.block:
0140 7316 06A0  32         bl    @xpym2m               ; Copy memory block
     7318 2540     
0141                                                   ; \ i  tmp0 = source
0142                                                   ; | i  tmp1 = destination
0143                                                   ; / i  tmp2 = bytes to copy
0144                       ;------------------------------------------------------
0145                       ; 5: Align pointer to multiple of 16 memory address
0146                       ;------------------------------------------------------
0147               edb.line.pack.fb.copyline.align16:
0148 731A A820  54         a     @rambuf+4,@edb.next_free.ptr
     731C A104     
     731E A508     
0149                                                      ; Add length of line
0150               
0151 7320 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     7322 A508     
0152 7324 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0153 7326 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     7328 000F     
0154 732A A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     732C A508     
0155                       ;------------------------------------------------------
0156                       ; 6: Restore SAMS page and prepare for exit
0157                       ;------------------------------------------------------
0158               edb.line.pack.fb.prepexit:
0159 732E C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     7330 A100     
     7332 A30C     
0160               
0161 7334 8820  50         c     @edb.sams.hipage,@edb.sams.page
     7336 A51C     
     7338 A518     
0162 733A 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0163               
0164 733C C120  34         mov   @edb.sams.page,tmp0
     733E A518     
0165 7340 C160  34         mov   @edb.top.ptr,tmp1
     7342 A500     
0166 7344 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     7346 25D6     
0167                                                   ; \ i  tmp0 = SAMS page number
0168                                                   ; / i  tmp1 = Memory address
0169                       ;------------------------------------------------------
0170                       ; Exit
0171                       ;------------------------------------------------------
0172               edb.line.pack.fb.exit:
0173 7348 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0174 734A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0175 734C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0176 734E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0177 7350 C2F9  30         mov   *stack+,r11           ; Pop R11
0178 7352 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0143                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 7354 0649  14         dect  stack
0031 7356 C64B  30         mov   r11,*stack            ; Save return address
0032 7358 0649  14         dect  stack
0033 735A C644  30         mov   tmp0,*stack           ; Push tmp0
0034 735C 0649  14         dect  stack
0035 735E C645  30         mov   tmp1,*stack           ; Push tmp1
0036 7360 0649  14         dect  stack
0037 7362 C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 7364 C820  54         mov   @parm1,@rambuf
     7366 A006     
     7368 A100     
0042 736A C820  54         mov   @parm2,@rambuf+2
     736C A008     
     736E A102     
0043 7370 C820  54         mov   @parm3,@rambuf+4
     7372 A00A     
     7374 A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 7376 C120  34         mov   @fb.colsline,tmp0
     7378 A30E     
0048 737A 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     737C A008     
0049 737E C1A0  34         mov   @fb.top.ptr,tmp2
     7380 A300     
0050 7382 A146  18         a     tmp2,tmp1             ; Add base to offset
0051 7384 C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     7386 A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 7388 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     738A A006     
     738C A504     
0056 738E 1103  14         jlt   !                     ; No, continue processing
0057               
0058 7390 04E0  34         clr   @rambuf+10            ; Set line length = 0
     7392 A10A     
0059 7394 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 7396 C120  34 !       mov   @parm1,tmp0
     7398 A006     
0064 739A 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     739C 3724     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 739E C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     73A0 A018     
0072 73A2 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 73A4 04E0  34         clr   @rambuf+10            ; Set length=0
     73A6 A10A     
0076 73A8 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 73AA C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     73AC A10A     
0082 73AE C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     73B0 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 73B2 C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     73B4 A108     
0088 73B6 04C5  14         clr   tmp1                  ; | Fill with >00
0089 73B8 0206  20         li    tmp2,80               ; /
     73BA 0050     
0090               
0091 73BC 06A0  32         bl    @xfilm                ; Fill CPU memory
     73BE 223C     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 73C0 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     73C2 A10A     
0100 73C4 C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     73C6 A018     
0101 73C8 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 73CA 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     73CC A104     
0105 73CE 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 73D0 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     73D2 A108     
0109 73D4 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     73D6 A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 73D8 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 73DA 0286  22         ci    tmp2,80               ; Check line length
     73DC 0050     
0117 73DE 1202  14         jle   edb.line.unpack.fb.copy
0118 73E0 0206  20         li    tmp2,80               ; Only process first 80 characters
     73E2 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 73E4 C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     73E6 A106     
0124 73E8 A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     73EA A104     
0125               
0126               
0127 73EC 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     73EE 2540     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 73F0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 73F2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 73F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 73F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 73F8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0144                       copy  "edb.lock.asm"                ; Lock editor buffer
     **** ****     > edb.lock.asm
0001               * FILE......: edb.lock.asm
0002               ***************************************************************
0003               * edb.lock
0004               * Lock editor buffer to prevent accidental changes
0005               ***************************************************************
0006               *  bl   @edb.lock
0007               *--------------------------------------------------------------
0008               * INPUT
0009               * @edb.locked = Editor buffer locked flag
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * None
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0
0016               *--------------------------------------------------------------
0017               * Memory usage
0018               ********|*****|*********************|**************************
0019               edb.lock:
0020 73FA 0649  14         dect  stack
0021 73FC C64B  30         mov   r11,*stack            ; Save return address
0022 73FE 0649  14         dect  stack
0023 7400 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;-------------------------------------------------------
0025                       ; Set lock flag
0026                       ;-------------------------------------------------------
0027 7402 0720  34         seto  @edb.locked           ; Set lock flag
     7404 A5DA     
0028 7406 04E0  34         clr   @edb.autoinsert       ; Clear auto insert flag
     7408 A50C     
0029                       ;-------------------------------------------------------
0030                       ; Show message 'Editor locked'
0031                       ;-------------------------------------------------------
0032 740A 0649  14         dect  stack
0033 740C C660  42         mov   @wyx,*stack           ; Backup current cursor position
     740E 832A     
0034               
0035 7410 06A0  32         bl    @putat
     7412 2442     
0036 7414 0034                   byte 0,52
0037 7416 7430                   data txt.locked       ; Display lock message
0038               
0039 7418 C839  42         mov   *stack+,@wyx          ; Restore cursor position
     741A 832A     
0040                       ;-------------------------------------------------------
0041                       ; Setup one shot task for removing overlay message
0042                       ;-------------------------------------------------------
0043 741C 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     741E 381C     
0044 7420 C804  38         mov   tmp0,@tv.task.oneshot
     7422 A22C     
0045               
0046 7424 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7426 2FB2     
0047 7428 0003                   data 3                ; / for getting consistent delay
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               edb.lock.exit:
0052 742A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 742C C2F9  30         mov   *stack+,r11
0054 742E 045B  20         b     *r11                  ; Return
0055               
0056               txt.locked:
0057 7430 0D45             stri "Editor locked"        ; Text for locked message
     7432 6469     
     7434 746F     
     7436 7220     
     7438 6C6F     
     743A 636B     
     743C 6564     
0058                       even
                   < stevie_b1.asm
0145                       copy  "edb.unlock.asm"              ; Unlock editor buffer
     **** ****     > edb.unlock.asm
0001               * FILE......: edb.unlock.asm
0002               ***************************************************************
0003               * edb.lock
0004               * Unlock editor buffer for changes
0005               ***************************************************************
0006               *  bl   @edb.unlock
0007               *--------------------------------------------------------------
0008               * INPUT
0009               * @edb.locked = Editor buffer locked flag
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * None
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0
0016               *--------------------------------------------------------------
0017               * Memory usage
0018               ********|*****|*********************|**************************
0019               edb.unlock:
0020 743E 0649  14         dect  stack
0021 7440 C64B  30         mov   r11,*stack            ; Save return address
0022 7442 0649  14         dect  stack
0023 7444 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;-------------------------------------------------------
0025                       ; Sanity check
0026                       ;-------------------------------------------------------
0027 7446 C120  34         mov   @edb.locked,tmp0      ; Is editor buffer locked?
     7448 A5DA     
0028 744A 130D  14         jeq   edb.unlock.exit       ; No, exit
0029 744C 04E0  34         clr   @edb.locked           ; Clear lock flag
     744E A5DA     
0030                       ;-------------------------------------------------------
0031                       ; Show message 'Editor unlocked'
0032                       ;-------------------------------------------------------
0033 7450 06A0  32         bl    @putat
     7452 2442     
0034 7454 0034                   byte 0,52
0035 7456 746C                   data txt.unlocked     ; Display message
0036                       ;-------------------------------------------------------
0037                       ; Setup one shot task for removing overlay message
0038                       ;-------------------------------------------------------
0039 7458 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     745A 381C     
0040 745C C804  38         mov   tmp0,@tv.task.oneshot
     745E A22C     
0041               
0042 7460 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7462 2FB2     
0043 7464 0003                   data 3                ; / for getting consistent delay
0044                       ;-------------------------------------------------------
0045                       ; Exit
0046                       ;-------------------------------------------------------
0047               edb.unlock.exit:
0048 7466 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 7468 C2F9  30         mov   *stack+,r11
0050 746A 045B  20         b     *r11                  ; Return
0051               
0052               txt.unlocked:
0053 746C 0F45             stri "Editor unlocked"      ; Text for unlocked message
     746E 6469     
     7470 746F     
     7472 7220     
     7474 756E     
     7476 6C6F     
     7478 636B     
     747A 6564     
0054                       even
                   < stevie_b1.asm
0146                       copy  "edb.autoinsert.toggle.asm"   ; Toggle auto insert mode for buffer
     **** ****     > edb.autoinsert.toggle.asm
0001               * FILE......: edb.autoinsert.asm
0002               * Purpose...: Toggle auto insert mode for editor buffer
0003               
0004               
0005               ***************************************************************
0006               * edb.autoinsert
0007               * Toggle auto insert mode for editor buffer
0008               ***************************************************************
0009               *  bl   @edb.autoinsert.toggle
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.autoinsert = Flag for tracking auto insert mode
0013               * @edb.locked     = Editor buffer locked flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               edb.autoinsert.toggle:
0025 747C 0649  14         dect  stack
0026 747E C64B  30         mov   r11,*stack            ; Save return address
0027 7480 0649  14         dect  stack
0028 7482 C644  30         mov   tmp0,*stack           ; Push tmp0
0029                       ;-------------------------------------------------------
0030                       ; Check if editor buffer is locked
0031                       ;-------------------------------------------------------
0032 7484 C120  34         mov   @edb.locked,tmp0      ; Is editor locked?
     7486 A5DA     
0033 7488 1618  14         jne   edb.autoinsert.toggle.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Toggle auto insert mode
0037                       ;-------------------------------------------------------
0038 748A 06A0  32         bl    @hchar
     748C 2832     
0039 748E 0032                   byte 0,50,32,20
     7490 2014     
0040 7492 FFFF                   data EOL              ; Erase any previous message
0041               
0042 7494 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     7496 A50C     
0043 7498 1305  14         jeq   !
0044                       ;-------------------------------------------------------
0045                       ; Show message 'AutoInsert on'
0046                       ;-------------------------------------------------------
0047 749A 06A0  32         bl    @putat
     749C 2442     
0048 749E 0034                   byte 0,52
0049 74A0 74C0                   data txt.autoins.on   ; AutoInsert on
0050 74A2 1004  14         jmp   edb.autoinsert.oneshot
0051                       ;-------------------------------------------------------
0052                       ; Show message 'AutoInsert off'
0053                       ;-------------------------------------------------------
0054 74A4 06A0  32 !       bl    @putat
     74A6 2442     
0055 74A8 0034                   byte 0,52
0056 74AA 74D0                   data txt.autoins.off   ; AutoInsert off
0057                       ;-------------------------------------------------------
0058                       ; Setup one shot task for removing overlay message
0059                       ;-------------------------------------------------------
0060               edb.autoinsert.oneshot:
0061 74AC 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     74AE 381C     
0062 74B0 C804  38         mov   tmp0,@tv.task.oneshot
     74B2 A22C     
0063               
0064 74B4 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     74B6 2FB2     
0065 74B8 0003                   data 3                ; / for getting consistent delay
0066                       ;-------------------------------------------------------
0067                       ; Exit
0068                       ;-------------------------------------------------------
0069               edb.autoinsert.toggle.exit:
0070 74BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0071 74BC C2F9  30         mov   *stack+,r11           ; Pop R11
0072 74BE 045B  20         b     *r11                  ; Return to caller
0073               
0074 74C0 0F41     txt.autoins.on     stri 'Auto insert: ON'
     74C2 7574     
     74C4 6F20     
     74C6 696E     
     74C8 7365     
     74CA 7274     
     74CC 3A20     
     74CE 4F4E     
0075                                  even
0076 74D0 1041     txt.autoins.off    stri 'Auto insert: OFF'
     74D2 7574     
     74D4 6F20     
     74D6 696E     
     74D8 7365     
     74DA 7274     
     74DC 3A20     
     74DE 4F46     
     74E0 46       
0077                                  even
                   < stevie_b1.asm
0147                       ;-----------------------------------------------------------------------
0148                       ; Logic for Editor settings
0149                       ;-----------------------------------------------------------------------
0150                       copy  "tv.linelen.toggle.asm"       ; Toggle line length display
     **** ****     > tv.linelen.toggle.asm
0001               * FILE......: tv.linelen.toggle.asm
0002               * Purpose...: Toggle line length display in status line
0003               
0004               
0005               ***************************************************************
0006               * tv.linelen.toggle
0007               * Toggle line length display in status line
0008               ***************************************************************
0009               *  bl   @tv.linelen.toggle
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.show.linelen = Flag for tracking line length display
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * none
0022               ********|*****|*********************|**************************
0023               tv.linelen.toggle:
0024 74E2 0649  14         dect  stack
0025 74E4 C64B  30         mov   r11,*stack            ; Save return address
0026 74E6 0649  14         dect  stack
0027 74E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;-------------------------------------------------------
0029                       ; Toggle line length display
0030                       ;-------------------------------------------------------
0031 74EA 06A0  32         bl    @hchar
     74EC 2832     
0032 74EE 0032                   byte 0,50,32,20
     74F0 2014     
0033 74F2 FFFF                   data EOL              ; Erase any previous message
0034               
0035 74F4 0560  34         inv   @tv.show.linelen      ; Toggle line length display
     74F6 A23E     
0036 74F8 1305  14         jeq   !
0037                       ;-------------------------------------------------------
0038                       ; Show message 'LineLength on'
0039                       ;-------------------------------------------------------
0040 74FA 06A0  32         bl    @putat
     74FC 2442     
0041 74FE 0034                   byte 0,52
0042 7500 7520                   data txt.linelen.on   ; LineLength on
0043 7502 1004  14         jmp   tv.linelen.oneshot
0044                       ;-------------------------------------------------------
0045                       ; Show message 'LineLength off'
0046                       ;-------------------------------------------------------
0047 7504 06A0  32 !       bl    @putat
     7506 2442     
0048 7508 0034                   byte 0,52
0049 750A 7530                   data txt.linelen.off  ; LineLength off
0050                       ;-------------------------------------------------------
0051                       ; Setup one shot task for removing overlay message
0052                       ;-------------------------------------------------------
0053               tv.linelen.oneshot:
0054 750C 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     750E 381C     
0055 7510 C804  38         mov   tmp0,@tv.task.oneshot
     7512 A22C     
0056               
0057 7514 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7516 2FB2     
0058 7518 0003                   data 3                ; / for getting consistent delay
0059                       ;-------------------------------------------------------
0060                       ; Exit
0061                       ;-------------------------------------------------------
0062               tv.linelen.toggle.exit:
0063 751A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 751C C2F9  30         mov   *stack+,r11           ; Pop R11
0065 751E 045B  20         b     *r11                  ; Return to caller
0066               
0067 7520 0F4C     txt.linelen.on     stri 'Line Length: ON'
     7522 696E     
     7524 6520     
     7526 4C65     
     7528 6E67     
     752A 7468     
     752C 3A20     
     752E 4F4E     
0068                                  even
0069 7530 104C     txt.linelen.off    stri 'Line Length: OFF'
     7532 696E     
     7534 6520     
     7536 4C65     
     7538 6E67     
     753A 7468     
     753C 3A20     
     753E 4F46     
     7540 46       
0070                                  even
                   < stevie_b1.asm
0151                       ;-----------------------------------------------------------------------
0152                       ; Background tasks
0153                       ;-----------------------------------------------------------------------
0154                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 7542 0649  14         dect  stack
0009 7544 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7546 06A0  32         bl    @pane.vdpdump
     7548 758E     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 754A C2F9  30         mov   *stack+,r11           ; Pop r11
0019 754C 0460  28         b     @slotok
     754E 2F3E     
                   < stevie_b1.asm
0155                       ;-----------------------------------------------------------------------
0156                       ; Screen pane utilities
0157                       ;-----------------------------------------------------------------------
0158                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 7550 0649  14         dect  stack
0021 7552 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7554 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7556 228E     
0026 7558 1300                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     755A 0000     
     755C 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 755E 06A0  32         bl    @clslot
     7560 2FA4     
0031 7562 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 7564 06A0  32         bl    @clslot
     7566 2FA4     
0034 7568 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 756A C2F9  30         mov   *stack+,r11           ; Pop R11
0040 756C 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 756E 0649  14         dect  stack
0061 7570 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 7572 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7574 228E     
0066 7576 1300                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     7578 0000     
     757A 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 757C 06A0  32         bl    @mkslot
     757E 2F86     
0073 7580 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     7582 385C     
0074 7584 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     7586 38FE     
0075 7588 FFFF                   data eol
0076               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 758A C2F9  30         mov   *stack+,r11           ; Pop R11
0090 758C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0159                       ;-----------------------------------------------------------------------
0160                       ; Screen panes
0161                       ;-----------------------------------------------------------------------
0162                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 758E 0649  14         dect  stack
0025 7590 C64B  30         mov   r11,*stack            ; Save return address
0026 7592 0649  14         dect  stack
0027 7594 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7596 0649  14         dect  stack
0029 7598 C660  42         mov   @wyx,*stack           ; Push cursor position
     759A 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 759C 20A0  32         coc   @wbit10,config
     759E 200C     
0035 75A0 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 75A2 06A0  32         bl    @putat
     75A4 2442     
0040 75A6 174E                   byte pane.botrow,78
0041 75A8 3CA4                   data txt.ws2
0042 75AA 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 75AC 06A0  32         bl    @putat
     75AE 2442     
0048 75B0 174E                   byte pane.botrow,78
0049 75B2 3C9A                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 75B4 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     75B6 A702     
0055 75B8 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 75BA C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     75BC A71E     
0061 75BE 1345  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 75C0 0284  22         ci    tmp0,tv.1timeonly
     75C2 00FE     
0066 75C4 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 75C6 0649  14         dect  stack
0073 75C8 C660  46         mov   @parm1,*stack         ; Push @parm1
     75CA A006     
0074 75CC 0649  14         dect  stack
0075 75CE C660  46         mov   @parm2,*stack         ; Push @parm2
     75D0 A008     
0076 75D2 0649  14         dect  stack
0077 75D4 C660  46         mov   @parm3,*stack         ; Push @parm3
     75D6 A00A     
0078               
0079 75D8 0720  34         seto  @parm1                ; Do not turn screen off
     75DA A006     
0080 75DC 0720  34         seto  @parm2                ; Skip colorzing marked lines
     75DE A008     
0081 75E0 0720  34         seto  @parm3                ; Only colorize CMDB pane
     75E2 A00A     
0082               
0083 75E4 06A0  32         bl    @pane.colorscheme.load
     75E6 7A16     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 75E8 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     75EA A00A     
0092 75EC C839  50         mov   *stack+,@parm2        ; Pop @parm2
     75EE A008     
0093 75F0 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     75F2 A006     
0094               
0095 75F4 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     75F6 A71E     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 75F8 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     75FA 786C     
0101 75FC 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     75FE A71E     
0102 7600 1024  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7602 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7604 A31A     
0107 7606 1310  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109                       ;------------------------------------------------------
0110                       ; Dump frame buffer to VDP
0111                       ;------------------------------------------------------
0112               pane.vdpdump.dump:
0113 7608 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     760A 31D0     
0114                                                   ; \ i  @tv.ruler.visible = Ruler visible
0115                                                   ; | i  @edb.special.file = Special file flag
0116                                                   ; / i  @tv.error.visible = Error visible
0117               
0118 760C C820  54         mov   @fb.scrrows,@parm1    ; Number of rows to dump to vdp
     760E A31E     
     7610 A006     
0119               
0120 7612 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     7614 7918     
0121                                                   ; \ i  @parm1 = number of lines to dump
0122                                                   ; /
0123                       ;------------------------------------------------------
0124                       ; Color the lines in the framebuffer (TAT)
0125                       ;------------------------------------------------------
0126 7616 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7618 A312     
0127 761A 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0128               
0129                       ; Colorize marked block if set (M1/M2)
0130               
0131 761C 06A0  32         bl    @fb.colorlines        ; Colorize lines
     761E 790C     
0132                                                   ; \ i  @parm1       = Force refresh if >ffff
0133                                                   ; / i  @fb.colorize = Colorize if >ffff
0134                       ;-------------------------------------------------------
0135                       ; Finished with frame buffer
0136                       ;-------------------------------------------------------
0137               pane.vdpdump.dumped:
0138 7620 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     7622 A31A     
0139 7624 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     7626 A31C     
0140                       ;-------------------------------------------------------
0141                       ; Refresh top and bottom line
0142                       ;-------------------------------------------------------
0143               pane.vdpdump.statlines:
0144 7628 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     762A A31C     
0145 762C 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0146               
0147 762E 06A0  32         bl    @pane.topline         ; Draw top line
     7630 79DA     
0148 7632 06A0  32         bl    @pane.botline         ; Draw bottom line
     7634 79E4     
0149 7636 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     7638 A31C     
0150                       ;------------------------------------------------------
0151                       ; Show ruler with tab positions
0152                       ;------------------------------------------------------
0153 763A C120  34         mov   @tv.ruler.visible,tmp0
     763C A210     
0154                                                   ; Should ruler be visible?
0155 763E 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0156               
0157 7640 06A0  32         bl    @cpym2v
     7642 24E6     
0158 7644 0050                   data vdp.fb.toprow.sit
0159 7646 A322                   data fb.ruler.sit
0160 7648 0050                   data 80               ; Show ruler
0161                       ;------------------------------------------------------
0162                       ; Exit task
0163                       ;------------------------------------------------------
0164               pane.vdpdump.exit:
0165 764A C839  42         mov   *stack+,@wyx          ; Pop cursor position
     764C 832A     
0166 764E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0167 7650 C2F9  30         mov   *stack+,r11           ; Pop r11
0168 7652 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0163                       ;-----------------------------------------------------------------------
0164                       ; Stubs
0165                       ;-----------------------------------------------------------------------
0166                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 7654 0649  14         dect  stack
0010 7656 C64B  30         mov   r11,*stack            ; Save return address
0011 7658 0649  14         dect  stack
0012 765A C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 765C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     765E 3084     
0017 7660 6004                   data bank2.rom        ; | i  p0 = bank address
0018 7662 7F70                   data vec.1            ; | i  p1 = Vector with target address
0019 7664 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 7666 C120  34         mov   @outparm1,tmp0
     7668 A018     
0024 766A 1304  14         jeq   fm.loadfile.exit
0025               
0026 766C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 766E C2F9  30         mov   *stack+,r11           ; Pop r11
0028 7670 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     7672 7796     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 7674 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 7676 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 7678 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 767A 0649  14         dect  stack
0044 767C C64B  30         mov   r11,*stack            ; Save return address
0045 767E 0649  14         dect  stack
0046 7680 C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 7682 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7684 3084     
0051 7686 6004                   data bank2.rom        ; | i  p0 = bank address
0052 7688 7F72                   data vec.2            ; | i  p1 = Vector with target address
0053 768A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 768C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 768E C2F9  30         mov   *stack+,r11           ; Pop r11
0060 7690 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               ***************************************************************
0064               * Stub for "fm.run.ea5"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.run.ea5:
0068 7692 0649  14         dect  stack
0069 7694 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 7696 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7698 3084     
0074 769A 6004                   data bank2.rom        ; | i  p0 = bank address
0075 769C 7F74                   data vec.3            ; | i  p1 = Vector with target address
0076 769E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 76A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0081 76A2 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
0089 76A4 0649  14         dect  stack
0090 76A6 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 76A8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76AA 3084     
0095 76AC 6004                   data bank2.rom        ; | i  p0 = bank address
0096 76AE 7F76                   data vec.4            ; | i  p1 = Vector with target address
0097 76B0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 76B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 76B4 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
0110 76B6 0649  14         dect  stack
0111 76B8 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 76BA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76BC 3084     
0116 76BE 6004                   data bank2.rom        ; | i  p0 = bank address
0117 76C0 7F78                   data vec.5            ; | i  p1 = Vector with target address
0118 76C2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 76C4 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 76C6 045B  20         b     *r11                  ; Return to caller
0124               
0125               
0126               ***************************************************************
0127               * Stub for "fm.directory"
0128               * bank2 vec.6
0129               ********|*****|*********************|**************************
0130               fm.directory:
0131 76C8 0649  14         dect  stack
0132 76CA C64B  30         mov   r11,*stack            ; Save return address
0133                       ;------------------------------------------------------
0134                       ; Call function in bank 2
0135                       ;------------------------------------------------------
0136 76CC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76CE 3084     
0137 76D0 6004                   data bank2.rom        ; | i  p0 = bank address
0138 76D2 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0139 76D4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0140                       ;------------------------------------------------------
0141                       ; Exit
0142                       ;------------------------------------------------------
0143 76D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0144 76D8 045B  20         b     *r11                  ; Return to caller
0145               
0146               ***************************************************************
0147               * Stub for "fm.browse.fname.prev"
0148               * bank2 vec.10
0149               ********|*****|*********************|**************************
0150               fm.browse.fname.prev:
0151 76DA 0649  14         dect  stack
0152 76DC C64B  30         mov   r11,*stack            ; Save return address
0153                       ;------------------------------------------------------
0154                       ; Call function in bank 2
0155                       ;------------------------------------------------------
0156 76DE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76E0 3084     
0157 76E2 6004                   data bank2.rom        ; | i  p0 = bank address
0158 76E4 7F82                   data vec.10           ; | i  p1 = Vector with target address
0159 76E6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0160                       ;------------------------------------------------------
0161                       ; Exit
0162                       ;------------------------------------------------------
0163 76E8 C2F9  30         mov   *stack+,r11           ; Pop r11
0164 76EA 045B  20         b     *r11                  ; Return to caller
0165               
0166               ***************************************************************
0167               * Stub for "fm.browse.fname.next"
0168               * bank2 vec.11
0169               ********|*****|*********************|**************************
0170               fm.browse.fname.next:
0171 76EC 0649  14         dect  stack
0172 76EE C64B  30         mov   r11,*stack            ; Save return address
0173                       ;------------------------------------------------------
0174                       ; Call function in bank 2
0175                       ;------------------------------------------------------
0176 76F0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     76F2 3084     
0177 76F4 6004                   data bank2.rom        ; | i  p0 = bank address
0178 76F6 7F84                   data vec.11           ; | i  p1 = Vector with target address
0179 76F8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0180                       ;------------------------------------------------------
0181                       ; Exit
0182                       ;------------------------------------------------------
0183 76FA C2F9  30         mov   *stack+,r11           ; Pop r11
0184 76FC 045B  20         b     *r11                  ; Return to caller
0185               
0186               ***************************************************************
0187               * Stub for "fm.browse.fname.set"
0188               * bank2 vec.12
0189               ********|*****|*********************|**************************
0190               fm.browse.fname.set:
0191 76FE 0649  14         dect  stack
0192 7700 C64B  30         mov   r11,*stack            ; Save return address
0193                       ;------------------------------------------------------
0194                       ; Call function in bank 2
0195                       ;------------------------------------------------------
0196 7702 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7704 3084     
0197 7706 6004                   data bank2.rom        ; | i  p0 = bank address
0198 7708 7F86                   data vec.12           ; | i  p1 = Vector with target address
0199 770A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0200                       ;------------------------------------------------------
0201                       ; Exit
0202                       ;------------------------------------------------------
0203 770C C2F9  30         mov   *stack+,r11           ; Pop r11
0204 770E 045B  20         b     *r11                  ; Return to caller
0205               
0206               ***************************************************************
0207               * Stub for "fm.browse.updir"
0208               * bank2 vec.13
0209               ********|*****|*********************|**************************
0210               fm.browse.updir:
0211 7710 0649  14         dect  stack
0212 7712 C64B  30         mov   r11,*stack            ; Save return address
0213                       ;------------------------------------------------------
0214                       ; Call function in bank 2
0215                       ;------------------------------------------------------
0216 7714 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7716 3084     
0217 7718 6004                   data bank2.rom        ; | i  p0 = bank address
0218 771A 7F88                   data vec.13           ; | i  p1 = Vector with target address
0219 771C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0220                       ;------------------------------------------------------
0221                       ; Exit
0222                       ;------------------------------------------------------
0223 771E C2F9  30         mov   *stack+,r11           ; Pop r11
0224 7720 045B  20         b     *r11                  ; Return to caller
0225               
0226               ***************************************************************
0227               * Stub for "edb.find.search"
0228               * bank2 vec.21
0229               ********|*****|*********************|**************************
0230               edb.find.search:
0231 7722 0649  14         dect  stack
0232 7724 C64B  30         mov   r11,*stack            ; Save return address
0233                       ;------------------------------------------------------
0234                       ; Call function in bank 2
0235                       ;------------------------------------------------------
0236 7726 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7728 3084     
0237 772A 6004                   data bank2.rom        ; | i  p0 = bank address
0238 772C 7F98                   data vec.21           ; | i  p1 = Vector with target address
0239 772E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0240                       ;------------------------------------------------------
0241                       ; Exit
0242                       ;------------------------------------------------------
0243 7730 C2F9  30         mov   *stack+,r11           ; Pop r11
0244 7732 045B  20         b     *r11                  ; Return to caller
0245               
0246               
0247               ***************************************************************
0248               * Stub for "edb.find.init"
0249               * bank2 vec.20
0250               ********|*****|*********************|**************************
0251               edb.find.init:
0252 7734 0649  14         dect  stack
0253 7736 C64B  30         mov   r11,*stack            ; Save return address
0254                       ;------------------------------------------------------
0255                       ; Call function in bank 2
0256                       ;------------------------------------------------------
0257 7738 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     773A 3084     
0258 773C 6004                   data bank2.rom        ; | i  p0 = bank address
0259 773E 7F96                   data vec.20           ; | i  p1 = Vector with target address
0260 7740 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0261                       ;------------------------------------------------------
0262                       ; Exit
0263                       ;------------------------------------------------------
0264 7742 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 7744 045B  20         b     *r11
0266               
0267               
0268               ***************************************************************
0269               * Stub for dialog "Help"
0270               * bank3 vec.1
0271               ********|*****|*********************|**************************
0272               dialog.help.next:
0273 7746 8820  50         c     @w$0008,@cmdb.dialog.var
     7748 2008     
     774A A722     
0274 774C 1304  14         jeq   !
0275 774E A820  54         a     @w$0008,@cmdb.dialog.var
     7750 2008     
     7752 A722     
0276 7754 1002  14         jmp   dialog.help
0277 7756 04E0  34 !       clr   @cmdb.dialog.var
     7758 A722     
0278               dialog.help:
0279 775A C820  54         mov   @dialog.help.vector,@trmpvector
     775C 7762     
     775E A034     
0280 7760 106D  14         jmp   _trampoline.bank3     ; Show dialog
0281               dialog.help.vector:
0282 7762 7F70             data  vec.1
0283               
0284               
0285               ***************************************************************
0286               * Stub for dialog "Load file"
0287               * bank3 vec.2
0288               ********|*****|*********************|**************************
0289               dialog.load:
0290 7764 C820  54         mov   @dialog.load.vector,@trmpvector
     7766 776C     
     7768 A034     
0291 776A 1068  14         jmp   _trampoline.bank3     ; Show dialog
0292               dialog.load.vector:
0293 776C 7F72             data  vec.2
0294               
0295               
0296               ***************************************************************
0297               * Stub for dialog "Save file"
0298               * bank3 vec.3
0299               ********|*****|*********************|**************************
0300               dialog.save:
0301 776E C820  54         mov   @dialog.save.vector,@trmpvector
     7770 7776     
     7772 A034     
0302 7774 1063  14         jmp   _trampoline.bank3     ; Show dialog
0303               dialog.save.vector:
0304 7776 7F74             data  vec.3
0305               
0306               
0307               ***************************************************************
0308               * Stub for dialog "Insert file at line"
0309               * bank3 vec.4
0310               ********|*****|*********************|**************************
0311               dialog.insert:
0312 7778 C820  54         mov   @dialog.insert.vector,@trmpvector
     777A 7780     
     777C A034     
0313 777E 105E  14         jmp   _trampoline.bank3     ; Show dialog
0314               dialog.insert.vector:
0315 7780 7F76             data  vec.4
0316               
0317               
0318               ***************************************************************
0319               * Stub for dialog "Print file"
0320               * bank3 vec.5
0321               ********|*****|*********************|**************************
0322               dialog.print:
0323 7782 C820  54         mov   @dialog.print.vector,@trmpvector
     7784 778A     
     7786 A034     
0324 7788 1059  14         jmp   _trampoline.bank3    ; Show dialog
0325               dialog.print.vector:
0326 778A 7F78             data  vec.5
0327               
0328               
0329               ***************************************************************
0330               * Stub for dialog "File"
0331               * bank3 vec.6
0332               ********|*****|*********************|**************************
0333               dialog.file:
0334 778C C820  54         mov   @dialog.file.vector,@trmpvector
     778E 7794     
     7790 A034     
0335 7792 1054  14         jmp   _trampoline.bank3     ; Show dialog
0336               dialog.file.vector:
0337 7794 7F7A             data  vec.6
0338               
0339               
0340               ***************************************************************
0341               * Stub for dialog "Unsaved Changes"
0342               * bank3 vec.7
0343               ********|*****|*********************|**************************
0344               dialog.unsaved:
0345 7796 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     7798 A72C     
0346 779A C820  54         mov   @dialog.unsaved.vector,@trmpvector
     779C 77A2     
     779E A034     
0347 77A0 104D  14         jmp   _trampoline.bank3     ; Show dialog
0348               dialog.unsaved.vector:
0349 77A2 7F7C             data  vec.7
0350               
0351               
0352               ***************************************************************
0353               * Stub for dialog "Copy clipboard to line ..."
0354               * bank3 vec.8
0355               ********|*****|*********************|**************************
0356               dialog.clipboard:
0357 77A4 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     77A6 77AC     
     77A8 A034     
0358 77AA 1048  14         jmp   _trampoline.bank3     ; Show dialog
0359               dialog.clipboard.vector:
0360 77AC 7F7E             data  vec.8
0361               
0362               
0363               ***************************************************************
0364               * Stub for dialog "Configure clipboard device"
0365               * bank3 vec.9
0366               ********|*****|*********************|**************************
0367               dialog.clipdev:
0368 77AE C820  54         mov   @dialog.clipdev.vector,@trmpvector
     77B0 77B6     
     77B2 A034     
0369 77B4 1043  14         jmp   _trampoline.bank3     ; Show dialog
0370               dialog.clipdev.vector:
0371 77B6 7F80             data  vec.9
0372               
0373               
0374               ***************************************************************
0375               * Stub for dialog "Configure"
0376               * bank3 vec.10
0377               ********|*****|*********************|**************************
0378               dialog.config:
0379 77B8 C820  54         mov   @dialog.config.vector,@trmpvector
     77BA 77C0     
     77BC A034     
0380 77BE 103E  14         jmp   _trampoline.bank3     ; Show dialog
0381               dialog.config.vector:
0382 77C0 7F82             data  vec.10
0383               
0384               
0385               ***************************************************************
0386               * Stub for dialog "Append file"
0387               * bank3 vec.11
0388               ********|*****|*********************|**************************
0389               dialog.append:
0390 77C2 C820  54         mov   @dialog.append.vector,@trmpvector
     77C4 77CA     
     77C6 A034     
0391 77C8 1039  14         jmp   _trampoline.bank3     ; Show dialog
0392               dialog.append.vector:
0393 77CA 7F84             data  vec.11
0394               
0395               
0396               ***************************************************************
0397               * Stub for dialog "Cartridge"
0398               * bank3 vec.12
0399               ********|*****|*********************|**************************
0400               dialog.cartridge:
0401 77CC C820  54         mov   @dialog.cartridge.vector,@trmpvector
     77CE 77D4     
     77D0 A034     
0402 77D2 1034  14         jmp   _trampoline.bank3     ; Show dialog
0403               dialog.cartridge.vector:
0404 77D4 7F86             data  vec.12
0405               
0406               
0407               ***************************************************************
0408               * Stub for dialog "Basic"
0409               * bank3 vec.13
0410               ********|*****|*********************|**************************
0411               dialog.basic:
0412 77D6 C820  54         mov   @dialog.basic.vector,@trmpvector
     77D8 77DE     
     77DA A034     
0413 77DC 102F  14         jmp   _trampoline.bank3     ; Show dialog
0414               dialog.basic.vector:
0415 77DE 7F88             data  vec.13
0416               
0417               
0418               ***************************************************************
0419               * Stub for dialog "Shortcuts"
0420               * bank3 vec.14
0421               ********|*****|*********************|**************************
0422               dialog.shortcuts:
0423 77E0 C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     77E2 77E8     
     77E4 A034     
0424 77E6 102A  14         jmp   _trampoline.bank3     ; Show dialog
0425               dialog.shortcuts.vector:
0426 77E8 7F8A             data  vec.14
0427               
0428               
0429               ***************************************************************
0430               * Stub for dialog "Dir"
0431               * bank3 vec.15
0432               ********|*****|*********************|**************************
0433               dialog.cat:
0434 77EA C820  54         mov   @dialog.cat.vector,@trmpvector
     77EC 77F2     
     77EE A034     
0435 77F0 1025  14         jmp   _trampoline.bank3     ; Show dialog
0436               dialog.cat.vector:
0437 77F2 7F8C             data  vec.15
0438               
0439               
0440               ***************************************************************
0441               * Stub for dialog "Go to line"
0442               * bank3 vec.16
0443               ********|*****|*********************|**************************
0444               dialog.goto:
0445 77F4 C820  54         mov   @dialog.goto.vector,@trmpvector
     77F6 77FC     
     77F8 A034     
0446 77FA 1020  14         jmp   _trampoline.bank3     ; Show dialog
0447               dialog.goto.vector:
0448 77FC 7F8E             data  vec.16
0449               
0450               
0451               ***************************************************************
0452               * Stub for dialog "Configure font"
0453               * bank3 vec.17
0454               ********|*****|*********************|**************************
0455               dialog.font:
0456 77FE C820  54         mov   @dialog.font.vector,@trmpvector
     7800 7806     
     7802 A034     
0457 7804 101B  14         jmp   _trampoline.bank3     ; Show dialog
0458               dialog.font.vector:
0459 7806 7F90             data  vec.17
0460               
0461               
0462               ***************************************************************
0463               * Stub for dialog "Run"
0464               * bank3 vec.18
0465               ********|*****|*********************|**************************
0466               dialog.run:
0467 7808 C820  54         mov   @dialog.run.vector,@trmpvector
     780A 7810     
     780C A034     
0468 780E 1016  14         jmp   _trampoline.bank3     ; Show dialog
0469               dialog.run.vector:
0470 7810 7F92             data  vec.18
0471               
0472               
0473               ***************************************************************
0474               * Stub for dialog "Main Menu"
0475               * bank3 vec.30
0476               ********|*****|*********************|**************************
0477               dialog.menu:
0478                       ;------------------------------------------------------
0479                       ; Check if block mode is active
0480                       ;------------------------------------------------------
0481 7812 C120  34         mov   @edb.block.m2,tmp0    ; \
     7814 A510     
0482 7816 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0483                                                   ; /
0484 7818 1302  14         jeq   !                     ; Block mode inactive, show dialog
0485                       ;------------------------------------------------------
0486                       ; Special treatment for block mode
0487                       ;------------------------------------------------------
0488 781A 0460  28         b     @edkey.action.block.reset
     781C 685C     
0489                                                   ; Reset block mode
0490                       ;------------------------------------------------------
0491                       ; Show dialog
0492                       ;------------------------------------------------------
0493 781E C820  54 !       mov   @dialog.menu.vector,@trmpvector
     7820 7826     
     7822 A034     
0494 7824 100B  14         jmp   _trampoline.bank3     ; Show dialog
0495               dialog.menu.vector:
0496 7826 7FAA             data  vec.30
0497               
0498               
0499               ***************************************************************
0500               * Stub for dialog "Find"
0501               * bank3 vec.43
0502               ********|*****|*********************|**************************
0503               dialog.find:
0504 7828 C820  54         mov   @dialog.find.vector,@trmpvector
     782A 7830     
     782C A034     
0505 782E 1006  14         jmp   _trampoline.bank3     ; Show dialog
0506               dialog.find.vector:
0507 7830 7FC4             data  vec.43
0508               
0509               
0510               ***************************************************************
0511               * Stub for dialog "FinalGROM 99 Cartridge"
0512               * bank3 vec.45
0513               ********|*****|*********************|**************************
0514               dialog.cart.fg99:
0515 7832 C820  54         mov   @dialog.cart.fg99.vector,@trmpvector
     7834 783A     
     7836 A034     
0516 7838 1001  14         jmp   _trampoline.bank3     ; Show dialog
0517               dialog.cart.fg99.vector:
0518 783A 7FC8             data  vec.45
0519               
0520               
0521               ***************************************************************
0522               * Trampoline 1 (bank 3, dialog)
0523               ********|*****|*********************|**************************
0524               _trampoline.bank3:
0525 783C 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     783E 7550     
0526                       ;------------------------------------------------------
0527                       ; Call routine in specified bank
0528                       ;------------------------------------------------------
0529 7840 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7842 3084     
0530 7844 6006                   data bank3.rom        ; | i  p0 = bank address
0531 7846 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0532                                                   ; |         (deref @trmpvector)
0533 7848 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0534                       ;------------------------------------------------------
0535                       ; Exit
0536                       ;------------------------------------------------------
0537 784A 0460  28         b     @edkey.action.cmdb.show
     784C 6ACC     
0538                                                   ; Show dialog in CMDB pane
0539               
0540               
0541               ***************************************************************
0542               * Stub for "pane.show_hintx"
0543               * bank3 vec.19
0544               ********|*****|*********************|**************************
0545               pane.show_hintx:
0546 784E C820  54         mov   @pane.show_hintx.vector,@trmpvector
     7850 7856     
     7852 A034     
0547 7854 104C  14         jmp   _trampoline.bank3.ret ; Longjump
0548               pane.show_hintx.vector:
0549 7856 7F94             data  vec.19
0550               
0551               
0552               ***************************************************************
0553               * Stub for "pane.cmdb.show"
0554               * bank3 vec.20
0555               ********|*****|*********************|**************************
0556               pane.cmdb.show:
0557 7858 C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     785A 7860     
     785C A034     
0558 785E 1047  14         jmp   _trampoline.bank3.ret ; Longjump
0559               pane.cmdb.show.vector:
0560 7860 7F96             data  vec.20
0561               
0562               
0563               ***************************************************************
0564               * Stub for "pane.cmdb.hide"
0565               * bank3 vec.21
0566               ********|*****|*********************|**************************
0567               pane.cmdb.hide:
0568 7862 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7864 786A     
     7866 A034     
0569 7868 1042  14         jmp   _trampoline.bank3.ret ; Longjump
0570               pane.cmdb.hide.vector:
0571 786A 7F98             data  vec.21
0572               
0573               
0574               ***************************************************************
0575               * Stub for "pane.cmdb.draw"
0576               * bank3 vec.22
0577               ********|*****|*********************|**************************
0578               pane.cmdb.draw:
0579 786C C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     786E 7874     
     7870 A034     
0580 7872 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0581               pane.cmdb.draw.vector:
0582 7874 7F9A             data  vec.22
0583               
0584               
0585               ***************************************************************
0586               * Stub for "cmdb.refresh_prompt"
0587               * bank3 vec.24
0588               ********|*****|*********************|**************************
0589               cmdb.refresh_prompt:
0590 7876 C820  54         mov   @cmdb.refresh_prompt.vector,@trmpvector
     7878 787E     
     787A A034     
0591 787C 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0592               cmdb.refresh_prompt.vector:
0593 787E 7F9E             data  vec.24
0594               
0595               
0596               ***************************************************************
0597               * Stub for "cmdb.cmd.clear"
0598               * bank3 vec.25
0599               ********|*****|*********************|**************************
0600               cmdb.cmd.clear:
0601 7880 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7882 7888     
     7884 A034     
0602 7886 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0603               cmdb.cmd.clear.vector:
0604 7888 7FA0             data  vec.25
0605               
0606               
0607               ***************************************************************
0608               * Stub for "cmdb.cmdb.getlength"
0609               * bank3 vec.26
0610               ********|*****|*********************|**************************
0611               cmdb.cmd.getlength:
0612 788A C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     788C 7892     
     788E A034     
0613 7890 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0614               cmdb.cmd.getlength.vector:
0615 7892 7FA2             data  vec.26
0616               
0617               
0618               ***************************************************************
0619               * Stub for "cmdb.cmdb.preset"
0620               * bank3 vec.27
0621               ********|*****|*********************|**************************
0622               cmdb.cmd.preset:
0623 7894 C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7896 789C     
     7898 A034     
0624 789A 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0625               cmdb.cmd.preset.vector:
0626 789C 7FA4             data  vec.27
0627               
0628               
0629               ***************************************************************
0630               * Stub for "cmdb.cmdb.set"
0631               * bank3 vec.28
0632               ********|*****|*********************|**************************
0633               cmdb.cmd.set:
0634 789E C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     78A0 78A6     
     78A2 A034     
0635 78A4 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0636               cmdb.cmd.set.vector:
0637 78A6 7FA6             data  vec.28
0638               
0639               
0640               ***************************************************************
0641               * Stub for "cmdb.cmd.cursor_eol"
0642               * bank3 vec.29
0643               ********|*****|*********************|**************************
0644               cmdb.cmd.cursor_eol:
0645 78A8 C820  54         mov   @cmdb.cmd.cursor_eol.vector,@trmpvector
     78AA 78B0     
     78AC A034     
0646 78AE 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0647               cmdb.cmd.cursor_eol.vector:
0648 78B0 7FA8             data  vec.29
0649               
0650               
0651               ***************************************************************
0652               * Stub for "tibasic.am.toggle"
0653               * bank3 vec.31
0654               ********|*****|*********************|**************************
0655               tibasic.am.toggle:
0656 78B2 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     78B4 78BA     
     78B6 A034     
0657 78B8 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0658               tibasic.am.toggle.vector:
0659 78BA 7FAC             data  vec.31
0660               
0661               
0662               ***************************************************************
0663               * Stub for "fm.fastmode"
0664               * bank3 vec.32
0665               ********|*****|*********************|**************************
0666               fm.fastmode:
0667 78BC C820  54         mov   @fm.fastmode.vector,@trmpvector
     78BE 78C4     
     78C0 A034     
0668 78C2 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0669               fm.fastmode.vector:
0670 78C4 7FAE             data  vec.32
0671               
0672               
0673               ***************************************************************
0674               * Stub for "cmdb.cfg.fname"
0675               * bank3 vec.33
0676               ********|*****|*********************|**************************
0677               cmdb.cfg.fname:
0678 78C6 C820  54         mov   @cmdb.cfg.fname.vector,@trmpvector
     78C8 78CE     
     78CA A034     
0679 78CC 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0680               cmdb.cfg.fname.vector:
0681 78CE 7FB0             data  vec.33
0682               
0683               ***************************************************************
0684               * Stub for "fm.lineterm"
0685               * bank3 vec.34
0686               ********|*****|*********************|**************************
0687               fm.lineterm:
0688 78D0 C820  54         mov   @fm.lineterm.vector,@trmpvector
     78D2 78D8     
     78D4 A034     
0689 78D6 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0690               fm.lineterm.vector:
0691 78D8 7FB2             data  vec.34
0692               
0693               
0694               ***************************************************************
0695               * Stub for "dialog"
0696               * bank3 vec.42
0697               ********|*****|*********************|**************************
0698               dialog:
0699 78DA C820  54         mov   @dialog.vector,@trmpvector
     78DC 78E2     
     78DE A034     
0700 78E0 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0701               dialog.vector:
0702 78E2 7FC2             data  vec.42
0703               
0704               
0705               ***************************************************************
0706               * Stub for "error.display"
0707               * bank3 vec.48
0708               ********|*****|*********************|**************************
0709               error.display:
0710 78E4 C820  54         mov   @error.display.vector,@trmpvector
     78E6 78EC     
     78E8 A034     
0711 78EA 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0712               error.display.vector:
0713 78EC 7FCE             data  vec.48
0714               
0715               
0716               
0717               ***************************************************************
0718               * Trampoline bank 3 with return
0719               ********|*****|*********************|**************************
0720               _trampoline.bank3.ret:
0721 78EE 0649  14         dect  stack
0722 78F0 C64B  30         mov   r11,*stack            ; Save return address
0723                       ;------------------------------------------------------
0724                       ; Call routine in specified bank
0725                       ;------------------------------------------------------
0726 78F2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78F4 3084     
0727 78F6 6006                   data bank3.rom        ; | i  p0 = bank address
0728 78F8 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0729                                                   ; |         (deref @trmpvector)
0730 78FA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0731                       ;------------------------------------------------------
0732                       ; Exit
0733                       ;------------------------------------------------------
0734 78FC C2F9  30         mov   *stack+,r11           ; Pop r11
0735 78FE 045B  20         b     *r11                  ; Return to caller
0736               
0737               
0738               ***************************************************************
0739               * Stub for "fb.ruler.init"
0740               * bank4 vec.2
0741               ********|*****|*********************|**************************
0742               fb.ruler.init:
0743 7900 C820  54         mov   @fb.ruler.init.vector,@trmpvector
     7902 790A     
     7904 A034     
0744 7906 0460  28         b     @_trampoline.bank4.ret ; Longjump
     7908 7A34     
0745               fb.ruler.init.vector:
0746 790A 7F72             data  vec.2
0747               
0748               
0749               ***************************************************************
0750               * Stub for "fb.colorlines"
0751               * bank4 vec.3
0752               ********|*****|*********************|**************************
0753               fb.colorlines:
0754 790C C820  54         mov   @fb.colorlines.vector,@trmpvector
     790E 7916     
     7910 A034     
0755 7912 0460  28         b     @_trampoline.bank4.ret ; Longjump
     7914 7A34     
0756               fb.colorlines.vector:
0757 7916 7F74             data  vec.3
0758               
0759               
0760               ***************************************************************
0761               * Stub for "fb.vdpdump"
0762               * bank4 vec.4
0763               ********|*****|*********************|**************************
0764               fb.vdpdump:
0765 7918 C820  54         mov   @fb.vdpdump.vector,@trmpvector
     791A 7922     
     791C A034     
0766 791E 0460  28         b     @_trampoline.bank4.ret ; Longjump
     7920 7A34     
0767               fb.vdpdump.vector:
0768 7922 7F76             data  vec.4
0769               
0770               
0771               ***************************************************************
0772               * Stub for "fb.hscroll"
0773               * bank4 vec.6
0774               ********|*****|*********************|**************************
0775               fb.hscroll:
0776 7924 C820  54         mov   @fb.hscroll.vector,@trmpvector
     7926 792E     
     7928 A034     
0777 792A 0460  28         b     @_trampoline.bank4.ret ; Longjump
     792C 7A34     
0778               fb.hscroll.vector:
0779 792E 7F7A             data  vec.6
0780               
0781               
0782               ***************************************************************
0783               * Stub for "fb.restore"
0784               * bank4 vec.7
0785               ********|*****|*********************|**************************
0786               fb.restore:
0787 7930 C820  54         mov   @fb.restore.vector,@trmpvector
     7932 7938     
     7934 A034     
0788 7936 107E  14         jmp   _trampoline.bank4.ret ; Longjump
0789               fb.restore.vector:
0790 7938 7F7C             data  vec.7
0791               
0792               
0793               ***************************************************************
0794               * Stub for "fb.refresh"
0795               * bank4 vec.8
0796               ********|*****|*********************|**************************
0797               fb.refresh:
0798 793A C820  54         mov   @fb.refresh.vector,@trmpvector
     793C 7942     
     793E A034     
0799 7940 1079  14         jmp   _trampoline.bank4.ret ; Longjump
0800               fb.refresh.vector:
0801 7942 7F7E             data  vec.8
0802               
0803               
0804               ***************************************************************
0805               * Stub for "fb.get.nonblank"
0806               * bank4 vec.9
0807               ********|*****|*********************|**************************
0808               fb.get.nonblank:
0809 7944 C820  54         mov   @fb.get.nonblank.vector,@trmpvector
     7946 794C     
     7948 A034     
0810 794A 1074  14         jmp   _trampoline.bank4.ret ; Longjump
0811               fb.get.nonblank.vector:
0812 794C 7F80             data  vec.9
0813               
0814               
0815               ***************************************************************
0816               * Stub for "fb.tab.prev"
0817               * bank4 vec.10
0818               ********|*****|*********************|**************************
0819               fb.tab.prev:
0820 794E C820  54         mov   @fb.tab.prev.vector,@trmpvector
     7950 7956     
     7952 A034     
0821 7954 106F  14         jmp   _trampoline.bank4.ret ; Longjump
0822               fb.tab.prev.vector:
0823 7956 7F82             data  vec.10
0824               
0825               
0826               ***************************************************************
0827               * Stub for "fb.tab.next"
0828               * bank4 vec.11
0829               ********|*****|*********************|**************************
0830               fb.tab.next:
0831 7958 C820  54         mov   @fb.tab.next.vector,@trmpvector
     795A 7960     
     795C A034     
0832 795E 106A  14         jmp   _trampoline.bank4.ret ; Longjump
0833               fb.tab.next.vector:
0834 7960 7F84             data  vec.11
0835               
0836               
0837               ***************************************************************
0838               * Stub for "fb.cursor.up"
0839               * bank4 vec.12
0840               ********|*****|*********************|**************************
0841               fb.cursor.up:
0842 7962 C820  54         mov   @fb.cursor.up.vector,@trmpvector
     7964 796A     
     7966 A034     
0843 7968 1065  14         jmp   _trampoline.bank4.ret ; Longjump
0844               fb.cursor.up.vector:
0845 796A 7F86             data  vec.12
0846               
0847               
0848               ***************************************************************
0849               * Stub for "fb.cursor.down"
0850               * bank4 vec.13
0851               ********|*****|*********************|**************************
0852               fb.cursor.down:
0853 796C C820  54         mov   @fb.cursor.down.vector,@trmpvector
     796E 7974     
     7970 A034     
0854 7972 1060  14         jmp   _trampoline.bank4.ret ; Longjump
0855               fb.cursor.down.vector:
0856 7974 7F88             data  vec.13
0857               
0858               
0859               ***************************************************************
0860               * Stub for "fb.cursor.home"
0861               * bank4 vec.14
0862               ********|*****|*********************|**************************
0863               fb.cursor.home:
0864 7976 C820  54         mov   @fb.cursor.home.vector,@trmpvector
     7978 797E     
     797A A034     
0865 797C 105B  14         jmp   _trampoline.bank4.ret ; Longjump
0866               fb.cursor.home.vector:
0867 797E 7F8A             data  vec.14
0868               
0869               
0870               ***************************************************************
0871               * Stub for "fb.insert.line"
0872               * bank4 vec.15
0873               ********|*****|*********************|**************************
0874               fb.insert.line:
0875 7980 C820  54         mov   @fb.insert.line.vector,@trmpvector
     7982 7988     
     7984 A034     
0876 7986 1056  14         jmp   _trampoline.bank4.ret ; Longjump
0877               fb.insert.line.vector:
0878 7988 7F8C             data  vec.15
0879               
0880               
0881               ***************************************************************
0882               * Stub for "fb.cursor.top"
0883               * bank4 vec.16
0884               ********|*****|*********************|**************************
0885               fb.cursor.top:
0886 798A C820  54         mov   @fb.cursor.top.vector,@trmpvector
     798C 7992     
     798E A034     
0887 7990 1051  14         jmp   _trampoline.bank4.ret ; Longjump
0888               fb.cursor.top.vector:
0889 7992 7F8E             data  vec.16
0890               
0891               
0892               ***************************************************************
0893               * Stub for "fb.cursor.topscr"
0894               * bank4 vec.17
0895               ********|*****|*********************|**************************
0896               fb.cursor.topscr:
0897 7994 C820  54         mov   @fb.cursor.topscr.vector,@trmpvector
     7996 799C     
     7998 A034     
0898 799A 104C  14         jmp   _trampoline.bank4.ret ; Longjump
0899               fb.cursor.topscr.vector:
0900 799C 7F90             data  vec.17
0901               
0902               
0903               ***************************************************************
0904               * Stub for "fb.cursor.bot"
0905               * bank4 vec.18
0906               ********|*****|*********************|**************************
0907               fb.cursor.bot:
0908 799E C820  54         mov   @fb.cursor.bot.vector,@trmpvector
     79A0 79A6     
     79A2 A034     
0909 79A4 1047  14         jmp   _trampoline.bank4.ret ; Longjump
0910               fb.cursor.bot.vector:
0911 79A6 7F92             data  vec.18
0912               
0913               
0914               ***************************************************************
0915               * Stub for "fb.cursor.botscr"
0916               * bank4 vec.19
0917               ********|*****|*********************|**************************
0918               fb.cursor.botscr:
0919 79A8 C820  54         mov   @fb.cursor.botscr.vector,@trmpvector
     79AA 79B0     
     79AC A034     
0920 79AE 1042  14         jmp   _trampoline.bank4.ret ; Longjump
0921               fb.cursor.botscr.vector:
0922 79B0 7F94             data  vec.19
0923               
0924               
0925               ***************************************************************
0926               * Stub for "fb.insert.char"
0927               * bank4 vec.20
0928               ********|*****|*********************|**************************
0929               fb.insert.char:
0930 79B2 C820  54         mov   @fb.insert.char.vector,@trmpvector
     79B4 79BA     
     79B6 A034     
0931 79B8 103D  14         jmp   _trampoline.bank4.ret ; Longjump
0932               fb.insert.char.vector:
0933 79BA 7F96             data  vec.20
0934               
0935               
0936               ***************************************************************
0937               * Stub for "fb.replace.char"
0938               * bank4 vec.21
0939               ********|*****|*********************|**************************
0940               fb.replace.char:
0941 79BC C820  54         mov   @fb.replace.char.vector,@trmpvector
     79BE 79C4     
     79C0 A034     
0942 79C2 1038  14         jmp   _trampoline.bank4.ret ; Longjump
0943               fb.replace.char.vector:
0944 79C4 7F98             data  vec.21
0945               
0946               
0947               ***************************************************************
0948               * Stub for "fb.goto.prevmatch"
0949               * bank4 vec.22
0950               ********|*****|*********************|**************************
0951               fb.goto.prevmatch:
0952 79C6 C820  54         mov   @fb.goto.prevmatch.vector,@trmpvector
     79C8 79CE     
     79CA A034     
0953 79CC 1033  14         jmp   _trampoline.bank4.ret ; Longjump
0954               fb.goto.prevmatch.vector:
0955 79CE 7F9A             data  vec.22
0956               
0957               
0958               ***************************************************************
0959               * Stub for "fb.goto.nextmatch"
0960               * bank4 vec.23
0961               ********|*****|*********************|**************************
0962               fb.goto.nextmatch:
0963 79D0 C820  54         mov   @fb.goto.nextmatch.vector,@trmpvector
     79D2 79D8     
     79D4 A034     
0964 79D6 102E  14         jmp   _trampoline.bank4.ret ; Longjump
0965               fb.goto.nextmatch.vector:
0966 79D8 7F9C             data  vec.23
0967               
0968               
0969               ***************************************************************
0970               * Stub for "pane.topline"
0971               * bank4 vec.33
0972               ********|*****|*********************|**************************
0973               pane.topline:
0974 79DA C820  54         mov   @pane.topline.vector,@trmpvector
     79DC 79E2     
     79DE A034     
0975 79E0 1029  14         jmp   _trampoline.bank4.ret ; Longjump
0976               pane.topline.vector:
0977 79E2 7FB0             data  vec.33
0978               
0979               
0980               ***************************************************************
0981               * Stub for "pane.botline"
0982               * bank4 vec.34
0983               ********|*****|*********************|**************************
0984               pane.botline:
0985 79E4 C820  54         mov   @pane.botline.vector,@trmpvector
     79E6 79EC     
     79E8 A034     
0986 79EA 1024  14         jmp   _trampoline.bank4.ret ; Longjump
0987               pane.botline.vector:
0988 79EC 7FB2             data  vec.34
0989               
0990               
0991               ***************************************************************
0992               * Stub for "pane.errline.show"
0993               * bank4 vec.35
0994               ********|*****|*********************|**************************
0995               pane.errline.show:
0996 79EE C820  54         mov   @pane.errline.show.vector,@trmpvector
     79F0 79F6     
     79F2 A034     
0997 79F4 101F  14         jmp   _trampoline.bank4.ret ; Longjump
0998               pane.errline.show.vector:
0999 79F6 7FB4             data  vec.35
1000               
1001               
1002               ***************************************************************
1003               * Stub for "pane.errline.hide"
1004               * bank4 vec.36
1005               ********|*****|*********************|**************************
1006               pane.errline.hide:
1007 79F8 C820  54         mov   @pane.errline.hide.vector,@trmpvector
     79FA 7A00     
     79FC A034     
1008 79FE 101A  14         jmp   _trampoline.bank4.ret ; Longjump
1009               pane.errline.hide.vector:
1010 7A00 7FB6             data  vec.36
1011               
1012               
1013               ***************************************************************
1014               * Stub for "pane.errline.drawcolor"
1015               * bank4 vec.37
1016               ********|*****|*********************|**************************
1017               pane.errline.drawcolor:
1018 7A02 C820  54         mov   @pane.errline.drawcolor.vector,@trmpvector
     7A04 7A0A     
     7A06 A034     
1019 7A08 1015  14         jmp   _trampoline.bank4.ret ; Longjump
1020               pane.errline.drawcolor.vector:
1021 7A0A 7FB8             data  vec.37
1022               
1023               
1024               ***************************************************************
1025               * Stub for "pane.colorscheme.cycle"
1026               * bank4 vec.40
1027               ********|*****|*********************|**************************
1028               pane.colorscheme.cycle:
1029 7A0C C820  54         mov   @pane.colorscheme.cycle.vector,@trmpvector
     7A0E 7A14     
     7A10 A034     
1030 7A12 1010  14         jmp   _trampoline.bank4.ret ; Longjump
1031               pane.colorscheme.cycle.vector:
1032 7A14 7FBE             data  vec.40
1033               
1034               
1035               ***************************************************************
1036               * Stub for "pane.colorscheme.load"
1037               * bank4 vec.41
1038               ********|*****|*********************|**************************
1039               pane.colorscheme.load:
1040 7A16 C820  54         mov   @pane.colorscheme.load.vector,@trmpvector
     7A18 7A1E     
     7A1A A034     
1041 7A1C 100B  14         jmp   _trampoline.bank4.ret ; Longjump
1042               pane.colorscheme.load.vector:
1043 7A1E 7FC0             data  vec.41
1044               
1045               
1046               ***************************************************************
1047               * Stub for "pane.filebrowser"
1048               * bank4 vec.50
1049               ********|*****|*********************|**************************
1050               pane.filebrowser:
1051 7A20 C820  54         mov   @pane.filebrowser.vector,@trmpvector
     7A22 7A28     
     7A24 A034     
1052 7A26 1006  14         jmp   _trampoline.bank4.ret ; Longjump
1053               pane.filebrowser.vector:
1054 7A28 7FD2             data  vec.50
1055               
1056               
1057               ***************************************************************
1058               * Stub for "pane.filebrowser.hilight"
1059               * bank4 vec.51
1060               ********|*****|*********************|**************************
1061               pane.filebrowser.hilight:
1062 7A2A C820  54         mov   @pane.filebrowser.hilight.vector,@trmpvector
     7A2C 7A32     
     7A2E A034     
1063 7A30 1001  14         jmp   _trampoline.bank4.ret ; Longjump
1064               pane.filebrowser.hilight.vector:
1065 7A32 7FD4             data  vec.51
1066               
1067               
1068               ***************************************************************
1069               * Trampoline bank 4 with return
1070               ********|*****|*********************|**************************
1071               _trampoline.bank4.ret:
1072 7A34 0649  14         dect  stack
1073 7A36 C64B  30         mov   r11,*stack            ; Save return address
1074                       ;------------------------------------------------------
1075                       ; Call routine in specified bank
1076                       ;------------------------------------------------------
1077 7A38 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A3A 3084     
1078 7A3C 6008                   data bank4.rom        ; | i  p0 = bank address
1079 7A3E FFFF                   data >ffff            ; | i  p1 = Vector with target address
1080                                                   ; |         (deref @trmpvector)
1081 7A40 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1082                       ;------------------------------------------------------
1083                       ; Exit
1084                       ;------------------------------------------------------
1085 7A42 C2F9  30         mov   *stack+,r11           ; Pop r11
1086 7A44 045B  20         b     *r11                  ; Return to caller
1087               
1088               
1089               
1090               ***************************************************************
1091               * Stub for "edb.clear.sams"
1092               * bank5 vec.1
1093               ********|*****|*********************|**************************
1094               edb.clear.sams:
1095 7A46 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7A48 7A4E     
     7A4A A034     
1096 7A4C 1029  14         jmp   _trampoline.bank5.ret ; Longjump
1097               edb.clear.sams.vector:
1098 7A4E 7F70             data  vec.1
1099               
1100               
1101               ***************************************************************
1102               * Stub for "edb.block.mark"
1103               * bank5 vec.3
1104               ********|*****|*********************|**************************
1105               edb.block.mark:
1106 7A50 C820  54         mov   @edb.block.mark.vector,@trmpvector
     7A52 7A58     
     7A54 A034     
1107 7A56 1024  14         jmp   _trampoline.bank5.ret ; Longjump
1108               edb.block.mark.vector:
1109 7A58 7F74             data  vec.3
1110               
1111               
1112               ***************************************************************
1113               * Stub for "edb.block.mark.m1"
1114               * bank5 vec.4
1115               ********|*****|*********************|**************************
1116               edb.block.mark.m1:
1117 7A5A C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7A5C 7A62     
     7A5E A034     
1118 7A60 101F  14         jmp   _trampoline.bank5.ret ; Longjump
1119               edb.block.mark.m1.vector:
1120 7A62 7F76             data  vec.4
1121               
1122               
1123               ***************************************************************
1124               * Stub for "edb.block.mark.m2"
1125               * bank5 vec.5
1126               ********|*****|*********************|**************************
1127               edb.block.mark.m2:
1128 7A64 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7A66 7A6C     
     7A68 A034     
1129 7A6A 101A  14         jmp   _trampoline.bank5.ret ; Longjump
1130               edb.block.mark.m2.vector:
1131 7A6C 7F78             data  vec.5
1132               
1133               
1134               ***************************************************************
1135               * Stub for "edb.block.clip"
1136               * bank5 vec.6
1137               ********|*****|*********************|**************************
1138               edb.block.clip:
1139 7A6E C820  54         mov   @edb.block.clip.vector,@trmpvector
     7A70 7A76     
     7A72 A034     
1140 7A74 1015  14         jmp   _trampoline.bank5.ret ; Longjump
1141               edb.block.clip.vector:
1142 7A76 7F7A             data  vec.6
1143               
1144               
1145               ***************************************************************
1146               * Stub for "edb.block.reset"
1147               * bank5 vec.7
1148               ********|*****|*********************|**************************
1149               edb.block.reset:
1150 7A78 C820  54         mov   @edb.block.reset.vector,@trmpvector
     7A7A 7A80     
     7A7C A034     
1151 7A7E 1010  14         jmp   _trampoline.bank5.ret ; Longjump
1152               edb.block.reset.vector:
1153 7A80 7F7C             data  vec.7
1154               
1155               
1156               ***************************************************************
1157               * Stub for "edb.block.delete"
1158               * bank5 vec.8
1159               ********|*****|*********************|**************************
1160               edb.block.delete:
1161 7A82 C820  54         mov   @edb.block.delete.vector,@trmpvector
     7A84 7A8A     
     7A86 A034     
1162 7A88 100B  14         jmp   _trampoline.bank5.ret ; Longjump
1163               edb.block.delete.vector:
1164 7A8A 7F7E             data  vec.8
1165               
1166               
1167               ***************************************************************
1168               * Stub for "edb.block.copy"
1169               * bank5 vec.9
1170               ********|*****|*********************|**************************
1171               edb.block.copy:
1172 7A8C C820  54         mov   @edb.block.copy.vector,@trmpvector
     7A8E 7A94     
     7A90 A034     
1173 7A92 1006  14         jmp   _trampoline.bank5.ret ; Longjump
1174               edb.block.copy.vector:
1175 7A94 7F80             data  vec.9
1176               
1177               
1178               ***************************************************************
1179               * Stub for "edb.line.del"
1180               * bank5 vec.10
1181               ********|*****|*********************|**************************
1182               edb.line.del:
1183 7A96 C820  54         mov   @edb.line.del.vector,@trmpvector
     7A98 7A9E     
     7A9A A034     
1184 7A9C 1001  14         jmp   _trampoline.bank5.ret ; Longjump
1185               edb.line.del.vector:
1186 7A9E 7F82             data  vec.10
1187               
1188               
1189               
1190               ***************************************************************
1191               * Trampoline bank 5 with return
1192               ********|*****|*********************|**************************
1193               _trampoline.bank5.ret:
1194 7AA0 0649  14         dect  stack
1195 7AA2 C64B  30         mov   r11,*stack            ; Save return address
1196                       ;------------------------------------------------------
1197                       ; Call routine in specified bank
1198                       ;------------------------------------------------------
1199 7AA4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AA6 3084     
1200 7AA8 600A                   data bank5.rom        ; | i  p0 = bank address
1201 7AAA FFFF                   data >ffff            ; | i  p1 = Vector with target address
1202                                                   ; |         (deref @trmpvector)
1203 7AAC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1204                       ;------------------------------------------------------
1205                       ; Exit
1206                       ;------------------------------------------------------
1207 7AAE C2F9  30         mov   *stack+,r11           ; Pop r11
1208 7AB0 045B  20         b     *r11                  ; Return to caller
1209               
1210               
1211               ***************************************************************
1212               * Stub for "vdp.dump.patterns"
1213               * bank6 vec.1
1214               ********|*****|*********************|**************************
1215               vdp.dump.patterns:
1216 7AB2 C820  54         mov   @vdp.dump.patterns.vector,@trmpvector
     7AB4 7ABA     
     7AB6 A034     
1217 7AB8 1015  14         jmp   _trampoline.bank6.ret ; Longjump
1218               vdp.dump.patterns.vector:
1219 7ABA 7F70             data  vec.1
1220               
1221               
1222               ***************************************************************
1223               * Stub for "vdp.dump.font"
1224               * bank6 vec.2
1225               ********|*****|*********************|**************************
1226               vdp.dump.font:
1227 7ABC C820  54         mov   @vdp.dump.font.vector,@trmpvector
     7ABE 7AC4     
     7AC0 A034     
1228 7AC2 1010  14         jmp   _trampoline.bank6.ret ; Longjump
1229               vdp.dump.font.vector:
1230 7AC4 7F72             data  vec.2
1231               
1232               
1233               ***************************************************************
1234               * Stub for "vdp.colors.line"
1235               * bank6 vec.3
1236               ********|*****|*********************|**************************
1237               vdp.colors.line:
1238 7AC6 C820  54         mov   @vdp.colors.line.vector,@trmpvector
     7AC8 7ACE     
     7ACA A034     
1239 7ACC 100B  14         jmp   _trampoline.bank6.ret ; Longjump
1240               vdp.colors.line.vector:
1241 7ACE 7F74             data  vec.3
1242               
1243               ***************************************************************
1244               * Stub for "vdp.cursor.tat"
1245               * bank6 vec.5
1246               ********|*****|*********************|**************************
1247               vdp.cursor.tat:
1248 7AD0 C820  54         mov   @vdp.cursor.tat.vector,@trmpvector
     7AD2 7AD8     
     7AD4 A034     
1249 7AD6 1006  14         jmp   _trampoline.bank6.ret ; Longjump
1250               vdp.cursor.tat.vector:
1251 7AD8 7F78             data  vec.5
1252               
1253               
1254               ***************************************************************
1255               * Stub for "tv.set.font"
1256               * bank6 vec.33
1257               ********|*****|*********************|**************************
1258               tv.set.font:
1259 7ADA C820  54         mov   @tv.set.font.vector,@trmpvector
     7ADC 7AE2     
     7ADE A034     
1260 7AE0 1001  14         jmp   _trampoline.bank6.ret ; Longjump
1261               tv.set.font.vector:
1262 7AE2 7FB0             data  vec.33
1263               
1264               
1265               ***************************************************************
1266               * Trampoline bank 6 with return
1267               ********|*****|*********************|**************************
1268               _trampoline.bank6.ret:
1269 7AE4 0649  14         dect  stack
1270 7AE6 C64B  30         mov   r11,*stack            ; Save return address
1271                       ;------------------------------------------------------
1272                       ; Call routine in specified bank
1273                       ;------------------------------------------------------
1274 7AE8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AEA 3084     
1275 7AEC 600C                   data bank6.rom        ; | i  p0 = bank address
1276 7AEE FFFF                   data >ffff            ; | i  p1 = Vector with target address
1277                                                   ; |         (deref @trmpvector)
1278 7AF0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1279                       ;------------------------------------------------------
1280                       ; Exit
1281                       ;------------------------------------------------------
1282 7AF2 C2F9  30         mov   *stack+,r11           ; Pop r11
1283 7AF4 045B  20         b     *r11                  ; Return to caller
1284               
1285               
1286               ***************************************************************
1287               * Stub for "tibasic"
1288               * bank7 vec.10
1289               ********|*****|*********************|**************************
1290               tibasic1:
1291 7AF6 C820  54         mov   @const.1,@tib.session
     7AF8 2002     
     7AFA A0B4     
1292 7AFC 1007  14         jmp   tibasic
1293               tibasic2:
1294 7AFE C820  54         mov   @const.2,@tib.session
     7B00 2004     
     7B02 A0B4     
1295 7B04 1003  14         jmp   tibasic
1296               tibasic3:
1297 7B06 C820  54         mov   @const.3,@tib.session
     7B08 3944     
     7B0A A0B4     
1298               tibasic:
1299 7B0C 0649  14         dect  stack
1300 7B0E C64B  30         mov   r11,*stack            ; Save return address
1301 7B10 0649  14         dect  stack
1302 7B12 C644  30         mov   tmp0,*stack           ; Push tmp0
1303                       ;------------------------------------------------------
1304                       ; Exit early if no TI Basic session
1305                       ;------------------------------------------------------
1306 7B14 C120  34         mov   @tib.session,tmp0     ; Get session ID
     7B16 A0B4     
1307 7B18 130A  14         jeq   tibasic.exit          ; Exit early if no session
1308                       ;------------------------------------------------------
1309                       ; Run TI Basic session
1310                       ;------------------------------------------------------
1311 7B1A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B1C 3084     
1312 7B1E 600E                   data bank7.rom        ; | i  p0 = bank address
1313 7B20 7F82                   data vec.10           ; | i  p1 = Vector with target address
1314 7B22 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1315               
1316 7B24 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     7B26 A0C0     
1317 7B28 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
1318               
1319 7B2A 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7B2C 7B38     
1320                       ;------------------------------------------------------
1321                       ; Exit
1322                       ;------------------------------------------------------
1323               tibasic.exit:
1324 7B2E 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7B30 A31C     
1325 7B32 C139  30         mov   *stack+,tmp0          ; Pop tmp0
1326 7B34 C2F9  30         mov   *stack+,r11           ; Pop r11
1327 7B36 045B  20         b     *r11                  ; Return to caller
1328               
1329               
1330               
1331               ***************************************************************
1332               * Stub for "tibasic.uncrunch"
1333               * bank7 vec.11
1334               ********|*****|*********************|**************************
1335               tibasic.uncrunch:
1336 7B38 0649  14         dect  stack
1337 7B3A C64B  30         mov   r11,*stack            ; Save return address
1338                       ;------------------------------------------------------
1339                       ; Uncrunch TI basic program
1340                       ;------------------------------------------------------
1341 7B3C C820  54         mov   @tib.session,@parm1   ; Get current session
     7B3E A0B4     
     7B40 A006     
1342 7B42 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
1343               
1344 7B44 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B46 3084     
1345 7B48 600E                   data bank7.rom        ; | i  p0 = bank address
1346 7B4A 7F84                   data vec.11           ; | i  p1 = Vector with target address
1347 7B4C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1348                       ;------------------------------------------------------
1349                       ; Exit
1350                       ;------------------------------------------------------
1351               tibasic.uncrunch.exit:
1352 7B4E C2F9  30         mov   *stack+,r11           ; Pop r11
1353 7B50 045B  20         b     *r11                  ; Return to caller
1354               
1355               
1356               ***************************************************************
1357               * Stub for "tv.reset"
1358               * bank7 vec.23
1359               ********|*****|*********************|**************************
1360               tv.reset:
1361 7B52 0649  14         dect  stack
1362 7B54 C64B  30         mov   r11,*stack            ; Save return address
1363                       ;------------------------------------------------------
1364                       ; Call routine in specified bank
1365                       ;------------------------------------------------------
1366 7B56 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B58 3084     
1367 7B5A 600E                   data bank7.rom        ; | i  p0 = bank address
1368 7B5C 7F9C                   data vec.23           ; | i  p1 = Vector with target address
1369 7B5E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1370                       ;------------------------------------------------------
1371                       ; Exit
1372                       ;------------------------------------------------------
1373               tv.reset.exit:
1374 7B60 C2F9  30         mov   *stack+,r11           ; Pop r11
1375 7B62 045B  20         b     *r11                  ; Return to caller
1376               
1377               
1378               ***************************************************************
1379               * Stub for "cart.fg99.mgr"
1380               * bank7 vec.24
1381               ********|*****|*********************|**************************
1382               cart.fg99.mgr:
1383 7B64 0649  14         dect  stack
1384 7B66 C64B  30         mov   r11,*stack            ; Save return address
1385                       ;------------------------------------------------------
1386                       ; Call routine in specified bank
1387                       ;------------------------------------------------------
1388 7B68 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B6A 3084     
1389 7B6C 600E                   data bank7.rom        ; | i  p0 = bank address
1390 7B6E 7F9E                   data vec.24           ; | i  p1 = Vector with target address
1391 7B70 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1392                       ;------------------------------------------------------
1393                       ; Exit
1394                       ;------------------------------------------------------
1395               cart.fg99.mgr.exit:
1396 7B72 C2F9  30         mov   *stack+,r11           ; Pop r11
1397 7B74 045B  20         b     *r11                  ; Return to caller
1398               
1399               
1400               
1401               
1402               strg.module:
1403 7B76 0204  20         li   tmp0,'*'*256           ; Cartridge load command
     7B78 2A00     
1404 7B7A 04E0  34         clr  @>77fc                 ; @LIST_VAR
     7B7C 77FC     
1405 7B7E 04E0  34         clr  @>7fe0                 ; @VDP_DESTA
     7B80 7FE0     
1406               strg.module.load:
1407 7B82 04E0  34         clr  @>7ff2                 ; Clear @WAIT_FLAG
     7B84 7FF2     
1408 7B86 D804  38         movb tmp0,@>7ff0            ; Send command to StrangeCart ARM processor
     7B88 7FF0     
1409 7B8A C120  34 !       mov  @>7ff2,tmp0            ; Get @WAIT_FLAG
     7B8C 7FF2     
1410 7B8E 13FD  14         jeq  -!                     ; Not ready yet? Wait
1411 7B90 0284  22         ci   tmp0,>0200             ; Wait flag 2?
     7B92 0200     
1412 7B94 13F6  14         jeq  strg.module.load       ; Wait some more
1413 7B96 0300  22         limi 0
     7B98 0000     
1414 7B9A 0420  42         blwp @0                     ; Reset console
     7B9C 0000     
                   < stevie_b1.asm
0167                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 7B9E 0649  14         dect  stack
0038 7BA0 C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 7BA2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BA4 3084     
0043 7BA6 600E                   data bank7.rom        ; | i  p0 = bank address
0044 7BA8 7F70                   data vec.1            ; | i  p1 = Vector with target address
0045 7BAA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 7BAC C2F9  30         mov   *stack+,r11           ; Pop r11
0050 7BAE 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 7BB0 0649  14         dect  stack
0060 7BB2 C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 7BB4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BB6 3084     
0065 7BB8 600E                   data bank7.rom        ; | i  p0 = bank address
0066 7BBA 7F72                   data vec.2            ; | i  p1 = Vector with target address
0067 7BBC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 7BBE C2F9  30         mov   *stack+,r11           ; Pop r11
0072 7BC0 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7BC2 0649  14         dect  stack
0081 7BC4 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7BC6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BC8 3084     
0086 7BCA 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7BCC 7F74                   data vec.3            ; | i  p1 = Vector with target address
0088 7BCE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7BD0 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7BD2 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 7BD4 0649  14         dect  stack
0102 7BD6 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 7BD8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BDA 3084     
0107 7BDC 600E                   data bank7.rom        ; | i  p0 = bank address
0108 7BDE 7F96                   data vec.20           ; | i  p1 = Vector with target address
0109 7BE0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 7BE2 C2F9  30         mov   *stack+,r11           ; Pop r11
0114 7BE4 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 7BE6 0649  14         dect  stack
0123 7BE8 C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 7BEA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BEC 3084     
0128 7BEE 600E                   data bank7.rom        ; | i  p0 = bank address
0129 7BF0 7F98                   data vec.21           ; | i  p1 = Vector with target address
0130 7BF2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 7BF4 C2F9  30         mov   *stack+,r11           ; Pop r11
0135 7BF6 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 7BF8 0649  14         dect  stack
0144 7BFA C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 7BFC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BFE 3084     
0149 7C00 600E                   data bank7.rom        ; | i  p0 = bank address
0150 7C02 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0151 7C04 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 7C06 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 7C08 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b1.asm
0168                       ;-----------------------------------------------------------------------
0169                       ; Program data
0170                       ;-----------------------------------------------------------------------
0171                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 7C0A 0D00             byte  key.enter, pane.focus.fb
0012 7C0C 66D8             data  edkey.action.enter
0013               
0014 7C0E 0800             byte  key.fctn.s, pane.focus.fb
0015 7C10 62CC             data  edkey.action.left
0016               
0017 7C12 0900             byte  key.fctn.d, pane.focus.fb
0018 7C14 62E6             data  edkey.action.right
0019               
0020 7C16 0B00             byte  key.fctn.e, pane.focus.fb
0021 7C18 64EC             data  edkey.action.up
0022               
0023 7C1A 0A00             byte  key.fctn.x, pane.focus.fb
0024 7C1C 64F4             data  edkey.action.down
0025               
0026 7C1E BF00             byte  key.fctn.h, pane.focus.fb
0027 7C20 6302             data  edkey.action.home
0028               
0029 7C22 C000             byte  key.fctn.j, pane.focus.fb
0030 7C24 632C             data  edkey.action.pword
0031               
0032 7C26 C100             byte  key.fctn.k, pane.focus.fb
0033 7C28 637E             data  edkey.action.nword
0034               
0035 7C2A C200             byte  key.fctn.l, pane.focus.fb
0036 7C2C 630A             data  edkey.action.end
0037               
0038 7C2E 0200             byte  key.fctn.4, pane.focus.fb
0039 7C30 648C             data  edkey.action.npage
0040               
0041 7C32 0E00             byte  key.fctn.5, pane.focus.fb
0042 7C34 6412             data  edkey.action.scroll.right
0043               
0044 7C36 0C00             byte  key.fctn.6, pane.focus.fb
0045 7C38 644A             data  edkey.action.ppage
0046               
0047 7C3A B700             byte  key.ctrl.7, pane.focus.fb
0048 7C3C 695A             data  edkey.action.fb.tab.prev
0049               
0050 7C3E 0100             byte  key.fctn.7, pane.focus.fb
0051 7C40 6968             data  edkey.action.fb.tab.next
0052               
0053 7C42 8500             byte  key.ctrl.e, pane.focus.fb
0054 7C44 644A             data  edkey.action.ppage
0055               
0056 7C46 8700             byte  key.ctrl.g, pane.focus.fb
0057 7C48 77F4             data  dialog.goto
0058               
0059 7C4A 9800             byte  key.ctrl.x, pane.focus.fb
0060 7C4C 648C             data  edkey.action.npage
0061               
0062 7C4E 7F00             byte  key.fctn.v, pane.focus.fb
0063 7C50 64D4             data  edkey.action.topscr
0064               
0065 7C52 BE00             byte  key.fctn.b, pane.focus.fb
0066 7C54 64E4             data  edkey.action.botscr
0067               
0068 7C56 9600             byte  key.ctrl.v, pane.focus.fb
0069 7C58 64CC             data  edkey.action.top
0070               
0071 7C5A 8200             byte  key.ctrl.b, pane.focus.fb
0072 7C5C 64DC             data  edkey.action.bot
0073               
0074 7C5E 8000             byte  key.ctrl.comma, pane.focus.fb
0075 7C60 69AA             data  edkey.action.goto.pmatch
0076               
0077 7C62 9B00             byte  key.ctrl.dot, pane.focus.fb
0078 7C64 69B8             data  edkey.action.goto.nmatch
0079                       ;-------------------------------------------------------
0080                       ; Modifier keys - Delete
0081                       ;-------------------------------------------------------
0082 7C66 0300             byte  key.fctn.1, pane.focus.fb
0083 7C68 6574             data  edkey.action.del_char
0084               
0085 7C6A 0700             byte  key.fctn.3, pane.focus.fb
0086 7C6C 6632             data  edkey.action.del_line
0087               
0088 7C6E 8C00             byte  key.ctrl.l, pane.focus.fb
0089 7C70 65F8             data  edkey.action.del_eol
0090                       ;-------------------------------------------------------
0091                       ; Modifier keys - Insert
0092                       ;-------------------------------------------------------
0093 7C72 0400             byte  key.fctn.2, pane.focus.fb
0094 7C74 669E             data  edkey.action.ins_char.ws
0095               
0096 7C76 B900             byte  key.fctn.dot, pane.focus.fb
0097 7C78 6764             data  edkey.action.ins_onoff
0098               
0099 7C7A 0600             byte  key.fctn.8, pane.focus.fb
0100 7C7C 66B4             data  edkey.action.ins_line
0101                       ;-------------------------------------------------------
0102                       ; Block marking/modifier
0103                       ;-------------------------------------------------------
0104 7C7E F000             byte  key.ctrl.space, pane.focus.fb
0105 7C80 6844             data  edkey.action.block.mark
0106               
0107 7C82 8300             byte  key.ctrl.c, pane.focus.fb
0108 7C84 67C4             data  edkey.action.copyblock_or_clipboard
0109               
0110 7C86 8400             byte  key.ctrl.d, pane.focus.fb
0111 7C88 68B0             data  edkey.action.block.delete
0112               
0113 7C8A 8D00             byte  key.ctrl.m, pane.focus.fb
0114 7C8C 68F4             data  edkey.action.block.move
0115               
0116 7C8E 8700             byte  key.ctrl.g, pane.focus.fb
0117 7C90 6940             data  edkey.action.block.goto.m1
0118                       ;-------------------------------------------------------
0119                       ; Clipboards
0120                       ;-------------------------------------------------------
0121 7C92 B100             byte  key.ctrl.1, pane.focus.fb
0122 7C94 6976             data  edkey.action.fb.clip.save.1
0123               
0124 7C96 B200             byte  key.ctrl.2, pane.focus.fb
0125 7C98 6980             data  edkey.action.fb.clip.save.2
0126               
0127 7C9A B300             byte  key.ctrl.3, pane.focus.fb
0128 7C9C 698A             data  edkey.action.fb.clip.save.3
0129                       ;-------------------------------------------------------
0130                       ; Other action keys
0131                       ;-------------------------------------------------------
0132 7C9E 0500             byte  key.fctn.plus, pane.focus.fb
0133 7CA0 67B6             data  edkey.action.quit
0134               
0135 7CA2 B500             byte  key.ctrl.5, pane.focus.fb
0136 7CA4 63DE             data  edkey.action.scroll.left
0137               
0138 7CA6 9100             byte  key.ctrl.q, pane.focus.fb
0139 7CA8 67B6             data  edkey.action.quit
0140               
0141 7CAA 9A00             byte  key.ctrl.z, pane.focus.fb
0142 7CAC 7A0C             data  pane.colorscheme.cycle
0143               
0144 7CAE BC00             byte  key.fctn.0, pane.focus.fb
0145 7CB0 7B0C             data  tibasic
0146               
0147 7CB2 B000             byte  key.ctrl.0, pane.focus.fb
0148 7CB4 77D6             data  dialog.basic
0149               
0150 7CB6 BB00             byte  key.ctrl.slash, pane.focus.fb
0151 7CB8 67D4             data  edkey.action.find.reset
0152                       ;-------------------------------------------------------
0153                       ; Dialog keys
0154                       ;-------------------------------------------------------
0155 7CBA 8100             byte  key.ctrl.a, pane.focus.fb
0156 7CBC 77C2             data  dialog.append
0157               
0158 7CBE 8800             byte  key.ctrl.h, pane.focus.fb
0159 7CC0 775A             data  dialog.help
0160               
0161 7CC2 8600             byte  key.ctrl.f, pane.focus.fb
0162 7CC4 7828             data  dialog.find
0163               
0164 7CC6 8900             byte  key.ctrl.i, pane.focus.fb
0165 7CC8 7778             data  dialog.insert
0166               
0167 7CCA 9300             byte  key.ctrl.s, pane.focus.fb
0168 7CCC 776E             data  dialog.save
0169               
0170 7CCE 8F00             byte  key.ctrl.o, pane.focus.fb
0171 7CD0 7764             data  dialog.load
0172               
0173 7CD2 9500             byte  key.ctrl.u, pane.focus.fb
0174 7CD4 77E0             data  dialog.shortcuts
0175               
0176 7CD6 9000             byte  key.ctrl.p, pane.focus.fb
0177 7CD8 7782             data  dialog.print
0178               
0179 7CDA 9200             byte  key.ctrl.r, pane.focus.fb
0180 7CDC 7808             data  dialog.run
0181               
0182                       ;
0183                       ; FCTN-9 has multiple purposes, if block mode is on
0184                       ; reset block, otherwise show dialog "Main Menu".
0185                       ;
0186 7CDE 0F00             byte  key.fctn.9, pane.focus.fb
0187 7CE0 7812             data  dialog.menu
0188                       ;-------------------------------------------------------
0189                       ; End of list
0190                       ;-------------------------------------------------------
0191 7CE2 FFFF             data  EOL                           ; EOL
0192               
0193               
0194               *---------------------------------------------------------------
0195               * Action keys mapping table: Command Buffer (CMDB)
0196               *---------------------------------------------------------------
0197               keymap_actions.cmdb:
0198                       ;-------------------------------------------------------
0199                       ; Dialog: Main Menu
0200                       ;-------------------------------------------------------
0201 7CE4 4664             byte  key.uc.f, id.dialog.menu
0202 7CE6 778C             data  dialog.file
0203               
0204 7CE8 4264             byte  key.uc.b, id.dialog.menu
0205 7CEA 77D6             data  dialog.basic
0206               
0207 7CEC 4364             byte  key.uc.c, id.dialog.menu
0208 7CEE 77CC             data  dialog.cartridge
0209               
0210 7CF0 4F64             byte  key.uc.o, id.dialog.menu
0211 7CF2 77B8             data  dialog.config
0212               
0213 7CF4 5364             byte  key.uc.s, id.dialog.menu
0214 7CF6 77E0             data  dialog.shortcuts
0215               
0216 7CF8 4864             byte  key.uc.h, id.dialog.menu
0217 7CFA 775A             data  dialog.help
0218               
0219 7CFC 5164             byte  key.uc.q, id.dialog.menu
0220 7CFE 67B6             data  edkey.action.quit
0221               
0222 7D00 4C64             byte  key.uc.l, id.dialog.menu
0223 7D02 724A             data  edkey.action.cmdb.lock
0224               
0225 7D04 5564             byte  key.uc.u, id.dialog.menu
0226 7D06 725C             data  edkey.action.cmdb.unlock
0227               
0228 7D08 0F64             byte  key.fctn.9, id.dialog.menu
0229 7D0A 7038             data  edkey.action.cmdb.close.dialog
0230                       ;-------------------------------------------------------
0231                       ; Dialog: File
0232                       ;-------------------------------------------------------
0233 7D0C 4E69             byte  key.uc.n, id.dialog.file
0234 7D0E 6B02             data  edkey.action.cmdb.file.new
0235               
0236 7D10 4F69             byte  key.uc.o, id.dialog.file
0237 7D12 7764             data  dialog.load
0238               
0239 7D14 5369             byte  key.uc.s, id.dialog.file
0240 7D16 776E             data  dialog.save
0241               
0242 7D18 4969             byte  key.uc.i, id.dialog.file
0243 7D1A 7778             data  dialog.insert
0244               
0245 7D1C 4169             byte  key.uc.a, id.dialog.file
0246 7D1E 77C2             data  dialog.append
0247               
0248 7D20 4369             byte  key.uc.c, id.dialog.file
0249 7D22 77EA             data  dialog.cat
0250               
0251 7D24 5069             byte  key.uc.p, id.dialog.file
0252 7D26 7782             data  dialog.print
0253               
0254 7D28 5269             byte  key.uc.r, id.dialog.file
0255 7D2A 7808             data  dialog.run
0256                       ;-------------------------------------------------------
0257                       ; Dialog: Open file
0258                       ;-------------------------------------------------------
0259 7D2C 0E0A             byte  key.fctn.5, id.dialog.load
0260 7D2E 6FF6             data  edkey.action.cmdb.fastmode.toggle
0261               
0262 7D30 0D0A             byte  key.enter, id.dialog.load
0263 7D32 6B28             data  edkey.action.cmdb.load
0264               
0265 7D34 0B0A             byte  key.fctn.e, id.dialog.load
0266 7D36 6F36             data  edkey.action.cmdb.pick.prev
0267               
0268 7D38 0A0A             byte  key.fctn.x, id.dialog.load
0269 7D3A 6F5A             data  edkey.action.cmdb.pick.next
0270               
0271 7D3C 200A             byte  key.space, id.dialog.load
0272 7D3E 6F7E             data  edkey.action.cmdb.updir
0273                       ;-------------------------------------------------------
0274                       ; Dialog: Insert file at line ...
0275                       ;-------------------------------------------------------
0276 7D40 0E0B             byte  key.fctn.5, id.dialog.insert
0277 7D42 6FF6             data  edkey.action.cmdb.fastmode.toggle
0278               
0279 7D44 0D0B             byte  key.enter, id.dialog.insert
0280 7D46 6B8C             data  edkey.action.cmdb.insert
0281               
0282 7D48 0B0B             byte  key.fctn.e, id.dialog.insert
0283 7D4A 6F36             data  edkey.action.cmdb.pick.prev
0284               
0285 7D4C 0A0B             byte  key.fctn.x, id.dialog.insert
0286 7D4E 6F5A             data  edkey.action.cmdb.pick.next
0287               
0288 7D50 200B             byte  key.space, id.dialog.insert
0289 7D52 6F7E             data  edkey.action.cmdb.updir
0290                       ;-------------------------------------------------------
0291                       ; Dialog: Append file
0292                       ;-------------------------------------------------------
0293 7D54 0E0C             byte  key.fctn.5, id.dialog.append
0294 7D56 6FF6             data  edkey.action.cmdb.fastmode.toggle
0295               
0296 7D58 0D0C             byte  key.enter, id.dialog.append
0297 7D5A 6C26             data  edkey.action.cmdb.append
0298               
0299 7D5C 0B0C             byte  key.fctn.e, id.dialog.append
0300 7D5E 6F36             data  edkey.action.cmdb.pick.prev
0301               
0302 7D60 0A0C             byte  key.fctn.x, id.dialog.append
0303 7D62 6F5A             data  edkey.action.cmdb.pick.next
0304               
0305 7D64 200C             byte  key.space, id.dialog.append
0306 7D66 6F7E             data  edkey.action.cmdb.updir
0307                       ;-------------------------------------------------------
0308                       ; Dialog: Run program image (EA5)
0309                       ;-------------------------------------------------------
0310 7D68 0E72             byte  key.fctn.5, id.dialog.run
0311 7D6A 6FF6             data  edkey.action.cmdb.fastmode.toggle
0312               
0313 7D6C 0D72             byte  key.enter, id.dialog.run
0314 7D6E 6EDA             data  edkey.action.cmdb.file.run
0315               
0316 7D70 0B72             byte  key.fctn.e, id.dialog.run
0317 7D72 6F36             data  edkey.action.cmdb.pick.prev
0318               
0319 7D74 0A72             byte  key.fctn.x, id.dialog.run
0320 7D76 6F5A             data  edkey.action.cmdb.pick.next
0321               
0322 7D78 2072             byte  key.space, id.dialog.run
0323 7D7A 6F7E             data  edkey.action.cmdb.updir
0324                       ;-------------------------------------------------------
0325                       ; Dialog: Copy clipboard to line ...
0326                       ;-------------------------------------------------------
0327 7D7C 0167             byte  key.fctn.7, id.dialog.clipboard
0328 7D7E 77AE             data  dialog.clipdev
0329               
0330 7D80 3167             byte  key.num.1, id.dialog.clipboard
0331 7D82 6CB2             data  edkey.action.cmdb.clip.1
0332               
0333 7D84 3267             byte  key.num.2, id.dialog.clipboard
0334 7D86 6CB8             data  edkey.action.cmdb.clip.2
0335               
0336 7D88 3367             byte  key.num.3, id.dialog.clipboard
0337 7D8A 6CBE             data  edkey.action.cmdb.clip.3
0338                       ;-------------------------------------------------------
0339                       ; Dialog: Catalog drive/directory
0340                       ;-------------------------------------------------------
0341 7D8C 0D0D             byte  key.enter, id.dialog.cat
0342 7D8E 6B28             data  edkey.action.cmdb.load
0343               
0344 7D90 0B0D             byte  key.fctn.e, id.dialog.cat
0345 7D92 6F36             data  edkey.action.cmdb.pick.prev
0346               
0347 7D94 0A0D             byte  key.fctn.x, id.dialog.cat
0348 7D96 6F5A             data  edkey.action.cmdb.pick.next
0349               
0350 7D98 200D             byte  key.space, id.dialog.cat
0351 7D9A 6F7E             data  edkey.action.cmdb.updir
0352               
0353 7D9C 0D0D             byte  key.enter, id.dialog.cat
0354 7D9E 6EB0             data  edkey.action.cmdb.file.directory.device
0355                       ;-------------------------------------------------------
0356                       ; Dialog: Options
0357                       ;-------------------------------------------------------
0358 7DA0 416C             byte  key.uc.a, id.dialog.opt
0359 7DA2 7040             data  edkey.action.cmdb.autoinsert
0360               
0361 7DA4 436C             byte  key.uc.c, id.dialog.opt
0362 7DA6 77AE             data  dialog.clipdev
0363               
0364 7DA8 466C             byte  key.uc.f, id.dialog.opt
0365 7DAA 77FE             data  dialog.font
0366               
0367 7DAC 4C6C             byte  key.uc.l, id.dialog.opt
0368 7DAE 705E             data  edkey.action.cmdb.linelen
0369                       ;-------------------------------------------------------
0370                       ; Dialog: Configure clipboard
0371                       ;-------------------------------------------------------
0372 7DB0 0D13             byte  key.enter, id.dialog.opt.clip
0373 7DB2 6ADE             data  edkey.action.cmdb.cfg.clip
0374                       ;-------------------------------------------------------
0375                       ; Dialog: Configure font
0376                       ;-------------------------------------------------------
0377 7DB4 316E             byte  key.num.1, id.dialog.font
0378 7DB6 70C6             data  edkey.action.cmdb.font1
0379               
0380 7DB8 326E             byte  key.num.2, id.dialog.font
0381 7DBA 70CA             data  edkey.action.cmdb.font2
0382               
0383 7DBC 336E             byte  key.num.3, id.dialog.font
0384 7DBE 70D0             data  edkey.action.cmdb.font3
0385               
0386 7DC0 346E             byte  key.num.4, id.dialog.font
0387 7DC2 70D6             data  edkey.action.cmdb.font4
0388               
0389 7DC4 356E             byte  key.num.5, id.dialog.font
0390 7DC6 70DC             data  edkey.action.cmdb.font5
0391                       ;-------------------------------------------------------
0392                       ; Dialog: Save file
0393                       ;-------------------------------------------------------
0394 7DC8 0D0F             byte  key.enter, id.dialog.save
0395 7DCA 6CF2             data  edkey.action.cmdb.save
0396               
0397 7DCC 0D10             byte  key.enter, id.dialog.saveblock
0398 7DCE 6CF2             data  edkey.action.cmdb.save
0399               
0400 7DD0 0C0F             byte  key.fctn.6, id.dialog.save
0401 7DD2 7002             data  edkey.action.cmdb.lineterm.toggle
0402               
0403 7DD4 0C10             byte  key.fctn.6, id.dialog.saveblock
0404 7DD6 7002             data  edkey.action.cmdb.lineterm.toggle
0405                       ;-------------------------------------------------------
0406                       ; Dialog: Print file
0407                       ;-------------------------------------------------------
0408 7DD8 0D11             byte  key.enter, id.dialog.print
0409 7DDA 6D72             data  edkey.action.cmdb.print
0410               
0411 7DDC 0D12             byte  key.enter, id.dialog.printblock
0412 7DDE 6D72             data  edkey.action.cmdb.print
0413               
0414 7DE0 0C11             byte  key.fctn.6, id.dialog.print
0415 7DE2 7002             data  edkey.action.cmdb.lineterm.toggle
0416               
0417 7DE4 0C12             byte  key.fctn.6, id.dialog.printblock
0418 7DE6 7002             data  edkey.action.cmdb.lineterm.toggle
0419                       ;-------------------------------------------------------
0420                       ; Dialog: Unsaved changes
0421                       ;-------------------------------------------------------
0422 7DE8 0C65             byte  key.fctn.6, id.dialog.unsaved
0423 7DEA 6FCC             data  edkey.action.cmdb.proceed
0424               
0425 7DEC 2065             byte  key.space, id.dialog.unsaved
0426 7DEE 6FCC             data  edkey.action.cmdb.proceed
0427               
0428 7DF0 0D65             byte  key.enter, id.dialog.unsaved
0429 7DF2 776E             data  dialog.save
0430                       ;-------------------------------------------------------
0431                       ; Dialog: Cartridge Type
0432                       ;-------------------------------------------------------
0433 7DF4 466A             byte  key.uc.f, id.dialog.cart.type
0434 7DF6 7832             data  dialog.cart.fg99
0435               
0436                       ; byte  key.uc.s, id.dialog.cart.type
0437                       ; data  strg.module
0438                       ;-------------------------------------------------------
0439                       ; Dialog: FinalGROM 99
0440                       ;-------------------------------------------------------
0441 7DF8 0D28             byte  key.enter, id.dialog.cart.fg99
0442 7DFA 7B64             data  cart.fg99.mgr
0443                       ;-------------------------------------------------------
0444                       ; Dialog: Basic
0445                       ;-------------------------------------------------------
0446 7DFC 316B             byte  key.num.1, id.dialog.basic
0447 7DFE 7AF6             data  tibasic1
0448               
0449 7E00 326B             byte  key.num.2, id.dialog.basic
0450 7E02 7AFE             data  tibasic2
0451               
0452 7E04 336B             byte  key.num.3, id.dialog.basic
0453 7E06 7B06             data  tibasic3
0454               
0455 7E08 0E6B             byte  key.fctn.5, id.dialog.basic
0456 7E0A 700E             data  edkey.action.cmdb.am.toggle
0457               
0458 7E0C 206B             byte  key.space, id.dialog.basic
0459 7E0E 7B38             data  tibasic.uncrunch
0460                       ;-------------------------------------------------------
0461                       ; Dialog: Run program image (EA5)
0462                       ;-------------------------------------------------------
0463 7E10 0D72             byte  key.enter, id.dialog.run
0464 7E12 6EDA             data  edkey.action.cmdb.file.run
0465                       ;-------------------------------------------------------
0466                       ; Dialog: Shortcuts
0467                       ;-------------------------------------------------------
0468 7E14 436F             byte  key.uc.c, id.dialog.shortcuts
0469 7E16 7A0C             data  pane.colorscheme.cycle
0470               
0471 7E18 526F             byte  key.uc.r, id.dialog.shortcuts
0472 7E1A 6776             data  edkey.action.toggle.ruler
0473               
0474 7E1C 316F             byte  key.num.1, id.dialog.shortcuts
0475 7E1E 684C             data  edkey.action.block.m1
0476               
0477 7E20 326F             byte  key.num.2, id.dialog.shortcuts
0478 7E22 6854             data  edkey.action.block.m2
0479               
0480 7E24 466F             byte  key.uc.f, id.dialog.shortcuts
0481 7E26 7828             data  dialog.find
0482               
0483 7E28 476F             byte  key.uc.g, id.dialog.shortcuts
0484 7E2A 77F4             data  dialog.goto
0485                       ;-------------------------------------------------------
0486                       ; Dialog: Goto
0487                       ;-------------------------------------------------------
0488 7E2C 0D14             byte  key.enter, id.dialog.goto
0489 7E2E 7076             data  edkey.action.cmdb.goto
0490                       ;-------------------------------------------------------
0491                       ; Dialog: find
0492                       ;-------------------------------------------------------
0493 7E30 0D1E             byte  key.enter, id.dialog.find
0494 7E32 7234             data  edkey.action.cmdb.find.search
0495                       ;-------------------------------------------------------
0496                       ; Dialog: Help
0497                       ;-------------------------------------------------------
0498 7E34 2068             byte  key.space, id.dialog.help
0499 7E36 7746             data  dialog.help.next
0500               
0501 7E38 0F68             byte  key.fctn.9, id.dialog.help
0502 7E3A 7022             data  edkey.action.cmdb.close.about
0503               
0504 7E3C 0D68             byte  key.enter, id.dialog.help
0505 7E3E 7022             data  edkey.action.cmdb.close.about
0506                       ;-------------------------------------------------------
0507                       ; Movement keys
0508                       ;-------------------------------------------------------
0509 7E40 0801             byte  key.fctn.s, pane.focus.cmdb
0510 7E42 6A18             data  edkey.action.cmdb.left
0511               
0512 7E44 0901             byte  key.fctn.d, pane.focus.cmdb
0513 7E46 6A30             data  edkey.action.cmdb.right
0514               
0515 7E48 BF01             byte  key.fctn.h, pane.focus.cmdb
0516 7E4A 6A50             data  edkey.action.cmdb.home
0517               
0518 7E4C C201             byte  key.fctn.l, pane.focus.cmdb
0519 7E4E 6A6A             data  edkey.action.cmdb.end
0520                       ;-------------------------------------------------------
0521                       ; Modifier keys
0522                       ;-------------------------------------------------------
0523 7E50 0701             byte  key.fctn.3, pane.focus.cmdb
0524 7E52 6A72             data  edkey.action.cmdb.clear
0525                       ;-------------------------------------------------------
0526                       ; Other action keys
0527                       ;-------------------------------------------------------
0528 7E54 0F01             byte  key.fctn.9, pane.focus.cmdb
0529 7E56 7812             data  dialog.menu
0530               
0531 7E58 0501             byte  key.fctn.plus, pane.focus.cmdb
0532 7E5A 67B6             data  edkey.action.quit
0533               
0534 7E5C B001             byte  key.ctrl.0, pane.focus.cmdb
0535 7E5E 6E5C             data  edkey.action.cmdb.file.directory.tipi
0536               
0537 7E60 B101             byte  key.ctrl.1, pane.focus.cmdb
0538 7E62 6DF2             data  edkey.action.cmdb.file.directory.1
0539               
0540 7E64 B201             byte  key.ctrl.2, pane.focus.cmdb
0541 7E66 6DFC             data  edkey.action.cmdb.file.directory.2
0542               
0543 7E68 B301             byte  key.ctrl.3, pane.focus.cmdb
0544 7E6A 6E08             data  edkey.action.cmdb.file.directory.3
0545               
0546 7E6C B401             byte  key.ctrl.4, pane.focus.cmdb
0547 7E6E 6E14             data  edkey.action.cmdb.file.directory.4
0548               
0549 7E70 B501             byte  key.ctrl.5, pane.focus.cmdb
0550 7E72 6E20             data  edkey.action.cmdb.file.directory.5
0551               
0552 7E74 B601             byte  key.ctrl.6, pane.focus.cmdb
0553 7E76 6E2C             data  edkey.action.cmdb.file.directory.6
0554               
0555 7E78 B701             byte  key.ctrl.7, pane.focus.cmdb
0556 7E7A 6E38             data  edkey.action.cmdb.file.directory.7
0557               
0558 7E7C 9E01             byte  key.ctrl.8, pane.focus.cmdb
0559 7E7E 6E44             data  edkey.action.cmdb.file.directory.8
0560               
0561 7E80 9F01             byte  key.ctrl.9, pane.focus.cmdb
0562 7E82 6E50             data  edkey.action.cmdb.file.directory.9
0563               
0564 7E84 8101             byte  key.ctrl.a, pane.focus.cmdb
0565 7E86 6E68             data  edkey.action.cmdb.file.directory.scs1
0566               
0567 7E88 8201             byte  key.ctrl.b, pane.focus.cmdb
0568 7E8A 6E74             data  edkey.action.cmdb.file.directory.scs2
0569               
0570 7E8C 8301             byte  key.ctrl.c, pane.focus.cmdb
0571 7E8E 6E80             data  edkey.action.cmdb.file.directory.scs3
0572               
0573 7E90 8901             byte  key.ctrl.i, pane.focus.cmdb
0574 7E92 6E8C             data  edkey.action.cmdb.file.directory.ide1
0575               
0576 7E94 8601             byte  key.ctrl.f, pane.focus.cmdb
0577 7E96 6E98             data  edkey.action.cmdb.file.directory.ide2
0578               
0579 7E98 8701             byte  key.ctrl.g, pane.focus.cmdb
0580 7E9A 6EA4             data  edkey.action.cmdb.file.directory.ide3
0581               
0582 7E9C 9301             byte  key.ctrl.s, pane.focus.cmdb
0583 7E9E 70EE             data  edkey.action.filebrowser.prevcol
0584               
0585 7EA0 8401             byte  key.ctrl.d, pane.focus.cmdb
0586 7EA2 7134             data  edkey.action.filebrowser.nextcol
0587               
0588 7EA4 8501             byte  key.ctrl.e, pane.focus.cmdb
0589 7EA6 718E             data  edkey.action.filebrowser.prevpage
0590               
0591 7EA8 9801             byte  key.ctrl.x, pane.focus.cmdb
0592 7EAA 71DE             data  edkey.action.filebrowser.nextpage
0593               
0594 7EAC 9A01             byte  key.ctrl.z, pane.focus.cmdb
0595 7EAE 7A0C             data  pane.colorscheme.cycle
0596                       ;------------------------------------------------------
0597                       ; End of list
0598                       ;-------------------------------------------------------
0599 7EB0 FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0172                       copy  "data.colorscheme.asm"        ; Colorscheme data table
     **** ****     > data.colorscheme.asm
0001               * FILE......: data.colorscheme.asm
0002               * Purpose...: Stevie Editor - Color schemes table
0003               
0004               ***************************************************************
0005               * Stevie color schemes table
0006               *--------------------------------------------------------------
0007               * ;
0008               * ; Word 0
0009               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0010               * ; B  MSB  low-nibble     Background color text line in frame buffer
0011               * ; C  LSB  high-nibble    Foreground color top line
0012               * ; D  LSB  low-nibble     Background color top line
0013               *
0014               * ; Word 1
0015               * ; E  MSB  high-nibble    Foreground color cmdb pane
0016               * ; F  MSB  low-nibble     Background color cmdb pane
0017               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0018               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0019               * ;
0020               * ; Word 2
0021               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0022               * ; J  MSB  low-nibble     Background color busy top/bottom line
0023               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0024               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0025               *
0026               * ; Word 3
0027               * ; M  MSB  high-nibble    Foreground color command buffer header line
0028               * ; N  MSB  low-nibble     Background color command buffer header line
0029               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0030               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0031               *
0032               * ; Word 4
0033               * ; Q  MSB  high-nibble    Foreground color bottom line
0034               * ; R  LSB  low-nibble     Background color bottom line
0035               * ; S  MSB  high-nibble
0036               * ; T  LSB  low-nibble
0037               *
0038               * ; Colors
0039               * ; 0  Transparant
0040               * ; 1  black
0041               * ; 2  Green
0042               * ; 3  Light Green
0043               * ; 4  Blue
0044               * ; 5  Light Blue
0045               * ; 6  Dark Red
0046               * ; 7  Cyan
0047               * ; 8  Red
0048               * ; 9  Light Red
0049               * ; A  Yellow
0050               * ; B  Light Yellow
0051               * ; C  Dark Green
0052               * ; D  Magenta
0053               * ; E  Grey
0054               * ; F  White
0055               *--------------------------------------------------------------
0056               tv.colorscheme.table:
0057                       ;      0     2     4     6     8
0058                       ;      ABCD  EFGH  IJKL  MNOP  QRST ;
0059 7EB2 F41E             data  >f41e,>f1f1,>1b1f,>7111,>1700 ; 1 White on blue with cyan (1)
     7EB4 F1F1     
     7EB6 1B1F     
     7EB8 7111     
     7EBA 1700     
0060 7EBC 21F0             data  >21f0,>21ff,>f112,>21ff,>1c00 ; 2  Dark green on black
     7EBE 21FF     
     7EC0 F112     
     7EC2 21FF     
     7EC4 1C00     
0061 7EC6 A11A             data  >a11a,>f0ff,>1f1a,>f1ff,>1a00 ; 3  Dark yellow on black
     7EC8 F0FF     
     7ECA 1F1A     
     7ECC F1FF     
     7ECE 1A00     
0062 7ED0 1E1E             data  >1e1e,>1e11,>1ee1,>1e11,>e100 ; 4  Black on grey
     7ED2 1E11     
     7ED4 1EE1     
     7ED6 1E11     
     7ED8 E100     
0063 7EDA F417             data  >f417,>7171,>1b1f,>7111,>1700 ; 5  White on blue with cyan (2)
     7EDC 7171     
     7EDE 1B1F     
     7EE0 7111     
     7EE2 1700     
0064 7EE4 1313             data  >1313,>1311,>1331,>1311,>1c00 ; 6  Black on light green
     7EE6 1311     
     7EE8 1331     
     7EEA 1311     
     7EEC 1C00     
0065 7EEE 1771             data  >1771,>1011,>0171,>1711,>1f00 ; 7  Black on cyan
     7EF0 1011     
     7EF2 0171     
     7EF4 1711     
     7EF6 1F00     
0066 7EF8 2112             data  >2112,>f0ff,>1f12,>f1f6,>1200 ; 8  Dark green on black
     7EFA F0FF     
     7EFC 1F12     
     7EFE F1F6     
     7F00 1200     
0067 7F02 1FF1             data  >1ff1,>1011,>f1f1,>1f11,>f100 ; 9  Black on white
     7F04 1011     
     7F06 F1F1     
     7F08 1F11     
     7F0A F100     
0068 7F0C 1AF1             data  >1af1,>a111,>1f1f,>f11f,>1000 ; 10 Black on dark yellow
     7F0E A111     
     7F10 1F1F     
     7F12 F11F     
     7F14 1000     
0069 7F16 1919             data  >1919,>1911,>1991,>1911,>1600 ; 11 Black on light red
     7F18 1911     
     7F1A 1991     
     7F1C 1911     
     7F1E 1600     
0070 7F20 F417             data  >f417,>f171,>1b1f,>7111,>1f00 ; 12 White on blue with cyan (3)
     7F22 F171     
     7F24 1B1F     
     7F26 7111     
     7F28 1F00     
0071 7F2A 1919             data  >1919,>1919,>1919,>1919,>1919 ; 13 All yellow
     7F2C 1919     
     7F2E 1919     
     7F30 1919     
     7F32 1919     
0072                       even
                   < stevie_b1.asm
0173                       ;-----------------------------------------------------------------------
0174                       ; Bank full check
0175                       ;-----------------------------------------------------------------------
0179                       ;-----------------------------------------------------------------------
0180                       ; Show ROM bank in CPU crash screen
0181                       ;-----------------------------------------------------------------------
0182                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7FF0 06A0  32         bl    @putat
     7FF2 2442     
0010 7FF4 0314                   byte 3,20
0011 7FF6 7F64                   data cpu.crash.showbank.bankstr
0012 7FF8 10FF  14         jmp   $
                   < stevie_b1.asm
0183                       ;-----------------------------------------------------------------------
0184                       ; Table for VDP modes
0185                       ;-----------------------------------------------------------------------
0186                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b1.asm
0187                       ;-----------------------------------------------------------------------
0188                       ; Vector table
0189                       ;-----------------------------------------------------------------------
0190                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#1'
     7F66 4F4D     
     7F68 2331     
0009               *--------------------------------------------------------------
0010               * ROM 1: Vectors 1-32
0011               *--------------------------------------------------------------
0012                       aorg  bankx.vectab
0013 7F70 6138     vec.1   data  mem.sams.setup.stevie ;
0014 7F72 74E2     vec.2   data  tv.linelen.toggle     ; Toggle line length display
0015 7F74 2026     vec.3   data  cpu.crash             ;
0016 7F76 2026     vec.4   data  cpu.crash             ;
0017 7F78 2026     vec.5   data  cpu.crash             ;
0018 7F7A 2026     vec.6   data  cpu.crash             ;
0019 7F7C 2026     vec.7   data  cpu.crash             ;
0020 7F7E 2026     vec.8   data  cpu.crash             ;
0021 7F80 2026     vec.9   data  cpu.crash             ;
0022 7F82 7282     vec.10  data  edb.line.pack.fb      ;
0023 7F84 7354     vec.11  data  edb.line.unpack.fb    ;
0024 7F86 7A46     vec.12  data  edb.clear.sams        ;
0025 7F88 73FA     vec.13  data  edb.lock              ;
0026 7F8A 743E     vec.14  data  edb.unlock            ;
0027 7F8C 6ACC     vec.15  data  edkey.action.cmdb.show
0028 7F8E 2026     vec.16  data  cpu.crash             ;
0029 7F90 2026     vec.17  data  cpu.crash             ;
0030 7F92 726E     vec.18  data  cmdb.dialog.close     ;
0031 7F94 7880     vec.19  data  cmdb.cmd.clear        ;
0032 7F96 2026     vec.20  data  cpu.crash             ;
0033 7F98 7918     vec.21  data  fb.vdpdump            ;
0034 7F9A 318E     vec.22  data  fb.row2line           ;
0035 7F9C 2026     vec.23  data  cpu.crash             ;
0036 7F9E 2026     vec.24  data  cpu.crash             ;
0037 7FA0 2026     vec.25  data  cpu.crash             ;
0038 7FA2 2026     vec.26  data  cpu.crash             ;
0039 7FA4 79F8     vec.27  data  pane.errline.hide     ;
0040 7FA6 756E     vec.28  data  pane.cursor.blink     ;
0041 7FA8 7550     vec.29  data  pane.cursor.hide      ;
0042 7FAA 79EE     vec.30  data  pane.errline.show     ;
0043 7FAC 2026     vec.31  data  cpu.crash             ;
0044 7FAE 2026     vec.32  data  cpu.crash             ;
0045               *--------------------------------------------------------------
0046               * ROM 1: Vectors 33-64
0047               *--------------------------------------------------------------
0048 7FB0 2026     vec.33  data  cpu.crash             ;
0049 7FB2 2026     vec.34  data  cpu.crash             ;
0050 7FB4 2026     vec.35  data  cpu.crash             ;
0051 7FB6 2026     vec.36  data  cpu.crash             ;
0052 7FB8 2026     vec.37  data  cpu.crash             ;
0053 7FBA 2026     vec.38  data  cpu.crash             ;
0054 7FBC 2026     vec.39  data  cpu.crash             ;
0055 7FBE 2026     vec.40  data  cpu.crash             ;
0056 7FC0 2026     vec.41  data  cpu.crash             ;
0057 7FC2 2026     vec.42  data  cpu.crash             ;
0058 7FC4 2026     vec.43  data  cpu.crash             ;
0059 7FC6 2026     vec.44  data  cpu.crash             ;
0060 7FC8 2026     vec.45  data  cpu.crash             ;
0061 7FCA 2026     vec.46  data  cpu.crash             ;
0062 7FCC 2026     vec.47  data  cpu.crash             ;
0063 7FCE 2026     vec.48  data  cpu.crash             ;
0064 7FD0 2026     vec.49  data  cpu.crash             ;
0065 7FD2 2026     vec.50  data  cpu.crash             ;
0066 7FD4 2026     vec.51  data  cpu.crash             ;
0067 7FD6 2026     vec.52  data  cpu.crash             ;
0068 7FD8 2026     vec.53  data  cpu.crash             ;
0069 7FDA 2026     vec.54  data  cpu.crash             ;
0070 7FDC 2026     vec.55  data  cpu.crash             ;
0071 7FDE 2026     vec.56  data  cpu.crash             ;
0072 7FE0 2026     vec.57  data  cpu.crash             ;
0073 7FE2 2026     vec.58  data  cpu.crash             ;
0074 7FE4 2026     vec.59  data  cpu.crash             ;
0075 7FE6 2026     vec.60  data  cpu.crash             ;
0076 7FE8 2026     vec.61  data  cpu.crash             ;
0077 7FEA 2026     vec.62  data  cpu.crash             ;
0078 7FEC 2026     vec.63  data  cpu.crash             ;
0079 7FEE 2026     vec.64  data  cpu.crash             ;
                   < stevie_b1.asm
0191                                                   ; Vector table bank 1

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CART.FG99.MGR....... >7B64 :     
    CART.FG99.MGR.EXIT.. >7B72 :     
    CART.FG99.RUN....... >383C :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E37E :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLFREE......... >E37C :     
    CAT.VOLNAME......... >E3BA :     
    CAT.VOLSIZE......... >E378 :     
    CAT.VOLUSED......... >E37A :     
    CLHOOK.............. >2F7C :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2FA4 :     
    CMDB.ACTION.PTR..... >A730 :     
    CMDB.CFG.FNAME...... >78C6 :     
    CMDB.CFG.FNAME.VECTOR >78CE :     
    CMDB.CMD............ >A733 :     
    CMDB.CMD.CLEAR...... >7880 :     
    CMDB.CMD.CLEAR.VECTOR >7888 :     
    CMDB.CMD.CURSOR_EOL. >78A8 :     
    CMDB.CMD.CURSOR_EOL.VECTOR >78B0 :     
    CMDB.CMD.GETLENGTH.. >788A :     
    CMDB.CMD.GETLENGTH.VECTOR >7892 :     
    CMDB.CMD.PRESET..... >7894 :     
    CMDB.CMD.PRESET.VECTOR >789C :     
    CMDB.CMD.SET........ >789E :     
    CMDB.CMD.SET.VECTOR. >78A6 :     
    CMDB.CMDALL......... >A732 :     
    CMDB.CMDLEN......... >A732 :     
    CMDB.COLUMN......... >A718 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B6 :     
    CMDB.DIALOG......... >A720 :     
    CMDB.DIALOG.CLOSE... >726E :     
    CMDB.DIALOG.CLOSE.EXIT >727E :     
    CMDB.DIALOG.VAR..... >A722 :     
    CMDB.DIRTY.......... >A71E :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.FREE1.......... >A70E :     
    CMDB.INIT........... >334C :     
    CMDB.INIT.EXIT...... >33A0 :     
    CMDB.LENGTH......... >A71A :     
    CMDB.LINES.......... >A71C :     
    CMDB.PANHEAD........ >A724 :     
    CMDB.PANHEAD.BUF.... >A784 :     
    CMDB.PANHINT........ >A728 :     
    CMDB.PANHINT2....... >A72A :     
    CMDB.PANINFO........ >A726 :     
    CMDB.PANKEYS........ >A72E :     
    CMDB.PANMARKERS..... >A72C :     
    CMDB.PREVCURSOR..... >A710 :     
    CMDB.REFRESH_PROMPT. >7876 :     
    CMDB.REFRESH_PROMPT.VECTOR >787E :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A712 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A716 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A714 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >394E :     
    CONST.11............ >3950 :     
    CONST.12............ >3952 :     
    CONST.13............ >3954 :     
    CONST.14............ >3956 :     
    CONST.15............ >3958 :     
    CONST.16............ >395A :     
    CONST.2............. >2004 :     
    CONST.3............. >3944 :     
    CONST.32............ >395C :     
    CONST.4............. >2006 :     
    CONST.5............. >3946 :     
    CONST.6............. >3948 :     
    CONST.7............. >394A :     
    CONST.8............. >2008 :     
    CONST.80............ >395E :     
    CONST.9............. >394C :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D79 :     
    DEF.CLIP.FNAME.B.... >3D84 :     
    DEF.DEVICES......... >3D8E :     
    DEF.FG99.FNAME...... >3DBE :     
    DEF.PRINTER.FNAME... >3D72 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.............. >78DA :     
    DIALOG.APPEND....... >77C2 :     
    DIALOG.APPEND.VECTOR >77CA :     
    DIALOG.BASIC........ >77D6 :     
    DIALOG.BASIC.VECTOR. >77DE :     
    DIALOG.CART.FG99.... >7832 :     
    DIALOG.CART.FG99.VECTOR >783A :     
    DIALOG.CARTRIDGE.... >77CC :     
    DIALOG.CARTRIDGE.VECTOR >77D4 :     
    DIALOG.CAT.......... >77EA :     
    DIALOG.CAT.VECTOR... >77F2 :     
    DIALOG.CLIPBOARD.... >77A4 :     
    DIALOG.CLIPBOARD.VECTOR >77AC :     
    DIALOG.CLIPDEV...... >77AE :     
    DIALOG.CLIPDEV.VECTOR >77B6 :     
    DIALOG.CONFIG....... >77B8 :     
    DIALOG.CONFIG.VECTOR >77C0 :     
    DIALOG.FILE......... >778C :     
    DIALOG.FILE.VECTOR.. >7794 :     
    DIALOG.FIND......... >7828 :     
    DIALOG.FIND.VECTOR.. >7830 :     
    DIALOG.FONT......... >77FE :     
    DIALOG.FONT.VECTOR.. >7806 :     
    DIALOG.GOTO......... >77F4 :     
    DIALOG.GOTO.VECTOR.. >77FC :     
    DIALOG.HELP......... >775A :     
    DIALOG.HELP.NEXT.... >7746 :     
    DIALOG.HELP.VECTOR.. >7762 :     
    DIALOG.INSERT....... >7778 :     
    DIALOG.INSERT.VECTOR >7780 :     
    DIALOG.LOAD......... >7764 :     
    DIALOG.LOAD.VECTOR.. >776C :     
    DIALOG.MENU......... >7812 :     
    DIALOG.MENU.VECTOR.. >7826 :     
    DIALOG.PRINT........ >7782 :     
    DIALOG.PRINT.VECTOR. >778A :     
    DIALOG.RUN.......... >7808 :     
    DIALOG.RUN.VECTOR... >7810 :     
    DIALOG.SAVE......... >776E :     
    DIALOG.SAVE.VECTOR.. >7776 :     
    DIALOG.SHORTCUTS.... >77E0 :     
    DIALOG.SHORTCUTS.VECTOR >77E8 :     
    DIALOG.UNSAVED...... >7796 :     
    DIALOG.UNSAVED.VECTOR >77A2 :     
    DIALOG.VECTOR....... >78E2 :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.AUTOINSERT.ONESHOT >74AC :     
    EDB.AUTOINSERT.TOGGLE >747C :     
    EDB.AUTOINSERT.TOGGLE.EXIT >74BA :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.CLIP...... >7A6E :     
    EDB.BLOCK.CLIP.VECTOR >7A76 :     
    EDB.BLOCK.COPY...... >7A8C :     
    EDB.BLOCK.COPY.VECTOR >7A94 :     
    EDB.BLOCK.DELETE.... >7A82 :     
    EDB.BLOCK.DELETE.VECTOR >7A8A :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7A50 :     
    EDB.BLOCK.MARK.M1... >7A5A :     
    EDB.BLOCK.MARK.M1.VECTOR >7A62 :     
    EDB.BLOCK.MARK.M2... >7A64 :     
    EDB.BLOCK.MARK.M2.VECTOR >7A6C :     
    EDB.BLOCK.MARK.VECTOR >7A58 :     
    EDB.BLOCK.RESET..... >7A78 :     
    EDB.BLOCK.RESET.VECTOR >7A80 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7A46 :     
    EDB.CLEAR.SAMS.VECTOR >7A4E :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FIND.INIT....... >7734 :     
    EDB.FIND.SEARCH..... >7722 :     
    EDB.FREE............ >A5DC :     
    EDB.HIPAGE.ALLOC.... >37D6 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37E2 :     
    EDB.HIPAGE.ALLOC.CRASH >380C :     
    EDB.HIPAGE.ALLOC.EXIT >3814 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37FE :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3300 :     
    EDB.INIT.EXIT....... >3346 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7A96 :     
    EDB.LINE.DEL.VECTOR. >7A9E :     
    EDB.LINE.GETLENGTH.. >376E :     
    EDB.LINE.GETLENGTH.EXIT >37AA :     
    EDB.LINE.GETLENGTH.NULL >37A6 :     
    EDB.LINE.GETLENGTH2. >37B2 :     
    EDB.LINE.GETLENGTH2.EXIT >37D0 :     
    EDB.LINE.MAPPAGE.... >3724 :     
    EDB.LINE.MAPPAGE.EXIT >3766 :     
    EDB.LINE.MAPPAGE.LOOKUP >373E :     
    EDB.LINE.PACK.FB.... >7282 :     
    EDB.LINE.PACK.FB.CHECK80 >72B8 :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >72C8 :     
    EDB.LINE.PACK.FB.COPYLINE >7300 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >731A :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >7316 :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >730C :     
    EDB.LINE.PACK.FB.CRASH >72C0 :     
    EDB.LINE.PACK.FB.EXIT >7348 :     
    EDB.LINE.PACK.FB.PREPARE >72D0 :     
    EDB.LINE.PACK.FB.PREPEXIT >732E :     
    EDB.LINE.PACK.FB.SCAN >72B0 :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >72DC :     
    EDB.LINE.UNPACK.FB.. >7354 :     
    EDB.LINE.UNPACK.FB.CLEAR >73B2 :     
    EDB.LINE.UNPACK.FB.COPY >73E4 :     
    EDB.LINE.UNPACK.FB.EXIT >73F0 :     
    EDB.LINE.UNPACK.FB.GETLEN >73AA :     
    EDB.LINE.UNPACK.FB.PREPARE >73C0 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.LOCK............ >73FA :     
    EDB.LOCK.EXIT....... >742A :     
    EDB.LOCKED.......... >A5DA :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.SRCH.COL.PTR.... >A5D4 :     
    EDB.SRCH.CURMATCH... >A5D0 :     
    EDB.SRCH.ENDLN...... >A5CA :     
    EDB.SRCH.IDX.CSIZE.. >0400 :     
    EDB.SRCH.IDX.CTOP... >F900 :     
    EDB.SRCH.IDX.RSIZE.. >0800 :     
    EDB.SRCH.IDX.RTOP... >F100 :     
    EDB.SRCH.MATCHCOL... >A5D8 :     
    EDB.SRCH.MATCHES.... >A5CE :     
    EDB.SRCH.OFFSET..... >A5D6 :     
    EDB.SRCH.ROW.PTR.... >A5D2 :     
    EDB.SRCH.STARTLN.... >A5C8 :     
    EDB.SRCH.STR........ >A576 :     
    EDB.SRCH.STRLEN..... >A5C6 :     
    EDB.SRCH.WORKLEN.... >A5CC :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDB.UNLOCK.......... >743E :     
    EDB.UNLOCK.EXIT..... >7466 :     
    EDK.FB.CHAR......... >69C6 :     
    EDK.FB.CHAR.DRAWCURSOR >6A0E :     
    EDK.FB.CHAR.EXIT.... >6A0E :     
    EDK.FB.CHAR.OVERWRITE >6A0A :     
    EDKEY.ACTION.BLOCK.COPY >6868 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >68A8 :     
    EDKEY.ACTION.BLOCK.DELETE >68B0 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >68EC :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >6940 :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >6956 :     
    EDKEY.ACTION.BLOCK.M1 >684C :     
    EDKEY.ACTION.BLOCK.M2 >6854 :     
    EDKEY.ACTION.BLOCK.MARK >6844 :     
    EDKEY.ACTION.BLOCK.MOVE >68F4 :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6938 :     
    EDKEY.ACTION.BLOCK.RESET >685C :     
    EDKEY.ACTION.BOT.... >64DC :     
    EDKEY.ACTION.BOTSCR. >64E4 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >700E :     
    EDKEY.ACTION.CMDB.APPEND >6C26 :     
    EDKEY.ACTION.CMDB.APPEND.CHECKLEN >6C52 :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6CA4 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6C78 :     
    EDKEY.ACTION.CMDB.AUTOINSERT >7040 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >7056 :     
    EDKEY.ACTION.CMDB.CFG.CLIP >6ADE :     
    EDKEY.ACTION.CMDB.CFG.CLIP.EXIT >6AFA :     
    EDKEY.ACTION.CMDB.CHAR >6A7E :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6ABE :     
    EDKEY.ACTION.CMDB.CLEAR >6A72 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6A7A :     
    EDKEY.ACTION.CMDB.CLIP >6CC4 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6CB2 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6CB8 :     
    EDKEY.ACTION.CMDB.CLIP.3 >6CBE :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >7022 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >7038 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >703C :     
    EDKEY.ACTION.CMDB.END >6A6A :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6FF6 :     
    EDKEY.ACTION.CMDB.FILE.CATALOG.EXIT >6ED2 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY >6EC6 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.1 >6DF2 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.2 >6DFC :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.3 >6E08 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.4 >6E14 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.5 >6E20 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.6 >6E2C :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.7 >6E38 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.8 >6E44 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.9 >6E50 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.DEVICE >6EB0 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.IDE1 >6E8C :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.IDE2 >6E98 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.IDE3 >6EA4 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.SCS1 >6E68 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.SCS2 >6E74 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.SCS3 >6E80 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.TIPI >6E5C :     
    EDKEY.ACTION.CMDB.FILE.NEW >6B02 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6B20 :     
    EDKEY.ACTION.CMDB.FILE.RUN >6EDA :     
    EDKEY.ACTION.CMDB.FILE.RUN.CHECKLEN >6F04 :     
    EDKEY.ACTION.CMDB.FILE.RUN.EA5 >6F22 :     
    EDKEY.ACTION.CMDB.FILE.RUN.EXIT >6F2E :     
    EDKEY.ACTION.CMDB.FIND.SEARCH >7234 :     
    EDKEY.ACTION.CMDB.FIND.SEARCH.EXIT >7246 :     
    EDKEY.ACTION.CMDB.FONT.EXIT >70EA :     
    EDKEY.ACTION.CMDB.FONT.LOAD >70E2 :     
    EDKEY.ACTION.CMDB.FONT1 >70C6 :     
    EDKEY.ACTION.CMDB.FONT2 >70CA :     
    EDKEY.ACTION.CMDB.FONT3 >70D0 :     
    EDKEY.ACTION.CMDB.FONT4 >70D6 :     
    EDKEY.ACTION.CMDB.FONT5 >70DC :     
    EDKEY.ACTION.CMDB.GOTO >7076 :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >70C2 :     
    EDKEY.ACTION.CMDB.GOTO.LINE >70AE :     
    EDKEY.ACTION.CMDB.GOTO.PREPARE >7094 :     
    EDKEY.ACTION.CMDB.HIDE >6AD6 :     
    EDKEY.ACTION.CMDB.HOME >6A50 :     
    EDKEY.ACTION.CMDB.INSERT >6B8C :     
    EDKEY.ACTION.CMDB.INSERT.CHECKLEN >6BB8 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6C18 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6BDE :     
    EDKEY.ACTION.CMDB.LEFT >6A18 :     
    EDKEY.ACTION.CMDB.LINELEN >705E :     
    EDKEY.ACTION.CMDB.LINELEN.EXIT >706E :     
    EDKEY.ACTION.CMDB.LINETERM.TOGGLE >7002 :     
    EDKEY.ACTION.CMDB.LOAD >6B28 :     
    EDKEY.ACTION.CMDB.LOAD.CHECKLEN >6B52 :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6B84 :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6B70 :     
    EDKEY.ACTION.CMDB.LOCK >724A :     
    EDKEY.ACTION.CMDB.LOCK.EXIT >7256 :     
    EDKEY.ACTION.CMDB.PICK.NEXT >6F5A :     
    EDKEY.ACTION.CMDB.PICK.NEXT.EXIT >6F7A :     
    EDKEY.ACTION.CMDB.PICK.NEXT.SETFILE >6F68 :     
    EDKEY.ACTION.CMDB.PICK.PREV >6F36 :     
    EDKEY.ACTION.CMDB.PICK.PREV.EXIT >6F56 :     
    EDKEY.ACTION.CMDB.PICK.PREV.SETFILE >6F44 :     
    EDKEY.ACTION.CMDB.PRESET >701A :     
    EDKEY.ACTION.CMDB.PRINT >6D72 :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6DCE :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6DE4 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6DDC :     
    EDKEY.ACTION.CMDB.PROCEED >6FCC :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6FF2 :     
    EDKEY.ACTION.CMDB.RIGHT >6A30 :     
    EDKEY.ACTION.CMDB.SAVE >6CF2 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6D4E :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6D64 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6D5C :     
    EDKEY.ACTION.CMDB.SHOW >6ACC :     
    EDKEY.ACTION.CMDB.TOGGLE >6AC6 :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6ADA :     
    EDKEY.ACTION.CMDB.UNLOCK >725C :     
    EDKEY.ACTION.CMDB.UNLOCK.EXIT >7268 :     
    EDKEY.ACTION.CMDB.UPDIR >6F7E :     
    EDKEY.ACTION.CMDB.UPDIR.EXIT >6FC6 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >67C4 :     
    EDKEY.ACTION.DEL_CHAR >6574 :     
    EDKEY.ACTION.DEL_CHAR.EXIT >65F4 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >65D2 :     
    EDKEY.ACTION.DEL_CHAR.PREP >65B8 :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >6582 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >658C :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >65AA :     
    EDKEY.ACTION.DEL_CHAR.SAVE >65E8 :     
    EDKEY.ACTION.DEL_EOL >65F8 :     
    EDKEY.ACTION.DEL_EOL.EXIT >662E :     
    EDKEY.ACTION.DEL_EOL_LOOP >661A :     
    EDKEY.ACTION.DEL_LINE >6632 :     
    EDKEY.ACTION.DEL_LINE.DOIT >6666 :     
    EDKEY.ACTION.DEL_LINE.EXIT >6696 :     
    EDKEY.ACTION.DEL_LINE.EXIT2 >669A :     
    EDKEY.ACTION.DEL_LINE.REFRESH >6676 :     
    EDKEY.ACTION.DOWN... >64F4 :     
    EDKEY.ACTION.END.... >630A :     
    EDKEY.ACTION.ENTER.. >66D8 :     
    EDKEY.ACTION.ENTER.NEWLINE >66F0 :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6704 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >6976 :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >6980 :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >698A :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >699A :     
    EDKEY.ACTION.FB.LOAD.FILE >67E4 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT1 >681A :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT2 >6830 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT3 >683A :     
    EDKEY.ACTION.FB.LOAD.LOADFILE >6814 :     
    EDKEY.ACTION.FB.TAB.NEXT >6968 :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >6970 :     
    EDKEY.ACTION.FB.TAB.PREV >695A :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >6962 :     
    EDKEY.ACTION.FILEBROWSER.NEXTCOL >7134 :     
    EDKEY.ACTION.FILEBROWSER.NEXTCOL.CHECKDIALOG >7160 :     
    EDKEY.ACTION.FILEBROWSER.NEXTCOL.EXIT >7186 :     
    EDKEY.ACTION.FILEBROWSER.NEXTCOL.PAGE >7156 :     
    EDKEY.ACTION.FILEBROWSER.NEXTCOL.PAGE.DISPLAY >7170 :     
    EDKEY.ACTION.FILEBROWSER.NEXTPAGE >71DE :     
    EDKEY.ACTION.FILEBROWSER.NEXTPAGE.CHECKDIALOG >7206 :     
    EDKEY.ACTION.FILEBROWSER.NEXTPAGE.EXIT >722C :     
    EDKEY.ACTION.FILEBROWSER.NEXTPAGE.PAGE >71F6 :     
    EDKEY.ACTION.FILEBROWSER.NEXTPAGE.PAGE.DISPLAY >7216 :     
    EDKEY.ACTION.FILEBROWSER.PREVCOL >70EE :     
    EDKEY.ACTION.FILEBROWSER.PREVCOL.CHECKDIALOG >7106 :     
    EDKEY.ACTION.FILEBROWSER.PREVCOL.EXIT >712C :     
    EDKEY.ACTION.FILEBROWSER.PREVCOL.PAGE >70FC :     
    EDKEY.ACTION.FILEBROWSER.PREVCOL.PAGE.DISPLAY >7116 :     
    EDKEY.ACTION.FILEBROWSER.PREVPAGE >718E :     
    EDKEY.ACTION.FILEBROWSER.PREVPAGE.CHECKDIALOG >71B2 :     
    EDKEY.ACTION.FILEBROWSER.PREVPAGE.EXIT >71D8 :     
    EDKEY.ACTION.FILEBROWSER.PREVPAGE.PAGE >71A2 :     
    EDKEY.ACTION.FILEBROWSER.PREVPAGE.PAGE.DISPLAY >71C2 :     
    EDKEY.ACTION.FIND.RESET >67D4 :     
    EDKEY.ACTION.FIND.RESET.EXIT >67E0 :     
    EDKEY.ACTION.GOTO... >654E :     
    EDKEY.ACTION.GOTO.NMATCH >69B8 :     
    EDKEY.ACTION.GOTO.PMATCH >69AA :     
    EDKEY.ACTION.GOTO.REFRESH >6568 :     
    EDKEY.ACTION.HOME... >6302 :     
    EDKEY.ACTION.INS_CHAR.WS >669E :     
    EDKEY.ACTION.INS_CHAR.WS.EXIT >66AE :     
    EDKEY.ACTION.INS_LINE >66B4 :     
    EDKEY.ACTION.INS_LINE.EXIT >66C2 :     
    EDKEY.ACTION.INS_LINE_AFTER >66C6 :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >66D4 :     
    EDKEY.ACTION.INS_ONOFF >6764 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >6770 :     
    EDKEY.ACTION.LEFT... >62CC :     
    EDKEY.ACTION.NEWLINE >6718 :     
    EDKEY.ACTION.NEWLINE.DOWN >673C :     
    EDKEY.ACTION.NEWLINE.EXIT >6760 :     
    EDKEY.ACTION.NEWLINE.REST >6744 :     
    EDKEY.ACTION.NPAGE.. >648C :     
    EDKEY.ACTION.NPAGE.EXIT >64C8 :     
    EDKEY.ACTION.NPAGE.REFRESH >64B6 :     
    EDKEY.ACTION.NPAGE.SANITY >64A0 :     
    EDKEY.ACTION.NPAGE.TOPLINE >64B0 :     
    EDKEY.ACTION.NWORD.. >637E :     
    EDKEY.ACTION.NWORD.EXIT >63D6 :     
    EDKEY.ACTION.NWORD_DONE >63CE :     
    EDKEY.ACTION.NWORD_MS >6396 :     
    EDKEY.ACTION.NWORD_SCAN >6398 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >63A2 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >63B0 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >63B8 :     
    EDKEY.ACTION.PPAGE.. >644A :     
    EDKEY.ACTION.PPAGE.EXIT >6488 :     
    EDKEY.ACTION.PPAGE.REFRESH >6476 :     
    EDKEY.ACTION.PPAGE.SANITY >645E :     
    EDKEY.ACTION.PPAGE.TOPLINE >6470 :     
    EDKEY.ACTION.PWORD.. >632C :     
    EDKEY.ACTION.PWORD.EXIT >6376 :     
    EDKEY.ACTION.PWORD_DONE >636E :     
    EDKEY.ACTION.PWORD_SCAN >633E :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >6344 :     
    EDKEY.ACTION.QUIT... >67B6 :     
    EDKEY.ACTION.RIGHT.. >62E6 :     
    EDKEY.ACTION.SCROLL.LEFT >63DE :     
    EDKEY.ACTION.SCROLL.RIGHT >6412 :     
    EDKEY.ACTION.TOGGLE.RULER >6776 :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >67AC :     
    EDKEY.ACTION.TOGGLE.RULER.FB >67A8 :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >6786 :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6790 :     
    EDKEY.ACTION.TOP.... >64CC :     
    EDKEY.ACTION.TOPSCR. >64D4 :     
    EDKEY.ACTION.UP..... >64EC :     
    EDKEY.ACTIONS.INS.CHAR.WS.DATA >66B2 :     
    EDKEY.FB.GOTO.LINE.. >652A :     
    EDKEY.FB.GOTO.OFFSET >6514 :     
    EDKEY.FB.GOTO.ROW... >6524 :     
    EDKEY.FB.GOTO.TOPROW >64FC :     
    EDKEY.KEY.CHECK.NEXT >6202 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >6222 :     
    EDKEY.KEY.CHECK.SCOPE >6228 :     
    EDKEY.KEY.PROCESS... >61A2 :     
    EDKEY.KEY.PROCESS.ACTION >6242 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >6256 :     
    EDKEY.KEY.PROCESS.CRASH >627E :     
    EDKEY.KEY.PROCESS.ENTER >6286 :     
    EDKEY.KEY.PROCESS.EXIT >62C8 :     
    EDKEY.KEY.PROCESS.FLASH >6294 :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61FE :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61F8 :     
    EDKEY.KEY.PROCESS.SPECIAL >61C2 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61F2 :     
    EDKEY.KEYSCAN.HOOK.. >615C :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6184 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >2EC2 :     
    EDKEY.KEYSCAN.HOOK.EXIT >619E :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >78E4 :     
    ERROR.DISPLAY.VECTOR >78EC :     
    ERRPANE.EXIT........ >33CE :     
    ERRPANE.INIT........ >33A8 :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >31A8 :     
    FB.CALC.POINTER.EXIT >31C8 :     
    FB.CALC.SCRROWS..... >31D0 :     
    FB.CALC.SCRROWS.EXIT >31FC :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31F0 :     
    FB.CALC.SCRROWS.HANDLE.MC >31E4 :     
    FB.CALC.SCRROWS.HANDLE.RULER >31DA :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >790C :     
    FB.COLORLINES.VECTOR >7916 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.BOT....... >799E :     
    FB.CURSOR.BOT.VECTOR >79A6 :     
    FB.CURSOR.BOTSCR.... >79A8 :     
    FB.CURSOR.BOTSCR.VECTOR >79B0 :     
    FB.CURSOR.DOWN...... >796C :     
    FB.CURSOR.DOWN.VECTOR >7974 :     
    FB.CURSOR.HOME...... >7976 :     
    FB.CURSOR.HOME.VECTOR >797E :     
    FB.CURSOR.TOP....... >798A :     
    FB.CURSOR.TOP.VECTOR >7992 :     
    FB.CURSOR.TOPSCR.... >7994 :     
    FB.CURSOR.TOPSCR.VECTOR >799C :     
    FB.CURSOR.UP........ >7962 :     
    FB.CURSOR.UP.VECTOR. >796A :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A31A :     
    FB.FREE............. >A3C2 :     
    FB.GET.NONBLANK..... >7944 :     
    FB.GET.NONBLANK.VECTOR >794C :     
    FB.GOTO.NEXTMATCH... >79D0 :     
    FB.GOTO.NEXTMATCH.VECTOR >79D8 :     
    FB.GOTO.PREVMATCH... >79C6 :     
    FB.GOTO.PREVMATCH.VECTOR >79CE :     
    FB.HSCROLL.......... >7924 :     
    FB.HSCROLL.VECTOR... >792E :     
    FB.INIT............. >3134 :     
    FB.INIT.EXIT........ >3186 :     
    FB.INSERT.CHAR...... >79B2 :     
    FB.INSERT.CHAR.VECTOR >79BA :     
    FB.INSERT.LINE...... >7980 :     
    FB.INSERT.LINE.VECTOR >7988 :     
    FB.PREVCURSOR....... >A316 :     
    FB.REFRESH.......... >793A :     
    FB.REFRESH.VECTOR... >7942 :     
    FB.REPLACE.CHAR..... >79BC :     
    FB.REPLACE.CHAR.VECTOR >79C4 :     
    FB.RESTORE.......... >7930 :     
    FB.RESTORE.VECTOR... >7938 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >318E :     
    FB.ROW2LINE.EXIT.... >31A2 :     
    FB.RULER.INIT....... >7900 :     
    FB.RULER.INIT.VECTOR >790A :     
    FB.RULER.SIT........ >A322 :     
    FB.RULER.TAT........ >A372 :     
    FB.SCRROWS.......... >A31E :     
    FB.SCRROWS.MAX...... >A320 :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31C :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >7958 :     
    FB.TAB.NEXT.VECTOR.. >7960 :     
    FB.TAB.PREV......... >794E :     
    FB.TAB.PREV.VECTOR.. >7956 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >7918 :     
    FB.VDPDUMP.VECTOR... >7922 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A318 :     
    FG99................ >2E7E :     
    FG99.EXIT........... >2EB8 :     
    FG99.SEND.LOOP...... >2E8E :     
    FG99.WAIT........... >2EA6 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.CIRCBREAKER...... >A46A :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BC :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46C :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >1400 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E22 :     
    FILE.IMAGE.SAVE..... >2E20 :     
    FILE.LOAD........... >2E12 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E1E :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E24 :     
    FILE.STATUS......... >2E26 :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.NEXT >76EC :     
    FM.BROWSE.FNAME.PREV >76DA :     
    FM.BROWSE.FNAME.SET. >76FE :     
    FM.BROWSE.UPDIR..... >7710 :     
    FM.DIRECTORY........ >76C8 :     
    FM.FASTMODE......... >78BC :     
    FM.FASTMODE.VECTOR.. >78C4 :     
    FM.INSERTFILE....... >767A :     
    FM.INSERTFILE.EXIT.. >768C :     
    FM.LINETERM......... >78D0 :     
    FM.LINETERM.VECTOR.. >78D8 :     
    FM.LOADFILE......... >7654 :     
    FM.LOADFILE.EXIT.... >7674 :     
    FM.NEWFILE.......... >76B6 :     
    FM.RUN.EA5.......... >7692 :     
    FM.SAVEFILE......... >76A4 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EC2 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CART.FG99. >0028 :     
    ID.DIALOG.CART.TYPE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FIND...... >001E :     
    ID.DIALOG.FIND.BROWSE >0078 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.OPT....... >006C :     
    ID.DIALOG.OPT.CLIP.. >0013 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >0072 :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >362A :     
    IDX.ENTRY.DELETE.EXIT >3682 :     
    IDX.ENTRY.DELETE.LASTLINE >3656 :     
    IDX.ENTRY.DELETE.REORG >365E :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3668 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >367C :     
    IDX.ENTRY.INSERT.... >36CC :     
    IDX.ENTRY.INSERT.EXIT >3718 :     
    IDX.ENTRY.INSERT.REORG >36EA :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36F4 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3708 :     
    IDX.ENTRY.UPDATE.... >357C :     
    IDX.ENTRY.UPDATE.CLEAR >35B6 :     
    IDX.ENTRY.UPDATE.EXIT >35C6 :     
    IDX.ENTRY.UPDATE.SAVE >35A4 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3200 :     
    IDX.INIT.EXIT....... >323C :     
    IDX.POINTER.GET..... >35CE :     
    IDX.POINTER.GET.EXIT >3610 :     
    IDX.POINTER.GET.PARM >35FE :     
    IDX.POINTER.GET.PARM.NULL >3608 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.A............ >0061 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.C............ >00A3 :     
    KEY.LC.D............ >00A4 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.G............ >00A7 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.I............ >00A9 :     
    KEY.LC.J............ >00AA :     
    KEY.LC.K............ >00AB :     
    KEY.LC.L............ >00AC :     
    KEY.LC.M............ >00AD :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.T............ >0074 :     
    KEY.LC.U............ >0075 :     
    KEY.LC.V............ >0076 :     
    KEY.LC.W............ >0077 :     
    KEY.LC.X............ >0078 :     
    KEY.LC.Y............ >0079 :     
    KEY.LC.Z............ >007A :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.T............ >0054 :     
    KEY.UC.U............ >0055 :     
    KEY.UC.V............ >0056 :     
    KEY.UC.W............ >0057 :     
    KEY.UC.X............ >0058 :     
    KEY.UC.Y............ >0059 :     
    KEY.UC.Z............ >005A :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >7CE4 :     
    KEYMAP_ACTIONS.EDITOR >7C0A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F5C :     
    KTHREAD_EXIT........ >2F6E :     
    KTHREAD_KB.......... >2F6A :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >7BF8 :     
    MAGIC.CLEAR......... >7BE6 :     
    MAGIC.SET........... >7BD4 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6058 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7BB0 :     
    MEM.SAMS.SET.LEGACY. >7B9E :     
    MEM.SAMS.SET.STEVIE. >7BC2 :     
    MEM.SAMS.SETUP.STEVIE >6138 :     
    MEM.SAMS.SETUP.STEVIE.EXIT >6158 :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F7A :     
    MKHOOK.............. >2F72 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2FA0 :     
    MKSLOT.............. >2F86 :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >392A :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE........ >79E4 :     
    PANE.BOTLINE.VECTOR. >79EC :     
    PANE.BOTROW......... >0017 :     
    PANE.CMDB.DRAW...... >786C :     
    PANE.CMDB.DRAW.VECTOR >7874 :     
    PANE.CMDB.HIDE...... >7862 :     
    PANE.CMDB.HIDE.VECTOR >786A :     
    PANE.CMDB.SHOW...... >7858 :     
    PANE.CMDB.SHOW.VECTOR >7860 :     
    PANE.COLORSCHEME.CYCLE >7A0C :     
    PANE.COLORSCHEME.CYCLE.VECTOR >7A14 :     
    PANE.COLORSCHEME.LOAD >7A16 :     
    PANE.COLORSCHEME.LOAD.VECTOR >7A1E :     
    PANE.CURSOR.BLINK... >756E :     
    PANE.CURSOR.BLINK.EXIT >758A :     
    PANE.CURSOR.HIDE.... >7550 :     
    PANE.CURSOR.HIDE.EXIT >756A :     
    PANE.ERRLINE.DRAWCOLOR >7A02 :     
    PANE.ERRLINE.DRAWCOLOR.VECTOR >7A0A :     
    PANE.ERRLINE.HIDE... >79F8 :     
    PANE.ERRLINE.HIDE.VECTOR >7A00 :     
    PANE.ERRLINE.SHOW... >79EE :     
    PANE.ERRLINE.SHOW.VECTOR >79F6 :     
    PANE.FILEBROWSER.... >7A20 :     
    PANE.FILEBROWSER.HILIGHT >7A2A :     
    PANE.FILEBROWSER.HILIGHT.VECTOR >7A32 :     
    PANE.FILEBROWSER.VECTOR >7A28 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >784E :     
    PANE.SHOW_HINTX.VECTOR >7856 :     
    PANE.TOPLINE........ >79DA :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >381C :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3834 :     
    PANE.TOPLINE.VECTOR. >79E2 :     
    PANE.VDPDUMP........ >758E :     
    PANE.VDPDUMP.ALPHA_LOCK >759C :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >75AC :     
    PANE.VDPDUMP.CMDB.CHECK >75B4 :     
    PANE.VDPDUMP.CMDB.DRAW >75BA :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >75C6 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >75F8 :     
    PANE.VDPDUMP.DUMP... >7608 :     
    PANE.VDPDUMP.DUMPED. >7620 :     
    PANE.VDPDUMP.EXIT... >764A :     
    PANE.VDPDUMP.STATLINES >7628 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >3084 :     
    ROM.FARJUMP.ASSERT.CART >30F6 :     
    ROM.FARJUMP.ASSERT.LOWMEM >3104 :     
    ROM.FARJUMP.BANKSWITCH.CALL >30E6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30DE :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3122 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3114 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30C2 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30C6 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30CE :     
    ROM.FARJUMP.EXIT.... >312A :     
    ROM.FARJUMP.RETURN.. >30E8 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6026 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >391E :     
    RSSLOT.............. >2FB2 :     
    RUNLI1.............. >2FCA :     
    RUNLI2.............. >2FD6 :     
    RUNLI3.............. >2FDA :     
    RUNLI3A............. >2FE2 :     
    RUNLI4.............. >2FEC :     
    RUNLI5.............. >2FF6 :     
    RUNLI6.............. >3004 :     
    RUNLI7.............. >3012 :     
    RUNLI9.............. >3016 :     
    RUNLIA.............. >3038 :     
    RUNLIB.............. >2FC6 :     
    RUNLIC.............. >305C :     
    RUNLID.............. >3072 :     
    RUNLIE.............. >307C :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F3E :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRG.MODULE......... >7B76 :     
    STRG.MODULE.LOAD.... >7B82 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3912 :     
    TASK.ONESHOT.EXIT... >391A :     
    TASK.VDP.COPY.SAT... >385C :     
    TASK.VDP.COPY.SAT.CMDB >3884 :     
    TASK.VDP.COPY.SAT.EXIT >38F2 :     
    TASK.VDP.COPY.SAT.FB >3894 :     
    TASK.VDP.COPY.SAT.FB.NORULER >38A8 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38DE :     
    TASK.VDP.COPY.SAT.WRITE >38AC :     
    TASK.VDP.COPY.SAT.WRITE2 >38E8 :     
    TASK.VDP.CURSOR..... >38FE :     
    TASK.VDP.CURSOR.EXIT >390C :     
    TASK.VDP.PANES...... >7542 :     
    TASK.VDP.PANES.EXIT. >754A :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >7B0C :     
    TIBASIC.32X24....... >7F5A :     
    TIBASIC.AM.TOGGLE... >78B2 :     
    TIBASIC.AM.TOGGLE.VECTOR >78BA :     
    TIBASIC.EXIT........ >7B2E :     
    TIBASIC.UNCRUNCH.... >7B38 :     
    TIBASIC.UNCRUNCH.EXIT >7B4E :     
    TIBASIC1............ >7AF6 :     
    TIBASIC2............ >7AFE :     
    TIBASIC3............ >7B06 :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F5A :     
    TMGR................ >2EBE :     
    TMGR1............... >2EC2 :     
    TMGR10.............. >2F42 :     
    TMGR11.............. >2F50 :     
    TMGR12.............. >2F54 :     
    TMGR1A.............. >2ED0 :     
    TMGR2............... >2ED6 :     
    TMGR3............... >2EE6 :     
    TMGR4............... >2EF8 :     
    TMGR5............... >2F0E :     
    TMGR6............... >2F12 :     
    TMGR7............... >2F16 :     
    TMGR8............... >2F18 :     
    TMGR9............... >2F20 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BOTCOLOR......... >A21C :     
    TV.BUSYCOLOR........ >A220 :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.COLOR....... >A224 :     
    TV.CMDB.HCOLOR...... >A226 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >7EB2 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A240 :     
    TV.ERROR.ROWS....... >A232 :     
    TV.ERROR.VISIBLE.... >A230 :     
    TV.FG99.IMG.PTR..... >A238 :     
    TV.FJ.STACKPNT...... >A22E :     
    TV.FONT.PTR......... >A228 :     
    TV.FREE............. >A2E0 :     
    TV.INIT............. >33D8 :     
    TV.INIT.EXIT........ >3428 :     
    TV.LINELEN.ONESHOT.. >750C :     
    TV.LINELEN.TOGGLE... >74E2 :     
    TV.LINELEN.TOGGLE.EXIT >751A :     
    TV.LINETERM......... >A23C :     
    TV.MARKCOLOR........ >A21E :     
    TV.PAD.STRING....... >3504 :     
    TV.PAD.STRING.EXIT.. >3570 :     
    TV.PAD.STRING.LOOP.. >355A :     
    TV.PAD.STRING.PANIC. >3568 :     
    TV.PANE.FOCUS....... >A22A :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3432 :     
    TV.RESET............ >7B52 :     
    TV.RESET.EXIT....... >7B60 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A222 :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SET.FONT......... >7ADA :     
    TV.SET.FONT.VECTOR.. >7AE2 :     
    TV.SHOW.LINELEN..... >A23E :     
    TV.SP2.CONF......... >A234 :     
    TV.SP2.STACK........ >A236 :     
    TV.SPECMSG.PTR...... >A23A :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >392C :     
    TV.TABS.TABLE.RL.... >3938 :     
    TV.TASK.ONESHOT..... >A22C :     
    TV.TOPCOLOR......... >A21A :     
    TV.UINT16.MPY....... >34CE :     
    TV.UINT16.PACK...... >3440 :     
    TV.UINT16.PACK.DONE. >34BA :     
    TV.UINT16.PACK.ERROR >34B2 :     
    TV.UINT16.PACK.EXIT. >34BE :     
    TV.UINT16.PACK.LOOP. >3488 :     
    TV.UINT16.UNPACK.... >34D8 :     
    TV.UINT16.UNPACK.EXIT >34FE :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C9A :     
    TXT.AUTOINS.OFF..... >74D0 :     
    TXT.AUTOINS.ON...... >74C0 :     
    TXT.AUTOINSERT...... >3976 :     
    TXT.BLOCK.CLIP...... >39FE :     
    TXT.BLOCK.COPY...... >39C8 :     
    TXT.BLOCK.DEL....... >39B4 :     
    TXT.BLOCK.INSIDE.... >3D30 :     
    TXT.BLOCK.MOVE...... >39DA :     
    TXT.BLOCK.PRINT..... >3A18 :     
    TXT.BLOCK.SAVE...... >39EC :     
    TXT.BOTTOM.......... >3964 :     
    TXT.CLEARMEM........ >3A2C :     
    TXT.CMDB.PROMPT..... >3D5E :     
    TXT.COLON........... >3962 :     
    TXT.COLORSCHEME..... >3D60 :     
    TXT.DONE.APPEND..... >3A76 :     
    TXT.DONE.CLIPBOARD.. >3ACA :     
    TXT.DONE.CLIPDEV.... >3ADA :     
    TXT.DONE.COPY....... >3A98 :     
    TXT.DONE.DELETE..... >3AB8 :     
    TXT.DONE.INSERT..... >3A64 :     
    TXT.DONE.LOAD....... >3A54 :     
    TXT.DONE.PRINT...... >3AA8 :     
    TXT.DONE.SAVE....... >3A88 :     
    TXT.FASTMODE........ >3AE8 :     
    TXT.FILETYPE.DV80... >3B66 :     
    TXT.FILETYPE.NONE... >3CA8 :     
    TXT.INSERT.......... >3970 :     
    TXT.IO.NOFILE....... >3D0C :     
    TXT.IOERR.LOAD...... >3CC4 :     
    TXT.IOERR.PRINT..... >3CF0 :     
    TXT.IOERR.SAVE...... >3CDA :     
    TXT.KB.............. >3B26 :     
    TXT.KEYMARKER....... >3CA0 :     
    TXT.KEYS.BASIC1..... >3C6C :     
    TXT.KEYS.BLOCK...... >3C08 :     
    TXT.KEYS.BLOCKLOCK.. >3C44 :     
    TXT.KEYS.DEFAULT.... >3B74 :     
    TXT.KEYS.DEFAULTB... >3B86 :     
    TXT.KEYS.DEFAULTC... >3BA4 :     
    TXT.KEYS.DEFAULTD... >3BD0 :     
    TXT.LINELEN.OFF..... >7530 :     
    TXT.LINELEN.ON...... >7520 :     
    TXT.LINES........... >3B2A :     
    TXT.LOADING......... >3980 :     
    TXT.LOCKED.......... >7430 :     
    TXT.LOCKICON........ >397E :     
    TXT.M1.............. >3B6C :     
    TXT.M2.............. >3B70 :     
    TXT.MEMFULL.LOAD.... >3D24 :     
    TXT.MSG.TIBASIC..... >3CAE :     
    TXT.NEWFILE......... >3B30 :     
    TXT.NODISK.......... >3AF4 :     
    TXT.NOF18A.......... >6110 :     
    TXT.OVRWRITE........ >396A :     
    TXT.PICKER.ICON1.... >3D6E :     
    TXT.PICKER.ICON2.... >3D70 :     
    TXT.PRINTING........ >3998 :     
    TXT.READDIR......... >3A40 :     
    TXT.SAVING.......... >398C :     
    TXT.SEARCHING....... >39A6 :     
    TXT.SLASH........... >3960 :     
    TXT.STAR............ >397C :     
    TXT.TIB1............ >3B3C :     
    TXT.TIB2............ >3B4A :     
    TXT.TIB3............ >3B58 :     
    TXT.UNCRUNCHING..... >3B08 :     
    TXT.UNLOCKED........ >746C :     
    TXT.VERTLINE........ >3C9E :     
    TXT.WS1............. >3CA2 :     
    TXT.WS2............. >3CA4 :     
    TXT.WS4............. >3CA8 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.COLORS.LINE..... >7AC6 :     
    VDP.COLORS.LINE.VECTOR >7ACE :     
    VDP.CURSOR.TAT...... >7AD0 :     
    VDP.CURSOR.TAT.VECTOR >7AD8 :     
    VDP.DUMP.FONT....... >7ABC :     
    VDP.DUMP.FONT.VECTOR >7AC4 :     
    VDP.DUMP.PATTERNS... >7AB2 :     
    VDP.DUMP.PATTERNS.VECTOR >7ABA :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0780 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0780 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E80 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.LOAD.......... >2E14 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2FA6 :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >309C :     
    XROM.FARJUMP.PUSH_RETURN >30AC :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _EDKEY.ACTION.SCROLL >6442 :     
    _EDKEY.ACTION.SCROLL.EXIT >6446 :     
    _FILE.RECORD.FOP.... >2E28 :     
    _FILE.RECORD.FOP.EXIT >2E7A :     
    _FILE.RECORD.FOP.OPTIMIZED >2E5E :     
    _FILE.RECORD.FOP.PAB >2E62 :     
    _IDX.ENTRY.DELETE.REORG >361A :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3622 :     
    _IDX.ENTRY.INSERT.REORG >368E :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3694 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36BC :     
    _IDX.SAMS.MAPCOLUMN.OFF >3276 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >32A4 :     
    _IDX.SAMS.MAPCOLUMN.ON >3242 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >326C :     
    _IDX.SAMSPAGE.GET... >32B0 :     
    _IDX.SAMSPAGE.GET.EXIT >32F6 :     
    _TRAMPOLINE.BANK3... >783C :     
    _TRAMPOLINE.BANK3.RET >78EE :     
    _TRAMPOLINE.BANK4.RET >7A34 :     
    _TRAMPOLINE.BANK5.RET >7AA0 :     
    _TRAMPOLINE.BANK6.RET >7AE4 :     
